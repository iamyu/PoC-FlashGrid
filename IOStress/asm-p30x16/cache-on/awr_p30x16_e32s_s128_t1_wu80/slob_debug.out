
































































































































PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 12:24:08 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 12:24:08 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Wed Feb 12 2020 12:24:00 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Wed Feb 12 2020 12:24:08 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		1 p60sdb1

SQL> SQL> SQL> 
SQL> SQL>    DB Id    DB Name	 Inst Num Instance
SQL> ----------- ------------ -------- ------------
SQL>  3889879926 P60SDB		1 p60sdb1
SQL> 
SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: text

Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: html


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex

Using 3889879926 for database Id
Using	       1 for instance number
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex

Using 3889879926 for database Id
Using	       1 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb1      P60SDB		 48  12 Feb 2020 09:57	  1
				 49  12 Feb 2020 09:59	  1
				 50  12 Feb 2020 10:10	  1
				 51  12 Feb 2020 10:14	  1
				 52  12 Feb 2020 10:24	  1
				 53  12 Feb 2020 12:13	  1
				 54  12 Feb 2020 12:24	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 53

End   Snapshot Id specified: 54

Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb1      P60SDB		 48  12 Feb 2020 09:57	  1
				 49  12 Feb 2020 09:59	  1
				 50  12 Feb 2020 10:10	  1
				 51  12 Feb 2020 10:14	  1
				 52  12 Feb 2020 10:24	  1
				 53  12 Feb 2020 12:13	  1
				 54  12 Feb 2020 12:24	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 53

End   Snapshot Id specified: 54




Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_53_54.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_53_54.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.html

Using the report name awr.txt

<html lang="en"><head><title>AWR Report for DB: P60SDB, Inst: p60sdb1, Snaps: 53-54</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P60SDB</td><td align="right" class='awrnc'>3889879926</td><td class='awrnc'>p60sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p60sdb1</td><td align="right" class='awrnc'>1</td><td class='awrnc'>12-Feb-20 12:10</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc1.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>  16</td><td align="right" class='awrnc'>	1</td><td align="right" class='awrnc'>	251.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>53</td><td align="center" class='awrnc'>12-Feb-20 12:13:24</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>      2.4</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>54</td><td align="center" class='awrc'>12-Feb-20 12:24:00</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>	 .7</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		   10.60 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	       614.61 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>57.98</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_1_54</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>57.98</td><td align="right" class='awrnc'>97.17</td><td scope="row" class='awrnc'>ADDM:3889879926_1_54</td><td class='awrnc'>12-Feb-20 12:13</td><td class='awrnc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>57.98</td><td align="right" class='awrc'>76.01</td><td scope="row" class='awrc'>ADDM:3889879926_1_54</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>57.98</td><td align="right" class='awrnc'>44.97</td><td scope="row" class='awrnc'>ADDM:3889879926_1_54</td><td class='awrnc'>12-Feb-20 12:13</td><td class='awrnc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>57.98</td><td align="right" class='awrc'>22.37</td><td scope="row" class='awrc'>ADDM:3889879926_1_54</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	      58.0</td><td align="right" class='awrc'>		     2.3</td><td align="right" class='awrc'>	  0.30</td><td align="right" class='awrc'>	7.79</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		1.8</td><td align="right" class='awrnc'>	       0.1</td><td align="right" class='awrnc'>      0.01</td><td align="right" class='awrnc'>	    0.24</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      1.9</td><td align="right" class='awrc'>		    0.1</td><td align="right" class='awrc'>	 0.01</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	1,645,051.3</td><td align="right" class='awrnc'>	  65,396.6</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	     14,761.7</td><td align="right" class='awrc'>	      586.8</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		4,124.2</td><td align="right" class='awrnc'>		 164.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      14,346.2</td><td align="right" class='awrc'>	       570.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  2,138.0</td><td align="right" class='awrnc'>		    85.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		13,335.5</td><td align="right" class='awrc'>		 530.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    2,045.1</td><td align="right" class='awrnc'>	      81.3</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       112.1</td><td align="right" class='awrc'>	       4.5</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   16.7</td><td align="right" class='awrnc'>		   0.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		 3.6</td><td align="right" class='awrc'>	       0.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		 3.6</td><td align="right" class='awrnc'>		0.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       7.4</td><td align="right" class='awrc'>		     0.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		  11.1</td><td align="right" class='awrnc'>		  0.4</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      1.2</td><td align="right" class='awrc'>		    0.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.6</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.6</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>		 193.7</td><td align="right" class='awrc'>		 7.7</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>		25.2</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		100.00</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	    2.79</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 97.38</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 89.00</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      94.30</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.97</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     36.88</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.92</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>544,334</td><td align="right" class='awrc'>12.3K</td><td align="right" class='awrc'>22.52ms</td><td align="right" class='awrc'>33.2</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>219,204</td><td align="right" class='awrnc'>9094.9</td><td align="right" class='awrnc'>41.49ms</td><td align="right" class='awrnc'>24.7</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,659,991</td><td align="right" class='awrc'>6057.3</td><td align="right" class='awrc'>3.65ms</td><td align="right" class='awrc'>16.4</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>187,517</td><td align="right" class='awrnc'>4311.1</td><td align="right" class='awrnc'>22.99ms</td><td align="right" class='awrnc'>11.7</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>132,419</td><td align="right" class='awrc'>1762.9</td><td align="right" class='awrc'>13.31ms</td><td align="right" class='awrc'>4.8</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>61,479</td><td align="right" class='awrnc'>1530.5</td><td align="right" class='awrnc'>24.89ms</td><td align="right" class='awrnc'>4.2</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1130.6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.1</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>21,573</td><td align="right" class='awrnc'>510</td><td align="right" class='awrnc'>23.64ms</td><td align="right" class='awrnc'>1.4</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>96,988</td><td align="right" class='awrc'>429.3</td><td align="right" class='awrc'>4.43ms</td><td align="right" class='awrc'>1.2</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>58,097</td><td align="right" class='awrnc'>355.6</td><td align="right" class='awrnc'>6.12ms</td><td align="right" class='awrnc'>1.0</td><td class='awrnc'>Cluster</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,105,255</td><td align="right" class='awrc'>28,420</td><td align="right" class='awrc'>25.71ms</td><td align="right" class='awrc'>77.1</td><td align="right" class='awrc'>44.7</td></tr>
<tr><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>1,983,760</td><td align="right" class='awrnc'>8,259</td><td align="right" class='awrnc'>4.16ms</td><td align="right" class='awrnc'>22.4</td><td align="right" class='awrnc'>13.0</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,131</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.1</td><td align="right" class='awrc'>1.8</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>142,534</td><td align="right" class='awrnc'>842</td><td align="right" class='awrnc'>5.91ms</td><td align="right" class='awrnc'>2.3</td><td align="right" class='awrnc'>1.3</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>92,066</td><td align="right" class='awrc'>176</td><td align="right" class='awrc'>1.91ms</td><td align="right" class='awrc'>.5</td><td align="right" class='awrc'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>3,924</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>1.84ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>515</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>11.85ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12.08ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Network</td><td align="right" class='awrc'>857</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>38.16us</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>638.10us</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>   16</td><td align="right" class='awrc'>	 1</td><td align="right" class='awrc'>	14.10</td><td align="right" class='awrc'>   7.36</td><td align="right" class='awrc'>   4.5</td><td align="right" class='awrc'>	 8.4</td><td align="right" class='awrc'>  20.2</td><td align="right" class='awrc'>  83.7</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 12.4</td><td align="right" class='awrc'>      76.1</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      15,433.8</td><td align="right" class='awrc'>	    13,345.4</td><td align="right" class='awrc'>	   2,088.4</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   15,380.5</td><td align="right" class='awrnc'>	  13,335.5</td><td align="right" class='awrnc'> 	  2,045.1</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		   44.4</td><td align="right" class='awrnc'>		   2.5</td><td align="right" class='awrnc'>		 41.8</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     132.9</td><td align="right" class='awrc'>		   114.5</td><td align="right" class='awrc'>		  18.4</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  128.8</td><td align="right" class='awrnc'>		 112.1</td><td align="right" class='awrnc'>		 16.7</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		3.9</td><td align="right" class='awrnc'>	       2.3</td><td align="right" class='awrnc'> 	      1.6</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 16,484.2</td><td align="right" class='awrc'>	       14,346.2</td><td align="right" class='awrc'>	      2,138.0</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   16,480.6</td><td align="right" class='awrnc'>	  14,346.2</td><td align="right" class='awrnc'> 	  2,134.4</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    3.6</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		3.5</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'>   257,947.8</td><td align="right" class='awrc'>   257,947.8</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	 9,664.0</td><td align="right" class='awrnc'>	  9,664.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     1,548.1</td><td align="right" class='awrc'>     1,309.5</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    4.35</td><td align="right" class='awrc'>	 4.25</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	 7,872M</td><td align="right" class='awrnc'>	 7,872M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   1,096M</td><td align="right" class='awrc'>	  1,082M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	 20,612K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		76.37</td><td align="right" class='awrc'>	     82.73</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      56.78</td><td align="right" class='awrnc'>	    76.01</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      57.78</td><td align="right" class='awrc'> 	   67.30</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>35,875.63</td><td align="right" class='awrc'>97.29</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>1,130.56</td><td align="right" class='awrnc'>3.07</td><td align="right" class='awrnc'>48.71</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>11.98</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse elapsed time</td><td align="right" class='awrnc'>11.59</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>8.78</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL compilation elapsed time</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>repeated bind elapsed time</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>connection management call elapsed time</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB time</td><td align="right" class='awrc'>36,876.64</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background elapsed time</td><td align="right" class='awrnc'>1,859.69</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background cpu time</td><td align="right" class='awrc'>1,190.52</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>51.29</td></tr>
<tr><td scope="row" class='awrnc'>total CPU time</td><td align="right" class='awrnc'>2,321.08</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>128,180,985,856</td><td align="right" class='awrc'>128,932,712,448</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,614,295,040</td><td align="right" class='awrnc'>1,482,317,824</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>305,084</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>1,567,478</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>378,434</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SYS_TIME</td><td align="right" class='awrnc'>157,314</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>USER_TIME</td><td align="right" class='awrc'>84,080</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LOAD</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>7</td></tr>
<tr><td scope="row" class='awrc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrc'>270,477,914,112</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPUS</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_CORES</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_SOCKETS</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrc'>87,380</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>6,291,456</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrnc'>16,384</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 12:13:24</td><td align="right" class='awrc'>14.10</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>12-Feb 12:24:00</td><td align="right" class='awrnc'>7.36</td><td align="right" class='awrnc'>16.29</td><td align="right" class='awrnc'>4.49</td><td align="right" class='awrnc'>8.40</td><td align="right" class='awrnc'>83.71</td><td align="right" class='awrnc'>20.21</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  102.6%  of Total DB time	36,876.64 (s)</li>
<li class="awr">Total FG Wait Time:	       36,713.54 (s)  DB CPU time:	 1,130.56 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,102,883</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,389</td><td align="right" class='awrc'>25.74ms</td><td align="right" class='awrc'>76.98</td></tr>
<tr><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>1,889,483</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,250</td><td align="right" class='awrnc'>4.37ms</td><td align="right" class='awrnc'>22.37</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,131</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.07</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>5,198</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>13.95ms</td><td align="right" class='awrnc'>0.20</td></tr>
<tr><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>14.83ms</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.46ms</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>184</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.45ms</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>156.31us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>616.67us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>274</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.15us</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>544,334</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12,259</td><td align="right" class='awrc'>22.52ms</td><td align="right" class='awrc'>34.01</td><td align="right" class='awrc'>33.24</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>219,204</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>9,095</td><td align="right" class='awrnc'>41.49ms</td><td align="right" class='awrnc'>13.70</td><td align="right" class='awrnc'>24.66</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,659,991</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6,057</td><td align="right" class='awrc'>3.65ms</td><td align="right" class='awrc'>103.71</td><td align="right" class='awrc'>16.43</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>187,517</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4,311</td><td align="right" class='awrnc'>22.99ms</td><td align="right" class='awrnc'>11.72</td><td align="right" class='awrnc'>11.69</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>132,419</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,763</td><td align="right" class='awrc'>13.31ms</td><td align="right" class='awrc'>8.27</td><td align="right" class='awrc'>4.78</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>61,479</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,530</td><td align="right" class='awrnc'>24.89ms</td><td align="right" class='awrnc'>3.84</td><td align="right" class='awrnc'>4.15</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>21,573</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>510</td><td align="right" class='awrc'>23.64ms</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>1.38</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>96,988</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>429</td><td align="right" class='awrnc'>4.43ms</td><td align="right" class='awrnc'>6.06</td><td align="right" class='awrnc'>1.16</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>58,097</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>356</td><td align="right" class='awrc'>6.12ms</td><td align="right" class='awrc'>3.63</td><td align="right" class='awrc'>0.96</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>4,249</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>37.44ms</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.43</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>5,168</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>17.63ms</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>143.02ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>588.30ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>579</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>25.81ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>44.86ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>35.39ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>1107.03ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>571.43ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>219</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>22.11ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>3899.70ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>309</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>7.82ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1999.61ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>24.26ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1007.65ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>464.99ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7.73ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>13.89ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.44ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S wait on X</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>62.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>565</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>400.65us</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>480.29us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>260</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>324.85us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.82ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>264.42us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>1,815</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23.74us</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: XL - fault extent map</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40.70ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.49ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.47ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.95ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>156.31us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>20.40ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.17ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>686.43us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>393.41us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.40ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.62ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>248.61us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>150.05us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>126</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>70.95us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>536</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16.50us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.58ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.73ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.43ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.47ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>52.26us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>700.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>616.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>881.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>265</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.09us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>29.81us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>197</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.84us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>198.17us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1,047</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3,147</td><td align="right" class='awrc'>3005.74ms</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>265</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>2377.78ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deque wait</td><td align="right" class='awrc'>2,906</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>259</td><td align="right" class='awrc'>89.15ms</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>579</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>34.36ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>501</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.97ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>374</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.60ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: need buffer</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.55ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>95,249</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>518</td><td align="right" class='awrc'>5.44ms</td><td align="right" class='awrc'>5.95</td><td align="right" class='awrc'>27.85</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>15,757</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>315</td><td align="right" class='awrnc'>20.02ms</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>16.96</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>2,854</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>13.61ms</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>2.09</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>2,641</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>6.17ms</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.88</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>321</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>49.24ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.85</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>321</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>45.89ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.79</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>958</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>14.73ms</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.76</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>1,023</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8.01ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>291</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>23.90ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,931</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1.60ms</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.25</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>284</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>15.77ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>26.91ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.20</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>36.07ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>89,796</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>22.94us</td><td align="right" class='awrnc'>5.61</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2,966</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>662.70us</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1,113</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.61ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>29.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>21.00ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>3,374</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>406.45us</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>9.99ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>29.42ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.86ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18.51ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>47,697</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>24.68us</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>14.62ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>23.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>22.14ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>23.70ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>458</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.32ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>321</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.31ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>86.63ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>3,713</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>232.83us</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>40.08ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>162</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4.42ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>510.91ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>1,890</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>224.14us</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>471</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>883.94us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46.79ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>218</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.30ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>854</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>315.81us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>48.69ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>860</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>276.65us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.02ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>678</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>335.76us</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>26,900</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.25us</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>7,558</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23.88us</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>568</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>302.60us</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6,298</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26.11us</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>212</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>728.35us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>511</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>250.68us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.30ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.91ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.84ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.62ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.16ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>732</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>105.94us</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.62ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26.04ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>760.25us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1,472</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>29.39us</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.99ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>336.99us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.14ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>1,362</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25.34us</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path read</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.45ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>516</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>59.25us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.22ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.24ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>3,485</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.08us</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TQ - TM contention</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.60ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>371.82us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.58ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.07ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.67ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1,655</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.77us</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.59ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>483.13us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.45ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.70ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>226.70us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.95ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>338.71us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.74ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>216.11us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>533.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.53ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>189.83us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.04ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.87ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.65ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.35ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.32ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>584.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>330</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>41,313</td><td align="right" class='awrnc'>125.19 s</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>66,966</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>15,583</td><td align="right" class='awrc'>232.69ms</td><td align="right" class='awrc'>4.18</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>2,687</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10,137</td><td align="right" class='awrnc'>3772.76ms</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>7,953</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>8,184</td><td align="right" class='awrc'>1029.08ms</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>967</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,893</td><td align="right" class='awrnc'>1957.18ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>188,709</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,889</td><td align="right" class='awrc'>10.01ms</td><td align="right" class='awrc'>11.79</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>65,972</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,877</td><td align="right" class='awrnc'>28.46ms</td><td align="right" class='awrnc'>4.12</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>3,136,276</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,288</td><td align="right" class='awrc'>410.76us</td><td align="right" class='awrc'>195.94</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>420</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,260</td><td align="right" class='awrnc'>2999.92ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>4,197</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,260</td><td align="right" class='awrc'>300.20ms</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>22,473</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,260</td><td align="right" class='awrnc'>56.06ms</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>8,661</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>1,259</td><td align="right" class='awrc'>145.33ms</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>1,231</td><td align="right" class='awrnc'>94.66 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>1,180</td><td align="right" class='awrc'>43.70 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>13,735</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>926</td><td align="right" class='awrnc'>67.41ms</td><td align="right" class='awrnc'>0.86</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher timer</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>60.01 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>660</td><td align="right" class='awrnc'>30.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>631</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>631</td><td align="right" class='awrc'>1000.15ms</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM background timer</td><td align="right" class='awrnc'>2,193</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>287.61ms</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>631</td><td align="right" class='awrc'>3002.54ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>618</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>1019.88ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>360</td><td align="right" class='awrc'>88</td><td align="right" class='awrc'>630</td><td align="right" class='awrc'>1750.40ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>210</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>3000.02ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>630</td><td align="right" class='awrc'>2999.71ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>6,333</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>628</td><td align="right" class='awrnc'>99.22ms</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>628</td><td align="right" class='awrc'>314.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>616</td><td align="right" class='awrnc'>12.83 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>1,949</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>611</td><td align="right" class='awrc'>313.72ms</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>60.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>300.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>600.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>jobq slave wait</td><td align="right" class='awrc'>281</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>496.11ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: load balancer idle</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>25.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>15.74ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>1,142</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.06ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: need buffer</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14.60ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>326.99us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>682</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18.48us</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ Background Master: slave start</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ: RAC AQ Network</td><td align="right" class='awrnc'>6246</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>90.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>87.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>70.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>2955</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>26.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>11.2</td></tr>
<tr><td scope="row" class='awrc'>AWR Flush</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>7503</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>76.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>92.9</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>77.8</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>72.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>16.7</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>212</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>46.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>53.3</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>489</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.4</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>887</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>9.6</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>543</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.2</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group query</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group update</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>94.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>1875</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.0</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>522</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>41.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>1033</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>57.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.9</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>3641</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>10.9</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1108</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>29.2</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>60</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>2787</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.6</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>18.8</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>2593</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.2</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>1898</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>26.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>55.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>319</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>6.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>79.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>319</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>39.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>19.1</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>643</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>30.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>49.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>85.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>PX qref latch</td><td align="right" class='awrnc'>62</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>69.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>124</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>41.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>41.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>330</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>94.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>72</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>45.8</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>83</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>72.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>290</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>3840</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>46.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.1</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>26.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>94.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>132K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.4</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>93.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>71.4</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>96.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.3</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1.6M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.3</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>31.8</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>66</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.0</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>317</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>74.1</td></tr>
<tr><td scope="row" class='awrc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>284</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>85.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>85</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>53</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>90.6</td></tr>
<tr><td scope="row" class='awrc'>enq: TQ - TM contention</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TX - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - index contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>71.4</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>80.0</td></tr>
<tr><td scope="row" class='awrc'>enq: XL - fault extent map</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>1070</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>36.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>62.8</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>87</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.7</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>5213</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>77.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>188.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>219</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>217.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>565</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>80.8</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>467</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>48</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>61.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>544.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>4249</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>58.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.7</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>9641</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>618</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>19.6</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>57.1</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1687</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>67</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>68.7</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>322</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>91.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>90.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>49</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>34.7</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1462</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>89.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1420</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>20.0</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>222</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>14.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>53.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.7</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>311</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>34.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>819</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.5</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>33.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>78</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.3</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>28.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3471</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>180</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.8</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>177</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>81.9</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>48</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>15.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>468</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>41.7</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>51</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>51</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>163</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>transaction</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM background timer</td><td align="right" class='awrnc'>2185</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>78.4</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>357</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>8588</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.2</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>4163</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>13.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.2</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>187.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>208</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>618</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>46.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: need buffer</td><td align="right" class='awrnc'>59</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>55.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>2290</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>88.2</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>1142</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>39.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>26.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>576</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>87.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>501</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>12.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>56.5</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>187</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deque wait</td><td align="right" class='awrnc'>2850</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>38.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>37.7</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>324</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.8</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>678</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>48.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>46.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>6282</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>331</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>38.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>30.2</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>2687</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.6</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: load balancer idle</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>45.8</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>34</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>7889</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>89.9</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>3.1M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>20.4</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>65.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.6</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>22.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.0</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat monitor sleep</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>625</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>jobq slave wait</td><td align="right" class='awrnc'>281</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>208</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pman timer</td><td align="right" class='awrnc'>209</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>417</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>66K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>72.4</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>959</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1044</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6016</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>90.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>3.7</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>83.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>70.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>5.3</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2149</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>27.3</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>7212</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>76.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>3.9</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>92.9</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>30</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>72.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>95.5</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>189</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>65.2</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>94.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>548</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.8</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>369</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>41.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>29.3</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>612</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>57.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>40.8</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>2137</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>41.3</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>446</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>59.7</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.7</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>87.5</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>81</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>96.9</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>1788</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>55.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>5.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>91.8</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>160</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>39.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>49.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>199</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>69.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>47.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>85.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>3.4</td></tr>
<tr><td scope="row" class='awrnc'>PX qref latch</td><td align="right" class='awrnc'>59</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>69.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>4.8</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>61</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>41.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>50.8</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>329</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>94.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>56.9</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>82</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>72.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>1.2</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>869</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>77.4</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>26.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>94.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.8</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>5044</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>94.6</td></tr>
<tr><td scope="row" class='awrnc'>direct path read</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>77.3</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>49</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>141</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>77.2</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1675</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>96.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.7</td></tr>
<tr><td scope="row" class='awrnc'>ges ipc enter server mode</td><td align="right" class='awrnc'>321</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>91.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>81.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>67.3</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1395</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>89.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.6</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>264</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.4</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>70.0</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>66</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>53.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>15.4</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>89.7</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>233</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>71.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>58.3</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>95.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>62.8</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>78.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3452</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>96.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>8.3</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>145</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>69.0</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>162</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>326</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>88.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>22.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>47.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>113</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>46.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>438</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>85</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>90.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>97.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>132</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>93.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>266</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>74.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>241</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>89.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.3</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>320</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>70.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>51</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>15.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>2526</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>81.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>2280</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>10.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>46.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.2</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>249</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>43.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>9.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>164</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>69.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.7</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>66</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>54.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>22.2</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>262</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>52.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>9.7</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>271</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>112.9K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>43.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>12.9</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>64.7K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>28.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.1</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>93.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>46.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>46.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1.5M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>8.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>74.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>68.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>10.5</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>61</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>47.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>27.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>55.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>233</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>27.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>229</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>75</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>9.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TQ - TM contention</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TX - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - index contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>28.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>665</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>37.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>41.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>17.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>52.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>44.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>82</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>3963</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>22.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>174.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>5.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>215</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>57.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>205.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>30.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>535</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>19.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>38.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>362</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>19.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.8</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>56.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>27.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.5</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>506K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>3875</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>8.8</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>56.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>9369</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.7</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>121</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>42.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>42.9</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>31.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>40.0</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>65.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>102</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>80.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>86.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>92.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>106</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>65.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>135</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>83.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>89.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>71.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>154</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>12.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.2</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>140</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>18.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>39.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.8</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>13.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>45.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>23.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>13.8</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>195</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>58.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>47</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>48.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>16.7</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>51</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>51</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>88.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>160</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.8</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.4</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>157</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>85.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>138</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>90.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>77.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>90.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>17K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>87.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1983</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>426</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>6824</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>89.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>92.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>72.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: XL - fault extent map</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>82.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>83</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>4333</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>8910</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>2129</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>12.6K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>373</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>91.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>1390</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>255</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>57.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>60.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>2137</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>86.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>61</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>39</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td><td align="right" class='awrc'>35,654</td><td align="right" class='awrc'>1,079</td><td align="right" class='awrc'>8,344</td><td align="right" class='awrc'>8,828</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>1,006</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>717</td><td align="right" class='awrnc'>491</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>p60sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td>
<td align="right" class='awrc'>1761995</td><td align="right" class='awrc'>7689</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>144</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>186219</td><td align="right" class='awrnc'>425</td><td align="right" class='awrnc'>3820</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>512</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>44</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>129</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>GEN0 ksbxic channel</td>
<td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.36ms</td></tr>
<tr><td scope="row" class='awrnc'>kxfp control signal channel</td>
<td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.48ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>27,519.44</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>7,731.41</td></tr>
<tr><td scope="row" class='awrc'>P</td><td scope="row" class='awrc'>Parallel query slave</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>552.81</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>413.64</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>312.01</td></tr>
<tr><td scope="row" class='awrnc'>DBW0</td><td scope="row" class='awrnc'>db writer process 0</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>128.30</td></tr>
<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>128.05</td></tr>
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>125.50</td></tr>
<tr><td scope="row" class='awrc'>DBW2</td><td scope="row" class='awrc'>db writer process 2</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>124.47</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>50.15</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>40.23</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>21.11</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>19.95</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>16.13</td></tr>
<tr><td scope="row" class='awrc'>SCM</td><td scope="row" class='awrc'>DLM Statistics Collection and Management Slave</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>15.60</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>15.21</td></tr>
<tr><td scope="row" class='awrc'>MMON</td><td scope="row" class='awrc'>Manageability Monitor Process</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>9.86</td></tr>
<tr><td scope="row" class='awrnc'>CKPT</td><td scope="row" class='awrnc'>checkpoint</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>7.24</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>5.67</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>3.38</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>1,081.61</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>992.61</td></tr>
<tr><td scope="row" class='awrc'>P</td><td scope="row" class='awrc'>Parallel query slave</td><td align="right" class='awrc'>45.50</td></tr>
<tr><td scope="row" class='awrnc'>VKTM</td><td scope="row" class='awrnc'>Virtual Keeper of TiMe process</td><td align="right" class='awrnc'>32.02</td></tr>
<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td align="right" class='awrc'>24.20</td></tr>
<tr><td scope="row" class='awrnc'>DBW0</td><td scope="row" class='awrnc'>db writer process 0</td><td align="right" class='awrnc'>24.06</td></tr>
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td align="right" class='awrc'>23.98</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td align="right" class='awrnc'>23.77</td></tr>
<tr><td scope="row" class='awrc'>RS*</td><td scope="row" class='awrc'>GCS RM Slave</td><td align="right" class='awrc'>16.54</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td align="right" class='awrnc'>15.52</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td align="right" class='awrc'>10.23</td></tr>
<tr><td scope="row" class='awrnc'>CR*</td><td scope="row" class='awrnc'>GCS CR Slave</td><td align="right" class='awrnc'>9.32</td></tr>
<tr><td scope="row" class='awrc'>Q*</td><td scope="row" class='awrc'>QMON MS</td><td align="right" class='awrc'>4.90</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td align="right" class='awrnc'>4.25</td></tr>
<tr><td scope="row" class='awrc'>GCR</td><td scope="row" class='awrc'>GCR Slaves (LMHB)</td><td align="right" class='awrc'>4.10</td></tr>
<tr><td scope="row" class='awrnc'>SCM</td><td scope="row" class='awrnc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrnc'>3.53</td></tr>
<tr><td scope="row" class='awrc'>IPC0</td><td scope="row" class='awrc'>IPC Service 0</td><td align="right" class='awrc'>3.26</td></tr>
<tr><td scope="row" class='awrnc'>DIA0</td><td scope="row" class='awrnc'>diagnosibility process 0</td><td align="right" class='awrnc'>2.68</td></tr>
<tr><td scope="row" class='awrc'>O</td><td scope="row" class='awrc'>ASM Connection Pool</td><td align="right" class='awrc'>2.24</td></tr>
<tr><td scope="row" class='awrnc'>RMS0</td><td scope="row" class='awrnc'>rac management server</td><td align="right" class='awrnc'>2.17</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   93.6% of Total DB Time (s):		36,877</li>
<li class="awr">Captured PL/SQL account for   63.0% of Total DB Time (s):	   36,877</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>19,170.96</td><td align="right" class='awrc'>15,455</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>51.99</td><td align="right" class='awrc'>2.47</td><td align="right" class='awrc'>23.79</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>15,290.75</td><td align="right" class='awrnc'>86,747</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>41.46</td><td align="right" class='awrnc'>3.63</td><td align="right" class='awrnc'>19.49</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>542.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>542.17</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>2.79</td><td align="right" class='awrc'>19.52</td><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>541.42</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>541.42</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>3.12</td><td align="right" class='awrnc'>22.54</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>541.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>541.23</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>3.31</td><td align="right" class='awrc'>24.24</td><td scope="row" class='awrc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>541.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>541.15</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>22.34</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>541.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>541.00</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>20.92</td><td scope="row" class='awrc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.98</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>3.26</td><td align="right" class='awrnc'>22.15</td><td scope="row" class='awrnc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.93</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.93</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>3.01</td><td align="right" class='awrc'>22.19</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.92</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.92</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>21.49</td><td scope="row" class='awrnc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.76</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>2.80</td><td align="right" class='awrc'>19.47</td><td scope="row" class='awrc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.73</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.73</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>21.66</td><td scope="row" class='awrnc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.58</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.58</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>3.09</td><td align="right" class='awrc'>21.46</td><td scope="row" class='awrc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.52</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>20.20</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.50</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.50</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>2.89</td><td align="right" class='awrc'>19.03</td><td scope="row" class='awrc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.47</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.47</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>2.93</td><td align="right" class='awrnc'>20.47</td><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>20.96</td><td scope="row" class='awrc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.31</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.31</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>3.08</td><td align="right" class='awrnc'>21.95</td><td scope="row" class='awrnc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.30</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.30</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>26.50</td><td scope="row" class='awrc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.24</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.24</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>22.66</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.19</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.19</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>18.47</td><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.16</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.24</td><td align="right" class='awrnc'>23.77</td><td scope="row" class='awrnc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.12</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.03</td><td align="right" class='awrc'>22.63</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.07</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.07</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>21.16</td><td scope="row" class='awrnc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.07</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>20.78</td><td scope="row" class='awrc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.06</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.06</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>21.31</td><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.05</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.05</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>19.90</td><td scope="row" class='awrc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>540.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>540.01</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>2.90</td><td align="right" class='awrnc'>21.20</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>540.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>540.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.21</td><td align="right" class='awrc'>25.66</td><td scope="row" class='awrc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.98</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.04</td><td align="right" class='awrnc'>20.96</td><td scope="row" class='awrnc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>539.79</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.79</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>21.39</td><td scope="row" class='awrc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.75</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.25</td><td align="right" class='awrnc'>24.92</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>539.67</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.67</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.17</td><td align="right" class='awrc'>22.97</td><td scope="row" class='awrc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.65</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.65</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.14</td><td align="right" class='awrnc'>22.10</td><td scope="row" class='awrnc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>539.62</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.62</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>22.01</td><td scope="row" class='awrc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.56</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.56</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>24.03</td><td scope="row" class='awrnc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>539.54</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.54</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>22.63</td><td scope="row" class='awrc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.45</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.45</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.15</td><td align="right" class='awrnc'>22.30</td><td scope="row" class='awrnc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>539.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.41</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>27.25</td><td scope="row" class='awrc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.28</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>23.37</td><td scope="row" class='awrnc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>22.14</td><td scope="row" class='awrc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>539.28</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.17</td><td align="right" class='awrnc'>22.61</td><td scope="row" class='awrnc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>538.93</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>538.93</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>26.03</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>538.86</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>538.86</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>3.10</td><td align="right" class='awrnc'>21.96</td><td scope="row" class='awrnc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>538.67</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>538.67</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>21.76</td><td scope="row" class='awrc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   92.1% of Total CPU Time (s): 	  1,131</li>
<li class="awr">Captured PL/SQL account for   63.2% of Total CPU Time (s):	     1,131</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>555.51</td><td align="right" class='awrc'>86,747</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>49.14</td><td align="right" class='awrc'>15,290.75</td><td align="right" class='awrc'>3.63</td><td align="right" class='awrc'>19.49</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>472.89</td><td align="right" class='awrnc'>15,455</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>41.83</td><td align="right" class='awrnc'>19,170.96</td><td align="right" class='awrnc'>2.47</td><td align="right" class='awrnc'>23.79</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>17.93</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.93</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>541.23</td><td align="right" class='awrc'>3.31</td><td align="right" class='awrc'>24.24</td><td scope="row" class='awrc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.75</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>539.41</td><td align="right" class='awrnc'>3.29</td><td align="right" class='awrnc'>27.25</td><td scope="row" class='awrnc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.62</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.62</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>540.98</td><td align="right" class='awrc'>3.26</td><td align="right" class='awrc'>22.15</td><td scope="row" class='awrc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.54</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.54</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>539.75</td><td align="right" class='awrnc'>3.25</td><td align="right" class='awrnc'>24.92</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.49</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>540.16</td><td align="right" class='awrc'>3.24</td><td align="right" class='awrc'>23.77</td><td scope="row" class='awrc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.38</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>540.24</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>22.66</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.36</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.36</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>539.56</td><td align="right" class='awrc'>3.22</td><td align="right" class='awrc'>24.03</td><td scope="row" class='awrc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.35</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.35</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>540.00</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>25.66</td><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.29</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.29</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>540.30</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>26.50</td><td scope="row" class='awrc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.26</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.26</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>539.79</td><td align="right" class='awrnc'>3.20</td><td align="right" class='awrnc'>21.39</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.15</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.14</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.14</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>539.62</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>22.01</td><td scope="row" class='awrnc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.14</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.14</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>538.93</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>26.03</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.09</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>541.15</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>22.34</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>17.09</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17.09</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.17</td><td align="right" class='awrc'>22.61</td><td scope="row" class='awrc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>17.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.09</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>539.67</td><td align="right" class='awrnc'>3.17</td><td align="right" class='awrnc'>22.97</td><td scope="row" class='awrnc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.99</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.99</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>539.45</td><td align="right" class='awrc'>3.15</td><td align="right" class='awrc'>22.30</td><td scope="row" class='awrc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.96</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>539.65</td><td align="right" class='awrnc'>3.14</td><td align="right" class='awrnc'>22.10</td><td scope="row" class='awrnc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.91</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.91</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>539.54</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>22.63</td><td scope="row" class='awrc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.91</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.91</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>541.42</td><td align="right" class='awrnc'>3.12</td><td align="right" class='awrnc'>22.54</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.71</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.71</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>538.86</td><td align="right" class='awrc'>3.10</td><td align="right" class='awrc'>21.96</td><td scope="row" class='awrc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.70</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.70</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>540.58</td><td align="right" class='awrnc'>3.09</td><td align="right" class='awrnc'>21.46</td><td scope="row" class='awrnc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.62</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.62</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>3.08</td><td align="right" class='awrc'>21.95</td><td scope="row" class='awrc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.57</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.57</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>540.92</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>21.49</td><td scope="row" class='awrnc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.53</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.53</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>540.06</td><td align="right" class='awrc'>3.06</td><td align="right" class='awrc'>21.31</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.45</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.45</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>538.67</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>21.76</td><td scope="row" class='awrnc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.44</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.44</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>22.14</td><td scope="row" class='awrc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.43</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>539.98</td><td align="right" class='awrnc'>3.04</td><td align="right" class='awrnc'>20.96</td><td scope="row" class='awrnc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.36</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.36</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>540.12</td><td align="right" class='awrc'>3.03</td><td align="right" class='awrc'>22.63</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.30</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>540.93</td><td align="right" class='awrnc'>3.01</td><td align="right" class='awrnc'>22.19</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.23</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>20.96</td><td scope="row" class='awrc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.19</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.19</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>540.07</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>20.78</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.12</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>540.07</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>21.16</td><td scope="row" class='awrc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>16.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.09</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>540.73</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>21.66</td><td scope="row" class='awrnc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>16.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.03</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>540.05</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>19.90</td><td scope="row" class='awrc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>15.83</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.83</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>540.47</td><td align="right" class='awrnc'>2.93</td><td align="right" class='awrnc'>20.47</td><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>15.68</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>15.68</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>540.01</td><td align="right" class='awrc'>2.90</td><td align="right" class='awrc'>21.20</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>15.60</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.60</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>540.50</td><td align="right" class='awrnc'>2.89</td><td align="right" class='awrnc'>19.03</td><td scope="row" class='awrnc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>15.48</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>15.48</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>540.52</td><td align="right" class='awrc'>2.86</td><td align="right" class='awrc'>20.20</td><td scope="row" class='awrc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>15.39</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.39</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>541.00</td><td align="right" class='awrnc'>2.85</td><td align="right" class='awrnc'>20.92</td><td scope="row" class='awrnc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>15.30</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>15.30</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>540.19</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>18.47</td><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>15.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.13</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>542.17</td><td align="right" class='awrnc'>2.79</td><td align="right" class='awrnc'>19.52</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>15.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>15.12</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>540.76</td><td align="right" class='awrc'>2.80</td><td align="right" class='awrc'>19.47</td><td scope="row" class='awrc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   91.4% of Total User I/O Wait Time (s):	    8,259</li>
<li class="awr">Captured PL/SQL account for   62.3% of Total User I/O Wait Time (s):	       8,259</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>4,560.66</td><td align="right" class='awrc'>15,455</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>55.22</td><td align="right" class='awrc'>19,170.96</td><td align="right" class='awrc'>2.47</td><td align="right" class='awrc'>23.79</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>2,980.11</td><td align="right" class='awrnc'>86,747</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>36.08</td><td align="right" class='awrnc'>15,290.75</td><td align="right" class='awrnc'>3.63</td><td align="right" class='awrnc'>19.49</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>147.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>147.01</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>539.41</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>27.25</td><td scope="row" class='awrc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>143.20</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>143.20</td><td align="right" class='awrnc'>1.73</td><td align="right" class='awrnc'>540.30</td><td align="right" class='awrnc'>3.20</td><td align="right" class='awrnc'>26.50</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>140.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>140.27</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>538.93</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>26.03</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>138.57</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>138.57</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>540.00</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>25.66</td><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>134.52</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134.52</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>539.75</td><td align="right" class='awrc'>3.25</td><td align="right" class='awrc'>24.92</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>131.21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>131.21</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>541.23</td><td align="right" class='awrnc'>3.31</td><td align="right" class='awrnc'>24.24</td><td scope="row" class='awrnc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>129.68</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>129.68</td><td align="right" class='awrc'>1.57</td><td align="right" class='awrc'>539.56</td><td align="right" class='awrc'>3.22</td><td align="right" class='awrc'>24.03</td><td scope="row" class='awrc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>128.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>128.41</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>540.16</td><td align="right" class='awrnc'>3.24</td><td align="right" class='awrnc'>23.77</td><td scope="row" class='awrnc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>126.04</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>126.04</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>123.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>123.96</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>539.67</td><td align="right" class='awrnc'>3.17</td><td align="right" class='awrnc'>22.97</td><td scope="row" class='awrnc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>122.44</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>122.44</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>540.24</td><td align="right" class='awrc'>3.22</td><td align="right" class='awrc'>22.66</td><td scope="row" class='awrc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>122.25</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>540.12</td><td align="right" class='awrnc'>3.03</td><td align="right" class='awrnc'>22.63</td><td scope="row" class='awrnc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>122.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>122.07</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>539.54</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>22.63</td><td scope="row" class='awrc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122.05</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>122.05</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>541.42</td><td align="right" class='awrnc'>3.12</td><td align="right" class='awrnc'>22.54</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>121.94</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>121.94</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.17</td><td align="right" class='awrc'>22.61</td><td scope="row" class='awrc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120.89</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120.89</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>541.15</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>22.34</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>120.32</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>120.32</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>539.45</td><td align="right" class='awrc'>3.15</td><td align="right" class='awrc'>22.30</td><td scope="row" class='awrc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120.01</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>540.93</td><td align="right" class='awrnc'>3.01</td><td align="right" class='awrnc'>22.19</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>119.82</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>119.82</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>540.98</td><td align="right" class='awrc'>3.26</td><td align="right" class='awrc'>22.15</td><td scope="row" class='awrc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>119.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>119.41</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>539.28</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>22.14</td><td scope="row" class='awrnc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>119.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>119.25</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>539.65</td><td align="right" class='awrc'>3.14</td><td align="right" class='awrc'>22.10</td><td scope="row" class='awrc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>118.78</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>118.78</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>539.62</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>22.01</td><td scope="row" class='awrnc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>118.57</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>118.57</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>3.08</td><td align="right" class='awrc'>21.95</td><td scope="row" class='awrc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>118.33</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>118.33</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>538.86</td><td align="right" class='awrnc'>3.10</td><td align="right" class='awrnc'>21.96</td><td scope="row" class='awrnc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>117.19</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>117.19</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>538.67</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>21.76</td><td scope="row" class='awrc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>117.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>117.13</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>540.73</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>21.66</td><td scope="row" class='awrnc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>116.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>116.26</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>540.92</td><td align="right" class='awrc'>3.06</td><td align="right" class='awrc'>21.49</td><td scope="row" class='awrc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>115.99</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>115.99</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>540.58</td><td align="right" class='awrnc'>3.09</td><td align="right" class='awrnc'>21.46</td><td scope="row" class='awrnc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>115.44</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>115.44</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>539.79</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>21.39</td><td scope="row" class='awrc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>115.10</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>115.10</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>540.06</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>21.31</td><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>114.49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>114.49</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>540.01</td><td align="right" class='awrc'>2.90</td><td align="right" class='awrc'>21.20</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>114.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>114.30</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>540.07</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>21.16</td><td scope="row" class='awrnc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>113.22</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>113.22</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>20.96</td><td scope="row" class='awrc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>113.20</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>113.20</td><td align="right" class='awrnc'>1.37</td><td align="right" class='awrnc'>541.00</td><td align="right" class='awrnc'>2.85</td><td align="right" class='awrnc'>20.92</td><td scope="row" class='awrnc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>113.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>113.16</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>539.98</td><td align="right" class='awrc'>3.04</td><td align="right" class='awrc'>20.96</td><td scope="row" class='awrc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>112.20</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>112.20</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>540.07</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>20.78</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>110.66</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>110.66</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>540.47</td><td align="right" class='awrc'>2.93</td><td align="right" class='awrc'>20.47</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>109.18</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>109.18</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>540.52</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>20.20</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>107.48</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>107.48</td><td align="right" class='awrc'>1.30</td><td align="right" class='awrc'>540.05</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>19.90</td><td scope="row" class='awrc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>105.86</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>105.86</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>542.17</td><td align="right" class='awrnc'>2.79</td><td align="right" class='awrnc'>19.52</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>105.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>105.26</td><td align="right" class='awrc'>1.27</td><td align="right" class='awrc'>540.76</td><td align="right" class='awrc'>2.80</td><td align="right" class='awrc'>19.47</td><td scope="row" class='awrc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>102.86</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>102.86</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>540.50</td><td align="right" class='awrnc'>2.89</td><td align="right" class='awrnc'>19.03</td><td scope="row" class='awrnc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>99.78</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>99.78</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>540.19</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>18.47</td><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:	 9,392,804</li>
<li class="awr">Captured SQL account for   95.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>7,130,361</td><td align="right" class='awrc'>86,747</td><td align="right" class='awrc'>82.20</td><td align="right" class='awrc'>75.91</td><td align="right" class='awrc'>15,290.75</td><td class='awrc'>3.6</td><td class='awrc'>19.5</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,390,819</td><td align="right" class='awrnc'>15,455</td><td align="right" class='awrnc'>89.99</td><td align="right" class='awrnc'>14.81</td><td align="right" class='awrnc'>19,170.96</td><td class='awrnc'>2.5</td><td class='awrnc'>23.8</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>358,144</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>5,596.00</td><td align="right" class='awrc'>3.81</td><td align="right" class='awrc'>0.52</td><td class='awrc'>93.5</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#0gw0hh7k29jxb">0gw0hh7k29jxb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj.obj#, obj.file#, ob...</td></tr>
<tr><td align="right" class='awrnc'>160,497</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>160,497.00</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>539.41</td><td class='awrnc'>3.3</td><td class='awrnc'>27.3</td><td scope="row" class='awrnc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>156,891</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>156,891.00</td><td align="right" class='awrc'>1.67</td><td align="right" class='awrc'>540.00</td><td class='awrc'>3.2</td><td class='awrc'>25.7</td><td scope="row" class='awrc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>155,508</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>155,508.00</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>539.75</td><td class='awrnc'>3.3</td><td class='awrnc'>24.9</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>152,962</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>152,962.00</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>540.30</td><td class='awrc'>3.2</td><td class='awrc'>26.5</td><td scope="row" class='awrc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>152,049</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>152,049.00</td><td align="right" class='awrnc'>1.62</td><td align="right" class='awrnc'>538.93</td><td class='awrnc'>3.2</td><td class='awrnc'>26</td><td scope="row" class='awrnc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>151,034</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>151,034.00</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>539.56</td><td class='awrc'>3.2</td><td class='awrc'>24</td><td scope="row" class='awrc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>149,735</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>149,735.00</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>540.16</td><td class='awrnc'>3.2</td><td class='awrnc'>23.8</td><td scope="row" class='awrnc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>146,941</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>146,941.00</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>541.23</td><td class='awrc'>3.3</td><td class='awrc'>24.2</td><td scope="row" class='awrc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>145,566</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>145,566.00</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>539.28</td><td class='awrnc'>3.2</td><td class='awrnc'>23.4</td><td scope="row" class='awrnc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>142,595</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>142,595.00</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>539.28</td><td class='awrc'>3.2</td><td class='awrc'>22.6</td><td scope="row" class='awrc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>141,199</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>141,199.00</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>540.24</td><td class='awrnc'>3.2</td><td class='awrnc'>22.7</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>140,570</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>140,570.00</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>540.12</td><td class='awrc'>3</td><td class='awrc'>22.6</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>140,404</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>140,404.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>539.62</td><td class='awrnc'>3.2</td><td class='awrnc'>22</td><td scope="row" class='awrnc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>139,363</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>139,363.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>539.79</td><td class='awrc'>3.2</td><td class='awrc'>21.4</td><td scope="row" class='awrc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>138,620</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>138,620.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>540.98</td><td class='awrnc'>3.3</td><td class='awrnc'>22.1</td><td scope="row" class='awrnc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>137,989</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>137,989.00</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>540.93</td><td class='awrc'>3</td><td class='awrc'>22.2</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>137,590</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>137,590.00</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>541.15</td><td class='awrnc'>3.2</td><td class='awrnc'>22.3</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>137,376</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>137,376.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>541.42</td><td class='awrc'>3.1</td><td class='awrc'>22.5</td><td scope="row" class='awrc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>136,986</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>136,986.00</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>539.67</td><td class='awrnc'>3.2</td><td class='awrnc'>23</td><td scope="row" class='awrnc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>136,955</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>136,955.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>540.31</td><td class='awrc'>3.1</td><td class='awrc'>21.9</td><td scope="row" class='awrc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>136,449</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>136,449.00</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>539.65</td><td class='awrnc'>3.1</td><td class='awrnc'>22.1</td><td scope="row" class='awrnc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,435</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,435.00</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>538.67</td><td class='awrc'>3.1</td><td class='awrc'>21.8</td><td scope="row" class='awrc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>135,367</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>135,367.00</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>539.45</td><td class='awrnc'>3.1</td><td class='awrnc'>22.3</td><td scope="row" class='awrnc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,280</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,280.00</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>539.54</td><td class='awrc'>3.1</td><td class='awrc'>22.6</td><td scope="row" class='awrc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,482</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,482.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>539.28</td><td class='awrnc'>3</td><td class='awrnc'>22.1</td><td scope="row" class='awrnc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>134,048</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134,048.00</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>538.86</td><td class='awrc'>3.1</td><td class='awrc'>22</td><td scope="row" class='awrc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,774</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,774.00</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>540.06</td><td class='awrnc'>3.1</td><td class='awrnc'>21.3</td><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,436</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,436.00</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>540.92</td><td class='awrc'>3.1</td><td class='awrc'>21.5</td><td scope="row" class='awrc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,324</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,324.00</td><td align="right" class='awrnc'>1.41</td><td align="right" class='awrnc'>540.58</td><td class='awrnc'>3.1</td><td class='awrnc'>21.5</td><td scope="row" class='awrnc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,085</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,085.00</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>540.31</td><td class='awrc'>3</td><td class='awrc'>21</td><td scope="row" class='awrc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>131,098</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>131,098.00</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>540.73</td><td class='awrnc'>3</td><td class='awrnc'>21.7</td><td scope="row" class='awrnc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,229</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,229.00</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>539.98</td><td class='awrc'>3</td><td class='awrc'>21</td><td scope="row" class='awrc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,025</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,025.00</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>540.07</td><td class='awrnc'>3</td><td class='awrnc'>20.8</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,810</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,810.00</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>540.01</td><td class='awrc'>2.9</td><td class='awrc'>21.2</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,299</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,299.00</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>540.05</td><td class='awrnc'>3</td><td class='awrnc'>19.9</td><td scope="row" class='awrnc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127,181</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>127,181.00</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>540.07</td><td class='awrc'>3</td><td class='awrc'>21.2</td><td scope="row" class='awrc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>126,116</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>126,116.00</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>540.47</td><td class='awrnc'>2.9</td><td class='awrnc'>20.5</td><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>125,541</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>125,541.00</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>540.52</td><td class='awrc'>2.9</td><td class='awrc'>20.2</td><td scope="row" class='awrc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122,914</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>122,914.00</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>540.50</td><td class='awrnc'>2.9</td><td class='awrnc'>19</td><td scope="row" class='awrnc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>121,555</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>121,555.00</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>542.17</td><td class='awrc'>2.8</td><td class='awrc'>19.5</td><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120,001</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120,001.00</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>541.00</td><td class='awrnc'>2.8</td><td class='awrnc'>20.9</td><td scope="row" class='awrnc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>118,604</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>118,604.00</td><td align="right" class='awrc'>1.26</td><td align="right" class='awrc'>540.76</td><td class='awrc'>2.8</td><td class='awrc'>19.5</td><td scope="row" class='awrc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>113,914</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>113,914.00</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>540.19</td><td class='awrnc'>2.8</td><td class='awrnc'>18.5</td><td scope="row" class='awrnc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:	9,128,427</li>
<li class="awr">Captured SQL account for   88.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>6,852,575</td><td align="right" class='awrc'>86,747</td><td align="right" class='awrc'>78.99</td><td align="right" class='awrc'>75.07</td><td align="right" class='awrc'>15,290.75</td><td align="right" class='awrc'>3.63</td><td align="right" class='awrc'>19.49</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,219,319</td><td align="right" class='awrnc'>15,455</td><td align="right" class='awrnc'>78.89</td><td align="right" class='awrnc'>13.36</td><td align="right" class='awrnc'>19,170.96</td><td align="right" class='awrnc'>2.47</td><td align="right" class='awrnc'>23.79</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>151,289</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>151,289.00</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>539.41</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>27.25</td><td scope="row" class='awrc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>146,509</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>146,509.00</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>539.75</td><td align="right" class='awrnc'>3.25</td><td align="right" class='awrnc'>24.92</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>144,882</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>144,882.00</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>540.30</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>26.50</td><td scope="row" class='awrc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>144,428</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>144,428.00</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>540.00</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>25.66</td><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>143,322</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>143,322.00</td><td align="right" class='awrc'>1.57</td><td align="right" class='awrc'>538.93</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>26.03</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>143,106</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>143,106.00</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>539.56</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>24.03</td><td scope="row" class='awrnc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>140,601</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>140,601.00</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>540.16</td><td align="right" class='awrc'>3.24</td><td align="right" class='awrc'>23.77</td><td scope="row" class='awrc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>139,264</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>139,264.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>541.23</td><td align="right" class='awrnc'>3.31</td><td align="right" class='awrnc'>24.24</td><td scope="row" class='awrnc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>137,469</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>137,469.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,670</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,670.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>539.28</td><td align="right" class='awrnc'>3.17</td><td align="right" class='awrnc'>22.61</td><td scope="row" class='awrnc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,813</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,813.00</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>540.24</td><td align="right" class='awrc'>3.22</td><td align="right" class='awrc'>22.66</td><td scope="row" class='awrc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,997</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,997.00</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>540.12</td><td align="right" class='awrnc'>3.03</td><td align="right" class='awrnc'>22.63</td><td scope="row" class='awrnc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,770</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,770.00</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>539.62</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>22.01</td><td scope="row" class='awrc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>131,114</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>131,114.00</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>539.79</td><td align="right" class='awrnc'>3.20</td><td align="right" class='awrnc'>21.39</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,619</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,619.00</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>540.93</td><td align="right" class='awrc'>3.01</td><td align="right" class='awrc'>22.19</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,607</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,607.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>541.15</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>22.34</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,476</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,476.00</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>540.98</td><td align="right" class='awrc'>3.26</td><td align="right" class='awrc'>22.15</td><td scope="row" class='awrc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,170</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,170.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>541.42</td><td align="right" class='awrnc'>3.12</td><td align="right" class='awrnc'>22.54</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,095</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,095.00</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>3.08</td><td align="right" class='awrc'>21.95</td><td scope="row" class='awrc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>129,497</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>129,497.00</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>539.67</td><td align="right" class='awrnc'>3.17</td><td align="right" class='awrnc'>22.97</td><td scope="row" class='awrnc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,353</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,353.00</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>539.65</td><td align="right" class='awrc'>3.14</td><td align="right" class='awrc'>22.10</td><td scope="row" class='awrc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>128,231</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>128,231.00</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>538.67</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>21.76</td><td scope="row" class='awrnc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,028</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,028.00</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>539.45</td><td align="right" class='awrc'>3.15</td><td align="right" class='awrc'>22.30</td><td scope="row" class='awrc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,726</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,726.00</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>539.54</td><td align="right" class='awrnc'>3.13</td><td align="right" class='awrnc'>22.63</td><td scope="row" class='awrnc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127,257</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>127,257.00</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>22.14</td><td scope="row" class='awrc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,234</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,234.00</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>538.86</td><td align="right" class='awrnc'>3.10</td><td align="right" class='awrnc'>21.96</td><td scope="row" class='awrnc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>126,447</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>126,447.00</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>540.06</td><td align="right" class='awrc'>3.06</td><td align="right" class='awrc'>21.31</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>126,364</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>126,364.00</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>540.92</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>21.49</td><td scope="row" class='awrnc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>124,782</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>124,782.00</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>540.58</td><td align="right" class='awrc'>3.09</td><td align="right" class='awrc'>21.46</td><td scope="row" class='awrc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>124,401</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>124,401.00</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>540.31</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>20.96</td><td scope="row" class='awrnc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>123,991</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>123,991.00</td><td align="right" class='awrc'>1.36</td><td align="right" class='awrc'>540.73</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>21.66</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>123,490</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>123,490.00</td><td align="right" class='awrnc'>1.35</td><td align="right" class='awrnc'>539.98</td><td align="right" class='awrnc'>3.04</td><td align="right" class='awrnc'>20.96</td><td scope="row" class='awrnc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>122,905</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>122,905.00</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>540.07</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>20.78</td><td scope="row" class='awrc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122,388</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>122,388.00</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>540.01</td><td align="right" class='awrnc'>2.90</td><td align="right" class='awrnc'>21.20</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>120,810</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>120,810.00</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>540.07</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>21.16</td><td scope="row" class='awrc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120,745</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120,745.00</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>540.05</td><td align="right" class='awrnc'>2.97</td><td align="right" class='awrnc'>19.90</td><td scope="row" class='awrnc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>119,290</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>119,290.00</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>540.47</td><td align="right" class='awrc'>2.93</td><td align="right" class='awrc'>20.47</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>119,196</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>119,196.00</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>540.52</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>20.20</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>116,459</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>116,459.00</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>540.50</td><td align="right" class='awrc'>2.89</td><td align="right" class='awrc'>19.03</td><td scope="row" class='awrc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>114,552</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>114,552.00</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>542.17</td><td align="right" class='awrnc'>2.79</td><td align="right" class='awrnc'>19.52</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>113,700</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>113,700.00</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>541.00</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>20.92</td><td scope="row" class='awrc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>112,446</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>112,446.00</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>540.76</td><td align="right" class='awrnc'>2.80</td><td align="right" class='awrnc'>19.47</td><td scope="row" class='awrnc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>108,209</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108,209.00</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>540.19</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>18.47</td><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	    8,485,282</li>
<li class="awr">Captured SQL account for    1.4% of Total</li>
<li class="awr">Total UnOptimized Read Requests:       8,485,282</li>
<li class="awr">Captured SQL account for    1.4% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>151,289</td><td align="right" class='awrc'>151,289</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>151,289.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.78</td><td scope="row" class='awrc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>146,509</td><td align="right" class='awrnc'>146,509</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>146,509.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.73</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>144,882</td><td align="right" class='awrc'>144,882</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>144,882.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.71</td><td scope="row" class='awrc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>144,428</td><td align="right" class='awrnc'>144,428</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>144,428.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.70</td><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>143,322</td><td align="right" class='awrc'>143,322</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>143,322.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.69</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>143,106</td><td align="right" class='awrnc'>143,106</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>143,106.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.69</td><td scope="row" class='awrnc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>140,601</td><td align="right" class='awrc'>140,601</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>140,601.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.66</td><td scope="row" class='awrc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>139,264</td><td align="right" class='awrnc'>139,264</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>139,264.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.64</td><td scope="row" class='awrnc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>137,469</td><td align="right" class='awrc'>137,469</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>137,469.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.62</td><td scope="row" class='awrc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,670</td><td align="right" class='awrnc'>134,670</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,670.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.59</td><td scope="row" class='awrnc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,813</td><td align="right" class='awrc'>133,813</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,813.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.58</td><td scope="row" class='awrc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,997</td><td align="right" class='awrnc'>132,997</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,997.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.57</td><td scope="row" class='awrnc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,770</td><td align="right" class='awrc'>132,770</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,770.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.56</td><td scope="row" class='awrc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>131,114</td><td align="right" class='awrnc'>131,114</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>131,114.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.55</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,619</td><td align="right" class='awrc'>130,619</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,619.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.54</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,607</td><td align="right" class='awrnc'>130,607</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,607.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.54</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,476</td><td align="right" class='awrc'>130,476</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,476.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.54</td><td scope="row" class='awrc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,170</td><td align="right" class='awrnc'>130,170</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,170.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.53</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,095</td><td align="right" class='awrc'>130,095</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,095.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.53</td><td scope="row" class='awrc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>129,497</td><td align="right" class='awrnc'>129,497</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>129,497.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.53</td><td scope="row" class='awrnc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,353</td><td align="right" class='awrc'>128,353</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,353.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.51</td><td scope="row" class='awrc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>128,231</td><td align="right" class='awrnc'>128,231</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>128,231.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.51</td><td scope="row" class='awrnc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,028</td><td align="right" class='awrc'>128,028</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,028.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.51</td><td scope="row" class='awrc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,726</td><td align="right" class='awrnc'>127,726</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,726.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.51</td><td scope="row" class='awrnc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127,257</td><td align="right" class='awrc'>127,257</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>127,257.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.50</td><td scope="row" class='awrc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,234</td><td align="right" class='awrnc'>127,234</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,234.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.50</td><td scope="row" class='awrnc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>126,447</td><td align="right" class='awrc'>126,447</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>126,447.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.49</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>126,364</td><td align="right" class='awrnc'>126,364</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>126,364.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.49</td><td scope="row" class='awrnc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>124,782</td><td align="right" class='awrc'>124,782</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>124,782.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.47</td><td scope="row" class='awrc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>124,401</td><td align="right" class='awrnc'>124,401</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>124,401.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.47</td><td scope="row" class='awrnc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>123,991</td><td align="right" class='awrc'>123,991</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>123,991.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.46</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>123,490</td><td align="right" class='awrnc'>123,490</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>123,490.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.46</td><td scope="row" class='awrnc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>122,905</td><td align="right" class='awrc'>122,905</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>122,905.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.45</td><td scope="row" class='awrc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122,388</td><td align="right" class='awrnc'>122,388</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>122,388.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.44</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>120,810</td><td align="right" class='awrc'>120,810</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>120,810.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.42</td><td scope="row" class='awrc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120,745</td><td align="right" class='awrnc'>120,745</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120,745.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.42</td><td scope="row" class='awrnc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>119,290</td><td align="right" class='awrc'>119,290</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>119,290.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.41</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>119,196</td><td align="right" class='awrnc'>119,196</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>119,196.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.40</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>116,459</td><td align="right" class='awrc'>116,459</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>116,459.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.37</td><td scope="row" class='awrc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>114,552</td><td align="right" class='awrnc'>114,552</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>114,552.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.35</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>113,700</td><td align="right" class='awrc'>113,700</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>113,700.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.34</td><td scope="row" class='awrc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>112,446</td><td align="right" class='awrnc'>112,446</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>112,446.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.33</td><td scope="row" class='awrnc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>108,209</td><td align="right" class='awrc'>108,209</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108,209.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.28</td><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>99,790</td><td align="right" class='awrnc'>99,790</td><td align="right" class='awrnc'>86,747</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.18</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:	  123,265</li>
<li class="awr">Captured SQL account for   88.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>86,747</td><td align="right" class='awrc'>86,788</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>15,290.75</td><td class='awrc'>3.6</td><td class='awrc'>19.5</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>15,455</td><td align="right" class='awrnc'>1,220,945</td><td align="right" class='awrnc'>79.00</td><td align="right" class='awrnc'>19,170.96</td><td class='awrnc'>2.5</td><td class='awrnc'>23.8</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>1,919</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.07</td><td class='awrc'>99.5</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrnc'>1,565</td><td align="right" class='awrnc'>1,496</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>0.13</td><td class='awrnc'>93.6</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrc'>912</td><td align="right" class='awrc'>912</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.17</td><td class='awrc'>78.2</td><td class='awrc'>7.9</td><td scope="row" class='awrc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrnc'>309</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0.61</td><td align="right" class='awrnc'>0.09</td><td class='awrnc'>37.9</td><td class='awrnc'>33.4</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrc'>191</td><td align="right" class='awrc'>191</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.06</td><td class='awrc'>96.4</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.03</td><td class='awrnc'>74.5</td><td class='awrnc'>12.2</td><td scope="row" class='awrnc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>164</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.07</td><td class='awrc'>40</td><td class='awrc'>19</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.02</td><td class='awrnc'>99.8</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#5u7g54s63p4ts">5u7g54s63p4ts</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select toid from type$ where p...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	     7,028</li>
<li class="awr">Captured SQL account for   55.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,565</td><td align="right" class='awrc'>1,565</td><td align="right" class='awrc'>22.27</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>351</td><td align="right" class='awrnc'>912</td><td align="right" class='awrnc'>4.99</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>191</td><td align="right" class='awrc'>191</td><td align="right" class='awrc'>2.72</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>2.56</td><td scope="row" class='awrnc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>164</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>2.33</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>2.32</td><td scope="row" class='awrnc'><a class="awr" href="#5u7g54s63p4ts">5u7g54s63p4ts</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select toid from type$ where p...</td></tr>
<tr><td align="right" class='awrc'>116</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>1.65</td><td scope="row" class='awrc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>1.65</td><td scope="row" class='awrnc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrc'>92</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>1.31</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0.98</td><td scope="row" class='awrnc'><a class="awr" href="#7hc9uvs2016m6">7hc9uvs2016m6</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into svcobj_access$(nam...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,231,793</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1.17</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>4,146,388</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.37</td><td scope="row" class='awrnc'><a class="awr" href="#2xfg27zhudyay">2xfg27zhudyay</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrc'>2,916,904</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.26</td><td scope="row" class='awrc'><a class="awr" href="#9sq9djzzhr19y">9sq9djzzhr19y</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrnc'>2,131,968</td><td align="right" class='awrnc'>15,455</td><td align="right" class='awrnc'>0.19</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>2,095,564</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.18</td><td scope="row" class='awrc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrnc'>1,872,335</td><td align="right" class='awrnc'>86,747</td><td align="right" class='awrnc'>0.16</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>1,500,130</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.13</td><td scope="row" class='awrc'><a class="awr" href="#5gy90wdbvc683">5gy90wdbvc683</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> with base_metrics as ( select...</td></tr>
<tr><td align="right" class='awrnc'>1,466,457</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.13</td><td scope="row" class='awrnc'><a class="awr" href="#du9ud3dmb4xun">du9ud3dmb4xun</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH ash as (SELECT round((cas...</td></tr>
<tr><td align="right" class='awrc'>1,192,748</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.11</td><td scope="row" class='awrc'><a class="awr" href="#fg11facbfjwvx">fg11facbfjwvx</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> SELECT /*+ no_monitor leading...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>64</td><td align="right" class='awrc'>15,455</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>86,747</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	      28,420</li>
<li class="awr">Captured SQL account for   93.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>14,423.13</td><td align="right" class='awrc'>15,455</td><td align="right" class='awrc'>50.75</td><td align="right" class='awrc'>19,170.96</td><td align="right" class='awrc'>75.23</td><td align="right" class='awrc'>2.47</td><td align="right" class='awrc'>23.79</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>12,129.43</td><td align="right" class='awrnc'>86,747</td><td align="right" class='awrnc'>42.68</td><td align="right" class='awrnc'>15,290.75</td><td align="right" class='awrnc'>79.33</td><td align="right" class='awrnc'>3.63</td><td align="right" class='awrnc'>19.49</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>434.97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>540.19</td><td align="right" class='awrc'>80.52</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>18.47</td><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>431.46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>540.50</td><td align="right" class='awrnc'>79.83</td><td align="right" class='awrnc'>2.89</td><td align="right" class='awrnc'>19.03</td><td scope="row" class='awrnc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>430.69</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>540.76</td><td align="right" class='awrc'>79.64</td><td align="right" class='awrc'>2.80</td><td align="right" class='awrc'>19.47</td><td scope="row" class='awrc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>430.65</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>542.17</td><td align="right" class='awrnc'>79.43</td><td align="right" class='awrnc'>2.79</td><td align="right" class='awrnc'>19.52</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>427.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>540.05</td><td align="right" class='awrc'>79.09</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>19.90</td><td scope="row" class='awrc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>425.27</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>540.52</td><td align="right" class='awrnc'>78.68</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>20.20</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>424.34</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>540.47</td><td align="right" class='awrc'>78.51</td><td align="right" class='awrc'>2.93</td><td align="right" class='awrc'>20.47</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>422.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>540.07</td><td align="right" class='awrnc'>78.25</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>20.78</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>422.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>541.00</td><td align="right" class='awrc'>78.05</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>20.92</td><td scope="row" class='awrc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>421.80</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>540.31</td><td align="right" class='awrnc'>78.07</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>20.96</td><td scope="row" class='awrnc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>421.53</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>539.98</td><td align="right" class='awrc'>78.06</td><td align="right" class='awrc'>3.04</td><td align="right" class='awrc'>20.96</td><td scope="row" class='awrc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>420.51</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>540.01</td><td align="right" class='awrnc'>77.87</td><td align="right" class='awrnc'>2.90</td><td align="right" class='awrnc'>21.20</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>419.55</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>540.07</td><td align="right" class='awrc'>77.68</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>21.16</td><td scope="row" class='awrc'><a class="awr" href="#c886fvd0mv7mv">c886fvd0mv7mv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>419.29</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>540.92</td><td align="right" class='awrnc'>77.51</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>21.49</td><td scope="row" class='awrnc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>419.05</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>540.06</td><td align="right" class='awrc'>77.59</td><td align="right" class='awrc'>3.06</td><td align="right" class='awrc'>21.31</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>418.78</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>539.79</td><td align="right" class='awrnc'>77.58</td><td align="right" class='awrnc'>3.20</td><td align="right" class='awrnc'>21.39</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>418.02</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>540.73</td><td align="right" class='awrc'>77.31</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>21.66</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>417.05</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>540.58</td><td align="right" class='awrnc'>77.15</td><td align="right" class='awrnc'>3.09</td><td align="right" class='awrnc'>21.46</td><td scope="row" class='awrnc'><a class="awr" href="#249992tdjj8pb">249992tdjj8pb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>415.94</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>540.31</td><td align="right" class='awrc'>76.98</td><td align="right" class='awrc'>3.08</td><td align="right" class='awrc'>21.95</td><td scope="row" class='awrc'><a class="awr" href="#fhgqn1rt3jmh3">fhgqn1rt3jmh3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>414.93</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>540.93</td><td align="right" class='awrnc'>76.71</td><td align="right" class='awrnc'>3.01</td><td align="right" class='awrnc'>22.19</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>414.88</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>540.98</td><td align="right" class='awrc'>76.69</td><td align="right" class='awrc'>3.26</td><td align="right" class='awrc'>22.15</td><td scope="row" class='awrc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>414.80</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>538.86</td><td align="right" class='awrnc'>76.98</td><td align="right" class='awrnc'>3.10</td><td align="right" class='awrnc'>21.96</td><td scope="row" class='awrnc'><a class="awr" href="#4d3r1vzskkhpu">4d3r1vzskkhpu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>414.62</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>76.88</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>22.14</td><td scope="row" class='awrc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>414.62</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>538.67</td><td align="right" class='awrnc'>76.97</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>21.76</td><td scope="row" class='awrnc'><a class="awr" href="#g1x4b9bfdxz35">g1x4b9bfdxz35</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>414.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>539.65</td><td align="right" class='awrc'>76.72</td><td align="right" class='awrc'>3.14</td><td align="right" class='awrc'>22.10</td><td scope="row" class='awrc'><a class="awr" href="#90ujc8r1t56fr">90ujc8r1t56fr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>413.35</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>539.62</td><td align="right" class='awrnc'>76.60</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>22.01</td><td scope="row" class='awrnc'><a class="awr" href="#1f3cggsgaswpw">1f3cggsgaswpw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>413.34</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>541.42</td><td align="right" class='awrc'>76.34</td><td align="right" class='awrc'>3.12</td><td align="right" class='awrc'>22.54</td><td scope="row" class='awrc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>412.57</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>541.15</td><td align="right" class='awrnc'>76.24</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>22.34</td><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>412.37</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>539.45</td><td align="right" class='awrc'>76.44</td><td align="right" class='awrc'>3.15</td><td align="right" class='awrc'>22.30</td><td scope="row" class='awrc'><a class="awr" href="#230uak9tb9gp2">230uak9tb9gp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>412.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>540.12</td><td align="right" class='awrnc'>76.30</td><td align="right" class='awrnc'>3.03</td><td align="right" class='awrnc'>22.63</td><td scope="row" class='awrnc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>411.68</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>539.54</td><td align="right" class='awrc'>76.30</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>22.63</td><td scope="row" class='awrc'><a class="awr" href="#9hzjs0qb9fr2c">9hzjs0qb9fr2c</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>411.57</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>540.24</td><td align="right" class='awrnc'>76.18</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>22.66</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>411.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>76.26</td><td align="right" class='awrc'>3.17</td><td align="right" class='awrc'>22.61</td><td scope="row" class='awrc'><a class="awr" href="#7q910nkfm4sb4">7q910nkfm4sb4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>410.42</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>539.67</td><td align="right" class='awrnc'>76.05</td><td align="right" class='awrnc'>3.17</td><td align="right" class='awrnc'>22.97</td><td scope="row" class='awrnc'><a class="awr" href="#cwr7y46j1ajy0">cwr7y46j1ajy0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>406.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>539.28</td><td align="right" class='awrc'>75.46</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#4hvtczzbgggky">4hvtczzbgggky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>406.34</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>540.16</td><td align="right" class='awrnc'>75.23</td><td align="right" class='awrnc'>3.24</td><td align="right" class='awrnc'>23.77</td><td scope="row" class='awrnc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>404.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>541.23</td><td align="right" class='awrc'>74.73</td><td align="right" class='awrc'>3.31</td><td align="right" class='awrc'>24.24</td><td scope="row" class='awrc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>403.12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>539.56</td><td align="right" class='awrnc'>74.71</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>24.03</td><td scope="row" class='awrnc'><a class="awr" href="#2pvynbz6kg2u1">2pvynbz6kg2u1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>398.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>539.75</td><td align="right" class='awrc'>73.87</td><td align="right" class='awrc'>3.25</td><td align="right" class='awrc'>24.92</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>394.75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>540.00</td><td align="right" class='awrnc'>73.10</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>25.66</td><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>392.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>538.93</td><td align="right" class='awrc'>72.87</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>26.03</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>391.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>540.30</td><td align="right" class='awrnc'>72.40</td><td align="right" class='awrnc'>3.20</td><td align="right" class='awrnc'>26.50</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>385.60</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.36</td><td align="right" class='awrc'>539.41</td><td align="right" class='awrc'>71.49</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>27.25</td><td scope="row" class='awrc'><a class="awr" href="#8h5ykwqs85vbc">8h5ykwqs85vbc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>12.70</td><td align="right" class='awrnc'>24.89</td><td align="right" class='awrnc'>15.88</td><td align="right" class='awrnc'>2.16</td><td scope="row" class='awrnc'><a class="awr" href="#2xfg27zhudyay">2xfg27zhudyay</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrc'>2.31</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>14.44</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>31.37</td><td align="right" class='awrc'>6.60</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.07</td><td align="right" class='awrnc'>38.84</td><td align="right" class='awrnc'>5.05</td><td align="right" class='awrnc'>59.21</td><td scope="row" class='awrnc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>89.35</td><td align="right" class='awrc'>4.58</td><td align="right" class='awrc'>6.82</td><td scope="row" class='awrc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>92.45</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>6.38</td><td scope="row" class='awrnc'><a class="awr" href="#fh5ufah919kun">fh5ufah919kun</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_sb4$ i_id...</td></tr>
<tr><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>85.06</td><td align="right" class='awrc'>9.89</td><td align="right" class='awrc'>8.26</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>20.69</td><td align="right" class='awrnc'>13.72</td><td align="right" class='awrnc'>0.61</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>44.20</td><td align="right" class='awrc'>23.67</td><td align="right" class='awrc'>38.85</td><td scope="row" class='awrc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>4.58</td><td align="right" class='awrnc'>8.81</td><td align="right" class='awrnc'>38.39</td><td scope="row" class='awrnc'><a class="awr" href="#6tu8uar9skw2q">6tu8uar9skw2q</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH chains as (SELECT w.insta...</td></tr>
<tr><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>27.32</td><td align="right" class='awrc'>8.26</td><td align="right" class='awrc'>67.26</td><td scope="row" class='awrc'><a class="awr" href="#a3jpjzh7mtwwp">a3jpjzh7mtwwp</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub2$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>63.55</td><td align="right" class='awrnc'>20.95</td><td align="right" class='awrnc'>21.25</td><td scope="row" class='awrnc'><a class="awr" href="#9tt2m0mpc2qqp">9tt2m0mpc2qqp</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_char$ i_i...</td></tr>
<tr><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>52.90</td><td align="right" class='awrc'>40.02</td><td align="right" class='awrc'>18.97</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>309</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>39.32</td><td align="right" class='awrnc'>37.86</td><td align="right" class='awrnc'>33.42</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>29.54</td><td align="right" class='awrc'>42.14</td><td align="right" class='awrc'>30.32</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>912</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>10.35</td><td align="right" class='awrnc'>78.22</td><td align="right" class='awrnc'>7.86</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>21.03</td><td align="right" class='awrc'>20.84</td><td align="right" class='awrc'>45.15</td><td scope="row" class='awrc'><a class="awr" href="#9fjf75a1s4y19">9fjf75a1s4y19</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select procedure#, procedurena...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>50.34</td><td align="right" class='awrnc'>17.38</td><td align="right" class='awrnc'>28.99</td><td scope="row" class='awrnc'><a class="awr" href="#6h3cwmunz5z8q">6h3cwmunz5z8q</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select col#, grantee#, privile...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>6.35</td><td align="right" class='awrc'>59.51</td><td align="right" class='awrc'>19.46</td><td scope="row" class='awrc'><a class="awr" href="#3s008f5ragg5n">3s008f5ragg5n</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH names as (SELECT metric_n...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>4.68</td><td align="right" class='awrnc'>84.02</td><td align="right" class='awrnc'>2.61</td><td scope="row" class='awrnc'><a class="awr" href="#d9wm318cx7far">d9wm318cx7far</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH ash as (SELECT round((cas...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0gw0hh7k29jxb"></a>0gw0hh7k29jxb</td><td class='awrnc'><pre_sqltext class="awr">select obj.obj#,  obj.file#,  obj.block# from ((select obj#,  file#,  block# from sys.tab$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.tabpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.clu$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.ind$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.indpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.tabsubpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,	file#,	block# from sys.indsubpart$ t where t.ts# = :1 AND t.dataobj# = :2)) obj</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0raxwcmc41phu"></a>0raxwcmc41phu</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '92';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="181vungw6p8xd"></a>181vungw6p8xd</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '38';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1dw84yqn5xjf6"></a>1dw84yqn5xjf6</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '20';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1f3cggsgaswpw"></a>1f3cggsgaswpw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '71';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1fhabrgp6k1fh"></a>1fhabrgp6k1fh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '60';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1y2qx24pugffb"></a>1y2qx24pugffb</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="230uak9tb9gp2"></a>230uak9tb9gp2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '72';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="249992tdjj8pb"></a>249992tdjj8pb</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '86';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2kagcss8t5vv4"></a>2kagcss8t5vv4</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '76';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2p9fv35c7zxtg"></a>2p9fv35c7zxtg</td><td class='awrc'><pre_sqltext class="awr">select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ 	   nvl(m.inserts,  0) ins,  nvl(m.updates,  0) upd,  nvl(m.deletes,  0) del,	       nvl(m.drop_segments,  0) dropseg,  nvl(m.flags,	0) flags,			 nvl(rowcnt,  0) rowcnt,  o.pobjn pobjn 					 from									       (select :objn objn,  0 pobjn,  rowcnt						from tab$ t								      where t.obj# = :objn							    union all									  select :objn objn,  tp.bo# pobjn,  rowcnt					  from tabpart$ tp								where tp.obj# = :objn							      union all 								    select :objn objn,	tcp.bo# pobjn,	rowcnt					    from tabcompart$ tcp							  where tcp.obj# = :objn							union all								      select :objn objn,  tsp.pobj# pobjn,  rowcnt				      from tabsubpart$ tsp							    where tsp.obj# = :objn) o,	sys.mon_mods_all$ m				  where o.objn = m.obj#(+) and rownum &lt; 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2pvynbz6kg2u1"></a>2pvynbz6kg2u1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '48';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2s578t5qpv8b5"></a>2s578t5qpv8b5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '102';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2xfg27zhudyay"></a>2xfg27zhudyay</td><td class='awrnc'><pre_sqltext class="awr">WITH binds as
	 (select :dbid			as dbid
	       ,  :inst_id_low		 as instIdLow
	       ,  :inst_id_high 	 as instIdHigh
	       ,  :begin_snap		 as beginSnap
	       ,  :end_snap		 as endSnap
	       ,  :begin_time		 as beginTime
	       ,  :end_time		 as endTime
	       ,  :disk_begin_time	 as diskBeginTime
	       ,  :disk_end_time	 as diskEndTime
	       ,  :mem_begin_time	 as memBeginTime
	       ,  :mem_end_time 	 as memEndTime
	       ,  :bucket_count 	 as bucketCount
	       ,  :bucket_interval	 as bucketInterval
	       ,  :mem_enable		 as memEnable
	       ,  :disk_enable		 as diskEnable
	       ,  :disk_filter_ratio	 as filterRatio,  :filter_action as filter_action,  :filter_blocking_session as filter_blocking_session,  :filter_capture_id as filter_capture_id,  :filter_client_id as filter_client_id,  :filter_consumer_group_id as filter_consumer_group_id,  :filter_dbop as filter_dbop,  :filter_ecid as filter_ecid,	:filter_event as filter_event,	:filter_instance_number as filter_instance_number,  :filter_is_captured as filter_is_captured,	:filter_is_filtered_out as filter_is_filtered_out,  :filter_is_nc_background as filter_is_nc_background,  :filter_is_replayed as filter_is_replayed,  :filter_machine as filter_machine,  :filter_machine_port as filter_machine_port,	:filter_module as filter_module,  :filter_object as filter_object,  :filter_pdb as filter_pdb,	:filter_physical_session as filter_physical_session,  :filter_pl_sql as filter_pl_sql,	:filter_pl_sql_top as filter_pl_sql_top,  :filter_program as filter_program,  :filter_px_process as filter_px_process,	:filter_service_hash as filter_service_hash,  :filter_session_type as filter_session_type,  :filter_sql_fms as filter_sql_fms,	:filter_sql_id_top as filter_sql_id_top,  :filter_sql_opcode as filter_sql_opcode,  :filter_sql_opcode_top as filter_sql_opcode_top,  :filter_sql_rws as filter_sql_rws,  :filter_sql_rws_line as filter_sql_rws_line,	:filter_sqlid as filter_sqlid,	:filter_sqlid_fullphv as filter_sqlid_fullphv,	:filter_sqlid_phv as filter_sqlid_phv,	:filter_user_id as filter_user_id,  :filter_wait_class as filter_wait_class,  :filter_xid as filter_xid from sys.dual)	,  unified_ash as
	     (SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  decode(binds.diskEnable, 0, 1, binds.filterRatio)
		       as sample_count
		   ,  inst_id as instance_number
		FROM sys.gv_$active_session_history a,	binds
	       WHERE binds.memEnable = 1
		 AND (	binds.diskEnable = 0
		     OR (  binds.diskEnable = 1
		       AND a.is_awr_sample = 'Y'
		       AND bitand(a.flags,  128) = 0 ) )
		 AND a.inst_id between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	      UNION ALL
	      SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  binds.filterRatio as sample_count
		   ,  instance_number as instance_number
		FROM AWR_ROOT_active_sess_history a,
		     binds
	       WHERE binds.diskEnable = 1
		 AND a.dbid = binds.dbid
		 AND a.instance_number between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.snap_id between
			  binds.beginSnap
		      and binds.endSnap + 1
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	     ),  logical_ash as
	     (select sample_id
		   ,  sample_time
		   ,  sample_count
		   ,  instance_number as inst_id, action as action, event as event, instance_number as instance_number, module as module, instance_number || ':' || session_id || ', ' || session_serial# as physical_session, service_hash as service_hash, sql_id as sqlid, wait_class as wait_class,  xid as xid,  user_id as user_id,  program as program from unified_ash) ,  bucketized_ash as
	   (SELECT ash0.*,
		  (case when binds.bucketCount &gt; 1
			then trunc( ( (24 * 60 * 60 *
				       extract(day from sample_time
						      - binds.beginTime))
				    + (60 * 60 *
				       extract(hour from sample_time
						      - binds.beginTime))
				    + (60 *
				       extract(minute from sample_time
						      - binds.beginTime))
				    + (1 *
				       extract(second from sample_time
						      - binds.beginTime))
				     ) / binds.bucketInterval
				   ) + 1
			else 1
		   end) as bucket_number
	   FROM logical_ash ash0,  binds),  filter_xml as
	 (SELECT xmlconcat(xmlelement(&quot;filters&quot; )
	 ,  xmlelement(&quot;report_time&quot;, xmlattributes(
	     to_char(o.begintime,  'HH24:MI:SS MM/DD/YYYY') as &quot;begin_time&quot;,
	     to_char(o.endtime,  'HH24:MI:SS MM/DD/YYYY') as &quot;end_time&quot;))) as xml_frag FROM
    (select binds.*,  nvl(to_number(filter_pdb), 0) as con_dbid from binds) o) ,  filtered_ash as
	      (SELECT ash.*,
		      1  filtered
	       FROM bucketized_ash ash,  binds WHERE 1=1 ),  grouped_ash as
		   (SELECT ash.*,   0 AS bucket_type  FROM (SELECT sqlid, physical_session, action, module, service_hash, instance_number, event, wait_class	  ,  grouping_id(sqlid, physical_session, action, module, service_hash, instance_number, event, wait_class) as gid  , max(inst_id)	      as inst_id
			     , sum(sample_count)       as sample_count
			     , count(distinct sqlid)   as uniq_sqlids
			     , count(distinct xid)     as uniq_xids
			     , count(distinct physical_session)
						      as uniq_sessions
			     , count(distinct instance_number)
						      as uniq_instances, max(user_id) as user_id, max(program) as program from	filtered_ash
		     group by  grouping sets( (wait_class),  (sqlid),  (module),  (event),  (action),  (instance_number),  (physical_session),	(service_hash)) ) ash ),  component_1_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   else (13 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 13
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 13
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 13
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 13
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select wait_class as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , wait_class) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 254
			      and wait_class is not null)
		    group by (case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_1_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('wait_class' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 13
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 13
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 13
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_1_treemap) t
		   ) topmems),	component_2_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select event as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , event) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 253
			      and event is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_2_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('event' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_2_treemap) t
		   ) topmems),	component_3_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT instance_name
	FROM sys.gv_$instance v
	WHERE v.instance_number = left.dim_val
	  AND rownum &lt; 2  ), ( SELECT instance_name
	FROM AWR_ROOT_database_instance v,  binds b
	WHERE v.dbid = b.dbid
	  AND v.instance_number = left.dim_val
	  AND rownum &lt; 2)) as instance_name
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select instance_number as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , instance_number) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 251
			      and instance_number is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_3_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('instance_number' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       , instance_name)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_3_treemap) t
		   ) topmems),	component_4_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT name
       FROM sys.gv_$active_services v
       WHERE v.name_hash = left.dim_val
	     AND v.inst_id = left.inst_id
	     AND rownum &lt; 2 ), ( SELECT service_name
       FROM AWR_ROOT_service_name v,  binds b
       WHERE v.dbid = b.dbid
	     AND v.service_name_hash = left.dim_val
	     AND rownum &lt; 2)) as service_name
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select service_hash as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , service_hash) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 247
			      and service_hash is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_4_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('service_hash' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       , service_name)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_4_treemap) t
		   ) topmems),	component_5_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select module as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , module) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 239
			      and module is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_5_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('module' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_5_treemap) t
		   ) topmems),	component_6_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select action as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , action) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 223
			      and action is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_6_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('action' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_6_treemap) t
		   ) topmems),	component_7_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket
			 , user_id, program

		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id

			 , max(case when mem_rank &lt;= 5
			  then user_id		else null
		     end)		      as user_id, max(case when mem_rank &lt;= 5
			  then program		else null
		     end)		      as program
		     from (select physical_session as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , physical_session) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id

				 , user_id, program
			     from grouped_ash
			    where gid = 191
			      and physical_session is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_7_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('physical_session' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)
				       , xmlconcat(xmlelement(&quot;info&quot;, xmlattributes('user_id' as &quot;name&quot;), user_id), xmlelement(&quot;info&quot;, xmlattributes('program' as &quot;name&quot;), program))
				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_7_treemap) t
		   ) topmems),	component_8_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT replace(substr(v.sql_text,  1,  100), CHR(0), '') as sql_text
	 FROM sys.gv_$sql v
	 WHERE v.sql_id = left.dim_val
	       AND v.inst_id = left.inst_id

	       AND rownum &lt; 2 ), ( SELECT replace(sys.dbms_lob.substr(v.sql_text,  100,  1), CHR(0), '')
	   as sql_text
	 FROM AWR_ROOT_sqltext v,  binds b
	 WHERE v.dbid = b.dbid
	   AND v.sql_id = left.dim_val

	   AND rownum &lt; 2)) as sql_text
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select sqlid as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , sqlid) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 127
			      and sqlid is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_8_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('sqlid' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as
&quot;uniq_instances&quot;)

				       , sql_text)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_8_treemap) t
		   ) topmems)select
		   xmlconcat((select xml_frag from filter_xml),
		      xmlelement(&quot;dim_list&quot;,
			xmlelement(&quot;item&quot;,
			  xmlattributes('top_dimensions' as &quot;id&quot;),
			  xmlelement(&quot;subdim&quot;,  xmlconcat((select dim_frag from component_1_xml), (select dim_frag from component_2_xml), (select dim_frag from component_3_xml), (select dim_frag from component_4_xml), (select dim_frag from component_5_xml), (select dim_frag from component_6_xml), (select dim_frag from component_7_xml), (select dim_frag from component_8_xml)))),
	 xmltype('
	   &lt;item type=&quot;separator&quot; /&gt;'),
	 xmltype('
	   &lt;item id=&quot;sql_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;sqlid&quot; /&gt;
	       &lt;item id=&quot;sql_id_top&quot; /&gt;
	       &lt;item id=&quot;sql_fms&quot; /&gt;
	       &lt;item id=&quot;sqlid_phv&quot; /&gt;
	       &lt;item id=&quot;sqlid_fullphv&quot;/&gt;
	       &lt;item id=&quot;sql_rws&quot; /&gt;
	       &lt;item id=&quot;sql_rws_line&quot; /&gt;
	       &lt;item id=&quot;sql_opcode&quot; /&gt;
	       &lt;item id=&quot;sql_opcode_top&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;pl_sql_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;pl_sql&quot; /&gt;
	       &lt;item id=&quot;pl_sql_top&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;resource_consumption_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;wait_class&quot; /&gt;
	       &lt;item id=&quot;event&quot; /&gt;
	       &lt;item id=&quot;object&quot; /&gt;
	       &lt;item id=&quot;blocking_session&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;session_identifiers_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;instance_number&quot; /&gt; &lt;item id=&quot;service_hash&quot; /&gt;
	       &lt;item id=&quot;physical_session&quot; /&gt;
	       &lt;item id=&quot;px_process&quot; /&gt;
	       &lt;item id=&quot;user_id&quot; /&gt;
	       &lt;item id=&quot;program&quot; /&gt;
	       &lt;item id=&quot;session_type&quot; /&gt;
	     &lt;/subdim&gt;
	    &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;session_attributes_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;consumer_group_id&quot; /&gt;
	       &lt;item id=&quot;module&quot; /&gt;
	       &lt;item id=&quot;action&quot; /&gt;
	       &lt;item id=&quot;client_id&quot; /&gt;
	       &lt;item id=&quot;machine&quot; /&gt;
	       &lt;item id=&quot;machine_port&quot; /&gt;
	       &lt;item id=&quot;xid&quot; /&gt;
	       &lt;item id=&quot;ecid&quot; /&gt;
	       &lt;item id=&quot;dbop
&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'))
		  ) from sys.dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,	C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrnc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m 		  using dual								     on (m.obj# = :objn and							    (:pobjn = 0 or								m.obj# = :pobjn or							   m.obj# in (select obj#								 from tabpart$								    where bo# = :pobjn and obj# = :objn 				       union all								  select obj#								     from tabcompart$								where bo# = :pobjn and obj# = :objn					   union all								      select tsp.obj#								 from tabsubpart$ tsp,	tabcompart$ tcp 				     where tsp.pobj# = tcp.obj# 						  and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				     and tsp.obj# = :objn)))				      when matched then 							   update								      set inserts = decode(:reset,  1,	0,  inserts) + :ins,				 updates = decode(:reset,  1,  0,  updates) + :upd,				deletes = decode(:reset,  1,  0,  deletes) + :del,			       flags =	decode(:reset,	1,  0,	flags - bitand(flags,  :flag)) + :flag,        drop_segments = decode(:reset,  1,  0,  drop_segments) + :dropseg,	      timestamp = :time 						   when NOT matched then							insert (obj#,  inserts,  updates,  deletes,					       timestamp,  flags,  drop_segments)				    values (:objn,  :ins,  :upd,  :del,  :time,  :flag,  :dropseg)		     where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3q9qpxjx8mtpr"></a>3q9qpxjx8mtpr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3s008f5ragg5n"></a>3s008f5ragg5n</td><td class='awrnc'><pre_sqltext class="awr">WITH
  names as
  (SELECT metric_name,	metric_unit,  rownum as met_id
   FROM   sys.v_$metricname
   WHERE  group_name = 'System Metrics Long Duration'
     AND  metric_name IN ( 'Average Synchronous Single-Block Read Latency',
'Background CPU Usage Per Sec',
'CPU Usage Per Sec',
'Current Logons Count',
'Current Open Cursors Count',
'Current OS Load',
'Database Time Per Sec',
'Executions Per Sec',
'GC CR Block Received Per Second',
'GC Current Block Received Per Second',
'Global Cache Average CR Get Time',
'Global Cache Average Current Get Time',
'Global Cache Blocks Lost',
'Host CPU Utilization (%)',
'Logons Per Sec',
'Network Traffic Volume Per Sec',
'Physical Read Total Bytes Per Sec',
'Physical Write Total Bytes Per Sec',
'Process Limit %',
'Session Limit %',
'Total PGA Allocated',
'User Commits Per Sec',
'User Rollbacks Per Sec',
'User Transaction Per Sec',
'VM in bytes Per Sec',
'VM out bytes Per Sec',
'Run Queue Per Sec' )) , data as
  (SELECT metric_name,	inst_id,
	  avg(value) as value,	min(value) as mi,  max(value) as ma
   FROM   sys.gv_$metric_history
   WHERE  end_time &gt;= :1
     AND  group_id = 2
     AND  intsize_csec &gt;= 4000
     AND  metric_name in ( 'Average Synchronous Single-Block Read Latency',
'Background CPU Usage Per Sec',
'CPU Usage Per Sec',
'Current Logons Count',
'Current Open Cursors Count',
'Current OS Load',
'Database Time Per Sec',
'Executions Per Sec',
'GC CR Block Received Per Second',
'GC Current Block Received Per Second',
'Global Cache Average CR Get Time',
'Global Cache Average Current Get Time',
'Global Cache Blocks Lost',
'Host CPU Utilization (%)',
'Logons Per Sec',
'Network Traffic Volume Per Sec',
'Physical Read Total Bytes Per Sec',
'Physical Write Total Bytes Per Sec',
'Process Limit %',
'Session Limit %',
'Total PGA Allocated',
'User Commits Per Sec',
'User Rollbacks Per Sec',
'User Transaction Per Sec',
'VM in bytes Per Sec',
'VM out bytes Per Sec',
'Run Queue Per Sec' )	GROUP BY metric_name,  inst_id
  ) , names_xml as
  (SELECT xmlagg(
	     xmlelement(&quot;map&quot;,
		xmlattributes(
		   metric_name as &quot;name&quot;,
		   metric_unit as &quot;unit&quot;,
		   met_id as &quot;id&quot;
	  ))) as x
   FROM names)
 , data_xml as
  (SELECT xmlagg(
	    xmlelement(&quot;m&quot;,
		xmlattributes(
		   d.inst_id as &quot;i&quot;,
		   round(d.value, 3) as &quot;v&quot;,
		   round(d.ma, 3) as &quot;ma&quot;,
		   round(d.mi, 3) as &quot;mi&quot;,
		   n.met_id as &quot;id&quot;
	  ))) as x
   FROM    data d,  names n
   WHERE   d.metric_name = n.metric_name)
 , final_xml as
  (SELECT xmlelement(&quot;metrics&quot;,
	     xmlelement(&quot;metric_names&quot;,  n.x),
		xmlelement(&quot;data&quot;,  d.x)) as x
   FROM   names_xml n,	data_xml d)
 , avg_as as
  (SELECT sum(value)/100 as v
   FROM data
   WHERE  metric_name = 'Database Time Per Sec'
  )
 SELECT avg_as.v,  final_xml.x
 FROM	avg_as,  final_xml</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3scs6w7r6f9xa"></a>3scs6w7r6f9xa</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '34';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrnc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,  obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3zfwa5fbzfumr"></a>3zfwa5fbzfumr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '47';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4asnrz2aymyu8"></a>4asnrz2aymyu8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '67';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4d3r1vzskkhpu"></a>4d3r1vzskkhpu</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '11';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4hvtczzbgggky"></a>4hvtczzbgggky</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '55';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4ws27v7ay8j6x"></a>4ws27v7ay8j6x</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '3';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.bucket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned					    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,						  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5gy90wdbvc683"></a>5gy90wdbvc683</td><td class='awrc'><pre_sqltext class="awr">
    with base_metrics as (
      select -- sum across all instances
	     source,
	     lpad(to_char(inst_id), 5) || '/' || inst_name inst,
	     bucket_id,  id,  name,
	     sum(aas)  aas,
	     sum(aas_fg) aas_fg,
	     sum(aas_cpu) aas_cpu
	from table(sys.gv$(cursor
	  (select -- pick only first data point per bucket/id combination
		  source,
		  i.instance_number   inst_id,
		  i.instance_name     inst_name,
		  bucket_id,  id,  name,
		  aas,
		  aas_fg,
		  aas_cpu
	     from v$instance i,
	      (select -- determine first data point in bucket
		      source,  bucket_id,  id,	name,
		      row_number() over
				     (partition by bucket_id,  id
					  order by aas desc nulls last,  id) rn,
		      aas,  aas_fg,  aas_cpu
		 from
		 (
     select 'waitclass' source,
	   wc.wait_class# id,  e.wait_class name,
	   trunc(
	    ( (extract(day from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				      as timestamp))) * 86400 +
	       extract(hour from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				       as timestamp))) * 3600 +
	       extract(minute from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				       as timestamp))) * 60 +
	       extract(second from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
					    as timestamp))) )
	     / :p_bucket_interval)) + 1 	  bucket_id,
	   wc.time_waited/intsize_csec			  aas,
	   wc.time_waited_fg/intsize_csec		  aas_fg,
	   null aas_cpu
      from v$waitclassmetric_history wc,
	   v$system_wait_class e
     where wc.wait_class# = e.wait_class#
       and e.wait_class  != 'Idle'
       and wc.end_time &gt;= to_date(:b_start_time, :date_fmt)
       and wc.end_time &lt;  to_date(:b_end_time, :date_fmt)
     union all
    select 'waitclass' source,
	   metric_id id,  metric_name name,
	   trunc(
	    ( (extract(day from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				      as timestamp))) * 86400 +
	       extract(hour from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				       as timestamp))) * 3600 +
	       extract(minute from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				       as timestamp))) * 60 +
	       extract(second from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
					    as timestamp))) )
	     / :p_bucket_interval)) + 1 	  bucket_id,
	   decode(metric_name, 'CPU Usage Per Sec',
		  value/100,  value)			   aas,
	   decode(metric_name, 'CPU Usage Per Sec',
		  value/100,  value)			aas_fg,
	   null aas_cpu
      from v$sysmetric_history s
     where group_id = :b_minute_group_id
       and end_time &gt;= to_date(:b_start_time, :date_fmt)
       and end_time &lt;  to_date(:b_end_time, :date_fmt)
       and metric_name in ('CPU Usage Per Sec',
			   'Average Active Sessions')

		   union all
    select 'servicestat' source,
	   service_name_hash id,  service_name name,
	   trunc(
	    ( (extract(day from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				      as timestamp))) * 86400 +
	       extract(hour from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				       as timestamp))) * 3600 +
	       extract(minute from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
				       as timestamp))) * 60 +
	       extract(second from
	      (cast(trunc(end_time, 'mi') as timestamp) -
	       cast(trunc(to_date(:b_start_time, :date_fmt), 'mi')
					    as timestamp))) )
	     / :p_bucket_interval)) + 1 	  bucket_id,
	   dbtimepersec/100			     aas,
	   dbtimepersec/100			     aas_fg,
	   null aas_cpu
      from v$servicemetric_history s
     where group_id + 0 = :b_svcminute_group_id -- avoid index/NL
       and end_time &gt;= to_date(:b_start_time,  :date_fmt)
       and end_time &lt;  to_date(:b_end_time,	:date_fmt)


		   ))
	    where rn = 1)))    gvtf
       where inst_id between :p_inst_id_low and :p_inst_id_high
       group by source,  lpad(to_char(inst_id), 5) || '/' || inst_name ,
		bucket_id,  id,  name),
    grouping_sets as (
      select dim,  id,
	     case when rn = 1 then name else null end name,
	     bucket_id,  aas,  aas_fg,	aas_cpu
	from (-- find first occurrence of stat
	  select dim,  id,  name,  bucket_id,  aas,  aas_fg,  aas_cpu,
		 row_number() over (partition by dim,  id,  name
					order by bucket_id,  id) rn
	    from ( -- group top n + others
	     select dim,  id,  name,  bucket_id,
		    sum(aas) aas,  sum(aas_fg) aas_fg,	sum(aas_cpu) aas_cpu
	       from (-- find the top n but only for instance/service/pdb
		  select dim,
			 case when dim = 'waitclass' or rnk &lt;= :l_top_n
			      then id
			      else 0
			  end  id,
			 case when dim = 'waitclass' or rnk &lt;= :l_top_n
			      then name
			      else 'other'
			  end name,
			 bucket_id,  aas,  aas_fg,  aas_cpu
		    from ( -- rank to get top n
		      select dim,  id,	name,  bucket_id,  aas,  aas_fg,  aas_cpu,
			     dense_rank() over
			       (partition by dim
				    order by dim_aas desc,  id) rnk
			from (
			  -- get sum per dim/id combination to compute top n
			  select dim,  id,  name,  bucket_id,
				 aas,  aas_fg,	aas_cpu,
				 sum(aas) over (partition by dim,  id) dim_aas
			    from (
			      select decode(gid_inst, 0, 'instance', source) dim,
				     decode(gid_inst,
					    0, to_number(substr(inst, 1, 5)),
					    id) 			   id,
				     decode(gid_inst,
					    0, substr(inst, 7),
					    name)			 name,
				     bucket_id,  aas,  aas_fg,	aas_cpu
			       from (
				 select
				   source,  id,  name,
				   case
				   when :b_con_id &gt; 1 or
					(:p_is_rac = 1
					 and name='Average Active Sessions')
				   then inst
				     else null
				   end			      inst,
				   bucket_id,
				   sum(aas)	aas,
				   sum(aas_fg)	aas_fg,
				   sum(aas_cpu) aas_cpu,
				   grouping_id
				     (source,  id,  name,  bucket_id) gid_id,
				   grouping_id
				     (source,  bucket_id,
				      case
				      when :b_con_id &gt; 1 or
					   (:p_is_rac = 1
					    and name='Average Active Sessions')
				      then inst
					else null
				      end)		     gid_inst
				 from base_metrics
				 group by grouping sets (
				    (source,  id,  name,  bucket_id),
				    (source,  bucket_id,
				     case
				     when :b_con_id &gt; 1 or
					  (:p_is_rac = 1
					   and name='Average Active Sessions')
				       then inst
				       else null
					end)))
			      where nvl(aas, 0) + nvl(aas_fg,  0) &gt; 0)
			   where id is not null)))
		   group by dim,  id,  name,  bucket_id)))
 select /* other */ xmlagg(buckets)
 from (
   select xmlelement(&quot;stattype&quot;,
	       xmlattributes('activity' as &quot;name&quot;,
			     dim	as &quot;dim&quot;),
	       xmlelement(&quot;stat_info&quot;,  xmlagg(stat_id)),
	       xmlelement(&quot;buckets&quot;,
			  xmlattributes(:p_bucket_interval as &quot;bucket_interval&quot;,
					:p_bucket_count as &quot;bucket_count&quot;,
					:b_min_time as &quot;start_time&quot;,
					:b_max_time as &quot;end_time&quot;,
					:b_duration as &quot;duration&quot;),
			  xmlagg(bucket_xml order by bucket_id) ) ) buckets
    from (-- 0
	  select dim,  bucket_id,
		 xmlagg(stat_id order by id) stat_id,
		   xmlelement(
		     &quot;bucket&quot;,
		      xmlattributes(bucket_id as &quot;bucket_id&quot;),
		      xmlagg(xmlelement(&quot;stat&quot;,
	  		xmlattributes(id   as &quot;id&quot;,
	  			      round(aas,  6)  as &quot;aas&quot;,
	  			      round(aas_fg,  6) as &quot;aas_fg&quot;,
				      round(aas_cpu,  6) as &quot;aas_cpu&quot;))
		  order by id)
		    ) bucket_xml
	    from (
	      select dim,  bucket_id,  id,  aas,  aas_fg,  aas_cpu,
		     nvl2(name,
			  xmlelement(&quot;stat&quot;,
			   xmlattributes(id as &quot;id&quot;,	name as &quot;name&quot;)),
			  null) 	     stat_id
		from grouping_sets)
	   group by dim, bucket_id)
       group by dim)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5nz6b4v9qbsbr"></a>5nz6b4v9qbsbr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '68';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5u7g54s63p4ts"></a>5u7g54s63p4ts</td><td class='awrc'><pre_sqltext class="awr">select toid from type$ where package_obj#=:1 and typ_name=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6h3cwmunz5z8q"></a>6h3cwmunz5z8q</td><td class='awrnc'><pre_sqltext class="awr">select col#,  grantee#,	privilege#, max(mod(nvl(option$, 0), 2)),  max(bitand(nvl(option$, 0),	8) /8),  max(bitand(nvl(option$, 0),  16) /16),  max(bitand(nvl(option$, 0), 64) /64),	max(bitand(nvl(option$, 0),  128) /128) from objauth$ where obj#=:1 and col# is not null group by privilege#,  col#,  grantee# order by col#,  grantee#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6kvyh9k0yg876"></a>6kvyh9k0yg876</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '95';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;

		END IF;
WORKLOAD REPOSITORY report for


DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---
P60SDB	      3889879926 p60sdb      PRIMARY	      EE      19.0.0.0.0 YES NO

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Instance     Inst Num Startup Time
------------ -------- ---------------
p60sdb1 	    1 12-Feb-20 12:10
	ELSE

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
---------------- -------------------------------- ---- ----- ------- ----------
		--
mcracpoc1.exampl Linux x86 64-bit		    32	  16	   1	 251.90

	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
		-- Do an UPDATE statement
Begin Snap:	   53 12-Feb-20 12:13:24       170	 2.4	     2
  End Snap:	   54 12-Feb-20 12:24:00       138	  .7	     2
   Elapsed:		  10.60 (mins)
		--
   DB Time:		 614.61 (mins)

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Finding Name				 Avg act Percen Task Name
---------------------------------------- ------- ------ ------------------------
Interconnect Latency			   57.98 1.E+02 ADDM:3889879926_1_54
		v_my_serial := v_my_serial + v_loop_cnt ;
Top SQL Statements			   57.98  97.17 ADDM:3889879926_1_54
Global Cache Messaging			   57.98  76.01 ADDM:3889879926_1_54
Buffer Busy - Hot Objects		   57.98  44.97 ADDM:3889879926_1_54

"User I/O" wait Class			   57.98  22.37 ADDM:3889879926_1_54
Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
	     DB Time(s):	      58.0		 2.3	  0.30	    7.79
	      DB CPU(s):	       1.8		 0.1	  0.01	    0.24
      Background CPU(s):	       1.9		 0.1	  0.01	    0.00
		--
      Redo size (bytes):       1,645,051.3	    65,396.6
  Logical read (blocks):	  14,761.7	       586.8
	  Block changes:	   4,124.2	       164.0
 Physical read (blocks):	  14,346.2	       570.3
		-- Increment count of UPDATES and set UPDATE quota flag if needed
Physical write (blocks):	   2,138.0		85.0
       Read IO requests:	  13,335.5	       530.1
      Write IO requests:	   2,045.1		81.3
		--
	   Read IO (MB):	     112.1		 4.5
	  Write IO (MB):	      16.7		 0.7
	   IM scan rows:	       0.0		 0.0
		v_updates_cnt := v_updates_cnt + 1;
Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	       3.6		 0.1
   RAC GC blocks served:	       3.6		 0.1
	     User calls:	       7.4		 0.3

	   Parses (SQL):	      11.1		 0.4
      Hard parses (SQL):	       1.2		 0.1
     SQL Work Area (MB):	       0.6		 0.0
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
		 Logons:	       0.6		 0.0
	    User logons:	       0.0		 0.0
	 Executes (SQL):	     193.7		 7.7
	      Rollbacks:	       0.0		 0.0
			v_update_quota := TRUE;
	   Transactions:	      25.2

Instance Efficiency Percentages (Target 100%)
		END IF;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    Buffer Nowait %:  100.00	   Redo NoWait %:  100.00
	    Buffer  Hit   %:	2.79	In-memory Sort %:  100.00
	END IF ;
	    Library Hit   %:   97.38	    Soft Parse %:   89.00
	 Execute to Parse %:   94.30	     Latch Hit %:   99.97
Parse CPU to Parse Elapsd %:   36.88	 % Non-Parse CPU:   99.92
----------------------------------------------------------------------------------------------------------------------
	  Flash Cache Hit %:	0.00

Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
					   Total Wait	    Avg   % DB Wait
Event				     Waits Time (sec)	   Wait   time Class
----------------------------------------------------------------------------------------------------------------------
------------------------------ ----------- ---------- --------- ------ --------
gc current grant busy		   544,334	12.3K	22.52ms   33.2 Cluster

gc cr multi block grant 	   219,204     9094.9	41.49ms   24.7 Cluster
db file sequential read 	 1,659,991     6057.3	 3.65ms   16.4 User I/O
gc cr grant busy		   187,517     4311.1	22.99ms   11.7 Cluster
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
db file parallel read		   132,419     1762.9	13.31ms    4.8 User I/O
gc current grant 2-way		    61,479     1530.5	24.89ms    4.2 Cluster
DB CPU					       1130.6		   3.1
		--
gc current multi block request	    21,573	  510	23.64ms    1.4 Cluster
db file scattered read		    96,988	429.3	 4.43ms    1.2 User I/O
gc current grant read-mostly i	    58,097	355.6	 6.12ms    1.0 Cluster

		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							  Avg		  Avg
		-- so reset flags and counters before continuing
					Total Wait	 Wait	% DB   Active
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------
		--
Cluster 		1,105,255	    28,420    25.71ms	77.1	 44.7
User I/O		1,983,760	     8,259     4.16ms	22.4	 13.0
DB CPU					     1,131		 3.1	  1.8
System I/O		  142,534	       842     5.91ms	 2.3	  1.3
		v_update_quota := FALSE;
Other			   92,066	       176     1.91ms	  .5	  0.3
Concurrency		    3,924		 7     1.84ms	  .0	  0.0
Application		      515		 6    11.85ms	  .0	  0.0
Commit			       50		 1    12.08ms	  .0	  0.0
Network 		      857		 0    38.16us	  .0	  0.0
Configuration		       21		 0   638.10us	  .0	  0.0

Host CPU
~~~~~~~~		  Load Average
		v_updates_cnt := 0;
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
----- ----- ------- --------- --------- --------- --------- --------- ---------
   32	 16	  1	14.10	   7.36       4.5	8.4	 20.2	   83.7

		v_selects_cnt := 0;
Instance CPU
~~~~~~~~~~~~
	      % of total CPU for Instance:	12.4
	END IF;
	      % of busy  CPU for Instance:	76.1
  %DB time waiting for CPU - Resource Mgr:	 0.0

IO Profile		    Read+Write/Second	  Read/Second	 Write/Second

~~~~~~~~~~		    ----------------- --------------- ---------------
	    Total Requests:	     15,433.8	     13,345.4	      2,088.4
	 Database Requests:	     15,380.5	     13,335.5	      2,045.1
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		 44.4		  2.5		 41.8
		Total (MB):		132.9		114.5		 18.4
	     Database (MB):		128.8		112.1		 16.7
		-- so reset flags and counters
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  3.9		  2.3		  1.6
	 Database (blocks):	     16,484.2	     14,346.2	      2,138.0
		v_scan_query_quota := FALSE;
 Via Buffer Cache (blocks):	     16,480.6	     14,346.2	      2,134.4
	   Direct (blocks):		  3.6		  0.0		  3.5

Memory Statistics
		v_scan_queries_cnt := 0;
~~~~~~~~~~~~~~~~~			Begin	       End
				 ------------ ------------
		  Host Mem (MB):    257,947.8	 257,947.8
		   SGA use (MB):      9,664.0	   9,664.0
		v_random_access_queries_cnt := 0;
		   PGA use (MB):      1,548.1	   1,309.5
    % Host Mem used for SGA+PGA:	 4.35	      4.25

	END IF;
Cache Sizes			  Begin        End
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	 7,872M     7,872M  Std Block Size:	    8K

	   Shared Pool Size:	 1,096M     1,082M	Log Buffer:    20,612K
	     In-Memory Area:	     0M 	0M
	v_loop_cnt := v_loop_cnt + 1 ;

 Shared Pool Statistics        Begin	End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
	v_now := DBMS_UTILITY.GET_TIME();
	     Memory Usage %:   76.37   82.73
    % SQL with executions>1:   56.78   76.01
  % Memory for SQL w/exec>1:   57.78   67.30



Time Model Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> DB Time represents total time in user calls
-> DB CPU represents CPU time of foreground processes
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
-> Total CPU Time represents foreground and background processes
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
		-- If this is a fixed-iteration count test cycle and we've hit the number of
-> Ordered by % of DB time in descending order, followed by Statistic Name

								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time
		-- iterations then set exit flag
------------------------------------------ ------------------ ------- ----------
sql execute elapsed time			     35,875.6	 97.3
DB CPU						      1,130.6	  3.1	    48.7
		v_stop_immediate := TRUE ;
parse time elapsed					 12.0	   .0
hard parse elapsed time 				 11.6	   .0
PL/SQL execution elapsed time				  8.8	   .0
hard parse (sharing criteria) elapsed time		  1.8	   .0
	END IF;
hard parse (bind mismatch) elapsed time 		  0.5	   .0
PL/SQL compilation elapsed time 			  0.4	   .0
repeated bind elapsed time				  0.0	   .0
END LOOP;
connection management call elapsed time 		  0.0	   .0
DB time 					     36,876.6
background elapsed time 			      1,859.7
background cpu time				      1,190.5		    51.3

total CPU time					      2,321.1
			  ------------------------------------------------------

v_end_time := v_now ;
Operating System Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> *TIME statistic values are diffed.
   All others display actual values.  End Value is displayed if different
v_now := DBMS_UTILITY.GET_TIME();
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name

Statistic				   Value	End Value
------------------------- ---------------------- ----------------
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
FREE_MEMORY_BYTES		 128,180,985,856  128,932,712,448
INACTIVE_MEMORY_BYTES		   1,614,295,040    1,482,317,824
BUSY_TIME				 305,084
IDLE_TIME			       1,567,478

IOWAIT_TIME				 378,434
SYS_TIME				 157,314
USER_TIME				  84,080
LOAD					      14		7
v_total_time := v_end_time - v_begin_time ;
PHYSICAL_MEMORY_BYTES		 270,477,914,112
NUM_CPUS				      32
NUM_CPU_CORES				      16
NUM_CPU_SOCKETS 			       1
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
TCP_RECEIVE_SIZE_MAX		       6,291,456
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384
TCP_SEND_SIZE_MAX		       4,194,304
TCP_SEND_SIZE_MIN			   4,096
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
			  ------------------------------------------------------

Operating System Statistics - Detail	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54


Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
--------------- -------- -------- -------- -------- -------- --------
12-Feb 12:13:24     14.1      N/A      N/A	N/A	 N/A	  N/A
END;</pre_sqltext></td></tr>
12-Feb 12:24:00      7.4     16.3      4.5	8.4	83.7	 20.2
			  ------------------------------------------------------

Foreground Wait Class			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
<tr><td scope="row" class='awrnc'><a class="awr" name="6tu8uar9skw2q"></a>6tu8uar9skw2q</td><td class='awrnc'><pre_sqltext class="awr">WITH
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> ordered by wait time desc, waits desc
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
  chains as
-> Captured Time accounts for	     102.6%  of Total DB time	   36,876.64 (s)
-> Total FG Wait Time:		  36,713.54 (s)  DB CPU time:	    1,130.56 (s)

				     %Time	Total Wait
  (SELECT w.instance || '_' || w.sid || '_' || w.SESS_SERIAL# as sid,
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
-------------------- --------------- ----- --------------- ---------- ---------
Cluster 		   1,102,883	 0	    28,389    25.74ms	   77.0
	  case when n.wait_class = 'Idle' then '__' else
User I/O		   1,889,483	 0	     8,250     4.37ms	   22.4
DB CPU						     1,131		    3.1
Other			       5,198	37		72    13.95ms	    0.2
Concurrency			 128	 2		 2    14.83ms	    0.0
	  (w.BLOCKER_INSTANCE || '_' || w.BLOCKER_SID
Commit				  46	 0		 0     9.46ms	    0.0
Application			 184	 0		 0     1.45ms	    0.0
System I/O			 150	 0		 0   156.31us	    0.0
Configuration			   3	 0		 0   616.67us	    0.0
	    || '_' || w.BLOCKER_SESS_SERIAL#) end as bsid,
Network 			 274	 0		 0     6.15us	    0.0
			  ------------------------------------------------------


	  w.osid,
Foreground Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
	  decode(w.in_wait,  'TRUE',  w.wait_event_text,  'CPU') as event,
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % DB
	  nvl(n.wait_class,  'CPU') as wait_class,
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
gc current grant busy	       544,334	       12,259	22.52ms     34.0   33.2
	  w.IN_WAIT_SECS,
gc cr multi block grant        219,204		9,095	41.49ms     13.7   24.7
db file sequential read      1,659,991		6,057	 3.65ms    103.7   16.4
gc cr grant busy	       187,517		4,311	22.99ms     11.7   11.7
	  p.pname as pname,
db file parallel read	       132,419		1,763	13.31ms      8.3    4.8
gc current grant 2-way		61,479		1,530	24.89ms      3.8    4.2
gc current multi block req	21,573		  510	23.64ms      1.3    1.4
db file scattered read		96,988		  429	 4.43ms      6.1    1.2
	  decode(p.background,	'1',  'N',  'Y') as fg
gc current grant read-most	58,097		  356	 6.12ms      3.6    1.0
gc current grant congested	 4,249		  159	37.44ms      0.3     .4
gc cr grant 2-way		 5,168		   91	17.63ms      0.3     .2
   FROM   sys.v_$wait_chains w,  sys.gv_$process p,  sys.v_$event_name n
KJC: Wait for msg sends to	   342		   49  143.02ms      0.0     .1
gc current block lost		    48		   28  588.30ms      0.0     .1
gc cr multi block mixed 	   579		   15	25.81ms      0.0     .0
PX Deq: Slave Session Stat	   329		   15	44.86ms      0.0     .0
   WHERE  p.inst_id = w.instance
gc current block busy		   342		   12	35.39ms      0.0     .0
gc cr multi block request	     7		    8 1107.03ms      0.0     .0
gc cr block lost		    11		    6  571.43ms      0.0     .0
     AND  p.pid = w.pid
gc cr grant congested		   219		    5	22.11ms      0.0     .0
reliable message		     1		    4 3899.70ms      0.0     .0
IPC send completion sync	   309		    2	 7.82ms      0.0     .0
gc remaster			     1	 100	    2 1999.61ms      0.0     .0
     AND  decode(w.in_wait,  'TRUE',  w.wait_event,  -1) = n.event#(+)
library cache lock		    44		    1	24.26ms      0.0     .0
gc current retry		     1		    1 1007.65ms      0.0     .0
gcs drm freeze in enter se	     2		    1  464.99ms      0.0     .0
  ),  chains_xml as
enq: PS - contention		   101	   1	    1	 7.73ms      0.0     .0
library cache pin		    40		    1	13.89ms      0.0     .0
log file sync			    46		    0	 9.46ms      0.0     .0
enq: TM - contention		    58		    0	 4.44ms      0.0     .0
  (SELECT xmlelement(&quot;sessions&quot;, xmlagg(xmlelement(&quot;m&quot;, xmlattributes(
cursor: pin S wait on X 	     4		    0	62.46ms      0.0     .0
latch free			   565		    0  400.65us      0.0     .0
latch: gc element		   251		    0  480.29us      0.0     .0
	    sid as &quot;s
latch: gcs resource hash	   260		    0  324.85us      0.0     .0
KSV master wait 		     4		    0	14.66ms      0.0     .0
gc current block congested	    15		    0	 3.82ms      0.0     .0
DLM cross inst call comple	    32		    0	 1.46ms      0.0     .0
&quot;,
latch: cache buffers lru c	   166		    0  264.42us      0.0     .0
PX Deq: reap credit		 1,815	 100	    0	23.74us      0.1     .0
enq: XL - fault extent map	     1		    0	40.70ms      0.0     .0
	    osid as &quot;o&quot;,
gc cr block 2-way		    14		    0	 2.49ms      0.0     .0
enq: TO - contention		    19		    0	 1.47ms      0.0     .0
enq: WF - contention		    13		    0	 1.95ms      0.0     .0
control file sequential re	   150		    0  156.31us      0.0     .0
	    event as &quot;e&quot;,
gc buffer busy release		     1		    0	20.40ms      0.0     .0
gc current block 2-way		    16		    0	 1.17ms      0.0     .0
latch: object queue header	    21		    0  686.43us      0.0     .0
	    wait_class as &quot;c&quot;,
latch: cache buffers chain	    34		    0  393.41us      0.0     .0
enq: TT - contention		     2		    0	 6.40ms      0.0     .0
library cache: mutex X		     1		    0	 9.62ms      0.0     .0
Disk file Mirror Read		    38		    0  248.61us      0.0     .0
	    in_wait_secs as &quot;t&quot;,
latch: redo allocation		    60		    0  150.05us      0.0     .0
SQL*Net break/reset to cli	   126		    0	70.95us      0.0     .0
PGA memory operation		   536		    0	16.50us      0.0     .0
CSS initialization		     2		    0	 3.58ms      0.0     .0
	    pname as &quot;p&quot;,
direct path write		     1		    0	 5.73ms      0.0     .0
name-service call wait		     4		    0	 1.43ms      0.0     .0
enq: WT - contention		     5		    0	 1.11ms      0.0     .0
	    fg as &quot;f&quot;)))) as x
gc cr block congested		     1		    0	 3.47ms      0.0     .0
Disk file operations I/O	    42		    0	52.26us      0.0     .0
row cache lock			     3	 100	    0  700.00us      0.0     .0

   FROM   chains
Foreground Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
  ),  blockers_list as
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % DB
  (SELECT (inst_id || '_' || sid || '_' || sess_serial#) as s,
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
enq: HW - contention		     3		    0  616.67us      0.0     .0
CSS operation: action		     2		    0  881.00us      0.0     .0
	  (blocker_instance_id || '_' || blocker_sid
SQL*Net message to client	   265		    0	 6.09us      0.0     .0
lock deadlock retry		    48	 100	    0	29.81us      0.0     .0
ges ipc enter server mode	   197		    0	 6.84us      0.0     .0
CSS operation: query		     6		    0  198.17us      0.0     .0
	     || '_' || blocker_sess_serial#) as b
watchdog main loop		 1,047		3,147 3005.74ms      0.1
SQL*Net message from clien	   265		  630 2377.78ms      0.0
PX Deque wait			 2,906		  259	89.15ms      0.2
   FROM   sys.gv_$session_blockers
PX Deq: Execution Msg		   579		   20	34.36ms      0.0
PX Deq: Msg Fragment		   501		    1	 1.97ms      0.0
PX Deq Credit: send blkd	   374		    1	 1.60ms      0.0
PX Deq Credit: need buffer	    55		    0	 2.55ms      0.0
   WHERE  blocker_sid is not null   ),	blockers as
			  ------------------------------------------------------


Background Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
  (SELECT xmlelement(&quot;blockers&quot;, xmlagg(xmlelement(&quot;m&quot;, xmlattributes(
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

	    b.s as &quot;s&quot;,  b.b as &quot;b&quot;)))) as x
						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
   FROM   blockers_list b,  chains c
db file parallel write		95,249	   0	  518	 5.44ms      6.0   27.8
log file parallel write 	15,757	   0	  315	20.02ms      1.0   17.0
LGWR any worker group		 2,854	   0	   39	13.61ms      0.2    2.1
LGWR worker group ordering	 2,641	   0	   16	 6.17ms      0.2     .9
   WHERE  b.s = c.sid AND c.wait_class &lt;&gt; 'Idle'
PX Deq: Join ACK		   321	   0	   16	49.24ms      0.0     .8
PX Deq: Signal ACK EXT		   321	   0	   15	45.89ms      0.0     .8
gc cr grant busy		   958	   0	   14	14.73ms      0.1     .8
  ),  hang_info as
gc cr block 2-way		 1,023	   0	    8	 8.01ms      0.1     .4
control file parallel writ	   291	   0	    7	23.90ms      0.0     .4
db file sequential read 	 2,931	   0	    5	 1.60ms      0.2     .3
enq: RO - fast object reus	   284	   0	    4	15.77ms      0.0     .2
   (SELECT xmlelement(&quot;hang_info&quot;, xmlagg(xmlelement(&quot;a&quot;, xmlattributes(
library cache lock		   137	   7	    4	26.91ms      0.0     .2
gc cr disk read 		    91	   0	    3	36.07ms      0.0     .2
ASM IO for non-blocking po	89,796	   0	    2	22.94us      5.6     .1
ASM file metadata operatio	 2,966	   0	    2  662.70us      0.2     .1
	     decode(a.hang_type,  'Hang',  1,  'Uninteresting Hang',  2,  3) as &quot;t&quot;,
KSV master wait 		 1,113	  43	    2	 1.61ms      0.1     .1
LGWR all worker groups		    56	   0	    2	29.11ms      0.0     .1
Sync ASM rebalance		    72	   0	    2	21.00ms      0.0     .1
KJC: Wait for msg sends to	 3,374	  98	    1  406.45us      0.2     .1
library cache pin		   137	   0	    1	 9.99ms      0.0     .1
	     a.IGNORED_HANG as &quot;i&quot;,
enq: TM - contention		    46	   0	    1	29.42ms      0.0     .1
gc current grant busy		    71	   0	    1	17.86ms      0.0     .1
direct path write temp		    66	   0	    1	18.51ms      0.0     .1
PX Deq: reap credit		47,697	 100	    1	24.68us      3.0     .1
	     a.RESOLUTION_ATTEMPTED as &quot;r&quot;,
gc current block busy		    80	   0	    1	14.62ms      0.0     .1
gc cr block busy		    49	   0	    1	23.17ms      0.0     .1
oracle thread bootstrap 	    51	   0	    1	22.14ms      0.0     .1
gc cr grant 2-way		    46	   0	    1	23.70ms      0.0     .1
	     a.RESOLUTION_STATUS as &quot;s&quot;,
DLM cross inst call comple	   458	   0	    1	 2.32ms      0.0     .1
PX Deq: Slave Session Stat	   321	   0	    1	 3.31ms      0.0     .1
enq: CR - block range reus	    11	   0	    1	86.63ms      0.0     .1
control file sequential re	 3,713	   0	    1  232.83us      0.2     .0
direct path write		    18	   0	    1	40.08ms      0.0     .0
reliable message		   162	   0	    1	 4.42ms      0.0     .0
gc cr block lost		     1	   0	    1  510.91ms      0.0     .0
IMR slave acknowledgement	 1,890	   0	    0  224.14us      0.1     .0
	     a.VICTIM_INSTANCE || '_' || a.VICTIM_SESSION_ID
log file sequential read	   471	   0	    0  883.94us      0.0     .0
gcs remastering wait for r	     7	   0	    0	46.79ms      0.0     .0
enq: PS - contention		   218	  27	    0	 1.30ms      0.0     .0
Disk file Mirror Read		   854	   0	    0  315.81us      0.1     .0
ges lms sync during dynami	     5	  60	    0	48.69ms      0.0     .0
latch free			   860	   0	    0  276.65us      0.1     .0
	       || '_' || a.VICTIM_SERIAL# as &quot;sid&quot;,
row cache lock			    26	 100	    0	 9.02ms      0.0     .0
gcs log flush sync		   678	   0	    0  335.76us      0.0     .0
db file async I/O submit	26,900	   0	    0	 7.25us      1.7     .0
CGS wait for IPC msg		 7,558	 100	    0	23.88us      0.5     .0
latch: gcs resource hash	   568	   0	    0  302.60us      0.0     .0
log file sync			     4	   0	    0	42.17ms      0.0     .0
AQ: RAC AQ Network		 6,298	 100	    0	26.11us      0.4     .0
DFS lock handle 		   212	 100	    0  728.35us      0.0     .0
	     a.FATAL_BACKGROUND as &quot;f&quot;)))) as x
Disk file operations I/O	   511	   0	    0  250.68us      0.0     .0
db file scattered read		    77	   0	    0	 1.30ms      0.0     .0
gc cr block congested		    25	   0	    0	 3.91ms      0.0     .0
enq: CF - contention		    50	  62	    0	 1.84ms      0.0     .0
    FROM sys.v_$hang_info a
os thread creation		    51	   0	    0	 1.62ms      0.0     .0
ges inquiry response		    67	   0	    0	 1.16ms      0.0     .0
IPC send completion sync	   732	  86	    0  105.94us      0.0     .0
CSS initialization		    10	   0	    0	 6.62ms      0.0     .0
   )
name-service call wait		     2	   0	    0	26.04ms      0.0     .0
latch: gc element		    63	   0	    0  760.25us      0.0     .0

Background Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
SELECT xmlelement(&quot;hangs&quot;,  c.x,  b.x,  h.x)
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
FROM   chains_xml c,  blockers b,  hang_info h</pre_sqltext></td></tr>
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
ksxr poll remote instances	 1,472	 100	    0	29.39us      0.1     .0
<tr><td scope="row" class='awrc'><a class="awr" name="6uftfsj7stway"></a>6uftfsj7stway</td><td class='awrc'><pre_sqltext class="awr">DECLARE
gc cr multi block grant 	    14	   0	    0	 2.99ms      0.0     .0
latch: cache buffers lru c	   120	   0	    0  336.99us      0.0     .0
enq: TO - contention		    34	   0	    0	 1.14ms      0.0     .0
PGA memory operation		 1,362	   0	    0	25.34us      0.1     .0
v_default_schema_number PLS_INTEGER := '66';
direct path read		    22	   0	    0	 1.45ms      0.0     .0
IPC group service call		   516	   0	    0	59.25us      0.0     .0
CSS operation: data update	    21	   0	    0	 1.22ms      0.0     .0
CSS operation: data query	    19	   0	    0	 1.24ms      0.0     .0
v_update_pct PLS_INTEGER := '15';
libcache interrupt action	 3,485	   0	    0	 6.08us      0.2     .0
enq: TQ - TM contention 	     8	   0	    0	 2.60ms      0.0     .0
kjctssqmg: quick message s	    49	 100	    0  371.82us      0.0     .0
gc current block 2-way		    10	   0	    0	 1.58ms      0.0     .0
v_max_loop_iterations PLS_INTEGER := '0';
CSS operation: action		    12	   0	    0	 1.07ms      0.0     .0
enq: TT - contention		     7	  57	    0	 1.67ms      0.0     .0
enq: FB - contention		     4	   0	    0	 2.46ms      0.0     .0
ges enter server mode		 1,655	   0	    0	 5.77us      0.1     .0
v_seconds_to_run PLS_INTEGER := '600';
enq: DW - contention		     5	 100	    0	 1.59ms      0.0     .0
LGWR wait for redo copy 	    16	   0	    0  483.13us      0.0     .0
enq: TX - contention		     2	 100	    0	 3.45ms      0.0     .0
enq: HW - contention		     4	   0	    0	 1.70ms      0.0     .0
v_scale PLS_INTEGER := '1048576';
CSS operation: query		    30	   0	    0  226.70us      0.0     .0
gc current grant 2-way		     2	   0	    0	 2.95ms      0.0     .0
latch: redo writing		    14	   0	    0  338.71us      0.0     .0
v_work_unit PLS_INTEGER := '80' ;
gc current block congested	     1	   0	    0	 4.74ms      0.0     .0
latch: redo allocation		    18	   0	    0  216.11us      0.0     .0
latch: cache buffers chain	     6	   0	    0  533.00us      0.0     .0
enq: JS - job run lock - s	     2	 100	    0	 1.53ms      0.0     .0
v_redo_stress  VARCHAR2(12) := 'LITE';
latch: messages 		    12	   0	    0  189.83us      0.0     .0
enq: RA - RT ADDM flood co	     2	 100	    0	 1.04ms      0.0     .0
enq: PW - flush prewarm bu	     1	 100	    0	 1.87ms      0.0     .0
read by other session		     1	   0	    0	 1.65ms      0.0     .0
v_hot_schema_modulus PLS_INTEGER := '0';
enq: WF - contention		     1	   0	    0	 1.35ms      0.0     .0
gc cr multi block mixed 	     1	   0	    0	 1.32ms      0.0     .0
enq: TA - contention		     2	   0	    0  584.00us      0.0     .0
PX Idle Wait			   330	   0   41,313  125.19 s      0.0
v_do_hotspot   VARCHAR(7) := 'FALSE';
rdbms ipc message		66,966	  19   15,583  232.69ms      4.2
Space Manager: slave idle	 2,687	   0   10,137 3772.76ms      0.2
class slave wait		 7,953	  78	8,184 1029.08ms      0.5
wait for unread message on	   967	 100	1,893 1957.18ms      0.1
v_hotspot_mb  NUMBER := '8';
LMS CR slave timer	       188,709	   0	1,889	10.01ms     11.8
gcs yield cpu			65,972	 100	1,877	28.46ms      4.1
gcs remote message	     3,136,276	   0	1,288  410.76us    195.9
pmon timer			   420	 100	1,260 2999.92ms      0.0
v_hotspot_offset_mb NUMBER := '16';
GCR sleep			 4,197	   0	1,260  300.20ms      0.3
ges remote message		22,473	   0	1,260	56.06ms      1.4
DIAG idle wait			 8,661	  80	1,259  145.33ms      0.5
REPL Capture/Apply: RAC AQ	    13	  92	1,231	94.66 s      0.0
v_hotspot_modulus  PLS_INTEGER := '3';
Streams AQ: qmn slave idle	    27	  30	1,180	43.70 s      0.0
LGWR worker group idle		13,735	   0	  926	67.41ms      0.9
dispatcher timer		    11	 100	  660	60.01 s      0.0
AQPC idle			    22	 100	  660	30.00 s      0.0

heartbeat redo informer 	   631	   0	  631 1000.15ms      0.0
ASM background timer		 2,193	   0	  631  287.61ms      0.1
lreg timer			   210	 100	  631 3002.54ms      0.0
PING				   618	  19	  630 1019.88ms      0.0
ASM cluster membership cha	   360	  88	  630 1750.40ms      0.0
v_sleep_modulus PLS_INTEGER := '0';
OFS idle			   210	 100	  630 3000.02ms      0.0
pman timer			   210	 100	  630 2999.71ms      0.0
SCM slave idle			 6,333	   0	  628	99.22ms      0.4

v_sleep_min NUMBER := '.1';
Background Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

v_sleep_max NUMBER := '.5';
						Total
				       %Time	 Wait		   Waits   % bg
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
Event				 Waits -outs Time (s)  Avg wait     /txn   time
v_update_only_workload BOOLEAN := FALSE;
-------------------------- ----------- ----- -------- --------- -------- ------
Streams AQ: waiting for ti	     2	 100	  628  314.00 s      0.0
v_do_update BOOLEAN := FALSE;
Streams AQ: qmn coordinato	    48	   0	  616	12.83 s      0.0
PX Deq Credit: send blkd	 1,949	   0	  611  313.72ms      0.1
Data Guard: Gap Manager 	    10	   0	  600	60.00 s      0.0
v_do_hot_schema BOOLEAN := FALSE;
smon timer			     2	 100	  600  300.00 s      0.0
Data Guard: Timer		     1	   0	  600  600.00 s      0.0
jobq slave wait 		   281	  98	  139  496.11ms      0.0
v_stop_immediate BOOLEAN := FALSE;
Streams AQ: load balancer	     3	 100	   75	25.00 s      0.0
PX Deq: Parse Reply		   187	   0	    3	15.74ms      0.0
PX Deq: Execute Reply		 1,142	   0	    1	 1.06ms      0.1
v_sharing_schema BOOLEAN := FALSE;
PX Deq Credit: need buffer	     4	   0	    0	14.60ms      0.0
SQL*Net message from clien	    68	   0	    0  326.99us      0.0
v_seed VARCHAR2(128);
RMA: IPC0 completion sync	   682	   0	    0	18.48us      0.0
			  ------------------------------------------------------

v_home_schema_str VARCHAR2(80);

Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_scratch VARCHAR2(200) ;
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;

   value of null is truly 0
-> Ordered by Event (idle events last)

						 % of Total Waits
v_cpu_pct NUMBER(6, 3);
				 -----------------------------------------------
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
v_my_serial NUMBER(16);
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ Background Master: sla      1			       100.0
AQ: RAC AQ Network	    6246	  .0  90.1   6.2   2.7	  .8	.1    .1

ASM IO for non-blocking p  87.8K    .2	70.8  18.6   5.1   2.8	 1.7	.5    .2
ASM file metadata operati   2955  26.8	 1.0  31.2  13.7   3.8	 7.7   4.6  11.2
AWR Flush		       2 100.0
BEGIN
CGS wait for IPC msg	    7503	14.4  76.6   5.1   2.8	  .8	.2    .1
CSS initialization	      12	25.0  25.0			    50.0
CSS operation: action	      14	 7.1				    92.9

CSS operation: data query     18				      22.2  77.8
CSS operation: data updat     21					   100.0
CSS operation: query	      36  72.2	11.1				    16.7
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
DFS lock handle 	     212				  .5  46.2  53.3
DLM cross inst call compl    489	  .8   3.3    .4	  .4   4.7  90.4
Disk file Mirror Read	     887			    .8	71.4  18.3   9.6
EXECUTE IMMEDIATE v_home_schema_str;
Disk file operations I/O     543    .9	 9.8  10.7  13.4   6.6	40.9  15.5   2.2
GCR CSS group query	      18	83.3  16.7
GCR CSS group update	      19	94.7   5.3

IMR slave acknowledgement   1875	12.3  13.6   3.3  21.8	14.2  27.7   7.0
IPC group service call	     522   4.6	 4.0  20.7  41.4  24.7	 3.8	.6    .2
IPC send completion sync    1033	      57.4   1.8   1.6	 4.3   8.9  25.9

KJC: Wait for msg sends t   3641	31.3  15.2  12.2  13.6	 7.6   9.2  10.9
KSV master wait 	    1108	13.4  21.5   5.3   2.4	24.9   3.2  29.2
LGWR all worker groups	      60					   100.0
IF ( v_hot_schema_modulus != 0 ) THEN
LGWR any worker group	    2787	  .2	      .1    .7	 1.0   2.4  95.6
LGWR wait for redo copy       16	 6.3   6.3	  31.3	18.8  18.8  18.8
LGWR worker group orderin   2593    .4	  .7	.5   1.5   3.2	 2.0   2.5  89.2
	v_do_hot_schema := TRUE;
PGA memory operation	    1898  26.8	55.4   9.6   2.4   1.6	 2.8   1.2    .2
PX Deq: Join ACK	     319   6.6	  .9	      .6   4.4	 3.4   4.1  79.9
PX Deq: Signal ACK EXT	     319   4.4	 1.6  39.5   4.7  14.4	 9.7   6.6  19.1
END IF;
PX Deq: Slave Session Sta    643   7.6	15.2   5.0   3.1  11.7	14.9  12.3  30.2
PX Deq: reap credit	   49.1K	 6.4  85.3   4.9   2.3	  .7	.2    .1
PX qref latch		      62	69.4  25.8	   4.8

SQL*Net break/reset to cl    124  41.1	 6.5	     1.6  41.9	 8.1	      .8
SQL*Net message to client    330  94.5	 3.6	.3   1.2    .3
Sync ASM rebalance	      72	37.5   2.8   2.8   1.4	 4.2   5.6  45.8
IF ( v_sleep_modulus != 0 )	  THEN
asynch descriptor resize      83  72.3	21.7   2.4   2.4   1.2
control file parallel wri    290					   100.0
control file sequential r   3840	15.1   6.4   1.1   2.7	46.8  20.8   7.1
	v_do_sleeps := TRUE;
cursor: pin S wait on X        4					   100.0
db file async I/O submit   26.5K  94.1	 3.1	.9   1.1    .5	  .2	.1    .0
END IF;
db file parallel read	    132K				  .0   1.6  98.4
db file parallel write	   93.4K	  .1	.5   4.9   5.0	 7.4  10.7  71.4
db file scattered read	   96.2K			    .0	 1.4   1.3  97.3

db file sequential read     1.6M			    .0	  .4   8.4  91.3
direct path read	      22	 9.1   4.5   9.1  18.2	22.7   4.5  31.8
direct path write	      19					   100.0
IF ( v_max_loop_iterations &gt; 0 )  THEN
direct path write temp	      66					   100.0
enq: CF - contention	      50				 2.0   2.0  96.0
enq: CR - block range reu     11					   100.0
	v_loop_control := TRUE ;
enq: DW - contention	       5					   100.0
enq: FB - contention	       4					   100.0
enq: HW - contention	       9					   100.0
END IF;
enq: JS - job run lock -       2					   100.0
enq: PS - contention	     317	  .3	      .3   5.7	11.0   8.5  74.1
enq: PW - flush prewarm b      1					   100.0

enq: RA - RT ADDM flood c      2					   100.0
enq: RO - fast object reu    284				      14.8  85.2
enq: SM -  contention	       2				50.0	    50.0
enq: TA - contention	       2					   100.0
IF ( v_update_pct = 0 ) 	  THEN
enq: TD - KTF dump entrie      1					   100.0

Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	v_select_only_workload := TRUE;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
END IF;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)


						 % of Total Waits
				 -----------------------------------------------
			   Total
IF ( v_update_pct = 100 )	  THEN
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: TM - contention	      85				       7.1  92.9
	v_update_only_workload := TRUE;
enq: TO - contention	      53				       9.4  90.6
enq: TQ - TM contention        8					   100.0
enq: TT - contention	       8				      25.0  75.0
enq: TX - contention	       2					   100.0
END IF;
enq: TX - index contentio      2					   100.0
enq: WF - contention	      14				      28.6  71.4
enq: WT - contention	       5				      20.0  80.0

enq: XL - fault extent ma      1					   100.0
gc buffer busy release	       2					   100.0
gc cr block 2-way	    1070		      .1    .1	  .3  36.7  62.8
IF ( v_scan_query_pct = 0 ) 	THEN
gc cr block busy	      56					   100.0
gc cr block congested	      25					   100.0
gc cr block lost	      11					   100.0
gc cr disk read 	      87				       2.3  97.7
	v_random_workload_only := TRUE;
gc cr grant 2-way	    5213		      .0    .1	  .9  21.3  77.6
gc cr grant busy	  188.2K	  .0	.0    .0    .0	  .0   5.0  94.9
gc cr grant congested	     219					   100.0
END IF;
gc cr multi block grant   217.7K		.0    .0    .0	  .0   1.6  98.4
gc cr multi block mixed      565				       2.3  97.7
gc cr multi block request      7					   100.0

gc current block 2-way	      26				      19.2  80.8
gc current block busy	     467		      .2	  .2  19.3  80.3
IF ( v_scan_query_pct = 100 ) 	THEN
gc current block congeste     16					   100.0
gc current block lost	      48					   100.0
gc current grant 2-way	   61.5K		      .0    .0	  .2   4.8  95.0
	v_scan_workload_only := TRUE;
gc current grant busy	  544.3K	  .0	.0    .0    .0	  .0   4.6  95.3
gc current grant congeste   4249					   100.0
gc current grant read-mos  58.1K		.0	    .0	  .0	.2  99.7
END IF;
gc current multi block re   9641			    .0	  .0	.1  99.8
gc current retry	       1					   100.0
gc current split	       1				     100.0
gc index operation	       1					   100.0

gc quiesce		       7			  71.4	28.6
gc remaster		       1					   100.0
gcs drm freeze in enter s      2					   100.0
v_seconds_to_run := v_seconds_to_run * 100 ;
gcs log flush sync	     618	 4.5   3.1  15.2  21.7	19.6  16.3  19.6
gcs remastering wait for       7			  14.3	28.6	    57.1
ges enter server mode	    1687  97.2	  .7	.5    .9    .5	  .2

ges inquiry response	      67				      31.3  68.7
ges ipc enter server mode    322  91.3	 6.5	.6   1.2    .3
ges lms sync during dynam      5					   100.0
ges resource directory to     11  90.9	 9.1
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
kjctssqmg: quick message      49	12.2  16.3   4.1   4.1	12.2  16.3  34.7
ksxr poll remote instance   1462	  .1  89.5   5.8   3.4	 1.0	.1    .1
latch free		    1420	11.3   2.5   4.7  25.4	33.7  15.0   7.3

latch: MGA heap latch	       1       100.0
latch: cache buffers chai     40	25.0   5.0	  17.5	20.0  12.5  20.0
latch: cache buffers lru     222	20.7   3.6   5.4  18.0	20.3  18.0  14.0
latch: call allocation	      13	53.8  15.4  15.4   7.7		     7.7
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
latch: checkpoint queue l      4		    25.0  25.0	50.0
latch: enqueue hash chain      2			  50.0	50.0
latch: gc element	     311	 5.5   2.3   2.6  12.5	16.1  27.0  34.1
-- DBMS_RANDOM.seed (val =&gt; v_seed);
latch: gcs resource hash     819	18.3   3.1   7.1  22.6	20.5  12.0  16.5
latch: ges resource hash       3			  33.3	      66.7
latch: messages 	      12	25.0	    16.7   8.3	16.7  33.3

latch: object queue heade     21	 4.8		   9.5	28.6  23.8  33.3
latch: redo allocation	      78	21.8   6.4   9.0  30.8	12.8   9.0  10.3
latch: redo writing	      14	 7.1	    14.3  14.3	 7.1  28.6  28.6
v_begin_time := DBMS_UTILITY.GET_TIME();
latch: shared pool	       6	16.7	    16.7  33.3	16.7  16.7

Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_now := v_begin_time ;
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
v_brick_wall := v_now + v_seconds_to_run ;
-> Ordered by Event (idle events last)

						 % of Total Waits
				 -----------------------------------------------
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----

libcache interrupt action   3471  96.7	 1.5	.3    .8    .3	  .1	.1    .0
library cache lock	     180				      12.2  87.8
library cache pin	     177				      18.1  81.9
library cache: mutex X	       1					   100.0
----------------------------------------------------------------------------------------------------------------------
lock deadlock retry	      48	 2.1  83.3   6.3   6.3	 2.1
log file parallel write    15.5K					   100.0
log file sequential read     468	       2.4  28.6   2.1	10.9  14.3  41.7
-- The following WHILE loop is the master work loop control
log file sync		      50			   2.0		    98.0
name-service call wait	       6					   100.0
oracle thread bootstrap       51					   100.0
os thread creation	      51					   100.0
----------------------------------------------------------------------------------------------------------------------
read by other session	       1					   100.0
reliable message	     163					   100.0
row cache lock		      29					   100.0
transaction		       1			       100.0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
undo_retention publish re      2  50.0	50.0
AQPC idle		      21					   100.0
ASM background timer	    2185				15.2   6.4  78.4

ASM cluster membership ch    357					   100.0
DIAG idle wait		    8588		      .2    .6	  .4	.5  98.2
Data Guard: Gap Manager       10					   100.0
Data Guard: Timer	       1					   100.0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
GCR sleep		    4163					   100.0
LGWR worker group idle	   13.5K   1.0	 1.0	.4   1.9   2.2	 1.4   1.0  91.2
LMS CR slave timer	  187.1K					   100.0
OFS idle		     208					   100.0
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
PING			     618	       1.0  17.3  16.7	 9.5   9.2  46.3
PX Deq Credit: need buffe     59   1.7		     1.7   1.7	16.9  22.0  55.9
PX Deq Credit: send blkd    2290    .1	  .2	.5    .1   1.9	 3.0   6.0  88.2
PX Deq: Execute Reply	    1142	39.2   4.5   8.8  10.4	 5.5   5.5  26.0
PX Deq: Execution Msg	     576		.5	    .2	  .7  11.1  87.5
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
PX Deq: Msg Fragment	     501  12.8	 2.2   4.4   5.4   2.8	 1.6  14.4  56.5
PX Deq: Parse Reply	     187	 8.6   1.6   1.1   1.6	 1.6   4.8  80.7
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
PX Deque wait		    2850	  .0   1.8   2.2  12.2	38.7   7.5  37.7
PX Idle Wait		     324		.9    .3		    98.8
REPL Capture/Apply: RAC A     12					   100.0
RMA: IPC0 completion sync    678	48.2  46.6   3.5   1.6
			DBMS_LOCK.SLEEP(v_num_tmp);
SCM slave idle		    6282					.1  99.9
SQL*Net message from clie    331			    .9	30.2  38.7  30.2
Space Manager: slave idle   2687	  .8	.2    .4    .7	  .2	.0  97.6
		END IF;
Streams AQ: load balancer      3					   100.0
Streams AQ: qmn coordinat     48   8.3	 4.2		   6.3	29.2   6.3  45.8
Streams AQ: qmn slave idl     34					   100.0
Streams AQ: waiting for t      2					   100.0
	END IF;
class slave wait	    7889    .0	 4.0	.6   1.8   2.5	 1.0	.3  89.9
dispatcher timer	      11					   100.0
gcs remote message	    3.1M	 1.5   3.0  16.9  19.5	19.6  19.2  20.4

gcs yield cpu		   65.5K	 4.0	.2    .1    .1	  .0	.1  95.6
ges remote message	   22.2K	  .5	.3    .3    .8	 1.9   4.2  92.0
heartbeat monitor sleep        2 100.0
heartbeat redo informer      625					   100.0
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
jobq slave wait 	     281					   100.0
lreg timer		     208					   100.0
pman timer		     209					   100.0
pmon timer		     417					   100.0
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
rdbms ipc message	     66K    .0	16.0   1.1   2.3   3.3	 2.2   2.6  72.4
smon timer		       2					   100.0
wait for unread message o    959					   100.0
watchdog main loop	    1044					   100.0
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			  ------------------------------------------------------


			v_sharing_schema := TRUE ;
Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
		ELSE
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
			IF ( v_sharing_schema = TRUE ) THEN

						 % of Total Waits
				 -----------------------------------------------
			   Waits
				EXECUTE IMMEDIATE v_home_schema_str;
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    6016			    .0	90.1   6.2   3.7
				v_sharing_schema := FALSE;
ASM IO for non-blocking p  83.1K		      .2  70.8	18.6   5.1   5.3
ASM file metadata operati   2149		.2  26.6   1.0	31.2  13.7  27.3
AWR Flush		       2		   100.0
			END IF;
CGS wait for IPC msg	    7212			  14.4	76.6   5.1   3.9
CSS initialization	       6			  25.0	25.0	    50.0
CSS operation: action	       1			   7.1		    92.9
CSS operation: query	      30		    72.2  11.1		    16.7
		END IF;
DLM cross inst call compl     22			    .8	 3.3	.4  95.5
Disk file operations I/O     189		      .9   9.8	10.7  13.4  65.2
GCR CSS group query	      18			  83.3	16.7
GCR CSS group update	      19			  94.7	 5.3
	END IF;
IMR slave acknowledgement    548			  12.3	13.6   3.3  70.8
IPC group service call	     369		     4.6   4.0	20.7  41.4  29.3
IPC send completion sync     612				57.4   1.8  40.8

KJC: Wait for msg sends t   2137			  31.3	15.2  12.2  41.3
KSV master wait 	     446			  13.4	21.5   5.3  59.7
LGWR any worker group	       8			    .2		.1  99.7
LGWR wait for redo copy        2			   6.3	 6.3	    87.5
	-- Choose the random block. The v_do_hotspot handler that follows can override.
LGWR worker group orderin     81		      .4    .7	  .5   1.5  96.9
PGA memory operation	    1788		    26.8  55.4	 9.6   2.4   5.8
PX Deq: Join ACK	      26		     6.6    .9		.6  91.8
PX Deq: Signal ACK EXT	     160		     4.4   1.6	39.5   4.7  49.8
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
PX Deq: Slave Session Sta    199		     7.6  15.2	 5.0   3.1  69.1
PX Deq: reap credit	   47.5K			   6.4	85.3   4.9   3.4
PX qref latch		      59			  69.4	25.8	     4.8
SQL*Net break/reset to cl     61		    41.1   6.5	       1.6  50.8

SQL*Net message to client    329		.3  94.2   3.6	  .3   1.2    .3
Sync ASM rebalance	      31			  37.5	 2.8   2.8  56.9
asynch descriptor resize      82		    72.3  21.7	 2.4   2.4   1.2
control file sequential r    869			  15.1	 6.4   1.1  77.4
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
db file async I/O submit   26.3K		.0  94.1   3.1	  .9   1.1    .8
db file parallel write	    5044			    .1	  .5   4.9  94.6
direct path read	       5			   9.1	 4.5   9.1  77.3
enq: PS - contention	       2			    .3		.3  99.4
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
gc cr block 2-way	       1					.1  99.9
gc cr grant 2-way	       2					.0 100.0
gc cr grant busy	      20			    .0	  .0	.0 100.0
gc cr multi block grant        4				  .0	.0 100.0
gc current block busy	       1					.2  99.8
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
gc current grant 2-way	      11					.0 100.0
gc current grant busy	      49			    .0	  .0	.0 100.0
gc current grant read-mos      2				  .0	   100.0
gcs log flush sync	     141			   4.5	 3.1  15.2  77.2
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
ges enter server mode	    1675	       1.1  96.0    .7	  .5	.9    .7
ges ipc enter server mode    321		    91.3   6.5	  .6   1.2    .3
ges resource directory to     11	       9.1  81.8   9.1
	END IF;
kjctssqmg: quick message      16			  12.2	16.3   4.1  67.3
ksxr poll remote instance   1395			    .1	89.5   5.8   4.6
latch free		     264			  11.3	 2.5   4.7  81.4
latch: MGA heap latch	       1			 100.0

latch: cache buffers chai     12			  25.0	 5.0	    70.0
latch: cache buffers lru      66			  20.7	 3.6   5.4  70.3
latch: call allocation	      11			  53.8	15.4  15.4  15.4
latch: checkpoint queue l      1				      25.0  75.0
----------------------------------------------------------------------------------------------------------------------
latch: gc element	      32			   5.5	 2.3   2.6  89.7
latch: gcs resource hash     233			  18.3	 3.1   7.1  71.6
latch: messages 	       5			  25.0	      16.7  58.3
latch: object queue heade      1			   4.8		    95.2
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
latch: redo allocation	      29			  21.8	 6.4   9.0  62.8

Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
----------------------------------------------------------------------------------------------------------------------
   us is microseconds
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0

-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
	IF  ( v_select_only_workload = TRUE ) THEN
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
latch: redo writing	       3			   7.1	      14.3  78.6
		-- handle case where user specified zero pct updates (a SELECT-only workload)
latch: shared pool	       2			  16.7	      16.7  66.7
libcache interrupt action   3452		.7  96.0   1.5	  .3	.8    .5
lock deadlock retry	      44			   2.1	83.3   6.3   8.3
log file sequential read     145				 2.4  28.6  69.0
		v_do_update := FALSE;
undo_retention publish re      2		    50.0  50.0
			  ------------------------------------------------------


Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		v_update_quota := TRUE ;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
	ELSE
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
		IF ( v_update_only_workload = TRUE ) THEN

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1ms
			-- handle case where user specified 100% updates
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	       8  99.9	  .1	.0
ASM IO for non-blocking p    162  99.8	  .1	.0    .0    .0
			v_do_update := TRUE;
ASM file metadata operati    326  88.8	  .4   1.0   3.4   5.5	  .4	.3    .2
CGS wait for IPC msg	       5  99.9	  .1	.0
CSS initialization	       6  50.0			   8.3	33.3   8.3
			v_update_quota := FALSE;
CSS operation: action	      13   7.1	50.0  42.9
CSS operation: data query     14  22.2	27.8  38.9  11.1
CSS operation: data updat     21	42.9  47.6   9.5
CSS operation: query	       6  83.3	      16.7
		ELSE
DFS lock handle 	     113  46.7	36.3  13.2   3.8
DLM cross inst call compl    438   9.6	50.3  28.8   7.4   2.9	  .2	      .8
Disk file Mirror Read	      85  90.4	 5.9   2.5   1.1    .1
Disk file operations I/O      11  97.8	 1.8	.2			      .2
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
IMR slave acknowledgement    132  93.0	 4.7   1.7    .6    .1
IPC group service call	       1  99.8	  .2
IPC send completion sync     266  74.1	11.3   8.4   4.9    .9	  .2	      .2
KJC: Wait for msg sends t    241  89.1	 4.5   1.6    .4    .1	  .1	     4.3
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
KSV master wait 	     320  70.8	  .5   2.1   9.5  15.0	 1.2	.7    .3
LGWR all worker groups	      51		     1.7   8.3	50.0  25.0  15.0
LGWR any worker group	    2526   4.4	 4.4   7.5  22.8  21.2	22.4  12.3   5.0
LGWR wait for redo copy        3  81.3	      18.8
			IF ( v_update_quota = FALSE ) THEN
LGWR worker group orderin   2280  10.8	 2.9   6.0  46.0  19.7	 7.9   5.4   1.2
PGA memory operation	       3  99.8	  .1	.1
PX Deq: Join ACK	     249  20.1	43.9   6.3  14.7  10.3	 1.9	.9   1.9
PX Deq: Signal ACK EXT	      30  80.9	 4.7	.9    .6    .3	  .3   2.5   9.7
				-- Handle case where user has set UPDATE_PCT to a valid value
PX Deq: Slave Session Sta    164  69.8	12.6   8.9   2.2    .5	  .2   1.2   4.7
PX Deq: reap credit	      66  99.9	  .1	.0    .0    .0
SQL*Net break/reset to cl      1  99.2		.8
Sync ASM rebalance	      17  54.2	12.5			 8.3   2.8  22.2
				--
control file parallel wri    262		    16.6  52.1	17.2   4.5   9.7
control file sequential r    271  92.9	 5.4   1.4    .1    .1	  .0
db file async I/O submit      11 100.0	  .0	.0
db file parallel read	  112.9K   1.6	 1.3	.6  15.4  43.2	10.2  14.8  12.9
				-- We are doing updates during this run and quota has not been met yet
db file parallel write	   64.7K  28.6	14.8  16.3  22.2  10.8	 3.8   1.5   2.1
db file scattered read	   93.2K   2.7	 1.5	.2  46.7  46.8	  .8	.9    .4
db file sequential read     1.5M   8.7	 1.8	.5  74.1  12.7	  .7   1.0    .4
direct path read	       7  68.2	       4.5  18.2   4.5	 4.5
				-- We still vacillate until update quota has been met
direct path write	      17	10.5	    21.1  26.3	26.3   5.3  10.5
direct path write temp	      61		    47.0  36.4	 7.6   1.5   7.6
enq: CF - contention	      48   4.0	34.0  34.0  20.0   4.0	 4.0

enq: CR - block range reu      8	      27.3  36.4   9.1		    27.3
enq: DW - contention	       5	20.0  60.0  20.0
enq: FB - contention	       4	50.0	    25.0  25.0
enq: HW - contention	       9	55.6  44.4
enq: JS - job run lock -       2	     100.0
				IF ( MOD(v_random_block,  2) = 0 ) THEN
enq: PS - contention	     233  25.9	27.4  25.6  16.7   3.2	  .6	      .6
enq: PW - flush prewarm b      1	     100.0
enq: RA - RT ADDM flood c      2	50.0  50.0
enq: RO - fast object reu    229  14.8	28.9  22.2  13.4   8.1	 4.6   3.5   4.6
					v_do_update := TRUE;
enq: SM -  contention	       1  50.0	50.0
enq: TA - contention	       2       100.0
enq: TD - KTF dump entrie      1       100.0
enq: TM - contention	      75   7.1	25.9  30.6  18.8   9.4	 3.5	     4.7
				ELSE
enq: TO - contention	      48   9.4	35.8  35.8  18.9
enq: TQ - TM contention        8	37.5  25.0  12.5  25.0
enq: TT - contention	       6  25.0	      50.0  12.5  12.5
					v_do_update := FALSE;
enq: TX - contention	       2		    50.0  50.0
enq: TX - index contentio      2       100.0
enq: WF - contention	      10  28.6	14.3  28.6  21.4	 7.1
enq: WT - contention	       4  20.0	40.0  20.0  20.0

				END IF;
Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
			ELSE
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
				-- UPDATE quota has been filled,  force drain some SELECTs
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
				v_do_update := FALSE;
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
			END IF;
gc buffer busy release	       2				     100.0
gc cr block 2-way	     665  37.2	27.7  19.9  11.6   2.8	  .2	      .7
gc cr block busy	      46		     7.1  16.1	41.1  17.9  17.9
gc cr block congested	      25	       4.0  52.0  44.0
		END IF;
gc cr disk read 	      82   2.3	21.8  21.8  24.1  23.0	 3.4	     3.4
gc cr grant 2-way	    3963  22.4	25.1  27.9  18.0   4.4	  .6	.0   1.6
gc cr grant busy	  174.3K   5.1	18.4  26.1  29.4  15.3	 3.0	.4   2.3
gc cr grant congested	     215	       7.8  57.5  31.5	 1.4	     1.8
	END IF;
gc cr multi block grant   205.3K   1.6	13.6  17.6  30.9  25.2	 6.2	.7   4.1
gc cr multi block mixed      535   2.3	15.2  28.7  31.2  16.5	 2.5	.7   3.0
gc current block 2-way	      21  19.2	38.5  19.2  19.2   3.8

gc current block busy	     362  19.7	25.9  21.2  19.1   7.3	 2.8   1.3   2.8
----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
gc current block congeste     16	      12.5  50.0  37.5

gc current grant 2-way	   56.3K   5.0	 7.2  15.1  27.6  27.4	12.1   2.0   3.5
gc current grant busy	    506K   4.7	18.4  26.6  29.3  15.1	 3.2	.4   2.3
gc current grant congeste   3875	       1.2  12.4  36.1	34.1   7.5   8.8
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
gc current grant read-mos  56.6K    .3	 9.4  26.8  33.2  20.6	 6.3   1.1   2.4
gc current multi block re   9369    .2	 6.0  19.3  35.2  27.5	 8.3	.9   2.7
gcs log flush sync	     121  80.4	11.0   4.4   1.9   1.8	  .2	.3
		ELSE
gcs remastering wait for       1  42.9	      14.3			    42.9
ges inquiry response	      46  31.3	35.8  23.9   6.0   1.5	 1.5
ges lms sync during dynam      3		    40.0	20.0	    40.0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
kjctssqmg: quick message      17  65.3	30.6   2.0   2.0
ksxr poll remote instance      2  99.9		.1    .1
latch free		     102  92.7	 4.5   2.4    .3		      .1

latch: cache buffers chai      8  80.0	10.0   7.5	   2.5
latch: cache buffers lru      31  86.0	 9.5   3.2   1.4
latch: call allocation	       1  92.3	 7.7
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
latch: gc element	     106  65.9	20.9  10.0   2.6    .6
latch: gcs resource hash     135  83.5	10.0   4.6   1.3    .4	  .1
latch: object queue heade      7  66.7	14.3   9.5   9.5

latch: redo allocation	       8  89.7	 7.7   2.6
latch: redo writing	       4  71.4	28.6
libcache interrupt action      1 100.0		.0
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
library cache lock	     154  12.2	42.2  28.3  10.6   3.9	  .6	     2.2
library cache pin	     140  18.1	39.5  25.4  10.7   3.4		     2.8
library cache: mutex X	       1			       100.0
				v_scan_query_quota := TRUE;
log file parallel write    13.3K		     1.7  15.5	45.1  23.9  13.8
log file sequential read     195  58.3	 9.6  14.1  16.7    .9	  .4
log file sync		      47   2.0		     8.0  32.0	48.0   6.0   4.0
			END IF;
name-service call wait	       5	16.7  33.3  33.3		    16.7
oracle thread bootstrap       51				     100.0
os thread creation	      51	      88.2  11.8
		END IF;
read by other session	       1	     100.0
reliable message	     160	20.2  33.7  20.2  17.8	 4.3   1.8   1.8
row cache lock		      28	44.8  17.2  17.2  17.2		     3.4

			  ------------------------------------------------------


Wait Event Histogram (up to 2 sec)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   ms is milliseconds
	ELSE
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
		--
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
		-- Do an UPDATE statement

						 % of Total Waits
				 -----------------------------------------------
		--
			   Waits
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s

------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
ASM file metadata operati      5  99.8	  .1	.0
DLM cross inst call compl      4  99.2		.6    .2
Disk file operations I/O       1  99.8	  .2
		v_my_serial := v_my_serial + v_loop_cnt ;
IPC send completion sync       2  99.8				  .2
KJC: Wait for msg sends t    157  95.7			   4.3	  .1
KSV master wait 	       3  99.7	  .2	.1

LGWR all worker groups	       9  85.0	 6.7   5.0   1.7   1.7
LGWR any worker group	     138  95.0	 2.2	.6   1.7    .4	  .0
LGWR worker group orderin     32  98.8	  .7	.0    .3    .1
PX Deq: Join ACK	       4  98.1			    .3	  .9	      .6
PX Deq: Signal ACK EXT	      30  90.3	 3.8   3.1    .3	  .9   1.3    .3
PX Deq: Slave Session Sta     29  95.3	 1.7   1.4    .2	  .6	.6    .2
Sync ASM rebalance	      16  77.8	 6.9  13.9   1.4
control file parallel wri     28  90.3	 1.7   1.0   5.2   1.7
cursor: pin S wait on X        4	50.0  50.0
db file parallel read	     17K  87.1	12.7	.1    .0    .0
db file parallel write	    1983  97.9	  .4	.4   1.2    .0	  .0
db file scattered read	     426  99.6	  .4	.0
db file sequential read     6824  99.6	  .4	.0    .0    .0
direct path write	       2  89.5		     5.3   5.3
direct path write temp	       5  92.4	 4.5	     1.5	 1.5
enq: CR - block range reu      3  72.7		     9.1  18.2
enq: PS - contention	       2  99.4		      .3    .3
enq: RO - fast object reu     13  95.4	       1.4   1.1   2.1
enq: TM - contention	       4  95.3		     2.4   1.2	 1.2
enq: XL - fault extent ma      1       100.0
gc cr block 2-way	       7  99.3				  .7
gc cr block busy	      10  82.1	16.1	     1.8
gc cr block lost	      11			  36.4	63.6
gc cr disk read 	       3  96.6				 3.4
gc cr grant 2-way	      83  98.4				 1.6	.0
gc cr grant busy	    4333  97.7	  .1	.3    .0    .0	 1.7	.1    .0
gc cr grant congested	       4  98.2				 1.8
gc cr multi block grant     8910  95.9	  .1	.6    .0    .0	 3.0	.4    .0
gc cr multi block mixed       17  97.0		.5		 2.5
gc cr multi block request      7				71.4  28.6
gc current block busy	      13  97.2	  .4			 2.1	.2
gc current block lost	      48			  16.7	83.3
gc current grant 2-way	    2129  96.5	  .4   1.3    .1    .0	 1.6	.2    .0
gc current grant busy	   12.6K  97.7	  .1	.4    .0    .0	 1.7	.1    .0
gc current grant congeste    373  91.2	 1.1   5.4    .2	 1.6	.5    .0
gc current grant read-mos   1390  97.6	  .4   2.0    .0    .0	  .0	.0    .0
gc current multi block re    255  97.3	  .1	.5		 1.9	.2    .0
gc current retry	       1			       100.0
gc index operation	       1       100.0
gc remaster		       1				     100.0
gcs drm freeze in enter s      2			 100.0
gcs remastering wait for       3  57.1	      42.9
ges lms sync during dynam      2  60.0	      20.0  20.0
latch free		       2  99.9	  .1	.1
library cache lock	       3  97.8			   1.7		      .6
library cache pin	       5  97.2	       1.1	   1.7
log file parallel write     2137  86.2	12.2	.7    .6    .2	  .0
log file sync		       2  96.0	 2.0   2.0
name-service call wait	       1  83.3	16.7
reliable message	       2  98.2	  .6	      .6		      .6
row cache lock		       1  96.6		     3.4
			  ------------------------------------------------------


Wait Event Histogram (up to 2 min)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    4s
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
PX Deq: Join ACK	       2  99.4		.6
PX Deq: Signal ACK EXT	       1  99.7		.3
PX Deq: Slave Session Sta      1  99.8		.2
gc cr grant busy	       9 100.0	  .0	.0
gc cr multi block grant       61 100.0	  .0	.0
gc current grant 2-way	       5 100.0	  .0	.0
gc current grant busy	      39 100.0	  .0	.0
gc current grant congeste      1 100.0	  .0
gc current grant read-mos      1 100.0	  .0
gc current multi block re      1 100.0		.0
library cache lock	       1  99.4	  .6
reliable message	       1  99.4	  .6
			  ------------------------------------------------------


Wait Event Histogram (up to 1 hr)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------


Service Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> ordered by DB Time

							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
---------------------------- ------------ ------------ ------------ ------------
p60sdb.example.com		   35,654	 1,079	      8,344	   8,828
SYS$BACKGROUND			    1,006	    41		717	     491
SYS$USERS				0	     0		  0	       0
p60sdbXDB				0	     0		  0	       0
			  ------------------------------------------------------

Service Wait Class Stats		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds

Service Name
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------
p60sdb.example.com
  1761995      7689	   50	      1 	0	  0	  144	      0
SYS$BACKGROUND
   186219	425	 3820	      6 	0	  0	  512	      0
SYS$USERS
       44	  0	   24	      0 	0	  0	  129	      0
			  ------------------------------------------------------

Top 10 Channel Waits			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top 10 Channel Waits by wait time

Channel
----------------------------------------------------------------
	       Total
		Wait
      Waits Time (s)  Avg Wait
----------- -------- ---------
GEN0 ksbxic channel
	 10	   0	3.36ms
kxfp control signal channel
	 93	   0	1.48ms
			  ------------------------------------------------------


Top Process Types by Wait Class 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> This table displays top process types ordered by wait class

Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi Cluster		    27,519.4
      Others (foregrounds + unclassi User I/O		     7,731.4
P     Parallel query slave	     Cluster		       552.8
P     Parallel query slave	     User I/O		       413.6
LG    Log Writer Slave		     System I/O 	       312.0
DBW0  db writer process 0	     System I/O 	       128.3
DBW3  db writer process 3	     System I/O 	       128.0
DBW1  db writer process 1	     System I/O 	       125.5
DBW2  db writer process 2	     System I/O 	       124.5
      Others (foregrounds + unclassi Other			50.2
LGWR  Redo etc. 		     Other			40.2
P     Parallel query slave	     Other			21.1
M     MMON slave class 1	     Other			20.0
LG    Log Writer Slave		     Other			16.1
SCM   DLM Statistics Collection and  Other			15.6
M     MMON slave class 1	     Cluster			15.2
MMON  Manageability Monitor Process  Cluster			 9.9
CKPT  checkpoint		     System I/O 		 7.2
M     MMON slave class 1	     User I/O			 5.7
M     MMON slave class 1	     Application		 3.4
			  ------------------------------------------------------


Top Process Types by CPU Used		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> This table displays top process types ordered by CPU time

Proces Description		      CPU Time (sec)
------ ------------------------------ --------------
       Others (foregrounds + unclassi	     1,081.6
LM     global cache service process	       992.6
P      Parallel query slave			45.5
VKTM   Virtual Keeper of TiMe process		32.0
DBW3   db writer process 3			24.2
DBW0   db writer process 0			24.1
DBW1   db writer process 1			24.0
DBW2   db writer process 2			23.8
RS*    GCS RM Slave				16.5
M      MMON slave class 1			15.5
LG     Log Writer Slave 			10.2
CR*    GCS CR Slave				 9.3
Q*     QMON MS					 4.9
LGWR   Redo etc.				 4.2
GCR    GCR Slaves (LMHB)			 4.1
SCM    DLM Statistics Collection and		 3.5
IPC0   IPC Service 0				 3.3
DIA0   diagnosibility process 0 		 2.7
O      ASM Connection Pool			 2.2
RMS0   rac management server			 2.2
			  ------------------------------------------------------


SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.6% of Total DB Time (s):	   36,877
-> Captured PL/SQL account for	 63.0% of Total DB Time (s):	      36,877

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	19,171.0	 15,455 	 1.24	52.0	2.5   23.8 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	15,290.8	 86,747 	 0.18	41.5	3.6   19.5 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

	   542.2	      1        542.17	 1.5	2.8   19.5 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   541.4	      1        541.42	 1.5	3.1   22.5 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   541.2	      1        541.23	 1.5	3.3   24.2 0raxwcmc41phu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   541.1	      1        541.15	 1.5	3.2   22.3 6uftfsj7stway
Module: SQL*Plus
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		--

	   541.0	      1        541.00	 1.5	2.8   20.9 181vungw6p8xd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
		-- Increment count of UPDATES and set UPDATE quota flag if needed
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
	   541.0	      1        540.98	 1.5	3.3   22.1 2kagcss8t5vv4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_updates_cnt := v_updates_cnt + 1;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.9	      1        540.93	 1.5	3.0   22.2 cpwuynd81c18b
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN

	   540.9	      1        540.92	 1.5	3.1   21.5 3zfwa5fbzfumr
Module: SQL*Plus

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
			v_update_quota := TRUE;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
		END IF;
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.6% of Total DB Time (s):	   36,877
	END IF ;
-> Captured PL/SQL account for	 63.0% of Total DB Time (s):	      36,877

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
----------------------------------------------------------------------------------------------------------------------
---------------- -------------- ------------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.8	      1        540.76	 1.5	2.8   19.5 cn5r6fnjj1b3d
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   540.7	      1        540.73	 1.5	3.0   21.7 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   540.6	      1        540.58	 1.5	3.1   21.5 249992tdjj8pb
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.5	      1        540.52	 1.5	2.9   20.2 6kvyh9k0yg876
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
		-- so reset flags and counters before continuing
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
	   540.5	      1        540.50	 1.5	2.9   19.0 1y2qx24pugffb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_update_quota := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.5	      1        540.47	 1.5	2.9   20.5 bbp00h54hyg9h
Module: SQL*Plus
		v_updates_cnt := 0;
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		v_selects_cnt := 0;

	   540.3	      1        540.31	 1.5	3.0   21.0 bra280pu141z8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   540.3	      1        540.31	 1.5	3.1   21.9 fhgqn1rt3jmh3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
		-- so reset flags and counters
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.6% of Total DB Time (s):	   36,877
-> Captured PL/SQL account for	 63.0% of Total DB Time (s):	      36,877

		v_scan_query_quota := FALSE;
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------

		v_scan_queries_cnt := 0;
	   540.3	      1        540.30	 1.5	3.2   26.5 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_random_access_queries_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.2	      1        540.24	 1.5	3.2   22.7 1fhabrgp6k1fh
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   540.2	      1        540.19	 1.5	2.8   18.5 azs4x4stk5azf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_loop_cnt := v_loop_cnt + 1 ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.2	      1        540.16	 1.5	3.2   23.8 4ws27v7ay8j6x
Module: SQL*Plus
	v_now := DBMS_UTILITY.GET_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red

o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   540.1	      1        540.12	 1.5	3.0   22.6 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.1	      1        540.07	 1.5	3.0   21.2 c886fvd0mv7mv
		-- If this is a fixed-iteration count test cycle and we've hit the number of
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- iterations then set exit flag
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.1	      1        540.07	 1.5	3.0   20.8 3q9qpxjx8mtpr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
		v_stop_immediate := TRUE ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	END IF;
	   540.1	      1        540.06	 1.5	3.1   21.3 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
END LOOP;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.1	      1        540.05	 1.5	3.0   19.9 gcfrxjr5zjhjy

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
v_end_time := v_now ;
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
v_now := DBMS_UTILITY.GET_TIME();
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.6% of Total DB Time (s):	   36,877
-> Captured PL/SQL account for	 63.0% of Total DB Time (s):	      36,877

v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.0	      1        540.01	 1.5	2.9   21.2 8g9692jjz865t
Module: SQL*Plus
v_total_time := v_end_time - v_begin_time ;
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
	   540.0	      1        540.00	 1.5	3.2   25.7 fvgh1q9dsd479
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   540.0	      1        539.98	 1.5	3.0   21.0 7a314umnzbfsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   539.8	      1        539.79	 1.5	3.2   21.4 f4rq0sufc25j7

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
END;</pre_sqltext></td></tr>
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   539.7	      1        539.75	 1.5	3.3   24.9 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td scope="row" class='awrnc'><a class="awr" name="7a314umnzbfsf"></a>7a314umnzbfsf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_default_schema_number PLS_INTEGER := '58';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
	   539.7	      1        539.67	 1.5	3.2   23.0 cwr7y46j1ajy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
v_scan_workload_only BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_random_workload_only BOOLEAN := FALSE;
	   539.7	      1        539.65	 1.5	3.1   22.1 90ujc8r1t56fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   539.6	      1        539.62	 1.5	3.2   22.0 1f3cggsgaswpw
Module: SQL*Plus
v_random_block PLS_INTEGER := 1;
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_tmp PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


v_now PLS_INTEGER;
SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
v_brick_wall PLS_INTEGER;
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.6% of Total DB Time (s):	   36,877
-> Captured PL/SQL account for	 63.0% of Total DB Time (s):	      36,877
v_begin_time PLS_INTEGER;

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
v_end_time PLS_INTEGER;
	   539.6	      1        539.56	 1.5	3.2   24.0 2pvynbz6kg2u1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
v_total_time PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_begin_cpu_tm PLS_INTEGER;
	   539.5	      1        539.54	 1.5	3.1   22.6 9hzjs0qb9fr2c
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
v_end_cpu_tm PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_total_cpu_tm PLS_INTEGER;
	   539.5	      1        539.45	 1.5	3.1   22.3 230uak9tb9gp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_do_sleeps BOOLEAN := FALSE;
	   539.4	      1        539.41	 1.5	3.3   27.3 8h5ykwqs85vbc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
v_loop_control BOOLEAN := FALSE;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_update_quota BOOLEAN := FALSE;
	   539.3	      1        539.28	 1.5	3.2   23.4 4hvtczzbgggky
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
v_select_only_workload BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_update_only_workload BOOLEAN := FALSE;
	   539.3	      1        539.28	 1.5	3.0   22.1 2s578t5qpv8b5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
v_do_update BOOLEAN := FALSE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_do_hot_schema BOOLEAN := FALSE;
	   539.3	      1        539.28	 1.5	3.2   22.6 7q910nkfm4sb4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
v_stop_immediate BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_sharing_schema BOOLEAN := FALSE;

	   538.9	      1        538.93	 1.5	3.2   26.0 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
v_seed VARCHAR2(128);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_home_schema_str VARCHAR2(80);

	   538.9	      1        538.86	 1.5	3.1   22.0 4d3r1vzskkhpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
v_scratch VARCHAR2(200) ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
v_cpu_pct NUMBER(6, 3);
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_my_serial NUMBER(16);
-> Captured SQL account for   93.6% of Total DB Time (s):	   36,877
-> Captured PL/SQL account for	 63.0% of Total DB Time (s):	      36,877

	Elapsed 		 Elapsed Time

	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
BEGIN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   538.7	      1        538.67	 1.5	3.1   21.8 g1x4b9bfdxz35
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

			  ------------------------------------------------------


EXECUTE IMMEDIATE v_home_schema_str;
SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Captured SQL account for   92.1% of Total CPU Time (s):	     1,131
-> Captured PL/SQL account for	 63.2% of Total CPU Time (s):		1,131

    CPU 		  CPU per	    Elapsed
IF ( v_hot_schema_modulus != 0 ) THEN
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
     555.5	 86,747       0.01   49.1   15,290.8	3.6   19.5 bhdvtsvjhgvrh
	v_do_hot_schema := TRUE;
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     472.9	 15,455       0.03   41.8   19,171.0	2.5   23.8 35dumc2tpr9dv
END IF;
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


      17.9	      1      17.93    1.6      541.2	3.3   24.2 0raxwcmc41phu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
IF ( v_sleep_modulus != 0 )	  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_do_sleeps := TRUE;
      17.8	      1      17.75    1.6      539.4	3.3   27.3 8h5ykwqs85vbc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
END IF;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


      17.6	      1      17.62    1.6      541.0	3.3   22.1 2kagcss8t5vv4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
IF ( v_max_loop_iterations &gt; 0 )  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_loop_control := TRUE ;
      17.5	      1      17.54    1.6      539.7	3.3   24.9 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      17.5	      1      17.49    1.5      540.2	3.2   23.8 4ws27v7ay8j6x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_update_pct = 0 ) 	  THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	v_select_only_workload := TRUE;
      17.4	      1      17.38    1.5      540.2	3.2   22.7 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      17.4	      1      17.36    1.5      539.6	3.2   24.0 2pvynbz6kg2u1
IF ( v_update_pct = 100 )	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_update_only_workload := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      17.4	      1      17.35    1.5      540.0	3.2   25.7 fvgh1q9dsd479
END IF;
Module: SQL*Plus

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL

   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
IF ( v_scan_query_pct = 0 ) 	THEN
-> Captured SQL account for   92.1% of Total CPU Time (s):	     1,131
-> Captured PL/SQL account for	 63.2% of Total CPU Time (s):		1,131

    CPU 		  CPU per	    Elapsed
	v_random_workload_only := TRUE;
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      17.3	      1      17.29    1.5      540.3	3.2   26.5 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
IF ( v_scan_query_pct = 100 ) 	THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_scan_workload_only := TRUE;
      17.3	      1      17.26    1.5      539.8	3.2   21.4 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      17.1	      1      17.15    1.5      539.3	3.2   23.4 4hvtczzbgggky
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
v_seconds_to_run := v_seconds_to_run * 100 ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      17.1	      1      17.14    1.5      539.6	3.2   22.0 1f3cggsgaswpw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      17.1	      1      17.14    1.5      538.9	3.2   26.0 bpy4xf8bfgtjp

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      17.1	      1      17.09    1.5      541.1	3.2   22.3 6uftfsj7stway
Module: SQL*Plus
-- DBMS_RANDOM.seed (val =&gt; v_seed);
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      17.1	      1      17.09    1.5      539.3	3.2   22.6 7q910nkfm4sb4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
v_begin_time := DBMS_UTILITY.GET_TIME();
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_now := v_begin_time ;
      17.1	      1      17.09    1.5      539.7	3.2   23.0 cwr7y46j1ajy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_brick_wall := v_now + v_seconds_to_run ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU

-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     1,131
-> Captured PL/SQL account for	 63.2% of Total CPU Time (s):		1,131

----------------------------------------------------------------------------------------------------------------------
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------

-- The following WHILE loop is the master work loop control
      17.0	      1      16.99    1.5      539.5	3.1   22.3 230uak9tb9gp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      17.0	      1      16.96    1.5      539.7	3.1   22.1 90ujc8r1t56fr
Module: SQL*Plus
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.9	      1      16.91    1.5      539.5	3.1   22.6 9hzjs0qb9fr2c
Module: SQL*Plus
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.9	      1      16.91    1.5      541.4	3.1   22.5 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
      16.7	      1      16.71    1.5      538.9	3.1   22.0 4d3r1vzskkhpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			DBMS_LOCK.SLEEP(v_num_tmp);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.7	      1      16.70    1.5      540.6	3.1   21.5 249992tdjj8pb
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.6	      1      16.62    1.5      540.3	3.1   21.9 fhgqn1rt3jmh3
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

      16.6	      1      16.57    1.5      540.9	3.1   21.5 3zfwa5fbzfumr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.5	      1      16.53    1.5      540.1	3.1   21.3 5nz6b4v9qbsbr
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
			v_sharing_schema := TRUE ;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
		ELSE
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     1,131
-> Captured PL/SQL account for	 63.2% of Total CPU Time (s):		1,131

    CPU 		  CPU per	    Elapsed
			IF ( v_sharing_schema = TRUE ) THEN
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				EXECUTE IMMEDIATE v_home_schema_str;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.4	      1      16.45    1.5      538.7	3.1   21.8 g1x4b9bfdxz35
Module: SQL*Plus
				v_sharing_schema := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

      16.4	      1      16.44    1.5      539.3	3.0   22.1 2s578t5qpv8b5
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      16.4	      1      16.43    1.5      540.0	3.0   21.0 7a314umnzbfsf
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	-- Choose the random block. The v_do_hotspot handler that follows can override.

      16.4	      1      16.36    1.4      540.1	3.0   22.6 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.3	      1      16.30    1.4      540.9	3.0   22.2 cpwuynd81c18b

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.2	      1      16.23    1.4      540.3	3.0   21.0 bra280pu141z8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      16.2	      1      16.19    1.4      540.1	3.0   20.8 3q9qpxjx8mtpr
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );

      16.1	      1      16.12    1.4      540.1	3.0   21.2 c886fvd0mv7mv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do



SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
----------------------------------------------------------------------------------------------------------------------
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     1,131
-> Captured PL/SQL account for	 63.2% of Total CPU Time (s):		1,131

-- The following section governs what the SQL execution will be (UPDATE or SELECT)
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
      16.1	      1      16.09    1.4      540.7	3.0   21.7 arusphb7uppr5
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

      16.0	      1      16.03    1.4      540.1	3.0   19.9 gcfrxjr5zjhjy
Module: SQL*Plus
	IF  ( v_select_only_workload = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- handle case where user specified zero pct updates (a SELECT-only workload)
      15.8	      1      15.83    1.4      540.5	2.9   20.5 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_do_update := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      15.7	      1      15.68    1.4      540.0	2.9   21.2 8g9692jjz865t
Module: SQL*Plus
		v_update_quota := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	ELSE

      15.6	      1      15.60    1.4      540.5	2.9   19.0 1y2qx24pugffb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_update_only_workload = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      15.5	      1      15.48    1.4      540.5	2.9   20.2 6kvyh9k0yg876
Module: SQL*Plus
			-- handle case where user specified 100% updates
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_do_update := TRUE;

      15.4	      1      15.39    1.4      541.0	2.8   20.9 181vungw6p8xd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_update_quota := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      15.3	      1      15.30    1.4      540.2	2.8   18.5 azs4x4stk5azf
		ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      15.1	      1      15.13    1.3      542.2	2.8   19.5 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
			IF ( v_update_quota = FALSE ) THEN
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     1,131
-> Captured PL/SQL account for	 63.2% of Total CPU Time (s):		1,131
				-- Handle case where user has set UPDATE_PCT to a valid value

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
				--
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      15.1	      1      15.12    1.3      540.8	2.8   19.5 cn5r6fnjj1b3d
				-- We are doing updates during this run and quota has not been met yet
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
				-- We still vacillate until update quota has been met
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------



SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
				IF ( MOD(v_random_block,  2) = 0 ) THEN
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   91.4% of Total User I/O Wait Time (s):	       8
-> Captured PL/SQL account for	 62.3% of Total User I/O Wait Time (s):

					v_do_update := TRUE;
  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   4,560.7	 15,455       0.30   55.2   19,171.0	2.5   23.8 35dumc2tpr9dv
				ELSE
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

   2,980.1	 86,747       0.03   36.1   15,290.8	3.6   19.5 bhdvtsvjhgvrh
					v_do_update := FALSE;
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     147.0	      1     147.01    1.8      539.4	3.3   27.3 8h5ykwqs85vbc
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
	END IF;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


     143.2	      1     143.20    1.7      540.3	3.2   26.5 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     140.3	      1     140.27    1.7      538.9	3.2   26.0 bpy4xf8bfgtjp
Module: SQL*Plus
-- The type of SQL is now determined...execute it in the following section
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
     138.6	      1     138.57    1.7      540.0	3.2   25.7 fvgh1q9dsd479
Module: SQL*Plus

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
		ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
     134.5	      1     134.52    1.6      539.7	3.3   24.9 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_scan_queries_cnt := v_scan_queries_cnt + 1;

     131.2	      1     131.21    1.6      541.2	3.3   24.2 0raxwcmc41phu
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     129.7	      1     129.68    1.6      539.6	3.2   24.0 2pvynbz6kg2u1
				v_scan_query_quota := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		END IF;
     128.4	      1     128.41    1.6      540.2	3.2   23.8 4ws27v7ay8j6x
Module: SQL*Plus


SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	ELSE
-> Captured SQL account for   91.4% of Total User I/O Wait Time (s):	       8
-> Captured PL/SQL account for	 62.3% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
		--
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
		-- Do an UPDATE statement
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
		--

     126.0	      1     126.04    1.5      539.3	3.2   23.4 4hvtczzbgggky
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_my_serial := v_my_serial + v_loop_cnt ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     124.0	      1     123.96    1.5      539.7	3.2   23.0 cwr7y46j1ajy0
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     122.4	      1     122.44    1.5      540.2	3.2   22.7 1fhabrgp6k1fh
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- Increment count of UPDATES and set UPDATE quota flag if needed
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     122.3	      1     122.25    1.5      540.1	3.0   22.6 4asnrz2aymyu8
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_updates_cnt := v_updates_cnt + 1;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     122.1	      1     122.07    1.5      539.5	3.1   22.6 9hzjs0qb9fr2c

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     122.0	      1     122.05    1.5      541.4	3.1   22.5 btxhvgkudmtmh
			v_update_quota := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
		END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	END IF ;
     121.9	      1     121.94    1.5      539.3	3.2   22.6 7q910nkfm4sb4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
     120.9	      1     120.89    1.5      541.1	3.2   22.3 6uftfsj7stway
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   91.4% of Total User I/O Wait Time (s):	       8
		--
-> Captured PL/SQL account for	 62.3% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
---------- ------------ ---------- ------ ---------- ------ ------ -------------

     120.3	      1     120.32    1.5      539.5	3.1   22.3 230uak9tb9gp2
Module: SQL*Plus
		-- so reset flags and counters before continuing
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		--
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     120.0	      1     120.01    1.5      540.9	3.0   22.2 cpwuynd81c18b
Module: SQL*Plus
		v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_updates_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     119.8	      1     119.82    1.5      541.0	3.3   22.1 2kagcss8t5vv4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
		v_selects_cnt := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	END IF;
     119.4	      1     119.41    1.4      539.3	3.0   22.1 2s578t5qpv8b5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
     119.3	      1     119.25    1.4      539.7	3.1   22.1 90ujc8r1t56fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- so reset flags and counters
     118.8	      1     118.78    1.4      539.6	3.2   22.0 1f3cggsgaswpw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
		v_scan_query_quota := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     118.6	      1     118.57    1.4      540.3	3.1   21.9 fhgqn1rt3jmh3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_scan_queries_cnt := 0;
     118.3	      1     118.33    1.4      538.9	3.1   22.0 4d3r1vzskkhpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_random_access_queries_cnt := 0;
     117.2	      1     117.19    1.4      538.7	3.1   21.8 g1x4b9bfdxz35
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
	END IF;
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   91.4% of Total User I/O Wait Time (s):	       8
-> Captured PL/SQL account for	 62.3% of Total User I/O Wait Time (s):

	v_loop_cnt := v_loop_cnt + 1 ;
  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
	v_now := DBMS_UTILITY.GET_TIME();
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


     117.1	      1     117.13    1.4      540.7	3.0   21.7 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     116.3	      1     116.26    1.4      540.9	3.1   21.5 3zfwa5fbzfumr
		-- If this is a fixed-iteration count test cycle and we've hit the number of
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- iterations then set exit flag
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     116.0	      1     115.99    1.4      540.6	3.1   21.5 249992tdjj8pb
		v_stop_immediate := TRUE ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     115.4	      1     115.44    1.4      539.8	3.2   21.4 f4rq0sufc25j7
END LOOP;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_end_time := v_now ;
     115.1	      1     115.10    1.4      540.1	3.1   21.3 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_now := DBMS_UTILITY.GET_TIME();
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     114.5	      1     114.49    1.4      540.0	2.9   21.2 8g9692jjz865t
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     114.3	      1     114.30    1.4      540.1	3.0   21.2 c886fvd0mv7mv
v_total_time := v_end_time - v_begin_time ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     113.2	      1     113.22    1.4      540.3	3.0   21.0 bra280pu141z8
Module: SQL*Plus
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;


SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL

   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
END;</pre_sqltext></td></tr>
-> Captured SQL account for   91.4% of Total User I/O Wait Time (s):	       8
-> Captured PL/SQL account for	 62.3% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
<tr><td scope="row" class='awrc'><a class="awr" name="7hc9uvs2016m6"></a>7hc9uvs2016m6</td><td class='awrc'><pre_sqltext class="awr">insert into svcobj_access$(name,  pdb,  tsn,  objid,  accesses,  inc_no) values (:1,  :2,	:3,  :4,  :5,  :6)</pre_sqltext></td></tr>
---------- ------------ ---------- ------ ---------- ------ ------ -------------
     113.2	      1     113.20    1.4      541.0	2.8   20.9 181vungw6p8xd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
<tr><td scope="row" class='awrnc'><a class="awr" name="7q910nkfm4sb4"></a>7q910nkfm4sb4</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_default_schema_number PLS_INTEGER := '62';
     113.2	      1     113.16    1.4      540.0	3.0   21.0 7a314umnzbfsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_pct PLS_INTEGER := '15';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     112.2	      1     112.20    1.4      540.1	3.0   20.8 3q9qpxjx8mtpr
v_max_loop_iterations PLS_INTEGER := '0';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_seconds_to_run PLS_INTEGER := '600';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     110.7	      1     110.66    1.3      540.5	2.9   20.5 bbp00h54hyg9h
Module: SQL*Plus
v_scale PLS_INTEGER := '1048576';
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_work_unit PLS_INTEGER := '80' ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     109.2	      1     109.18    1.3      540.5	2.9   20.2 6kvyh9k0yg876
Module: SQL*Plus
v_redo_stress  VARCHAR2(12) := 'LITE';
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_hot_schema_modulus PLS_INTEGER := '0';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     107.5	      1     107.48    1.3      540.1	3.0   19.9 gcfrxjr5zjhjy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
v_do_hotspot   VARCHAR(7) := 'FALSE';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_hotspot_mb  NUMBER := '8';
     105.9	      1     105.86    1.3      542.2	2.8   19.5 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_offset_mb NUMBER := '16';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     105.3	      1     105.26    1.3      540.8	2.8   19.5 cn5r6fnjj1b3d
v_hotspot_modulus  PLS_INTEGER := '3';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     102.9	      1     102.86    1.2      540.5	2.9   19.0 1y2qx24pugffb
Module: SQL*Plus
v_sleep_modulus PLS_INTEGER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_sleep_min NUMBER := '.1';
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
v_sleep_max NUMBER := '.5';
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   91.4% of Total User I/O Wait Time (s):	       8
-> Captured PL/SQL account for	 62.3% of Total User I/O Wait Time (s):
v_scan_query_pct PLS_INTEGER := '0';

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
v_obfuscate VARCHAR(5)	:= 'FALSE';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      99.8	      1      99.78    1.2      540.2	2.8   18.5 azs4x4stk5azf

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	    9,392,804
-> Captured SQL account for   95.3% of Total


     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
v_num_tmp NUMBER := 0;
  7,130,361	 86,747 	82.2   75.9   15,290.8	 3.6  19.5 bhdvtsvjhgvrh
Module: SQL*Plus

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  1,390,819	 15,455 	90.0   14.8   19,171.0	 2.5  23.8 35dumc2tpr9dv
Module: SQL*Plus
v_loop_cnt PLS_INTEGER := 0;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

    358,144	     64      5,596.0	3.8	   0.5	93.5	 0 0gw0hh7k29jxb
select obj.obj#, obj.file#, obj.block# from ((select obj#, file#, block# from sy
v_rowcnt PLS_INTEGER := 0;
s.tab$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#, file#, block#
 from sys.tabpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#, f
ile#, block# from sys.clu$ t where t.ts# = :1 AND t.dataobj# = :2) union (select

v_updates_cnt PLS_INTEGER := 0;
    160,497	      1    160,497.0	1.7	 539.4	 3.3  27.3 8h5ykwqs85vbc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_selects_cnt PLS_INTEGER := 0;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    156,891	      1    156,891.0	1.7	 540.0	 3.2  25.7 fvgh1q9dsd479

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_random_access_queries_cnt PLS_INTEGER := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    155,508	      1    155,508.0	1.7	 539.7	 3.3  24.9 fd7ncyq8wrtcp
Module: SQL*Plus
v_scan_queries_cnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    152,962	      1    152,962.0	1.6	 540.3	 3.2  26.5 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
v_do_scan_query BOOLEAN :=FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_scan_query_quota  BOOLEAN := FALSE;
    152,049	      1    152,049.0	1.6	 538.9	 3.2	26 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_workload_only BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    151,034	      1    151,034.0	1.6	 539.6	 3.2	24 2pvynbz6kg2u1
Module: SQL*Plus
v_random_workload_only BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    149,735	      1    149,735.0	1.6	 540.2	 3.2  23.8 4ws27v7ay8j6x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=


SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_random_block PLS_INTEGER := 1;
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	    9,392,804
v_tmp PLS_INTEGER;
-> Captured SQL account for   95.3% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
v_now PLS_INTEGER;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
v_brick_wall PLS_INTEGER;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    146,941	      1    146,941.0	1.6	 541.2	 3.3  24.2 0raxwcmc41phu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_begin_time PLS_INTEGER;
    145,566	      1    145,566.0	1.5	 539.3	 3.2  23.4 4hvtczzbgggky
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_end_time PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    142,595	      1    142,595.0	1.5	 539.3	 3.2  22.6 7q910nkfm4sb4
Module: SQL*Plus
v_total_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_begin_cpu_tm PLS_INTEGER;

    141,199	      1    141,199.0	1.5	 540.2	 3.2  22.7 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
v_end_cpu_tm PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_total_cpu_tm PLS_INTEGER;
    140,570	      1    140,570.0	1.5	 540.1	   3  22.6 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    140,404	      1    140,404.0	1.5	 539.6	 3.2	22 1f3cggsgaswpw
Module: SQL*Plus
v_do_sleeps BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_loop_control BOOLEAN := FALSE;

    139,363	      1    139,363.0	1.5	 539.8	 3.2  21.4 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_quota BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    138,620	      1    138,620.0	1.5	 541.0	 3.3  22.1 2kagcss8t5vv4
Module: SQL*Plus
v_select_only_workload BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_update_only_workload BOOLEAN := FALSE;


SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_do_update BOOLEAN := FALSE;
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	    9,392,804
v_do_hot_schema BOOLEAN := FALSE;
-> Captured SQL account for   95.3% of Total

     Buffer		    Gets	      Elapsed
v_stop_immediate BOOLEAN := FALSE;
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
    137,989	      1    137,989.0	1.5	 540.9	   3  22.2 cpwuynd81c18b
Module: SQL*Plus
v_sharing_schema BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_seed VARCHAR2(128);
    137,590	      1    137,590.0	1.5	 541.1	 3.2  22.3 6uftfsj7stway
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_home_schema_str VARCHAR2(80);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    137,376	      1    137,376.0	1.5	 541.4	 3.1  22.5 btxhvgkudmtmh
Module: SQL*Plus
v_scratch VARCHAR2(200) ;
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    136,986	      1    136,986.0	1.5	 539.7	 3.2	23 cwr7y46j1ajy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_cpu_pct NUMBER(6, 3);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    136,955	      1    136,955.0	1.5	 540.3	 3.1  21.9 fhgqn1rt3jmh3
Module: SQL*Plus
v_my_serial NUMBER(16);
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    136,449	      1    136,449.0	1.5	 539.7	 3.1  22.1 90ujc8r1t56fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
BEGIN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    135,435	      1    135,435.0	1.4	 538.7	 3.1  21.8 g1x4b9bfdxz35

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    135,367	      1    135,367.0	1.4	 539.5	 3.1  22.3 230uak9tb9gp2
Module: SQL*Plus
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
-- The following WHILE loop is the master work loop control
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
----------------------------------------------------------------------------------------------------------------------

    135,280	      1    135,280.0	1.4	 539.5	 3.1  22.6 9hzjs0qb9fr2c
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
-> Total Buffer Gets:	    9,392,804
-> Captured SQL account for   95.3% of Total

     Buffer		    Gets	      Elapsed
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,482	      1    134,482.0	1.4	 539.3	   3  22.1 2s578t5qpv8b5
Module: SQL*Plus
			DBMS_LOCK.SLEEP(v_num_tmp);
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
		END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    134,048	      1    134,048.0	1.4	 538.9	 3.1	22 4d3r1vzskkhpu
	END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,774	      1    133,774.0	1.4	 540.1	 3.1  21.3 5nz6b4v9qbsbr
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,436	      1    133,436.0	1.4	 540.9	 3.1  21.5 3zfwa5fbzfumr
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_sharing_schema := TRUE ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		ELSE
    132,324	      1    132,324.0	1.4	 540.6	 3.1  21.5 249992tdjj8pb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_sharing_schema = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				EXECUTE IMMEDIATE v_home_schema_str;
    132,085	      1    132,085.0	1.4	 540.3	   3	21 bra280pu141z8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
				v_sharing_schema := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			END IF;
    131,098	      1    131,098.0	1.4	 540.7	   3  21.7 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
		END IF;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
	END IF;

    130,229	      1    130,229.0	1.4	 540.0	   3	21 7a314umnzbfsf
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	-- Choose the random block. The v_do_hotspot handler that follows can override.
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,025	      1    130,025.0	1.4	 540.1	   3  20.8 3q9qpxjx8mtpr

	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	    9,392,804
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
-> Captured SQL account for   95.3% of Total

		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    128,810	      1    128,810.0	1.4	 540.0	 2.9  21.2 8g9692jjz865t
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    127,299	      1    127,299.0	1.4	 540.1	   3  19.9 gcfrxjr5zjhjy
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    127,181	      1    127,181.0	1.4	 540.1	   3  21.2 c886fvd0mv7mv
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    126,116	      1    126,116.0	1.3	 540.5	 2.9  20.5 bbp00h54hyg9h
Module: SQL*Plus
	IF  ( v_select_only_workload = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- handle case where user specified zero pct updates (a SELECT-only workload)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    125,541	      1    125,541.0	1.3	 540.5	 2.9  20.2 6kvyh9k0yg876
Module: SQL*Plus
		v_do_update := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_update_quota := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    122,914	      1    122,914.0	1.3	 540.5	 2.9	19 1y2qx24pugffb
Module: SQL*Plus
	ELSE
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		IF ( v_update_only_workload = TRUE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    121,555	      1    121,555.0	1.3	 542.2	 2.8  19.5 3scs6w7r6f9xa
Module: SQL*Plus
			-- handle case where user specified 100% updates
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_do_update := TRUE;

    120,001	      1    120,001.0	1.3	 541.0	 2.8  20.9 181vungw6p8xd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
			v_update_quota := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		ELSE

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	    9,392,804
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
-> Captured SQL account for   95.3% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
			IF ( v_update_quota = FALSE ) THEN
----------- ----------- ------------ ------ ---------- ----- ----- -------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				-- Handle case where user has set UPDATE_PCT to a valid value
    118,604	      1    118,604.0	1.3	 540.8	 2.8  19.5 cn5r6fnjj1b3d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    113,914	      1    113,914.0	1.2	 540.2	 2.8  18.5 azs4x4stk5azf
				-- We are doing updates during this run and quota has not been met yet
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				-- We still vacillate until update quota has been met
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------



SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Physical Reads as a percentage of Total Disk Reads
				IF ( MOD(v_random_block,  2) = 0 ) THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
					v_do_update := TRUE;
-> Total Disk Reads:	   9,128,427
-> Captured SQL account for   88.5% of Total

   Physical		 Reads		    Elapsed
				ELSE
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
  6,852,575	 86,747       79.0   75.1   15,290.8	3.6   19.5 bhdvtsvjhgvrh
					v_do_update := FALSE;
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  1,219,319	 15,455       78.9   13.4   19,171.0	2.5   23.8 35dumc2tpr9dv
				END IF;
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

			ELSE
    151,289	      1  151,289.0    1.7      539.4	3.3   27.3 8h5ykwqs85vbc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
				-- UPDATE quota has been filled,  force drain some SELECTs
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

				v_do_update := FALSE;
    146,509	      1  146,509.0    1.6      539.7	3.3   24.9 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
			END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		END IF;
    144,882	      1  144,882.0    1.6      540.3	3.2   26.5 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    144,428	      1  144,428.0    1.6      540.0	3.2   25.7 fvgh1q9dsd479
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

-- The type of SQL is now determined...execute it in the following section
    143,322	      1  143,322.0    1.6      538.9	3.2   26.0 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    143,106	      1  143,106.0    1.6      539.6	3.2   24.0 2pvynbz6kg2u1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_do_update != TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    140,601	      1  140,601.0    1.5      540.2	3.2   23.8 4ws27v7ay8j6x
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Do a SELECT statement
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

		-- Work out scan or random
    139,264	      1  139,264.0    1.5      541.2	3.3   24.2 0raxwcmc41phu
Module: SQL*Plus

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		IF  ( v_random_workload_only = TRUE ) THEN
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   9,128,427
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
-> Captured SQL account for   88.5% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
			v_do_scan_query := FALSE;
----------- ----------- ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			v_scan_query_quota := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    137,469	      1  137,469.0    1.5      539.3	3.2   23.4 4hvtczzbgggky
Module: SQL*Plus
		ELSE
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,670	      1  134,670.0    1.5      539.3	3.2   22.6 7q910nkfm4sb4
			IF ( v_scan_workload_only = TRUE ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,813	      1  133,813.0    1.5      540.2	3.2   22.7 1fhabrgp6k1fh
Module: SQL*Plus
				v_do_scan_query := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
				v_scan_query_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,997	      1  132,997.0    1.5      540.1	3.0   22.6 4asnrz2aymyu8
Module: SQL*Plus
			ELSE
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
				IF ( v_scan_query_quota = FALSE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,770	      1  132,770.0    1.5      539.6	3.2   22.0 1f3cggsgaswpw
Module: SQL*Plus
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN

    131,114	      1  131,114.0    1.4      539.8	3.2   21.4 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
						v_do_scan_query := TRUE;

    130,619	      1  130,619.0    1.4      540.9	3.0   22.2 cpwuynd81c18b
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
					ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

						v_do_scan_query := FALSE;
    130,607	      1  130,607.0    1.4      541.1	3.2   22.3 6uftfsj7stway
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
				ELSE
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   9,128,427
					-- Scan quota has been filled,	force drain some random access SELECTS
-> Captured SQL account for   88.5% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
					v_do_scan_query := FALSE;
----------- ----------- ---------- ------ ---------- ------ ------ -------------

    130,476	      1  130,476.0    1.4      541.0	3.3   22.1 2kagcss8t5vv4
Module: SQL*Plus
				END IF;
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			END IF;

    130,170	      1  130,170.0    1.4      541.4	3.1   22.5 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
		END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    130,095	      1  130,095.0    1.4      540.3	3.1   21.9 fhgqn1rt3jmh3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		IF ( v_do_scan_query != TRUE ) THEN
    129,497	      1  129,497.0    1.4      539.7	3.2   23.0 cwr7y46j1ajy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			SELECT COUNT(c2) INTO v_rowcnt
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    128,353	      1  128,353.0    1.4      539.7	3.1   22.1 90ujc8r1t56fr
			FROM cf1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    128,231	      1  128,231.0    1.4      538.7	3.1   21.8 g1x4b9bfdxz35

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    128,028	      1  128,028.0    1.4      539.5	3.1   22.3 230uak9tb9gp2
		ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    127,726	      1  127,726.0    1.4      539.5	3.1   22.6 9hzjs0qb9fr2c
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_scan_queries_cnt := v_scan_queries_cnt + 1;

    127,257	      1  127,257.0    1.4      539.3	3.0   22.1 2s578t5qpv8b5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :


SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   9,128,427
-> Captured SQL account for   88.5% of Total

   Physical		 Reads		    Elapsed
				v_scan_query_quota := TRUE;
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			END IF;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    127,234	      1  127,234.0    1.4      538.9	3.1   22.0 4d3r1vzskkhpu
Module: SQL*Plus
		END IF;
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    126,447	      1  126,447.0    1.4      540.1	3.1   21.3 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	ELSE
    126,364	      1  126,364.0    1.4      540.9	3.1   21.5 3zfwa5fbzfumr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    124,782	      1  124,782.0    1.4      540.6	3.1   21.5 249992tdjj8pb
Module: SQL*Plus
		-- Do an UPDATE statement
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    124,401	      1  124,401.0    1.4      540.3	3.0   21.0 bra280pu141z8

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_my_serial := v_my_serial + v_loop_cnt ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    123,991	      1  123,991.0    1.4      540.7	3.0   21.7 arusphb7uppr5

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    123,490	      1  123,490.0    1.4      540.0	3.0   21.0 7a314umnzbfsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
		--
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- Increment count of UPDATES and set UPDATE quota flag if needed
    122,905	      1  122,905.0    1.3      540.1	3.0   20.8 3q9qpxjx8mtpr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		v_updates_cnt := v_updates_cnt + 1;
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   9,128,427

-> Captured SQL account for   88.5% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
----------- ----------- ---------- ------ ---------- ------ ------ -------------
    122,388	      1  122,388.0    1.3      540.0	2.9   21.2 8g9692jjz865t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
			v_update_quota := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		END IF;
    120,810	      1  120,810.0    1.3      540.1	3.0   21.2 c886fvd0mv7mv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    120,745	      1  120,745.0    1.3      540.1	3.0   19.9 gcfrxjr5zjhjy
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
    119,290	      1  119,290.0    1.3      540.5	2.9   20.5 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    119,196	      1  119,196.0    1.3      540.5	2.9   20.2 6kvyh9k0yg876
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    116,459	      1  116,459.0    1.3      540.5	2.9   19.0 1y2qx24pugffb
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
    114,552	      1  114,552.0    1.3      542.2	2.8   19.5 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- so reset flags and counters before continuing
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    113,700	      1  113,700.0    1.2      541.0	2.8   20.9 181vungw6p8xd
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		v_update_quota := FALSE;

    112,446	      1  112,446.0    1.2      540.8	2.8   19.5 cn5r6fnjj1b3d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
		v_updates_cnt := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
		v_selects_cnt := 0;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   9,128,427
-> Captured SQL account for   88.5% of Total

   Physical		 Reads		    Elapsed
	END IF;
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    108,209	      1  108,209.0    1.2      540.2	2.8   18.5 azs4x4stk5azf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,


		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8g9692jjz865t"></a>8g9692jjz865t</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '15';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
-> UnOptimized Read Reqs = Physical Read Reqs -

     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests

-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,485,282
-> Captured SQL account for    1.4% of Total
-> Total UnOptimized Read Requests:	  8,485,282
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
-> Captured SQL account for    1.4% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id

----------- ----------- ---------- ------------ ------ ------ -------------
    151,289	151,289 	 1    151,289.0    0.0	  1.8 8h5ykwqs85vbc
Module: SQL*Plus
v_num_tmp NUMBER := 0;

DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
v_loop_cnt PLS_INTEGER := 0;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    146,509	146,509 	 1    146,509.0    0.0	  1.7 fd7ncyq8wrtcp
v_rowcnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_updates_cnt PLS_INTEGER := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_selects_cnt PLS_INTEGER := 0;
    144,882	144,882 	 1    144,882.0    0.0	  1.7 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_random_access_queries_cnt PLS_INTEGER := 0;
    144,428	144,428 	 1    144,428.0    0.0	  1.7 fvgh1q9dsd479
Module: SQL*Plus
v_scan_queries_cnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    143,322	143,322 	 1    143,322.0    0.0	  1.7 bpy4xf8bfgtjp
Module: SQL*Plus
v_do_scan_query BOOLEAN :=FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_scan_query_quota  BOOLEAN := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    143,106	143,106 	 1    143,106.0    0.0	  1.7 2pvynbz6kg2u1
v_scan_workload_only BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_random_workload_only BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    140,601	140,601 	 1    140,601.0    0.0	  1.7 4ws27v7ay8j6x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=

'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_random_block PLS_INTEGER := 1;
    139,264	139,264 	 1    139,264.0    0.0	  1.6 0raxwcmc41phu
Module: SQL*Plus
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
v_brick_wall PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    137,469	137,469 	 1    137,469.0    0.0	  1.6 4hvtczzbgggky
Module: SQL*Plus
v_begin_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
v_end_time PLS_INTEGER;
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
v_total_time PLS_INTEGER;
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,485,282
-> Captured SQL account for    1.4% of Total
v_begin_cpu_tm PLS_INTEGER;
-> Total UnOptimized Read Requests:	  8,485,282
-> Captured SQL account for    1.4% of Total
-> Total Optimized Read Requests:		1
v_end_cpu_tm PLS_INTEGER;
-> Captured SQL account for    0.0% of Total

v_total_cpu_tm PLS_INTEGER;
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_do_sleeps BOOLEAN := FALSE;
    134,670	134,670 	 1    134,670.0    0.0	  1.6 7q910nkfm4sb4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_loop_control BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_update_quota BOOLEAN := FALSE;
    133,813	133,813 	 1    133,813.0    0.0	  1.6 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
v_select_only_workload BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_update_only_workload BOOLEAN := FALSE;

    132,997	132,997 	 1    132,997.0    0.0	  1.6 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
v_do_update BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_do_hot_schema BOOLEAN := FALSE;

    132,770	132,770 	 1    132,770.0    0.0	  1.6 1f3cggsgaswpw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
v_stop_immediate BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_sharing_schema BOOLEAN := FALSE;

    131,114	131,114 	 1    131,114.0    0.0	  1.5 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
v_seed VARCHAR2(128);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_home_schema_str VARCHAR2(80);

    130,619	130,619 	 1    130,619.0    0.0	  1.5 cpwuynd81c18b
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
v_scratch VARCHAR2(200) ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    130,607	130,607 	 1    130,607.0    0.0	  1.5 6uftfsj7stway
Module: SQL*Plus
v_cpu_pct NUMBER(6, 3);
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_my_serial NUMBER(16);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,476	130,476 	 1    130,476.0    0.0	  1.5 2kagcss8t5vv4
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
BEGIN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,170	130,170 	 1    130,170.0    0.0	  1.5 btxhvgkudmtmh


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
-> Total Physical Read Requests:       8,485,282
-> Captured SQL account for    1.4% of Total
-> Total UnOptimized Read Requests:	  8,485,282
-> Captured SQL account for    1.4% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

EXECUTE IMMEDIATE v_home_schema_str;
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    130,095	130,095 	 1    130,095.0    0.0	  1.5 fhgqn1rt3jmh3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_hot_schema_modulus != 0 ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_do_hot_schema := TRUE;
    129,497	129,497 	 1    129,497.0    0.0	  1.5 cwr7y46j1ajy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    128,353	128,353 	 1    128,353.0    0.0	  1.5 90ujc8r1t56fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_sleep_modulus != 0 )	  THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_do_sleeps := TRUE;
    128,231	128,231 	 1    128,231.0    0.0	  1.5 g1x4b9bfdxz35
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


    128,028	128,028 	 1    128,028.0    0.0	  1.5 230uak9tb9gp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_max_loop_iterations &gt; 0 )  THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_loop_control := TRUE ;
    127,726	127,726 	 1    127,726.0    0.0	  1.5 9hzjs0qb9fr2c
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    127,257	127,257 	 1    127,257.0    0.0	  1.5 2s578t5qpv8b5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
IF ( v_update_pct = 0 ) 	  THEN
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	v_select_only_workload := TRUE;
    127,234	127,234 	 1    127,234.0    0.0	  1.5 4d3r1vzskkhpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
IF ( v_update_pct = 100 )	  THEN
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,485,282
-> Captured SQL account for    1.4% of Total
	v_update_only_workload := TRUE;
-> Total UnOptimized Read Requests:	  8,485,282
-> Captured SQL account for    1.4% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total
END IF;

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id

----------- ----------- ---------- ------------ ------ ------ -------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    126,447	126,447 	 1    126,447.0    0.0	  1.5 5nz6b4v9qbsbr
IF ( v_scan_query_pct = 0 ) 	THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	v_random_workload_only := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    126,364	126,364 	 1    126,364.0    0.0	  1.5 3zfwa5fbzfumr
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    124,782	124,782 	 1    124,782.0    0.0	  1.5 249992tdjj8pb
Module: SQL*Plus
IF ( v_scan_query_pct = 100 ) 	THEN
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	v_scan_workload_only := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    124,401	124,401 	 1    124,401.0    0.0	  1.5 bra280pu141z8
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    123,991	123,991 	 1    123,991.0    0.0	  1.5 arusphb7uppr5
Module: SQL*Plus
v_seconds_to_run := v_seconds_to_run * 100 ;
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red

o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    123,490	123,490 	 1    123,490.0    0.0	  1.5 7a314umnzbfsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    122,905	122,905 	 1    122,905.0    0.0	  1.4 3q9qpxjx8mtpr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    122,388	122,388 	 1    122,388.0    0.0	  1.4 8g9692jjz865t
-- DBMS_RANDOM.seed (val =&gt; v_seed);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    120,810	120,810 	 1    120,810.0    0.0	  1.4 c886fvd0mv7mv
v_begin_time := DBMS_UTILITY.GET_TIME();
Module: SQL*Plus

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
-> UnOptimized Read Reqs = Physical Read Reqs -
v_now := v_begin_time ;
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,485,282
v_brick_wall := v_now + v_seconds_to_run ;
-> Captured SQL account for    1.4% of Total
-> Total UnOptimized Read Requests:	  8,485,282
-> Captured SQL account for    1.4% of Total
-> Total Optimized Read Requests:		1
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id

----------- ----------- ---------- ------------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
----------------------------------------------------------------------------------------------------------------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    120,745	120,745 	 1    120,745.0    0.0	  1.4 gcfrxjr5zjhjy
Module: SQL*Plus
-- The following WHILE loop is the master work loop control
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
    119,290	119,290 	 1    119,290.0    0.0	  1.4 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    119,196	119,196 	 1    119,196.0    0.0	  1.4 6kvyh9k0yg876

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    116,459	116,459 	 1    116,459.0    0.0	  1.4 1y2qx24pugffb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
    114,552	114,552 	 1    114,552.0    0.0	  1.4 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    113,700	113,700 	 1    113,700.0    0.0	  1.3 181vungw6p8xd
			DBMS_LOCK.SLEEP(v_num_tmp);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		END IF;

    112,446	112,446 	 1    112,446.0    0.0	  1.3 cn5r6fnjj1b3d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    108,209	108,209 	 1    108,209.0    0.0	  1.3 azs4x4stk5azf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,485,282
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
-> Captured SQL account for    1.4% of Total
-> Total UnOptimized Read Requests:	  8,485,282
-> Captured SQL account for    1.4% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN

     99,790	 99,790     86,747	    1.2    0.0	  1.2 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			  ------------------------------------------------------


SQL ordered by Executions		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
			v_sharing_schema := TRUE ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	     123,265
-> Captured SQL account for   88.5% of Total

		ELSE
					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
			IF ( v_sharing_schema = TRUE ) THEN
      86,747	      86,788		1.0   15,290.8	 3.6  19.5 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

      15,455	   1,220,945	       79.0   19,171.0	 2.5  23.8 35dumc2tpr9dv
				EXECUTE IMMEDIATE v_home_schema_str;
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

				v_sharing_schema := FALSE;
       1,919		  63		0.0	   0.1	99.5	 0 87gaftwrm2h68
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

			END IF;
       1,565	       1,496		1.0	   0.1	93.6	 0 24djtk7r8fz33
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

		END IF;
	 912		 912		1.0	   0.2	78.2   7.9 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
	END IF;
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	 309		 189		0.6	   0.1	37.9  33.4 acmvv4fhdc9zh

select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

	 191		 191		1.0	   0.1	96.4	 0 3dbzmtf9ahvzt
	-- Choose the random block. The v_do_hotspot handler that follows can override.
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
	 180		 180		1.0	   0.0	74.5  12.2 2p9fv35c7zxtg
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(

m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
wcnt, 0) rowcnt, o.pobjn pobjn from

	 164		 164		1.0	   0.1	  40	19 grwydz59pu6mc
select text from view$ where rowid=:1

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
	 163		 163		1.0	   0.0	99.8	 0 5u7g54s63p4ts
select toid from type$ where package_obj#=:1 and typ_name=:2

			  ------------------------------------------------------

		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;

SQL ordered by Parse Calls		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Parse Calls:		7,028
-> Captured SQL account for   55.3% of Total

		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
			    % Total
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
       1,565	    1,565     22.27 24djtk7r8fz33
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
2 AND tsn = :3 AND objid = :4

	 351	      912      4.99 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
	END IF;
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds


	 191	      191      2.72 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

----------------------------------------------------------------------------------------------------------------------
	 180	      180      2.56 2p9fv35c7zxtg
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
wcnt, 0) rowcnt, o.pobjn pobjn from

	 164	      164      2.33 grwydz59pu6mc
select text from view$ where rowid=:1

	 163	      163      2.32 5u7g54s63p4ts
----------------------------------------------------------------------------------------------------------------------
select toid from type$ where package_obj#=:1 and typ_name=:2

	 116	      116      1.65 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper

ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
 p_obj#=obj#(+) order by order#

	 116	      116      1.65 8swypbbr0m372
select order#,columns,types from access$ where d_obj#=:1
	IF  ( v_select_only_workload = TRUE ) THEN

	  92	       92      1.31 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)
		-- handle case where user specified zero pct updates (a SELECT-only workload)

	  69	       69      0.98 7hc9uvs2016m6
insert into svcobj_access$(name, pdb, tsn, objid, accesses, inc_no) values (:1,
:2, :3, :4, :5, :6)

		v_do_update := FALSE;
			  ------------------------------------------------------


SQL ordered by Sharable Memory		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		v_update_quota := TRUE ;
-> Only Statements with Sharable Memory greater than 1048576 are displayed

Sharable Mem (b)  Executions   % Total	  SQL Id
---------------- ------------ -------- -------------
      13,231,793	    6	  1.17 9yv5dwv8k0awg
	ELSE
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
		IF ( v_update_only_workload = TRUE ) THEN
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

       4,146,388	    1	  0.37 2xfg27zhudyay
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
			-- handle case where user specified 100% updates
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg

       2,916,904	    1	  0.26 9sq9djzzhr19y
WITH binds as (select :dbid as dbid ,
			v_do_update := TRUE;
:inst_id_low as instIdLow , :inst_id_high as i
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg

       2,131,968       15,455	  0.19 35dumc2tpr9dv
			v_update_quota := FALSE;
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

       2,095,564	    6	  0.18 atwuyuvqkf27w
		ELSE
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

       1,872,335       86,747	  0.16 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
			-- Work out whether this loop iteration is a SELECT or UPDATE here:

       1,500,130	    1	  0.13 5gy90wdbvc683
 with base_metrics as ( select -- sum across all instances
 source, lpad(to_char(inst_id),5) || '/' || inst_name inst,
 bucket_id, id, name, sum(aas) aas, sum(aas_fg
			IF ( v_update_quota = FALSE ) THEN
) aas_fg, sum(aas_cpu) aas_cpu from table(sys.gv$(cursor

       1,466,457	    1	  0.13 du9ud3dmb4xun
WITH ash as (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60,0) a
				-- Handle case where user has set UPDATE_PCT to a valid value
s t, inst_id || '_' || session_id || '_' || session_serial# as sid,
 decode(session_type, 'FOREGROUND', 1, 0) as session_type, nvl(
sql_id,'null') as sql_id, nvl(sql_opcode,0) as sql_opcode, n

       1,192,748	    1	  0.11 fg11facbfjwvx
				--
 SELECT /*+ no_monitor leading(mo_px) use_hash(mo_px) */ xm
lelement( "sql_monitor_list_report", xmlattributes(
 :report_version as "version",
 :total_count as "total_count", to

				-- We are doing updates during this run and quota has not been met yet
			  ------------------------------------------------------


SQL ordered by Version Count		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Only Statements with Version Count greater than 20 are displayed
				-- We still vacillate until update quota has been met

 Version
  Count   Executions	 SQL Id
-------- ------------ -------------
      64       15,455 35dumc2tpr9dv

Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
				IF ( MOD(v_random_block,  2) = 0 ) THEN

      64       86,747 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  ------------------------------------------------------


					v_do_update := TRUE;
SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
				ELSE
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total

					v_do_update := FALSE;
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
				END IF;
      14,423.1	     15,455   50.8   19,171.0	75.2	2.5   23.8 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

			ELSE
      12,129.4	     86,747   42.7   15,290.8	79.3	3.6   19.5 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
	 435.0		  1    1.5	540.2	80.5	2.8   18.5 azs4x4stk5azf
Module: SQL*Plus
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 431.5		  1    1.5	540.5	79.8	2.9   19.0 1y2qx24pugffb
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 430.7		  1    1.5	540.8	79.6	2.8   19.5 cn5r6fnjj1b3d
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				v_scan_query_quota := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			END IF;

	 430.6		  1    1.5	542.2	79.4	2.8   19.5 3scs6w7r6f9xa
		END IF;

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	ELSE

	 427.1		  1    1.5	540.1	79.1	3.0   19.9 gcfrxjr5zjhjy
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- Do an UPDATE statement
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 425.3		  1    1.5	540.5	78.7	2.9   20.2 6kvyh9k0yg876
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_my_serial := v_my_serial + v_loop_cnt ;
	 424.3		  1    1.5	540.5	78.5	2.9   20.5 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
	 422.6		  1    1.5	540.1	78.3	3.0   20.8 3q9qpxjx8mtpr
Module: SQL*Plus

		--
SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
		--
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total

       Cluster			      Elapsed
		v_updates_cnt := v_updates_cnt + 1;
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------

DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 422.3		  1    1.5	541.0	78.1	2.8   20.9 181vungw6p8xd
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	 421.8		  1    1.5	540.3	78.1	3.0   21.0 bra280pu141z8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 421.5		  1    1.5	540.0	78.1	3.0   21.0 7a314umnzbfsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 420.5		  1    1.5	540.0	77.9	2.9   21.2 8g9692jjz865t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 419.5		  1    1.5	540.1	77.7	3.0   21.2 c886fvd0mv7mv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 419.3		  1    1.5	540.9	77.5	3.1   21.5 3zfwa5fbzfumr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 419.0		  1    1.5	540.1	77.6	3.1   21.3 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 418.8		  1    1.5	539.8	77.6	3.2   21.4 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------

	 418.0		  1    1.5	540.7	77.3	3.0   21.7 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 417.0		  1    1.5	540.6	77.1	3.1   21.5 249992tdjj8pb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 415.9		  1    1.5	540.3	77.0	3.1   21.9 fhgqn1rt3jmh3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 414.9		  1    1.5	540.9	76.7	3.0   22.2 cpwuynd81c18b
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 414.9		  1    1.5	541.0	76.7	3.3   22.1 2kagcss8t5vv4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 414.8		  1    1.5	538.9	77.0	3.1   22.0 4d3r1vzskkhpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 414.6		  1    1.5	539.3	76.9	3.0   22.1 2s578t5qpv8b5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 414.6		  1    1.5	538.7	77.0	3.1   21.8 g1x4b9bfdxz35
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '5'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 414.0		  1    1.5	539.7	76.7	3.1   22.1 90ujc8r1t56fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 413.4		  1    1.5	539.6	76.6	3.2   22.0 1f3cggsgaswpw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 413.3		  1    1.5	541.4	76.3	3.1   22.5 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 412.6		  1    1.5	541.1	76.2	3.2   22.3 6uftfsj7stway
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 412.4		  1    1.5	539.5	76.4	3.1   22.3 230uak9tb9gp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 412.1		  1    1.5	540.1	76.3	3.0   22.6 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 411.7		  1    1.4	539.5	76.3	3.1   22.6 9hzjs0qb9fr2c
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 411.6		  1    1.4	540.2	76.2	3.2   22.7 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 411.2		  1    1.4	539.3	76.3	3.2   22.6 7q910nkfm4sb4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
		--
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
		-- so reset flags and counters before continuing
	 410.4		  1    1.4	539.7	76.1	3.2   23.0 cwr7y46j1ajy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 406.9		  1    1.4	539.3	75.5	3.2   23.4 4hvtczzbgggky
Module: SQL*Plus
		v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_updates_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 406.3		  1    1.4	540.2	75.2	3.2   23.8 4ws27v7ay8j6x
		v_selects_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
	END IF;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 404.5		  1    1.4	541.2	74.7	3.3   24.2 0raxwcmc41phu
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
	 403.1		  1    1.4	539.6	74.7	3.2   24.0 2pvynbz6kg2u1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 398.7		  1    1.4	539.7	73.9	3.3   24.9 fd7ncyq8wrtcp
Module: SQL*Plus
		-- so reset flags and counters
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_scan_query_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 394.7		  1    1.4	540.0	73.1	3.2   25.7 fvgh1q9dsd479
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
		v_scan_queries_cnt := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_random_access_queries_cnt := 0;
	 392.7		  1    1.4	538.9	72.9	3.2   26.0 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	 391.2		  1    1.4	540.3	72.4	3.2   26.5 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

	v_loop_cnt := v_loop_cnt + 1 ;
SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	v_now := DBMS_UTILITY.GET_TIME();
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 385.6		  1    1.4	539.4	71.5	3.3   27.3 8h5ykwqs85vbc
Module: SQL*Plus
		-- If this is a fixed-iteration count test cycle and we've hit the number of
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
		-- iterations then set exit flag

	   3.2		  1    0.0	 12.7	24.9   15.9    2.2 2xfg27zhudyay
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
		v_stop_immediate := TRUE ;
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg

	   2.3		  6    0.0	 14.4	16.0   31.4    6.6 9yv5dwv8k0awg
	END IF;
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX
END LOOP;

	   1.2		 55    0.0	  3.1	38.8	5.0   59.2 03guhbfpak0w7
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#


	   1.1		116    0.0	  1.2	89.3	4.6    6.8 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
v_end_time := v_now ;
 p_obj#=obj#(+) order by order#

	   1.0		 55    0.0	  1.1	92.4	2.2    6.4 fh5ufah919kun
select /*+ index(idl_sb4$ i_idl_sb41) */ piece#,length,piece from idl_sb4$ where
 obj#=:1 and part=:2 and version=:3 order by piece#
v_now := DBMS_UTILITY.GET_TIME();

	    .3		 92    0.0	  0.3	85.1	9.9    8.3 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
,:bind3,:step_id)

	    .1		 64    0.0	  0.4	20.7   13.7	.6 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;


	    .1		116    0.0	  0.2	44.2   23.7   38.9 8swypbbr0m372
select order#,columns,types from access$ where d_obj#=:1

	    .1		  1    0.0	  1.5	 4.6	8.8   38.4 6tu8uar9skw2q
v_total_time := v_end_time - v_begin_time ;
WITH chains as (SELECT w.instance || '_' || w.sid || '_' || w.SESS_SERIA
L# as sid, case when n.wait_class = 'Idle' then '__' else (w
.BLOCKER_INSTANCE || '_' || w.BLOCKER_SID || '_' || w.BLOCKER_SESS_
SERIAL#) end as bsid, w.osid, decode(w.in_wait, 'TRUE', w.wa
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;

	    .0		 55    0.0	  0.2	27.3	8.3   67.3 a3jpjzh7mtwwp
select /*+ index(idl_ub2$ i_idl_ub21) */ piece#,length,piece from idl_ub2$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
	    .0		 55    0.0	  0.1	63.6   20.9   21.2 9tt2m0mpc2qqp
select /*+ index(idl_char$ i_idl_char1) */ piece#,length,piece from idl_char$ wh
ere obj#=:1 and part=:2 and version=:3 order by piece#

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 28,420
-> Captured SQL account for   93.5% of Total

       Cluster			      Elapsed
END;</pre_sqltext></td></tr>
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------

	    .0		164    0.0	  0.1	52.9   40.0   19.0 grwydz59pu6mc
<tr><td scope="row" class='awrc'><a class="awr" name="8h5ykwqs85vbc"></a>8h5ykwqs85vbc</td><td class='awrc'><pre_sqltext class="awr">DECLARE
select text from view$ where rowid=:1

	    .0		309    0.0	  0.1	39.3   37.9   33.4 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
v_default_schema_number PLS_INTEGER := '1';
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

	    .0		 64    0.0	  0.1	29.5   42.1   30.3 5cu0x10yu88sw
v_update_pct PLS_INTEGER := '15';
merge into sys.wri$_index_usage iu us
ing dual on (
iu.obj# = :objn) when mat
ched then update

v_max_loop_iterations PLS_INTEGER := '0';
	    .0		912    0.0	  0.2	10.4   78.2    7.9 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
v_seconds_to_run PLS_INTEGER := '600';
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	    .0		 15    0.0	  0.1	21.0   20.8   45.1 9fjf75a1s4y19
select procedure#,procedurename,properties,itypeobj#, properties2 from procedure
v_scale PLS_INTEGER := '1048576';
info$ where obj#=:1 order by procedurename desc, overload# desc

	    .0		 22    0.0	  0.0	50.3   17.4   29.0 6h3cwmunz5z8q
select col#, grantee#, privilege#,max(mod(nvl(option$,0),2)), max(bitand(nvl(opt
ion$,0), 8) /8), max(bitand(nvl(option$,0), 16) /16), max(bitand(nvl(option$,0),
v_work_unit PLS_INTEGER := '80' ;
64) /64), max(bitand(nvl(option$,0), 128) /128) from objauth$ where obj#=:1 and
col# is not null group by privilege#, col#, grantee# order by col#, grantee#

	    .0		  1    0.0	  0.1	 6.3   59.5   19.5 3s008f5ragg5n
v_redo_stress  VARCHAR2(12) := 'LITE';
WITH names as (SELECT metric_name, metric_unit, rownum as met_id FROM s
ys.v_$metricname WHERE group_name = 'System Metrics Long Duration' AND
 metric_name IN ( 'Average Synchronous Single-Block Read Latency', 'Background C
PU Usage Per Sec', 'CPU Usage Per Sec', 'Current Logons Count', 'Current Open Cu
v_hot_schema_modulus PLS_INTEGER := '0';

	    .0		  0    0.0	  0.2	 4.7   84.0    2.6 d9wm318cx7far
WITH ash as (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60,0) a
s t, inst_id || '_' || session_id || '_' || session_serial# as sid,
v_do_hotspot   VARCHAR(7) := 'FALSE';
 decode(session_type, 'FOREGROUND', 1, 0) as session_type, nvl(
sql_id,'null') as sql_id, nvl(sql_opcode,0) as sql_opcode, n

			  ------------------------------------------------------


v_hotspot_mb  NUMBER := '8';
Key Instance Activity Stats		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
v_hotspot_offset_mb NUMBER := '16';
-------------------------------- ------------------ -------------- -------------
db block changes			  2,624,198	   4,124.2	   164.0
execute count				    123,265	     193.7	     7.7
gc cr block receive time		      1,284	       2.0	     0.1
gc cr blocks received			      1,313	       2.1	     0.1
v_hotspot_modulus  PLS_INTEGER := '3';
gc current block receive time		      2,819	       4.4	     0.2
gc current blocks received			976	       1.5	     0.1
logons cumulative				382	       0.6	     0.0
opened cursors cumulative		    138,899	     218.3	     8.7

parse count (total)			      7,028	      11.1	     0.4
parse time elapsed				526	       0.8	     0.0
physical reads				  9,128,427	  14,346.2	   570.3
physical writes 			  1,360,387	   2,138.0	    85.0
v_sleep_modulus PLS_INTEGER := '0';
redo size			      1,046,737,896    1,645,051.3	65,396.6
session cursor cache hits		    136,650	     214.8	     8.5
session logical reads			  9,392,804	  14,761.7	   586.8
user calls				      4,732	       7.4	     0.3
user commits				     16,006	      25.2	     1.0
v_sleep_min NUMBER := '.1';
workarea executions - optimal		      1,873	       2.9	     0.1
			  ------------------------------------------------------


v_sleep_max NUMBER := '.5';
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
v_scan_query_pct PLS_INTEGER := '0';
ASSM bg: segment fix monitor			  1	       0.0	     0.0
ASSM cbk:blocks examined			498	       0.8	     0.0
ASSM cbk:blocks marked full			155	       0.2	     0.0
v_obfuscate VARCHAR(5)	:= 'FALSE';
ASSM gsp:L1 bitmaps examined			361	       0.6	     0.0
ASSM gsp:L2 bitmap full 			 13	       0.0	     0.0
ASSM gsp:L2 bitmaps examined			124	       0.2	     0.0

ASSM gsp:Search all				 14	       0.0	     0.0
ASSM gsp:Search hint				  5	       0.0	     0.0
ASSM gsp:Search steal				  7	       0.0	     0.0
ASSM gsp:bump HWM				  7	       0.0	     0.0
ASSM gsp:get free block 			343	       0.5	     0.0

ASSM gsp:get free data block			240	       0.4	     0.0
ASSM gsp:get free index block			103	       0.2	     0.0
ASSM gsp:good hint				238	       0.4	     0.0
ASSM rsv:fill reserve				  2	       0.0	     0.0
ASSM wasted db state change			  3	       0.0	     0.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
Batched IO (bound) vector count 		  0	       0.0	     0.0
Batched IO (full) vector count		    168,800	     265.3	    10.6
Batched IO block miss count		  6,697,541	  10,525.8	   418.4
Batched IO buffer defrag count			  3	       0.0	     0.0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
Batched IO double miss count		     92,620	     145.6	     5.8
Batched IO same unit count			  0	       0.0	     0.0
Batched IO single block count		    125,137	     196.7	     7.8
Batched IO vector block count		  6,741,942	  10,595.6	   421.2

Batched IO vector read count		    132,287	     207.9	     8.3
Block Cleanout Optim referenced 		 17	       0.0	     0.0
CCursor + sql area evicted			 60	       0.1	     0.0
CPU used by this session		    216,708	     340.6	    13.5
CPU used when call started		    123,155	     193.6	     7.7
v_num_tmp NUMBER := 0;
CR blocks created				 20	       0.0	     0.0
Cached Commit SCN referenced		  6,847,362	  10,761.3	   427.8
Client Advertised Receive Window		455	       0.7	     0.0
Client Advertised Send Window			455	       0.7	     0.0

Client Path Maximum Transmission	  4,259,775	   6,694.7	   266.1
Client Send Congestion Window			650	       1.0	     0.0
Client Time (usec) Last Ack Rece		166	       0.3	     0.0
Client Time (usec) Last Data Rec		 18	       0.0	     0.0
v_loop_cnt PLS_INTEGER := 0;
Client Time (usec) Last Data Sen		478	       0.8	     0.0
Client Time (usec) Round Trip Ti	    339,769	     534.0	    21.2
Client Time (usec) Round Trip Ti	    543,990	     854.9	    34.0
Client Total Bytes Acked		  1,017,395	   1,598.9	    63.6
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN
Client Total Bytes Received		    396,403	     623.0	    24.8

Commit SCN cached				  0	       0.0	     0.0
DBWR checkpoint buffers written 	     13,863	      21.8	     0.9
DBWR checkpoints				124	       0.2	     0.0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
DBWR fusion writes				 61	       0.1	     0.0
DBWR object drop buffers written		 36	       0.1	     0.0
DBWR transaction table writes			228	       0.4	     0.0
DBWR undo block writes			     57,408	      90.2	     3.6
EXECUTE IMMEDIATE v_home_schema_str;
DFO trees parallelized				 63	       0.1	     0.0
Effective IO time			     38,397	      60.3	     2.4
HSC Heap Segment Block Changes		  1,257,164	   1,975.8	    78.5

Heap Segment Array Inserts			157	       0.3	     0.0
Heap Segment Array Updates			  8	       0.0	     0.0

Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
KTFB alloc req					  8	       0.0	     0.0
KTFB alloc space (block)		  3,473,408	   5,458.8	   217.0
KTFB alloc time (ms)			     21,066	      33.1	     1.3
IF ( v_hot_schema_modulus != 0 ) THEN
PX local messages recv'd		      3,801	       6.0	     0.2
PX local messages sent			      3,863	       6.1	     0.2

	v_do_hot_schema := TRUE;
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
END IF;
-------------------------------- ------------------ -------------- -------------
PX remote messages recv'd		      1,145	       1.8	     0.1
PX remote messages sent 			656	       1.0	     0.0

Parallel operations not downgrad		 94	       0.2	     0.0
Requests to/from client 			327	       0.5	     0.0
SMON posted for instance recover		  0	       0.0	     0.0
IF ( v_sleep_modulus != 0 )	  THEN
SQL*Net roundtrips to/from clien		263	       0.4	     0.0
TBS Extension: tasks created			  0	       0.0	     0.0
TBS Extension: tasks executed			  0	       0.0	     0.0
	v_do_sleeps := TRUE;
active txn count during cleanout		258	       0.4	     0.0
background timeouts			      6,632	      10.4	     0.4
blocks cleaned out using minact 	    420,132	     660.3	    26.3
branch node splits				  1	       0.0	     0.0
buffer is not pinned count		 20,787,832	  32,670.1	 1,298.8
buffer is pinned count			  8,311,714	  13,062.7	   519.3
END IF;
bytes received via SQL*Net from 	    456,823	     717.9	    28.5
bytes sent via SQL*Net to client	     59,381	      93.3	     3.7
calls to get snapshot scn: kcmgs	    157,506	     247.5	     9.8
calls to kcmgas 			     33,876	      53.2	     2.1
calls to kcmgcs 			      6,345	      10.0	     0.4

cell physical IO interconnect by    100,889,904,128  158,558,379.6   6,303,255.3
change write time			      1,991	       3.1	     0.1
cleanout - number of ktugct call		247	       0.4	     0.0
IF ( v_max_loop_iterations &gt; 0 )  THEN
cleanouts and rollbacks - consis		  6	       0.0	     0.0
cleanouts only - consistent read		 18	       0.0	     0.0
cluster key scan block gets		      3,122	       4.9	     0.2
cluster key scans			      2,092	       3.3	     0.1
	v_loop_control := TRUE ;
commit batch/immediate performed		  2	       0.0	     0.0
commit batch/immediate requested		  2	       0.0	     0.0
commit cleanout failures: block 		 33	       0.1	     0.0
END IF;
commit cleanout failures: buffer		  5	       0.0	     0.0
commit cleanout failures: callba		 18	       0.0	     0.0
commit cleanout failures: cannot		  1	       0.0	     0.0

commit cleanouts			  1,258,853	   1,978.4	    78.7
commit cleanouts successfully co	  1,258,796	   1,978.3	    78.7
commit immediate performed			  2	       0.0	     0.0
commit immediate requested			  2	       0.0	     0.0
IF ( v_update_pct = 0 ) 	  THEN
commit txn count during cleanout		139	       0.2	     0.0
consistent changes			      8,210	      12.9	     0.5
consistent gets 			  7,954,173	  12,500.8	   497.0
	v_select_only_workload := TRUE;
consistent gets examination		    248,331	     390.3	    15.5
consistent gets examination (fas	    247,904	     389.6	    15.5
END IF;
consistent gets from cache		  7,954,173	  12,500.8	   497.0
consistent gets pin			  7,705,842	  12,110.5	   481.4
consistent gets pin (fastpath)		  7,157,871	  11,249.3	   447.2

cursor authentications				246	       0.4	     0.0
data blocks consistent reads - u		 15	       0.0	     0.0
db block changes			  2,624,198	   4,124.2	   164.0
IF ( v_update_pct = 100 )	  THEN
db block gets				  1,438,630	   2,261.0	    89.9
db block gets direct			      2,230	       3.5	     0.1
db block gets from cache		  1,436,400	   2,257.4	    89.7
db block gets from cache (fastpa	    118,500	     186.2	     7.4
	v_update_only_workload := TRUE;
deferred (CURRENT) block cleanou	    422,333	     663.7	    26.4
dirty buffers inspected 		  1,180,061	   1,854.6	    73.7
enqueue conversions			      1,692	       2.7	     0.1
END IF;
enqueue releases			     65,449	     102.9	     4.1
enqueue requests			     65,287	     102.6	     4.1
enqueue timeouts				  8	       0.0	     0.0
enqueue waits					880	       1.4	     0.1

exchange deadlocks				  1	       0.0	     0.0
execute count				    123,265	     193.7	     7.7

IF ( v_scan_query_pct = 0 ) 	THEN
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
	v_random_workload_only := TRUE;
-------------------------------- ------------------ -------------- -------------
file io service time			265,320,520	 416,977.2	16,576.3
free buffer inspected			  9,223,397	  14,495.5	   576.3
free buffer requested			  9,368,094	  14,722.9	   585.3
END IF;
gc blocks compressed			      1,858	       2.9	     0.1
gc blocks lost					 63	       0.1	     0.0
gc cleanout applied				  0	       0.0	     0.0

gc cleanout saved				  7	       0.0	     0.0
gc cr anti locks created		    112,626	     177.0	     7.0
gc cr anti locks expanded			  2	       0.0	     0.0
gc cr anti locks shrunk 			329	       0.5	     0.0
IF ( v_scan_query_pct = 100 ) 	THEN
gc cr block build time				  0	       0.0	     0.0
gc cr block flush time				 11	       0.0	     0.0
gc cr block receive time		      1,284	       2.0	     0.1
gc cr blocks built				146	       0.2	     0.0
	v_scan_workload_only := TRUE;
gc cr blocks flushed				  6	       0.0	     0.0
gc cr blocks received			      1,313	       2.1	     0.1
gc cr blocks served			      1,267	       2.0	     0.1
END IF;
gc cr multiblock grant time		 11,882,806	  18,675.0	   742.4
gc cr multiblock grants received	  6,397,173	  10,053.8	   399.7
gc current block flush time			 29	       0.1	     0.0
gc current block pin time			  0	       0.0	     0.0

gc current block receive time		      2,819	       4.4	     0.2
gc current blocks flushed			 18	       0.0	     0.0
gc current blocks pinned			  0	       0.0	     0.0
v_seconds_to_run := v_seconds_to_run * 100 ;
gc current blocks received			976	       1.5	     0.1
gc current blocks served		      1,037	       1.6	     0.1
gc force cr read cr				154	       0.2	     0.0
gc force cr read current			  7	       0.0	     0.0

gc kbytes saved 			      7,458	      11.7	     0.5
gc kbytes sent				     10,974	      17.3	     0.7
gc local grants 			  5,074,648	   7,975.3	   317.1
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
gc merge pi bg					  0	       0.0	     0.0
gc merge pi fg					 35	       0.1	     0.0
gc no change made				  1	       0.0	     0.0
gc read time waited				  0	       0.0	     0.0

gc read waits					  0	       0.0	     0.0
gc reader bypass grants 			 10	       0.0	     0.0
gc reader bypass waits				  8	       0.0	     0.0
gc remote grants			  4,299,767	   6,757.5	   268.6
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
gc status messages received		     22,483	      35.3	     1.4
gc status messages sent 		    144,102	     226.5	     9.0
gcs affinity lock grants		     55,203	      86.8	     3.5
gcs anti-locks created			    112,635	     177.0	     7.0
-- DBMS_RANDOM.seed (val =&gt; v_seed);
gcs data block access record dro	      1,751	       2.8	     0.1
gcs data block access records		  8,595,182	  13,508.2	   537.0
gcs messages sent			 16,536,165	  25,988.2	 1,033.1

gcs read-mostly lock failures		    121,308	     190.7	     7.6
gcs read-mostly lock grants		    918,087	   1,442.9	    57.4
gcs stats management (SCM) proce		 22	       0.0	     0.0
ges messages sent			      9,090	      14.3	     0.6
global enqueue get time 		      2,835	       4.5	     0.2
global enqueue gets async			  0	       0.0	     0.0
v_begin_time := DBMS_UTILITY.GET_TIME();
global enqueue gets sync		     89,194	     140.2	     5.6
global enqueue releases 		     89,084	     140.0	     5.6
heap block compress			      7,028	      11.1	     0.4
hot buffers moved to head of LRU	    107,829	     169.5	     6.7
immediate (CR) block cleanout ap		 24	       0.0	     0.0
immediate (CURRENT) block cleano		339	       0.5	     0.0
index crx upgrade (positioned)			 72	       0.1	     0.0
v_now := v_begin_time ;
index fast full scans (full)			  0	       0.0	     0.0

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
v_brick_wall := v_now + v_seconds_to_run ;
-------------------------------- ------------------ -------------- -------------
index fetch by key			     11,976	      18.8	     0.8
index range scans			    116,702	     183.4	     7.3
leaf node splits				 99	       0.2	     0.0
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
lob reads					795	       1.3	     0.1
lob writes				      4,910	       7.7	     0.3
lob writes unaligned			      4,910	       7.7	     0.3

logical read bytes from cache	     76,927,574,016  120,899,227.6   4,806,171.1
logons cumulative				382	       0.6	     0.0
max cf enq hold time				477	       0.8	     0.0
messages received			    125,101	     196.6	     7.8
messages sent				    125,101	     196.6	     7.8
----------------------------------------------------------------------------------------------------------------------
min active SCN optimization appl		  1	       0.0	     0.0
no work - consistent read gets		  7,691,329	  12,087.7	   480.5
non-idle wait count			  4,470,210	   7,025.4	   279.3
opened cursors cumulative		    138,899	     218.3	     8.7
-- The following WHILE loop is the master work loop control
parse count (describe)				  0	       0.0	     0.0
parse count (failures)				  0	       0.0	     0.0
parse count (hard)				773	       1.2	     0.1
----------------------------------------------------------------------------------------------------------------------
parse count (total)			      7,028	      11.1	     0.4
parse time cpu					194	       0.3	     0.0
parse time elapsed				526	       0.8	     0.0
physical read IO requests		  8,485,282	  13,335.5	   530.1
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
physical read bytes		     74,780,073,984  117,524,220.7   4,672,002.6
physical read total IO requests 	  8,491,603	  13,345.4	   530.5
physical read total bytes	     76,396,550,144  120,064,671.5   4,772,994.5
physical read total multi block 	      1,473	       2.3	     0.1

physical reads				  9,128,427	  14,346.2	   570.3
physical reads cache			  9,128,399	  14,346.2	   570.3
physical reads cache prefetch		  7,250,167	  11,394.4	   453.0
physical reads direct				 28	       0.0	     0.0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
physical reads direct (lob)			 28	       0.0	     0.0
physical reads direct temporary 		  0	       0.0	     0.0
physical reads prefetch warmup		     25,532	      40.1	     1.6
physical write IO requests		  1,301,272	   2,045.1	    81.3
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
physical write bytes		     11,144,290,304   17,514,345.2     696,257.1
physical write total IO requests	  1,328,858	   2,088.4	    83.0
physical write total bytes	     12,241,909,248   19,239,361.1     764,832.5
physical write total multi block	      4,079	       6.4	     0.3
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
physical writes 			  1,360,387	   2,138.0	    85.0
physical writes direct			      2,254	       3.5	     0.1
physical writes direct (lob)			 24	       0.0	     0.0
physical writes direct temporary	      2,022	       3.2	     0.1
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
physical writes from cache		  1,358,133	   2,134.4	    84.9
physical writes non checkpoint		  1,359,291	   2,136.3	    84.9
pinned buffers inspected			177	       0.3	     0.0
prefetch warmup blocks aged out 	    112,668	     177.1	     7.0
			DBMS_LOCK.SLEEP(v_num_tmp);
prefetched blocks aged out befor	    526,398	     827.3	    32.9
process last non-idle time			627	       1.0	     0.0
recursive calls 			    207,878	     326.7	    13.0
recursive cpu usage			    109,964	     172.8	     6.9
		END IF;
redo KB read				    847,872	   1,332.5	    53.0
redo blocks checksummed by FG (e	    780,589	   1,226.8	    48.8
redo blocks written			  2,124,958	   3,339.6	   132.8
	END IF;
redo blocks written (group 0)		  1,756,426	   2,760.4	   109.7
redo blocks written (group 1)		    368,532	     579.2	    23.0
redo entries				  1,384,984	   2,176.6	    86.5
redo size			      1,046,737,896    1,645,051.3	65,396.6

redo size for direct writes			900	       1.4	     0.1
redo subscn max counts				226	       0.4	     0.0
redo synch time 				 70	       0.1	     0.0

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
redo synch time (usec)			    605,535	     951.7	    37.8
redo synch time overhead (usec) 	      4,032	       6.3	     0.3
redo synch time overhead count (		 50	       0.1	     0.0
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
redo synch writes				 71	       0.1	     0.0
redo wastage				  6,551,716	  10,296.7	   409.3
redo write active strands		     26,897	      42.3	     1.7
redo write broadcast ack count			  0	       0.0	     0.0
			v_sharing_schema := TRUE ;
redo write broadcast ack time			  0	       0.0	     0.0
redo write finish time			325,729,326	 511,915.6	20,350.5
redo write gather time			 12,112,495	  19,036.0	   756.8
redo write info find				 50	       0.1	     0.0
		ELSE
redo write schedule time		 12,333,310	  19,383.0	   770.5
redo write size count (   4KB)			543	       0.9	     0.0
redo write size count (   8KB)			775	       1.2	     0.1
redo write size count (  16KB)		      1,534	       2.4	     0.1
			IF ( v_sharing_schema = TRUE ) THEN
redo write size count (  32KB)		      2,597	       4.1	     0.2
redo write size count ( 128KB)		      7,915	      12.4	     0.5
redo write size count ( 256KB)		      1,911	       3.0	     0.1
redo write size count ( 512KB)			277	       0.4	     0.0
				EXECUTE IMMEDIATE v_home_schema_str;
redo write size count (1024KB)			 28	       0.0	     0.0
redo write size count (inf)			  3	       0.0	     0.0
redo write time 			     32,634	      51.3	     2.0
redo write time (usec)			326,350,152	 512,891.3	20,389.2
				v_sharing_schema := FALSE;
redo write total time			343,244,701	 539,442.7	21,444.8
redo write worker delay (usec)		 10,796,035	  16,967.0	   674.5
redo write worker delay count		     15,583	      24.5	     1.0
redo writes				     15,583	      24.5	     1.0
			END IF;
redo writes (group 0)			     10,250	      16.1	     0.6
redo writes (group 1)			      5,333	       8.4	     0.3
redo writes adaptive all		     15,583	      24.5	     1.0
redo writes adaptive worker		     15,583	      24.5	     1.0
		END IF;
rollback changes - undo records 		  0	       0.0	     0.0
rollbacks only - consistent read		  9	       0.0	     0.0
rows fetched via callback		      5,689	       8.9	     0.4
saved cleanouts 				  0	       0.0	     0.0
	END IF;
saved cleanouts successfully com		  0	       0.0	     0.0
securefile allocation bytes		    196,608	     309.0	    12.3
securefile allocation chunks			 10	       0.0	     0.0

securefile bytes non-transformed	    174,381	     274.1	    10.9
securefile direct read bytes		    229,376	     360.5	    14.3
securefile direct read ops			 28	       0.0	     0.0
securefile direct write bytes		    196,608	     309.0	    12.3
	-- Choose the random block. The v_do_hotspot handler that follows can override.
securefile direct write ops			 10	       0.0	     0.0
securefile number of non-transfo		 11	       0.0	     0.0
segment chunks allocation from d		 10	       0.0	     0.0
segment dispenser allocations			 10	       0.0	     0.0
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
segment dispenser load tasks			  2	       0.0	     0.0
segment prealloc ops				  5	       0.0	     0.0
segment prealloc tasks				  2	       0.0	     0.0
segment prealloc time (ms)			535	       0.8	     0.0

session connect time				665	       1.1	     0.0
session cursor cache hits		    136,650	     214.8	     8.5
session logical reads			  9,392,804	  14,761.7	   586.8
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;
shared hash latch upgrades - no 	  2,525,176	   3,968.6	   157.8

shared hash latch upgrades - wai		  1	       0.0	     0.0
shared io pool buffer get succes		 38	       0.1	     0.0
sorts (memory)				      2,393	       3.8	     0.2
sorts (rows)				  2,564,757	   4,030.8	   160.2
----------------------------------------------------------------------------------------------------------------------
sql area evicted				 60	       0.1	     0.0
sql area purged 				 60	       0.1	     0.0

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by statistic name
-- The following section governs what the SQL execution will be (UPDATE or SELECT)

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
summed dirty queue length		  7,538,238	  11,847.1	   471.0
switch current caused by our pin		136	       0.2	     0.0
----------------------------------------------------------------------------------------------------------------------
switch current to new buffer			137	       0.2	     0.0
table fetch by rowid			 13,852,675	  21,770.8	   865.5
table fetch continued row			490	       0.8	     0.0
table scan blocks gotten		    402,086	     631.9	    25.1

table scan disk non-IMC rows got	  1,218,012	   1,914.2	    76.1
table scan rows gotten			  1,218,012	   1,914.2	    76.1
table scans (short tables)		      1,491	       2.3	     0.1
temp space allocated (bytes)		  3,145,728	   4,943.8	   196.5
	IF  ( v_select_only_workload = TRUE ) THEN
total cf enq hold time			      3,068	       4.8	     0.2
total number of cf enq holders			251	       0.4	     0.0
total number of times SMON poste		  0	       0.0	     0.0
transaction lock background get 		  0	       0.0	     0.0
		-- handle case where user specified zero pct updates (a SELECT-only workload)
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
undo change vector size 		432,003,356	 678,935.6	26,990.1
user calls				      4,732	       7.4	     0.3
		v_do_update := FALSE;
user commits				     16,006	      25.2	     1.0
user logons cumulative				  1	       0.0	     0.0
user logouts cumulative 			 65	       0.1	     0.0
workarea executions - optimal		      1,873	       2.9	     0.1
		v_update_quota := TRUE ;
write clones created in foregrou		 14	       0.0	     0.0
			  ------------------------------------------------------


Instance Activity Stats - Absolute ValuesDB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	ELSE
-> Statistics with absolute values (should not be diffed)

Statistic			     Begin Value       End Value
-------------------------------- --------------- ---------------
		IF ( v_update_only_workload = TRUE ) THEN
logons current				     170	     138
opened cursors current			     410	     102
session cursor cache count		   3,715	   4,357
session pga memory		     803,783,984     531,808,304
			-- handle case where user specified 100% updates
session pga memory max		     868,177,136     636,603,056
session uga memory		     288,914,888     235,747,672
session uga memory max		     396,290,048   1,316,929,584
			  ------------------------------------------------------

			v_do_update := TRUE;
Instance Activity Stats - Thread ActivityDB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour
			v_update_quota := FALSE;
-------------------------------- ------------------ ---------
log switches (derived)				  0	  .00
			  ------------------------------------------------------

IOStat by Function summary		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		ELSE
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc

			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time
--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re     69G 1.3E+04 111.085      0M     0.0      0M    1.9M   4.38ms
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
DBWR		     0M     0.0      0M   10.1G  1990.2 16.231M       0
Others		   1.5G     8.6  2.376M     17M     1.0   .027M    3398   2.33ms
LGWR		     0M     0.0      0M   1022M    41.8  1.606M   15.4K  20.07ms
Direct Writes	     0M     0.0      0M     10M     0.0   .016M       0
			IF ( v_update_quota = FALSE ) THEN
Streams AQ	     1M     0.2   .002M      0M     0.0      0M     127   2.17ms
Direct Reads	     0M     0.0      0M      0M     0.0      0M       0
TOTAL:		  70.5G 1.3E+04 113.463   11.1G  2033.1  17.88M    1.9M   4.50ms
			  ------------------------------------------------------
				-- Handle case where user has set UPDATE_PCT to a valid value

IOStat by Filetype summary		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
				--
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc

		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
				-- We are doing updates during this run and quota has not been met yet
-------------- ------- ------- ------- ------- ------- ------- -------- --------
Data File	   69G 1.3E+04 110.989	 10.1G	1989.4 16.227M 690.36us  16.50ms
Log File	  1.4G	   2.5	2.282M	 1022M	  41.8	1.606M 160.26us 1716.18m
Control File	   59M	   6.0	 .093M	    9M	   0.9	 .014M	24.83us
Temp File	   17M	   0.2	 .027M	   17M	   0.2	 .027M	69.31us    .00ns
				-- We still vacillate until update quota has been met
Other		   30M	   1.5	 .047M	    0M	   0.0	    0M	 2.45ms
TOTAL:		 70.5G 1.3E+04 113.438	 11.1G	2032.3 17.874M 690.25us 1691.75m
			  ------------------------------------------------------


IOStat by Function/Filetype summary	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Ordered by (Data Read + Write) desc for each function

				IF ( MOD(v_random_block,  2) = 0 ) THEN
  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
					v_do_update := TRUE;
     69G 1.3E+04 110.993      0M     0.0      0M    1.7M     3.70ms
 Buffer Cache Reads (Data File)
     69G 1.3E+04 110.966      0M     0.0      0M    1.7M     3.70ms
 Buffer Cache Reads (Temp File)
				ELSE
     17M     0.2   .027M      0M     0.0      0M     118   330.51us
 DBWR (Data File)
      0M     0.0      0M   10.1G  1986.0 16.197M       0
DBWR
					v_do_update := FALSE;
      0M     0.0      0M   10.1G  1986.1 16.197M       0
 DBWR (Temp File)
      0M     0.0      0M      0M     0.1      0M       0
Others
    1.5G     8.6  2.375M     17M     1.0   .027M    3109   317.75us
				END IF;
 Others (Log File)
    1.4G     2.5  2.282M      0M     0.0      0M     156   510.15us
 Others (Control File)
     59M     6.0   .093M      9M     0.9   .014M    2945   307.09us
 Others (Temp File)
			ELSE
      0M     0.0      0M      6M     0.1   .009M       0
 Others (Data File)
      0M     0.0      0M      2M     0.0   .003M       8   491.00us
 LGWR (Log File)
      0M     0.0      0M   1022M    41.8  1.606M       0
				-- UPDATE quota has been filled,  force drain some SELECTs
LGWR
      0M     0.0      0M   1022M    41.8  1.606M       0
 Streams AQ (Data File)
      1M     0.2   .002M      0M     0.0      0M     127     2.17ms
Streams AQ
				v_do_update := FALSE;
      1M     0.2   .002M      0M     0.0      0M     127     2.17ms
 Direct Reads (Data File)
      0M     0.0      0M      0M     0.0      0M       0
 Direct Reads (Temp File)
			END IF;
      0M     0.0      0M      0M     0.0      0M       0
Direct Reads
      0M     0.0      0M      0M     0.0      0M       0
TOTAL:
		END IF;
   70.4G 1.3E+04 113.369   11.1G  2029.0  17.83M    1.7M     3.69ms
			  ------------------------------------------------------


Tablespace IO Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------



File IO Stats				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------


Buffer Pool Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Standard block size Pools  D: default,  K: keep,  R: recycle
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k
-- The type of SQL is now determined...execute it in the following section

							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
----------------------------------------------------------------------------------------------------------------------
D      917,088	  3    9,416,587    9,146,849	1,369,027      0      0        2
			  ------------------------------------------------------

Checkpoint Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

-> Total Physical Writes:		     1,360,387

					  Other    Autotune	 Thread
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
     Writes	 Writes      Writes	 Writes      Writes	 Writes
	IF ( v_do_update != TRUE ) THEN
----------- ----------- ----------- ----------- ----------- -----------
	  0	      0 	  0	      0      13,860	      0
			  ------------------------------------------------------

Instance Recovery Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		--
-> B: Begin Snapshot,  E: End Snapshot

									    Estd
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
		-- Do a SELECT statement
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
B     0    49	108205	 202589 1.70E+07 1.70E+07      N/A	N/A    N/A    16
E     0    75	 59653	 950497 1.70E+07 1.70E+07      N/A	N/A    N/A    30
		-- Work out scan or random
			  ------------------------------------------------------

MTTR Advisory				     DB/Inst: P60SDB/p60sdb1  Snap: 54

		  No data exists for this section of the report.
		IF  ( v_random_workload_only = TRUE ) THEN
			  ------------------------------------------------------

Buffer Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 54
-> Only rows with estimated physical reads >0 are displayed
-> ordered by Block Size, Buffers For Estimate
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)

			v_do_scan_query := FALSE;
				    Est
				   Phys      Estimated			Est
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
--- -------- ------ ------------ ------ -------------- ------------ -------
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
D	 768	 .1	      89    1.0 	10,020		  1  9060.0
D      1,536	 .2	     179    1.0 	 9,965		  1  9008.0
D      2,304	 .3	     268    1.0 	 9,952		  1  8996.0
	ELSE
D      3,072	 .4	     358    1.0 	 9,940		  1  8985.0
D      3,840	 .5	     447    1.0 	 9,925		  1  8971.0
D      4,608	 .6	     537    1.0 	 9,907		  1  8954.0
D      5,376	 .7	     626    1.0 	 9,890		  1  8938.0
		--
D      6,144	 .8	     716    1.0 	 9,875		  1  8924.0
D      6,912	 .9	     805    1.0 	 9,861		  1  8911.0
		-- Do an UPDATE statement
D      7,680	1.0	     895    1.0 	 9,849		  1  8900.0
D      7,872	1.0	     917    1.0 	 9,845		  1  8896.0
D      8,448	1.1	     984    1.0 	 9,835		  1  8887.0
		--
D      9,216	1.2	   1,074    1.0 	 9,820		  1  8873.0
D      9,984	1.3	   1,163    1.0 	 9,805		  1  8859.0
D     10,752	1.4	   1,253    1.0 	 9,792		  1  8847.0

D     11,520	1.5	   1,342    1.0 	 9,781		  1  8836.0
D     12,288	1.6	   1,432    1.0 	 9,769		  1  8825.0
D     13,056	1.7	   1,521    1.0 	 9,758		  1  8815.0
D     13,824	1.8	   1,610    1.0 	 9,746		  1  8804.0
		v_my_serial := v_my_serial + v_loop_cnt ;
D     14,592	1.9	   1,700    1.0 	 9,736		  1  8795.0
D     15,360	2.0	   1,789    1.0 	 9,725		  1  8784.0
			  ------------------------------------------------------



PGA Aggr Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
--------------- ------------------ --------------------------
		--
	  100.0 	       356			    0
			  ------------------------------------------------------

PGA Aggr Target Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
		--
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt
		v_updates_cnt := v_updates_cnt + 1;
-> %Man W/A Mem    - percentage of workarea memory under manual control

						%PGA  %Auto   %Man

    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
B      3,215	  1,708    1,548.1	  0.0	  .0	 .0	.0    329,210
E      3,215	  1,921    1,309.5	  0.0	  .0	 .0	.0    329,210
			  ------------------------------------------------------
			v_update_quota := TRUE;

PGA Aggr Target Histogram		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Optimal Executions are purely in-memory operations

		END IF;
  Low	  High
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
------- ------- -------------- -------------- ------------ ------------
	END IF ;
     2K      4K 	 1,440		1,440		 0	      0
    64K    128K 	    67		   67		 0	      0
   128K    256K 	    38		   38		 0	      0
   256K    512K 	    36		   36		 0	      0
----------------------------------------------------------------------------------------------------------------------
   512K   1024K 	   157		  157		 0	      0
     1M      2M 	   137		  137		 0	      0
     2M      4M 	    18		   18		 0	      0
			  ------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.

PGA Memory Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 54
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0
----------------------------------------------------------------------------------------------------------------------

				       Estd Extra    Estd P Estd PGA
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd

  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
---------- ------- ---------------- ---------------- ------ -------- -------
       402     0.1	    1,478.8		62.4   96.0	  12 2.8E+06
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
       804     0.3	    1,478.8		62.4   96.0	  12 2.8E+06
		--
     1,608     0.5	    1,478.8		 0.0  100.0	   0 2.7E+06
     2,411     0.8	    1,478.8		 0.0  100.0	   0 2.7E+06
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
     3,215     1.0	    1,478.8		 0.0  100.0	   0 2.7E+06
     3,858     1.2	    1,478.8		 0.0  100.0	   0 2.7E+06
		-- so reset flags and counters before continuing
     4,501     1.4	    1,478.8		 0.0  100.0	   0 2.7E+06
		--
     5,144     1.6	    1,478.8		 0.0  100.0	   0 2.7E+06
     5,787     1.8	    1,478.8		 0.0  100.0	   0 2.7E+06
     6,430     2.0	    1,478.8		 0.0  100.0	   0 2.7E+06
     9,645     3.0	    1,478.8		 0.0  100.0	   0 2.7E+06
		v_update_quota := FALSE;
    12,860     4.0	    1,478.8		 0.0  100.0	   0 2.7E+06
    19,290     6.0	    1,478.8		 0.0  100.0	   0 2.7E+06
    25,720     8.0	    1,478.8		 0.0  100.0	   0 2.7E+06
		v_updates_cnt := 0;
			  ------------------------------------------------------


Shared Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 54
		v_selects_cnt := 0;
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
   in the Library Cache, and the physical number of memory objects associated
	END IF;
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.


				       Est LC Est LC  Est LC Est LC
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
   1,152    .8	      3        1,314	  320	  .3	 776	8.5	      24
   1,184    .8	     35        1,923	  567	  .6	 529	5.8	      34
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
   1,216    .8	     67        2,453	  962	 1.0	 134	1.5	      60
   1,248    .8	     98        3,982	  979	 1.0	 117	1.3	      61
   1,280    .9	    130        5,292	  982	 1.0	 114	1.3	      61
		-- so reset flags and counters
   1,312    .9	    138        5,764	  983	 1.0	 113	1.2	      61
   1,344    .9	    138        5,764	  987	 1.0	 109	1.2	      61
   1,376    .9	    138        5,764	  992	 1.0	 104	1.1	      61
   1,408   1.0	    138        5,764	  996	 1.0	 100	1.1	      61
		v_scan_query_quota := FALSE;
   1,440   1.0	    138        5,764	1,000	 1.0	  96	1.1	      61
   1,472   1.0	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,504   1.0	    138        5,764	1,005	 1.0	  91	1.0	      61
		v_scan_queries_cnt := 0;
   1,536   1.0	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,568   1.1	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,600   1.1	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,632   1.1	    138        5,764	1,005	 1.0	  91	1.0	      61
		v_random_access_queries_cnt := 0;
   1,664   1.1	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,696   1.2	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,728   1.2	    138        5,764	1,005	 1.0	  91	1.0	      61
	END IF;
   1,760   1.2	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,792   1.2	    138        5,764	1,005	 1.0	  91	1.0	      61
   1,952   1.3	    138        5,764	1,005	 1.0	  91	1.0	      61

   2,112   1.4	    138        5,764	1,005	 1.0	  91	1.0	      61
   2,272   1.5	    138        5,764	1,005	 1.0	  91	1.0	      61
   2,432   1.7	    138        5,764	1,005	 1.0	  91	1.0	      61
   2,592   1.8	    138        5,764	1,005	 1.0	  91	1.0	      61
	v_loop_cnt := v_loop_cnt + 1 ;
   2,752   1.9	    138        5,764	1,005	 1.0	  91	1.0	      61
   2,912   2.0	    138        5,764	1,005	 1.0	  91	1.0	      61
	v_now := DBMS_UTILITY.GET_TIME();
   3,072   2.1	    138        5,764	1,005	 1.0	  91	1.0	      61
			  ------------------------------------------------------

SGA Target Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 54


SGA Target   SGA Size	    Est DB     Est Physical
  Size (M)     Factor	  Time (s)	      Reads
---------- ---------- ------------ ----------------
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
     2,416	  0.3	    39,754	  9,983,720
     3,624	  0.4	    39,691	  9,928,838
     4,832	  0.5	    39,667	  9,903,357
     6,040	  0.6	    39,647	  9,871,995
     7,248	  0.8	    39,624	  9,855,335
		-- If this is a fixed-iteration count test cycle and we've hit the number of
     8,456	  0.9	    39,596	  9,825,933
     9,664	  1.0	    39,580	  9,800,452
    10,872	  1.1	    39,560	  9,785,751
    12,080	  1.3	    39,533	  9,758,310
		-- iterations then set exit flag
    13,288	  1.4	    39,521	  9,734,789
    14,496	  1.5	    39,501	  9,724,008
    15,704	  1.6	    39,481	  9,702,447
    16,912	  1.8	    39,469	  9,690,687
		v_stop_immediate := TRUE ;
    18,120	  1.9	    39,469	  9,690,687
    19,328	  2.0	    39,469	  9,690,687
			  ------------------------------------------------------

	END IF;
Streams Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 54

		  No data exists for this section of the report.
			  ------------------------------------------------------
END LOOP;

Java Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 54

		  No data exists for this section of the report.

			  ------------------------------------------------------

Buffer Wait Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_end_time := v_now ;
-> ordered by wait time desc, waits desc

Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
v_now := DBMS_UTILITY.GET_TIME();
data block		     2			 0		0
			  ------------------------------------------------------


v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Enqueue Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data

-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
v_total_time := v_end_time - v_begin_time ;
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
RO-Multiple Object Reuse (fast object reuse)
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
	 810	      810	    0	      284	     4		15.82
TM-DML
      17,040	   17,040	    0	       61	     1		22.92
PS-PX Process Reservation
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
       1,349	    1,346	    3	      316	     1		 3.52
CR-Reuse Block Range (block range reuse ckpt)
	  28	       28	    0	       11	     1		86.82
CF-Controlfile Transaction
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
       1,640	    1,640	    0	       50	     0		 1.90
TO-Temp Object
	 197	      197	    0	       53	     0		 1.42
XL-ASM Extent Fault Lock (fault extent map)

	   3		3	    0		1	     0		40.00
WF-AWR Flush
	  22	       21	    1	       14	     0		 1.86
TQ-Queue table enqueue (TM contention)
END;</pre_sqltext></td></tr>
	  12	       12	    0		8	     0		 2.88
TT-Tablespace
	 135	      135	    0		8	     0		 2.00
FB-Format Block
	  14	       14	    0		4	     0		 2.75
<tr><td scope="row" class='awrnc'><a class="awr" name="8swypbbr0m372"></a>8swypbbr0m372</td><td class='awrnc'><pre_sqltext class="awr">select order#, columns, types from access$ where d_obj#=:1</pre_sqltext></td></tr>
HW-Segment High Water Mark
	 168	      168	    0		9	     0		 1.11
DW-In memory Dispenser
	   5		3	    2		5	     0		 1.60
TX-Transaction
<tr><td scope="row" class='awrc'><a class="awr" name="90ujc8r1t56fr"></a>90ujc8r1t56fr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
      16,672	   16,672	    0		2	     0		 3.50
WT-AWR CDB-Wide Table Lock
	  18	       18	    0		5	     0		 1.00
v_default_schema_number PLS_INTEGER := '35';
JS-Job Scheduler (job run lock - synchronize)
	   4		4	    0		2	     0		 1.50
RA-Real-Time ADDM Flood Control (RT ADDM flood control)
	   2		2	    0		2	     0		 1.00
v_update_pct PLS_INTEGER := '15';
PW-Buffer Cache PreWarm (flush prewarm buffers)
	  13	       11	    2		1	     0		 2.00
TX-Transaction (index contention)
	   2		2	    0		2	     0		  .50
v_max_loop_iterations PLS_INTEGER := '0';
TD-KTF map table enqueue (KTF dump entries)
	   1		1	    0		1	     0		 1.00
TA-Instance Undo
	   2		2	    0		2	     0		  .00
JG-Job Scheduler1
v_seconds_to_run PLS_INTEGER := '600';
      11,628	   11,628	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)
      11,628	   11,628	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
v_scale PLS_INTEGER := '1048576';
       1,106	    1,106	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 520	      520	    0		0	     0		  N/A
CU-Cursor
v_work_unit PLS_INTEGER := '80' ;
	 485	      485	    0		0	     0		  N/A
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
	 437	      437	    0		0	     0		  N/A
SE-Session Migration
v_redo_stress  VARCHAR2(12) := 'LITE';
	 418	      418	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)
	 223	      223	    0		0	     0		  N/A
BU-Buddy Instance Context (recovery set construct)
v_hot_schema_modulus PLS_INTEGER := '0';
	 207	      207	    0		0	     0		  N/A

Enqueue Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> only enqueues with requests are shown
v_do_hotspot   VARCHAR(7) := 'FALSE';
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
v_hotspot_mb  NUMBER := '8';
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
IT-In-Mem Temp Table Meta Creation
v_hotspot_offset_mb NUMBER := '16';
	 168	      168	    0		0	     0		  N/A
FP-File Object (global fob contention)
	 156	      156	    0		0	     0		  N/A
IS-Instance State
v_hotspot_modulus  PLS_INTEGER := '3';
	 126	      126	    0		0	     0		  N/A
MR-Media Recovery
	  77	       77	    0		0	     0		  N/A
PR-Process Startup

	  51	       51	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
	  48	       48	    0		0	     0		  N/A
TQ-Queue table enqueue (INI contention)
v_sleep_modulus PLS_INTEGER := '0';
	  14	       14	    0		0	     0		  N/A
TQ-Queue table enqueue (TM Job cache use)
	  14	       14	    0		0	     0		  N/A
SH-Active Session History Flushing
v_sleep_min NUMBER := '.1';
	  13	       13	    0		0	     0		  N/A
XR-Quiesce / Force Logging (database force logging)
	  13	       13	    0		0	     0		  N/A
TH-Threshold Chain (metric threshold evaluation)
v_sleep_max NUMBER := '.5';
	  10	       10	    0		0	     0		  N/A
AE-Edition Lock (lock)
	   9		9	    0		0	     0		  N/A
RS-Reclaimable Space (write alert level)
	   4		4	    0		0	     0		  N/A
v_scan_query_pct PLS_INTEGER := '0';
RS-Reclaimable Space (read alert level)
	   2		2	    0		0	     0		  N/A
			  ------------------------------------------------------

v_obfuscate VARCHAR(5)	:= 'FALSE';

Undo Segment Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Min/Max TR (mins) - Min and Max Tuned Retention (minutes)

-> STO - Snapshot Too Old count,  OOS - Out of Space count
-> Undo segment block stats:
-> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed

-> eS - expired   Stolen,   eR - expired   Released,   eU - expired   reUsed

Undo   Num Undo       Number of  Max Qry   Max Tx Min/Max   STO/     uS/uR/uU/
 TS# Blocks (K)    Transactions  Len (s) Concurcy TR (mins) OOS      eS/eR/eU
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
---- ---------- --------------- -------- -------- --------- ----- --------------
   2	   45.6 	 14,598       45       63 15/15     0/0   0/0/0/0/0/0
			  ------------------------------------------------------

Undo Segment Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
-> Most recent 35 Undostat rows, ordered by Time desc

		Num Undo    Number of Max Qry  Max Tx Tun Ret STO/    uS/uR/uU/

End Time	  Blocks Transactions Len (s)	Concy  (mins) OOS     eS/eR/eU
------------ ----------- ------------ ------- ------- ------- ----- ------------
12-Feb 12:19	  45,561       14,598	   45	   63	   15 0/0   0/0/0/0/0/0
			  ------------------------------------------------------
v_num_tmp NUMBER := 0;


Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for

   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_loop_cnt PLS_INTEGER := 0;
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_rowcnt PLS_INTEGER := 0;
AQ Background: interrupt	      1    0.0		   0	       23    0.0
AQ Coord jobx_kwsbgsgn l	     23    0.0		   0		0    N/A
AQ Message drive state o	     41    0.0		   0		0    N/A
AQ Sharded master pool l	     23    0.0		   0		0    N/A
v_updates_cnt PLS_INTEGER := 0;
AQ Slave freSlvL_kwsbgsg	     32    3.1	  0.0	   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
AQ dequeue txn counter l	    126    0.0		   0		0    N/A
AQ process state object 	      9    0.0		   0		0    N/A
v_selects_cnt PLS_INTEGER := 0;
AQ: IPC master latch		      3    0.0		   0		0    N/A
ASM Keyed state latch		    139    0.0		   0		0    N/A
ASM allocation			 37,877    0.0		   0		0    N/A
ASM connection state lat	  5,508    0.0		   0		0    N/A

ASM db client latch		    793    0.0		   0		0    N/A
ASM map headers 		  1,101    0.0		   0		0    N/A
ASM map load waiting lis	    316    0.0		   0		0    N/A
v_random_access_queries_cnt PLS_INTEGER := 0;
ASM map operation freeli	 14,661    0.2	  0.0	   0		0    N/A
ASM map operation hash t     20,369,257    0.0	  0.1	   0		0    N/A
ASM network background l	  5,449    0.0		   0		0    N/A
ASM network state latch 	    360    0.0		   0		0    N/A
v_scan_queries_cnt PLS_INTEGER := 0;
ASM remote client latch 	     10    0.0		   0		0    N/A
AWR Alerted Metric Eleme	  6,597    0.0		   0		0    N/A
Autotask management		     10    0.0		   0		0    N/A
Change Notification Hash	    283    0.0		   0		0    N/A

Column stats entry latch	      1    0.0		   0		0    N/A
Consistent RBA			 15,755    0.0	  0.3	   0		0    N/A
DML lock allocation		 34,934    0.0		   0		0    N/A
Event Group Locks		    439    0.0		   0		0    N/A
v_do_scan_query BOOLEAN :=FALSE;
FIB s.o chain latch		    314    0.0		   0		0    N/A
FOB consolidated s.o lis	    314    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
Hang Manager wait event 	     42    0.0		   0	    7,389    0.1
I/O Staticstics latch		      1    0.0		   0		0    N/A
v_scan_workload_only BOOLEAN := FALSE;
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	    756    0.0		   0		0    N/A
ILM access tracking exte	      1    0.0		   0		0    N/A
ILM activity tracking la	      1    0.0		   0		0    N/A
v_random_workload_only BOOLEAN := FALSE;
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A
IM area sb latch		      1    0.0		   0		0    N/A

IM area scb latch		      1    0.0		   0		0    N/A
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
IMFS defer write list		      1    0.0		   0		0    N/A

IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      7    0.0		   0		0    N/A
IPC stats buffer allocat	      1    0.0		   0		0    N/A
In memory undo latch		      1    0.0		   0		0    N/A
v_random_block PLS_INTEGER := 1;
JS Sh mem access		    595    0.0		   0		0    N/A
JS broadcast add buf lat	    612    0.0		   0		0    N/A
JS broadcast drop buf la	    612    0.0		   0		0    N/A
JS broadcast load blnc l	    126    0.0		   0		0    N/A
v_tmp PLS_INTEGER;
JS global state obj latc	      4    0.0		   0		0    N/A
JS mem alloc latch		      4    0.0		   0		0    N/A
JS queue access latch		      5    0.0		   0		0    N/A
JS queue state obj latch	 24,978    0.0		   0		0    N/A
v_now PLS_INTEGER;
JS slv state obj latch		     29    0.0		   0		0    N/A
KCNIBR - invalid block r	      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_brick_wall PLS_INTEGER;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0


					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
v_begin_time PLS_INTEGER;
------------------------ -------------- ------ ------ ------ ------------ ------
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A
v_end_time PLS_INTEGER;
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A
KDMADO bll latch		      1    0.0		   0		0    N/A
KDMADO latch			      1    0.0		   0		0    N/A
v_total_time PLS_INTEGER;
KFC FX Hash Latch		      1    0.0		   0		0    N/A
KFC Hash Latch			      1    0.0		   0		0    N/A
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
KFIAS cluster latch		      1    0.0		   0		0    N/A
KFIAS endpoint latch		      1    0.0		   0		0    N/A
KFIAS node latch		      1    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A
KFK SGA Libload latch		 12,980    0.0		   0		0    N/A
KFMD SGA			    366    0.0		   0		0    N/A
KGNFS-NFS:SHM structure 	     26    0.0		   0		0    N/A
v_total_cpu_tm PLS_INTEGER;
KGNFS-NFS:SVR LIST		    211    0.0		   0		0    N/A
KJC message pool KGH cal	  4,250    0.0		   0		0    N/A
KJC message pool free li	763,266    0.1	  0.1	   0	1,160,413    0.6
KJC message pool pending	      1    0.0		   0		0    N/A

KJCT flow control latch       9,021,122    0.0	  0.1	   0		0    N/A
KMG MMAN ready and start	    210    0.0		   0		0    N/A
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
KSFS id table parent lat	      1    0.0		   0		0    N/A
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
v_loop_control BOOLEAN := FALSE;
KSFSD name cache parent 	      1    0.0		   0		0    N/A
KSGL LS Segment latch		      1    0.0		   0		0    N/A
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
KSIPC SGA allocation par	    403    0.2	  0.0	   0		0    N/A
v_update_quota BOOLEAN := FALSE;
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A
KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A
KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	    499    0.0		   0		9    0.0
KSXR hang analysis phase	    337    0.0		   0		0    N/A
KSXR large replies		     22    0.0		   0		0    N/A
v_update_only_workload BOOLEAN := FALSE;
KTF sga latch			      2    0.0		   0	      233    0.0
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
KWQMN job cache list lat	    141    0.0		   0		0    N/A
KWQS pqueue ctx latch		     10    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
Locator state objects po	      1    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
Lost write change tracki	      1    0.0		   0		0    N/A
Lsod array latch		    172    0.0		   0		0    N/A
MGA asr alloc latch		     11    0.0		   0		0    N/A
MGA heap latch			    232    0.4	  1.0	   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
MGA shared context latch	  4,189    0.3	  0.0	   0		0    N/A
MGA shared context root 	    285    3.9	  0.0	   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_sharing_schema BOOLEAN := FALSE;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_seed VARCHAR2(128);
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_home_schema_str VARCHAR2(80);
MQL Tracking Latch		      0    N/A		   0	       12    0.0
Memory Management Latch 	      0    N/A		   0	      210    0.0
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
v_scratch VARCHAR2(200) ;
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A
MinActiveScn Latch		     30    0.0		   0		0    N/A

Mutex				      1    0.0		   0		0    N/A
Mutex Stats			      1    0.0		   0		0    N/A
Nologging Standby SCN Ti	    208    0.0		   0		0    N/A
OS process			  1,089    0.0		   0		0    N/A
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
OS process allocation		  1,597    0.1	  0.0	   0		0    N/A
OS process: request allo	    137    0.0		   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A

PDB LRU structure		    138    0.0		   0		0    N/A
PL/SQL warning settings 	    384    0.0		   0		0    N/A
PX hash array latch		      1    0.0		   0		0    N/A
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
Parent latch for depende	      1    0.0		   0		0    N/A
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
QMT				      1    0.0		   0		0    N/A
-- DBMS_RANDOM.seed (val =&gt; v_seed);
Real-time descriptor lat	  3,501    0.0		   0		0    N/A
Report Request stats lat	     52    0.0		   0		0    N/A
Report Request struct la	     21    0.0		   0		0    N/A

Request holder compeltio	    103    0.0		   0		0    N/A
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
v_begin_time := DBMS_UTILITY.GET_TIME();
SGA Blackbox latch		      3    0.0		   0		0    N/A
SGA IO buffer pool latch	      2    0.0		   0		2    0.0
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
v_now := v_begin_time ;
SGA Logging Log Latch		 11,449    0.0		   0		0    N/A
SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
SGA heap locks			      1    0.0		   0		0    N/A
v_brick_wall := v_now + v_seconds_to_run ;
SGA pool locks			      1    0.0		   0		0    N/A
SO private so latch		    290    0.0		   0	      115    0.0
SQL memory manager latch	      1    0.0		   0	      210    0.0
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
SQL memory manager worka	 15,718    0.0		   0		0    N/A
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		     11    0.0		   0		0    N/A

Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     33    0.0		   0		0    N/A
Streams Generic 		      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
Token Manager			      1    0.0		   0		0    N/A
-- The following WHILE loop is the master work loop control
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
UM object latch 		      1    0.0		   0		0    N/A
WCR: sync			      1    0.0		   0		0    N/A
Write State Object Pool 	      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
X$KSFQP 			      1    0.0		   0		0    N/A
XDB NFS Security Latch		      1    0.0		   0		0    N/A
XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
active checkpoint queue 	111,484    0.1	  0.1	   0		0    N/A
active service list		 15,342    0.0	  0.0	   0	    1,467    0.0


Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
archive destination		     20    0.0		   0		0    N/A
begin backup scn array		     25    0.0		   0		0    N/A
buffer pool			      1    0.0		   0		0    N/A
business card			    189    0.0		   0		0    N/A
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
cache buffer handles		     89    0.0		   0		0    N/A
cache buffers chains	     47,879,079    0.0	  0.1	   0   17,458,366    0.1
cache buffers lru chain      10,406,050    0.1	  0.0	   0   10,877,579    0.2
			DBMS_LOCK.SLEEP(v_num_tmp);
cache table scan latch		 92,635    0.0	  0.0	   0	   92,636    0.0
call allocation 		  2,262    1.0	  0.6	   0		0    N/A
change notification clie	      1    0.0		   0		0    N/A
		END IF;
channel handle pool latc	    289    0.0		   0		0    N/A
channel operations paren	  4,165    0.0	  0.0	   0		9    0.0
checkpoint queue latch	      2,602,916    0.0	  0.1	   0	1,323,105    0.0
	END IF;
client/application info 	  2,390    0.0		   0		0    N/A
compile environment latc	    390    0.0		   0		0    N/A
cp handoff latch		      1    0.0		   0		0    N/A

cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
cp sga latch			     10    0.0		   0		0    N/A
cp srv type state latch 	    631    0.0		   0		0    N/A
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		      1    0.0		   0		0    N/A
cvmap freelist lock		      1    0.0		   0		0    N/A
deferred cleanup latch		     10    0.0		   0		0    N/A
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
dispatcher info 		     10    0.0		   0		0    N/A
dml lock allocation		     10    0.0		   0		0    N/A
done queue latch		      1    0.0		   0		0    N/A
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
dtp latch			    136    0.0		   0		0    N/A
			v_sharing_schema := TRUE ;
		ELSE
dummy allocation		    801    0.1	  0.0	   0		0    N/A
eighth spare latch - X p	      1    0.0		   0		0    N/A
			IF ( v_sharing_schema = TRUE ) THEN
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	   63,441    0.0
enqueue hash chains		175,644    0.0	  0.4	   0	       21    0.0
				EXECUTE IMMEDIATE v_home_schema_str;
enqueues			    501    0.0		   0		0    N/A
error message lists		    803    0.0		   0		0    N/A
fast space usage latch		     10    0.0		   0		0    N/A
fifteenth spare latch - 	      1    0.0		   0		0    N/A
				v_sharing_schema := FALSE;
file cache latch		     65    0.0		   0		0    N/A
first Audit Vault latch 	      1    0.0		   0		0    N/A
flash file access latch 	      1    0.0		   0		0    N/A
flashback copy			      1    0.0		   0		0    N/A
fourteenth spare latch -	      1    0.0		   0		0    N/A
fourth Audit Vault latch	      1    0.0		   0		0    N/A
			END IF;
gc element		     31,958,254    0.0	  0.0	   0	1,774,453    0.0
gc imc list			      6    0.0		   0		0    N/A
gc persistent rm		     66    0.0		   0		0    N/A
gc xid list			    101    0.0		   0		0    N/A
		END IF;
gcr global ctx			     10    0.0		   0		0    N/A
gcs affinity object free	      3    0.0		   0		0    N/A
gcs commit scn state		      1    0.0		   0		0    N/A
	END IF;
gcs nodemap pool		219,943    0.0	  0.0	   0		0    N/A
gcs opaque info freelist	219,297    0.0	  0.0	   0		0    N/A
gcs partitioned table ha     21,302,844    0.0	  0.0	   0	1,117,212    0.0

gcs pcm hashed value buc	      1    0.0		   0		0    N/A
gcs remaster request que	  6,644    0.0	 39.0	   0		0    N/A
gcs remastering latch		 31,945    0.4	  0.0	   0	      776    0.5
	-- Choose the random block. The v_do_hotspot handler that follows can override.
gcs resource freelist	     11,800,843    0.2	  0.0	   0	4,195,867    0.2
gcs resource hash	     40,952,825    0.0	  0.1	   0	    9,419    0.1
gcs resource scan list		    549    0.0		   0		0    N/A
gcs resource timerq list	      1    0.0		   0		0    N/A
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for

   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
gcs resource validate li	      1    0.0		   0		0    N/A
gcs shadows freelist	      7,689,405    0.0		   0		0    N/A
ges cached resource list	 84,931    0.0	  0.2	   0	   34,262    0.1
ges deadlock list		    892    0.0		   0		0    N/A
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
ges domain table		180,008    0.0		   0		0    N/A
ges enqueue table freeli	 39,603    0.0		   0		0    N/A
ges group table 		182,075    0.0		   0		0    N/A
ges process hash list		 19,352    0.0		   0		0    N/A
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
ges process parent latch	364,510    0.0	  0.0	   0		0    N/A
ges process table freeli	    137    0.0		   0		0    N/A
ges remote lock freelist	  1,117    0.0		   0		0    N/A
	END IF;
ges resource hash list		260,098    0.0	  0.3	   0	   12,056    0.0
ges resource scan list		      3    0.0		   0		0    N/A
ges resource table freel	 23,045    0.0	  0.0	   0		0    N/A

ges s-lock bitvec freeli	  2,765    0.0		   0		0    N/A
ges timeout list		  1,065    0.0		   0	      233    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global KZLD latch for au	      1    0.0		   0		0    N/A
global tx hash mapping		      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     42    0.0		   0		0    N/A
hash table Sql Plan Find	     29    0.0		   0	      135    0.0
hash table column usage 	    415    0.0		   0	   55,516    0.0
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
hash table expression us	      1    0.0		   0		0    N/A
hash table modification 	    109    0.0		   0		0    N/A
hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      394    0.0
----------------------------------------------------------------------------------------------------------------------
heartbeat structure mana	      0    N/A		   0	      315    0.0
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A

imc hash lat			      1    0.0		   0		0    N/A
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
	IF  ( v_select_only_workload = TRUE ) THEN
in-memory area latch		      1    0.0		   0		0    N/A
in-memory columnar segme	      1    0.0		   0		0    N/A
in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
		-- handle case where user specified zero pct updates (a SELECT-only workload)
internal temp table obje	    398    0.0		   0		0    N/A
interrupt manipulation		  1,473    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
		v_do_update := FALSE;
io pool granule list		     70    0.0		   0		0    N/A
io pool granule metadata	    147    0.0		   0		0    N/A
job workq parent latch		      5    0.0		   0		4    0.0
job_queue_processes free	     16    0.0		   0		0    N/A
		v_update_quota := TRUE ;
job_queue_processes para	     10    0.0		   0		0    N/A
jslv pdb context latch		      8    0.0		   0		0    N/A
k2q global data latch		    422    0.0		   0		0    N/A
k2q lock allocation		      1    0.0		   0		0    N/A
	ELSE
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A
kcn buffer chains		      1    0.0		   0		0    N/A
kdlx hb parent latch		      1    0.0		   0		0    N/A
		IF ( v_update_only_workload = TRUE ) THEN
kgb parent			      1    0.0		   0		0    N/A
kgnfs mount latch		      1    0.0		   0		0    N/A
kjbr roi instance map		      1    0.0		   0		0    N/A
kjci objects freelist la	  6,421    0.0		   0		0    N/A
			-- handle case where user specified 100% updates
kjci process context lat	  4,871    0.8	  0.0	   0	   38,666    0.0
kjci process list latch 	  2,799    0.0		   0		0    N/A
kjci request sequence la	    490    0.0		   0		0    N/A
			v_do_update := TRUE;

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
			v_update_quota := FALSE;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
		ELSE
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
kjcipctx state object fr	     79    1.3	  0.0	   0		0    N/A
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
kjoedcso state object fr	     10    0.0		   0		0    N/A
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A
kjoer owner hash bucket 	      1    0.0		   0		0    N/A
kjpm my inst data		     18    0.0		   0		0    N/A
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
kjsc Request obj freelis	    170    0.6	  0.0	   0		0    N/A
kjsc Ring Buffer obj fre	     85    0.0		   0		0    N/A
kjsc protect control req	     85    0.0		   0	    6,340    0.0
kjsc protect warm up con	    385    0.0		   0		0    N/A
			IF ( v_update_quota = FALSE ) THEN
kjsca pkey obj freelist 	     96    0.0		   0		0    N/A
kjsca protect pkey hash 	  2,683    0.0		   0		0    N/A
kjsca protect service ha	  6,364    0.0		   0		0    N/A
kjscpss state object fre	     85    0.0		   0		0    N/A
				-- Handle case where user has set UPDATE_PCT to a valid value
kokc descriptor allocati	    414    0.0		   0		0    N/A
kpoxft latch			      0    N/A		   0	       65    0.0
krso process			     22    0.0		   0		0    N/A
ksbxic instance latch		     50    0.0		   0		0    N/A
				--
ksevn object root latch 	    210    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
ksi resource reuse count	      1    0.0		   0		0    N/A
ksim group membership ca	  2,899    0.0		   0		0    N/A
				-- We are doing updates during this run and quota has not been met yet
ksim membership request 	      0    N/A		   0	      313    0.0
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			     97    0.0		   0		0    N/A
ksuosstats global area		     86    0.0		   0	      242    0.0
				-- We still vacillate until update quota has been met
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		    179    0.0		   0		0    N/A
ksv class latch 		 16,374    0.0	  0.0	   0		0    N/A
ksv instance latch		     61    0.0		   0		0    N/A

ksv msg queue latch		    382    0.0		   0	      381    0.0
ksxp shared latch		    137    0.0		   0		0    N/A
ksxp so latch			    137    0.0		   0		0    N/A
ksz_so allocation latch 	    137    0.0		   0		0    N/A
				IF ( MOD(v_random_block,  2) = 0 ) THEN
ktfbn latch			    131    0.0		   0		0    N/A
ktm adg jrnls			      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
					v_do_update := TRUE;
ktm adg space			      1    0.0		   0		0    N/A
ktm adg stages			      1    0.0		   0		0    N/A
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		     11    0.0		   0		0    N/A
				ELSE
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
kwqbsn:qsga			     22    0.0		   0		0    N/A
					v_do_update := FALSE;
kwslbmdl: metadata latch	     34    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
				END IF;
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	     16    0.0		   0		0    N/A
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
kxfxscanrate_latch		      1    0.0		   0		0    N/A
			ELSE
lgwr LWN SCN			 15,826    0.1	  0.1	   0		0    N/A
list of block allocation	 64,470    0.0	  0.0	   0		0    N/A
loader state object free	    152    0.0		   0		0    N/A
lob segment dispenser la	    223    0.0		   0		0    N/A
				-- UPDATE quota has been filled,  force drain some SELECTs
lob segment hash table l	     61    0.0		   0		0    N/A
lob segment query latch 	      3    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
log write info			      0    N/A		   0	   16,542    3.4
				v_do_update := FALSE;

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
			END IF;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
		END IF;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
log write worker phase		  5,279    0.0		   0		0    N/A
	END IF;
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
logminer local			      1    0.0		   0		0    N/A

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
managed standby 		     21    0.0		   0		0    N/A
message bitmap latch		      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
message pool operations 	  1,500    0.0		   0		0    N/A
messages			366,779    0.1	  0.0	   0		0    N/A
msg queue latch 		      1    0.0		   0		0    N/A
multiblock read objects 	456,551    0.0	  0.1	   0		0    N/A

name-service memory obje	  1,285    0.0		   0		0    N/A
name-service namespace b	  4,773    0.0		   0		0    N/A
name-service namespace o	      1    0.0		   0		0    N/A
name-service pending que	    598    0.0		   0		0    N/A
	IF ( v_do_update != TRUE ) THEN
name-service request		     12    0.0		   0		0    N/A
name-service request que	  8,129    0.0		   0		0    N/A
ncodef allocation latch 	     10    0.0		   0		0    N/A
ninth spare latch - X pa	      1    0.0		   0		0    N/A
		--
object queue header free	 14,792    0.0		   0		0    N/A
object queue header oper     22,834,302    0.0	  0.1	   0	  210,941    0.0
object queue memory		    697    0.0		   0		0    N/A
object stats modificatio	  1,334    0.0		   0		0    N/A
		-- Do a SELECT statement
parallel query alloc buf	  3,230    0.0		   0	      380    0.0
parallel query stats		    713    0.3	  0.0	   0		0    N/A
parallel txn reco latch 	    456    0.0		   0		0    N/A
		-- Work out scan or random
parameter table manageme	  1,810    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
pesom_free_list 		      1    0.0		   0		0    N/A
		IF  ( v_random_workload_only = TRUE ) THEN
pesom_hash_node 		      1    0.0		   0		0    N/A
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		     10    0.0		   0		0    N/A
post/wait queue 		 51,882    0.1	  0.0	   0	   51,875    0.3
process allocation		  3,297    0.0		   0		0    N/A
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
process group creation		    137    0.0		   0		0    N/A
process memory detail		      1    0.0		   0		0    N/A
process pkey statistics 	      1    0.0		   0		0    N/A
process queue			  1,630    0.0		   0		0    N/A
			v_do_scan_query := FALSE;
process queue reference 	133,127    0.0	  0.0	   0	   10,125    0.6
qmn state object latch		      9    0.0		   0		0    N/A
qmn task queue latch		    144   11.1	  0.5	   0		0    N/A
quarantine object		     10    0.0		   0		0    N/A
			v_scan_query_quota := TRUE ;
query server freelists		  1,783    0.0		   0		0    N/A
query server process		    468    0.0		   0		2    0.0
queued dump request		      2    0.0		   0		0    N/A
queuing load statistics 	      1    0.0		   0		0    N/A
		ELSE
read-moslty lock queue u	      1    0.0		   0		0    N/A
recovery domain hash buc	    769    0.0		   0		0    N/A
redo allocation 		 60,338    1.5	  0.1	   0	1,397,881    0.5
redo copy			      1    0.0		   0	1,399,400    0.0
			IF ( v_scan_workload_only = TRUE ) THEN
redo transport task		      1    0.0		   0		0    N/A
redo writing			169,988    0.0	  0.2	   0		0    N/A
remote tool request latc	    416    0.0		   0		0    N/A
resmgr group change latc	    380    0.0		   0		0    N/A
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
resmgr:active threads		    820    0.0		   0	       10    0.0
resmgr:actses change gro	    389    0.0		   0		0    N/A
resmgr:actses change sta	      5    0.0		   0		0    N/A
resmgr:free threads list	    800    0.5	  0.0	   0		0    N/A

				v_do_scan_query := TRUE;
Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
				v_scan_query_quota := FALSE;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
			ELSE
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
resmgr:plan CPU method		      1    0.0		   0		0    N/A
resmgr:plan change alloc	      1    0.0		   0		0    N/A
				IF ( v_scan_query_quota = FALSE ) THEN
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A
resmgr:schema config		     30    0.0		   0	       10    0.0
resmgr:session queuing		      1    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
rt rmv count latch		      0    N/A		   0	      315    0.0
second Audit Vault latch	      1    0.0		   0		0    N/A
segmented array pool		    314    0.0		   0		0    N/A
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
sequence cache			     52    0.0		   0		0    N/A
service drain list		    630    0.0		   0		0    N/A
session allocation		  1,441    0.0		   0	      645    0.0
session idle bit		 10,565    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
session state list latch	    983    0.2	  0.0	   0		0    N/A
session statistics		    804    0.0		   0		0    N/A
session switching		     96    0.0		   0		0    N/A
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
session timer			    210    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
					v_do_scan_query := FALSE;
sga hash table parent la	      1    0.0		   0		0    N/A
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		    686    0.0		   0		0    N/A
shared pool			145,213    0.2	  0.0	   0		0    N/A
				END IF;
shared pool sim alloc		     80    0.0		   0		0    N/A
shared pool simulator		  2,295    0.0		   0		0    N/A
shared server configurat	    211    0.0		   0		0    N/A
sim partition latch		      1    0.0		   0		0    N/A
			END IF;
simulator hash latch	      2,225,113    0.0	  0.0	   0		0    N/A
simulator lru latch		      1    0.0		   0	1,180,148    0.0
sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    603    0.0		   0		0    N/A
		END IF;
space background state o	     44    0.0		   0		0    N/A
space background task la	  1,612   47.1	  0.8	   0	      461    1.5
state object free list		      2    0.0		   0		0    N/A
statistics aggregation		    145    0.0		   0		0    N/A

subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	     77    0.0		   0		0    N/A
temporary table state ob	    171    0.0		   0		0    N/A

tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A
test excl. parent2 lmid 	      1    0.0		   0		0    N/A
test mixed exclusive		      1    0.0		   0		0    N/A
		IF ( v_do_scan_query != TRUE ) THEN
test mode exclusive		      1    0.0		   0		0    N/A
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A
test shared parent2 lmid	      1    0.0		   0		0    N/A
			SELECT COUNT(c2) INTO v_rowcnt
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     22    0.0		   0		0    N/A
trace latch			     25    0.0		   0		0    N/A
transaction allocation		    499    0.0		   0		0    N/A
			FROM cf1
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
twenty-second spare latc	      1    0.0		   0		0    N/A
twenty-third spare latch	      1    0.0		   0		0    N/A
undo global data		108,065    0.0	  0.0	   0		0    N/A


Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
		ELSE
------------------------ -------------- ------ ------ ------ ------------ ------
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A
virtual circuit queues		      1    0.0		   0		0    N/A
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
			  ------------------------------------------------------


Latch Sleep Breakdown			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> ordered by misses desc


				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
-------------------------- --------------- ------------ ----------- -----------
			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
gcs resource freelist		11,800,843	 18,407 	482	 17,967
cache buffers lru chain 	10,406,050	 15,412 	295	 15,128
		v_scan_query_quota := FALSE;
gc element			31,958,254	 11,467 	343	 11,153
gcs resource hash		40,952,825	  7,066 	890	  6,238
KJCT flow control latch 	 9,021,122	  4,341 	260	  4,103
		v_scan_queries_cnt := 0;
KJC message pool free list	   763,266	  1,139 	 90	  1,063
redo allocation 		    60,338	    889 	 81	    811
cache buffers chains		47,879,079	    799 	 43	    759
space background task latc	     1,612	    760 	636	    165
object queue header operat	22,834,302	    506 	 26	    484
		v_random_access_queries_cnt := 0;
messages			   366,779	    382 	 12	    370
ASM map operation hash tab	20,369,257	    365 	 37	    333
shared pool			   145,213	    273 	  6	    267
multiblock read objects 	   456,551	    160 	  8	    152
gcs remastering latch		    31,945	    136 	  2	    134
active checkpoint queue la	   111,484	    110 	 12	     98
	END IF;
checkpoint queue latch		 2,602,916	     80 	  4	     76
redo writing			   169,988	     66 	 14	     52
ges cached resource lists	    84,931	     24 	  4	     20
call allocation 		     2,262	     23 	 13	     10
cache table scan latch		    92,635	     21 	  1	     20

qmn task queue latch		       144	     16 	  8	      8
lgwr LWN SCN			    15,826	     13 	  1	     12
ges resource hash list		   260,098	      9 	  3	      6
enqueue hash chains		   175,644	      7 	  3	      5
Consistent RBA			    15,755	      3 	  1	      2
	v_loop_cnt := v_loop_cnt + 1 ;
MGA heap latch			       232	      1 	  1	      0
gcs remaster request queue	     6,644	      1 	 39	      0
	v_now := DBMS_UTILITY.GET_TIME();
			  ------------------------------------------------------



Latch Miss Sources			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
		-- If this is a fixed-iteration count test cycle and we've hit the number of
------------------------ -------------------------- ------- ---------- --------
		-- iterations then set exit flag
ASM map operation hash t kffmTranslate			  0	    21	     19
ASM map operation hash t kffmDoDone_1			  0	    16	     18
KJC message pool free li kjcsmpav: allocate a msg b	  0	    56	     90
		v_stop_immediate := TRUE ;
KJC message pool free li kjcspfmbq: free vector of	  0	    34	      0
KJCT flow control latch  kjctcsnd: send normal mess	  0	    82	    123
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	    72	     10
	END IF;
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	    55	     56
KJCT flow control latch  kjctr_releasetkt: change t	  0	    19	     14
KJCT flow control latch  kjctr_updatetkt: update ti	  0	    18	     21
END LOOP;
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	    14	     39
active checkpoint queue  kcbbacq: scan active check	  0	    12	     12
cache buffers chains	 kcbzibmlt: multi-block rea	  0	    17	      0

cache buffers chains	 kcbzgb: scan from tail now	  0	     8	      0
cache buffers chains	 kcbgcur: fast path excl	  0	     6	      0
cache buffers chains	 kcbgcur: slow path		  0	     6	      1
v_end_time := v_now ;
cache buffers chains	 kcbgtcr: convert latch 	  0	     2	      0
cache buffers chains	 kcbgtcr: fast path pin 	  0	     2	     23
cache buffers chains	 kclcls_3			  0	     2	      0
v_now := DBMS_UTILITY.GET_TIME();
cache buffers chains	 kclpdcl			  0	     2	      0
cache buffers chains	 kclrwrite_3			  0	     2	      0
cache buffers chains	 kcbbic2			  0	     1	      2
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
cache buffers chains	 kcbchg: aux pin		  0	     1	      1
cache buffers chains	 kcbchg: change complete	  0	     1	      0
cache buffers chains	 kcbnlc 			  0	     1	      2

cache buffers chains	 kcbrls: fast pin release	  0	     1	      7
cache buffers chains	 kcbzib: finish processing	  0	     1	      0
cache buffers lru chain  kcbzgb_2			  0	   136	     59
cache buffers lru chain  kcbzgws			  0	   128	      0
v_total_time := v_end_time - v_begin_time ;
cache buffers lru chain  kcbzfw 			  0	    27	      0
cache buffers lru chain  kcbbwlru			  0	     2	     26
cache buffers lru chain  kcbbxsv: move to being wri	  0	     1	      0
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
cache buffers lru chain  kcbz_decr_wspwbcnt		  0	     1	    116
cache table scan latch	 kcbz_free_table_scan_read_	  0	     1	      1
call allocation 	 ksuxds 			  0	    13	     13
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
checkpoint queue latch	 kcbklbc_cql			  0	     3	      0
checkpoint queue latch	 kcbbwdl: thread checkpoint	  0	     1	      2
gc element		 kclnfndnewm			  0	   154	     86
gc element		 kclfwrite1			  0	    41	     24
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
gc element		 kclplz 			  0	    39	      0
gc element		 kclulb 			  0	    36	    127
gc element		 KCLUNLNK			  0	    21	     69

gc element		 kclrwrite			  0	    16	     28
gc element		 kclpdcl			  0	    14	      5
gc element		 kclplz_1			  0	    11	      1
gc element		 kclrwrite_1			  0	     7	      0
END;</pre_sqltext></td></tr>
gc element		 kclnfndx			  0	     3	      0
gc element		 kclantilock_1			  0	     2	      0
gc element		 kclhngcbk1			  0	     2	      0
gc element		 kclnfnd			  0	     1	      0
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
gcs remaster request que kjdrrmq			  0	    39	      0
gcs remastering latch	 kjdrchkdrm remastering req	  0	     1	      0
gcs remastering latch	 kjfcdrmrfg end step		  0	     1	      0
gcs resource freelist	 kjbralc: check freelist no	  0	   268	      0
<tr><td scope="row" class='awrc'><a class="awr" name="9fjf75a1s4y19"></a>9fjf75a1s4y19</td><td class='awrc'><pre_sqltext class="awr">select procedure#, procedurename, properties, itypeobj#,  properties2 from procedureinfo$ where obj#=:1 order by procedurename desc,  overload# desc</pre_sqltext></td></tr>
gcs resource freelist	 kjbrralc: reserve allocati	  0	   114	     25
gcs resource freelist	 kjbrfr_bg2			  0	    74	     84
gcs resource freelist	 kjbralc add resource		  0	    26	    373
gcs resource hash	 kclfwrite1			  0	   267	     78
<tr><td scope="row" class='awrnc'><a class="awr" name="9hzjs0qb9fr2c"></a>9hzjs0qb9fr2c</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
gcs resource hash	 kjbcropen			  0	   180	    196
gcs resource hash	 kjbopen			  0	   117	     39
gcs resource hash	 kjbclose_remaster		  0	    69	    122

v_default_schema_number PLS_INTEGER := '87';
Latch Miss Sources			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> only latches with sleeps are shown
-> ordered by name, sleeps desc
v_update_pct PLS_INTEGER := '15';

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
v_max_loop_iterations PLS_INTEGER := '0';
gcs resource hash	 kjbmpopen			  0	    67	    127
gcs resource hash	 kjbmpclose			  0	    45	     64
gcs resource hash	 kjbrrcfwst			  0	    32	      0
v_seconds_to_run PLS_INTEGER := '600';
gcs resource hash	 kjblpast			  0	    25	     50
gcs resource hash	 kjbrrcres_99			  0	    23	      0
gcs resource hash	 kclpdc 			  0	    19	    103
gcs resource hash	 kclrwrite			  0	    19	     52
v_scale PLS_INTEGER := '1048576';
gcs resource hash	 kjblocalobj_nolock		  0	    11	     47
gcs resource hash	 kjbmpflushpi			  0	     6	     16
gcs resource hash	 kjbrprmexpack			  0	     4	      5
v_work_unit PLS_INTEGER := '80' ;
gcs resource hash	 kjbralc: reacquire		  0	     3	      0
gcs resource hash	 kjbrdowncvt			  0	     3	      0
ges cached resource list kjruch: cached obj cleanup	  0	     3	      0
ges cached resource list kjchc: clean resource cach	  0	     1	      0
v_redo_stress  VARCHAR2(12) := 'LITE';
ges resource hash list	 kjakcai: search for resp b	  0	     1	      2
ges resource hash list	 kjrref: find matched resou	  0	     1	      0
ges resource hash list	 kjucvl: lock convert reque	  0	     1	      0
v_hot_schema_modulus PLS_INTEGER := '0';
messages		 ksarcv 			  0	    10	      4
messages		 ksaamb: after wakeup		  0	     2	      2
mostly latch-free SCN	 kcs024 			  0	     1	      0
mostly latch-free SCN	 kcsnew_scn_rba 		  0	     1	      0
multiblock read objects  kcbzibmlt: normal mbr free	  0	     5	      6
v_do_hotspot   VARCHAR(7) := 'FALSE';
multiblock read objects  kcbzibmlt			  0	     3	      2
object queue header oper kcbo_unlink_q			  0	    13	     15
object queue header oper kcbo_link_q			  0	     5	      6
v_hotspot_mb  NUMBER := '8';
object queue header oper kcbo_switch_cq 		  0	     3	      4
object queue header oper kcbo_switch_q_bg		  0	     3	      1
object queue header oper kcbo_switch_mq_bg		  0	     2	      0
qmn task queue latch	 kwqmngettsk: get task		  0	     7	      8
v_hotspot_offset_mb NUMBER := '16';
qmn task queue latch	 kwqmnmvtsks: delay to read	  0	     1	      1
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    81	      0
redo writing		 kcrfwcr			  0	    11	     13
v_hotspot_modulus  PLS_INTEGER := '3';
redo writing		 kcrfw_post: rba scn pair	  0	     3	      0
space background task la ktsj_grab_task 		  0	   452	    620
space background task la ktsj_detach_task		  0	   119	     16

space background task la ktsj_smco_purgeexpired 	  0	    59	      0
space background task la ktsj_smco_movetasks		  0	     6	      0
unknown latch		 kghalo 			  0	     3	      4
v_sleep_modulus PLS_INTEGER := '0';
unknown latch		 kghfre 			  0	     2	      2
unknown latch		 kghfnd: min scan		  0	     1	      0
unknown latch		 kghupr1			  0	     1	      1
unknown latch		 ksqcmi: if lk mode not req	  0	     1	      2
v_sleep_min NUMBER := '.1';
unknown latch		 ksqcnl 			  0	     1	      1
unknown latch		 ksqrcl 			  0	     1	      0
			  ------------------------------------------------------

v_sleep_max NUMBER := '.5';
Mutex Sleep Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> ordered by number of sleeps desc

									 Wait
v_scan_query_pct PLS_INTEGER := '0';
Mutex Type	      Location				     Sleeps    Time (ms)
--------------------- -------------------------------- ------------ ------------
Cursor Pin	      kkslce [KKSCHLPIN2]			218	     250
v_obfuscate VARCHAR(5)	:= 'FALSE';
Library Cache	      kgllkdl1	85				  3	      10
			  ------------------------------------------------------



Parent Latch Statistics 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------


Child Latch Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
			  ------------------------------------------------------


Segments by Logical Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
-> Total Logical Reads:       9,392,804
-> Captured Segments account for   66.6% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available


		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				 Logical
v_num_tmp NUMBER := 0;
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSTEM

IND$				TABLE	      19	  2	 386,160    4.11
USER1		     IOPS
CF1				TABLE	   73244      73251	 157,856    1.68
USER64		     IOPS
v_loop_cnt PLS_INTEGER := 0;
CF1				TABLE	   73609      73613	 152,752    1.63
USER17		     IOPS
CF1				TABLE	   73350      73357	 150,720    1.60
USER20		     IOPS
v_rowcnt PLS_INTEGER := 0;
CF1				TABLE	   73377      73373	 149,872    1.60
			  ------------------------------------------------------

Segments by Physical Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_updates_cnt PLS_INTEGER := 0;
-> Total Physical Reads:       9,128,427
-> Captured Segments account for   69.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_selects_cnt PLS_INTEGER := 0;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical

Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER64		     IOPS
CF1				TABLE	   73609      73613	 370,383    4.06
v_random_access_queries_cnt PLS_INTEGER := 0;
USER21		     IOPS
CF1				TABLE	   73379      73374	 277,707    3.04
USER3		     IOPS
CF1				TABLE	   73263      73267	 251,341    2.75
v_scan_queries_cnt PLS_INTEGER := 0;
USER27		     IOPS
CF1				TABLE	   73408      73411	 159,419    1.75
USER1		     IOPS
CF1				TABLE	   73244      73251	 156,702    1.72

			  ------------------------------------------------------

Segments by Physical Read Requests	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_do_scan_query BOOLEAN :=FALSE;
-> Total Physical Read Requests:       8,485,282
-> Captured Segments account for   68.9% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_scan_query_quota  BOOLEAN := FALSE;
		     Tablespace
Owner			Name
-------------------- ----------
v_scan_workload_only BOOLEAN := FALSE;
		     Subobject	Obj.			       Phys Read
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER64		     IOPS
v_random_workload_only BOOLEAN := FALSE;
CF1				TABLE	   73609      73613	 176,065    2.07
USER1		     IOPS


v_random_block PLS_INTEGER := 1;
CF1				TABLE	   73244      73251	 155,819    1.84
v_tmp PLS_INTEGER;
USER3		     IOPS
CF1				TABLE	   73263      73267	 154,697    1.82
USER17		     IOPS
CF1				TABLE	   73350      73357	 148,203    1.75
v_now PLS_INTEGER;
USER20		     IOPS
CF1				TABLE	   73377      73373	 148,144    1.75
			  ------------------------------------------------------

v_brick_wall PLS_INTEGER;
Segments by UnOptimized Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total UnOptimized Read Requests:	  8,485,282
-> Captured Segments account for   68.9% of Total

-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
v_begin_time PLS_INTEGER;
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER64		     IOPS
v_end_time PLS_INTEGER;
CF1				TABLE	   73609      73613	 176,065    2.07
USER1		     IOPS
CF1				TABLE	   73244      73251	 155,819    1.84
USER3		     IOPS
v_total_time PLS_INTEGER;
CF1				TABLE	   73263      73267	 154,697    1.82
USER17		     IOPS
CF1				TABLE	   73350      73357	 148,203    1.75
USER20		     IOPS
v_begin_cpu_tm PLS_INTEGER;
CF1				TABLE	   73377      73373	 148,144    1.75
			  ------------------------------------------------------

Segments by Optimized Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_end_cpu_tm PLS_INTEGER;

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_total_cpu_tm PLS_INTEGER;
Segments by Direct Physical Reads	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by Physical Writes		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Physical Writes:	1,360,387
-> Captured Segments account for   65.1% of Total
v_do_sleeps BOOLEAN := FALSE;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
v_loop_control BOOLEAN := FALSE;
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER1		     IOPS
v_update_quota BOOLEAN := FALSE;
CF1				TABLE	   73244      73251	  24,026    1.77
USER64		     IOPS
CF1				TABLE	   73609      73613	  23,766    1.75
USER20		     IOPS
v_select_only_workload BOOLEAN := FALSE;
CF1				TABLE	   73377      73373	  22,882    1.68
USER48		     IOPS
CF1				TABLE	   73531      73529	  22,846    1.68
USER17		     IOPS
CF1				TABLE	   73350      73357	  22,815    1.68
v_update_only_workload BOOLEAN := FALSE;
			  ------------------------------------------------------

Segments by Physical Write Requests	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
v_do_update BOOLEAN := FALSE;
-> Total Physical Write Requests:	1,301,272
-> Captured Segments account for   67.9% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_do_hot_schema BOOLEAN := FALSE;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.			      Phys Write
v_stop_immediate BOOLEAN := FALSE;
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER1		     IOPS
CF1				TABLE	   73244      73251	  23,984    1.84
v_sharing_schema BOOLEAN := FALSE;
USER64		     IOPS
CF1				TABLE	   73609      73613	  23,699    1.82
USER20		     IOPS
CF1				TABLE	   73377      73373	  22,861    1.76
USER17		     IOPS
v_seed VARCHAR2(128);
CF1				TABLE	   73350      73357	  22,786    1.75
USER48		     IOPS
CF1				TABLE	   73531      73529	  22,780    1.75
			  ------------------------------------------------------
v_home_schema_str VARCHAR2(80);

Segments by Direct Physical Writes	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Direct Physical Writes:	   2,254
-> Captured Segments account for    9.2% of Total
v_scratch VARCHAR2(200) ;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name

-------------------- ----------
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_cpu_pct NUMBER(6, 3);
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	   74075      74075	     208    9.23
			  ------------------------------------------------------

v_my_serial NUMBER(16);
Segments by Table Scans 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by DB Blocks Changes		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % of Capture shows % of DB Block Changes for each top segment compared
-> with total DB Block Changes for all segments captured by the Snapshot
BEGIN
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------

		     Subobject	Obj.				DB Block    % of
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER1		     IOPS
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
CF1				TABLE	   73244      73251	  23,536    2.69
USER20		     IOPS
CF1				TABLE	   73377      73373	  22,608    2.59
USER17		     IOPS
EXECUTE IMMEDIATE v_home_schema_str;
CF1				TABLE	   73350      73357	  22,512    2.58
USER64		     IOPS
CF1				TABLE	   73609      73613	  22,512    2.58
USER85		     IOPS

CF1				TABLE	   73713      73716	  22,512    2.58
			  ------------------------------------------------------



Segments by Row Lock Waits		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % of Capture shows % of row lock waits for each top segment compared
IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
-> with total row lock waits for all segments captured by the Snapshot
	v_do_sleeps := TRUE;
-> When ** MISSING ** occurs, some of the object attributes may not be available

END IF;
		     Tablespace

Owner			Name
-------------------- ----------
IF ( v_max_loop_iterations &gt; 0 )  THEN
								     Row
		     Subobject	Obj.				    Lock    % of
	v_loop_control := TRUE ;
Object Name	       Name	Type	    Obj#   Dataobj#	   Waits Capture
END IF;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX

WRM$_SNAPSHOT_DETAIL		INDEX	   11582      11582	       2  100.00
			  ------------------------------------------------------

IF ( v_update_pct = 0 ) 	  THEN
Segments by ITL Waits			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	v_select_only_workload := TRUE;
		  No data exists for this section of the report.
			  ------------------------------------------------------
END IF;

Segments by Buffer Busy Waits		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------

Segments by Global Cache Buffer Busy	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
IF ( v_update_pct = 100 )	  THEN
			  ------------------------------------------------------


Segments by CR Blocks Received		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	v_update_only_workload := TRUE;
-> Total CR Blocks Received:	       1,313
-> Captured Segments account for    1.3% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
END IF;
Owner			Name
-------------------- ----------
								   CR
		     Subobject	Obj.				 Blocks

Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ROWCACHE_SUMMAR 9879926_31 TABLE	   74047      74047	       3     .23
IF ( v_scan_query_pct = 0 ) 	THEN
SYS		     SYSAUX
WRP$_REPORTS	     SYS_P268	TABLE	   74206      74206	       3     .23
SYS		     SYSAUX
	v_random_workload_only := TRUE;
WRP$_REPORTS_DETAILS SYS_P269	TABLE	   74209      74209	       3     .23
SYS		     SYSAUX
WRP$_REPORTS_TIME_BA SYS_P272	TABLE	   74214      74214	       3     .23
SYS		     SYSAUX
END IF;
WRH$_ACTIVE_SESSION_ 9879926_31 INDEX	   74077      74077	       2     .15
			  ------------------------------------------------------

Segments by Current Blocks Received	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

-> Total Current Blocks Received:	      976
-> Captured Segments account for   71.7% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
IF ( v_scan_query_pct = 100 ) 	THEN
Owner			Name
-------------------- ----------
								 Current
		     Subobject	Obj.				 Blocks
	v_scan_workload_only := TRUE;
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER35		     IOPS
CF1				TABLE	   73450      73453	     171   17.52
END IF;
USER64		     IOPS
CF1				TABLE	   73609      73613	     164   16.80

USER21		     IOPS
CF1				TABLE	   73379      73374	      93    9.53
USER27		     IOPS
CF1				TABLE	   73408      73411	      77    7.89
USER3		     IOPS
v_seconds_to_run := v_seconds_to_run * 100 ;
CF1				TABLE	   73263      73267	      73    7.48
			  ------------------------------------------------------

Segments by Global Cache Remote Grants	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

-> Total Global Cache Remote Grants:	   4,299,767
-> Captured Segments account for   65.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Owner			Name
-------------------- ----------
								      GC
		     Subobject	Obj.				  Remote

Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER21		     IOPS
CF1				TABLE	   73379      73374	 157,840    3.67
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
USER27		     IOPS
CF1				TABLE	   73408      73411	  77,875    1.81
-- DBMS_RANDOM.seed (val =&gt; v_seed);

USER66		     IOPS
CF1				TABLE	   73621      73626	  73,183    1.70
USER11		     IOPS
v_begin_time := DBMS_UTILITY.GET_TIME();
CF1				TABLE	   73327      73331	  73,154    1.70
USER76		     IOPS
CF1				TABLE	   73669      73673	  71,407    1.66
			  ------------------------------------------------------

v_now := v_begin_time ;

Dictionary Cache Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used
v_brick_wall := v_now + v_seconds_to_run ;

				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
------------------------- ------------ ------ ------- ----- -------- ----------
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
dc_awr_control			    45	  4.4	    0	N/A	   2	      1
dc_global_oids			 7,321	  2.2	    0	N/A	   0	    266
dc_histogram_data		 9,494	  7.0	    0	N/A	   0	  2,212
dc_histogram_defs		24,712	 11.3	    0	N/A	 827	  7,235

dc_object_grants		    24	  0.0	    0	N/A	   0	    417
dc_objects			18,147	  3.2	    0	N/A	 244	  3,196
dc_profiles			     2	  0.0	    0	N/A	   0	      1
dc_props			   547	  0.0	    0	N/A	   0	     51
dc_rollback_segments		 2,988	  0.0	    0	N/A	   0	    230
----------------------------------------------------------------------------------------------------------------------
dc_segments			   892	 39.5	    0	N/A	  10	  1,206
dc_sequences			     8	 25.0	    0	N/A	   8	      6
dc_tablespaces			   981	  0.0	    0	N/A	   0	     22
dc_users			   617	  0.0	    4	0.0	   0	    387
-- The following WHILE loop is the master work loop control
outstanding_alerts		     5	 60.0	    0	N/A	   0	      7
sch_lj_oids			     4	  0.0	    0	N/A	   0	      4
			  ------------------------------------------------------

Dictionary Cache Stats (RAC)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

----------------------------------------------------------------------------------------------------------------------
		  No data exists for this section of the report.
			  ------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> "Pct Misses"  should be very low
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
--------------- ------------ ------ -------------- ------ ---------- --------

ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0
BODY			 406	6.9	       912    3.6	   0	    0
CLUSTER 		  54	1.9		54    1.9	   0	    0
DBLINK			   4	0.0		 0    N/A	   0	    0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
EDITION 		   9	0.0		18    0.0	   0	    0
HINTSET OBJECT		  33   18.2		33   18.2	   0	    0
INDEX			  41   70.7		41   70.7	   0	    0
OBJECT ID		  60  100.0		 0    N/A	   0	    0
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
QUEUE			 117   16.2	       117   16.2	   0	    0
SCHEMA		       1,104	0.0		 0    N/A	   0	    0
SQL AREA	       3,444   43.1	   131,354    1.4	   2	   60
SQL AREA BUILD		 625   76.8		 0    N/A	   0	    0
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
SQL AREA STATS		 624   99.7	       624   99.7	   0	    0
TABLE/PROCEDURE        4,426   12.3	    15,698    9.0	  63	    0
TRANSFORMATION		  63	0.0		63    0.0	   0	    0
TRIGGER 		   5	0.0		 5    0.0	   0	    0
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			  ------------------------------------------------------

Library Cache Activity (RAC)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
			DBMS_LOCK.SLEEP(v_num_tmp);
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4		0	     0		 0	     0
AUDIT POLICY		   2		2	     2		 0	     0
		END IF;
BODY			 418	      880	   880		 0	     0
CLUSTER 		  54	       54	    54		 0	     0
DBLINK			   4		0	     0		 0	     0
EDITION 		   9		9	     9		 0	     0
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met
HINTSET OBJECT		  33	       33	    33		 0	     0

INDEX			  41	       41	    41		 0	     0
QUEUE			  95	      117	   117		 0	     0
SCHEMA			  65		0	     0		 0	     0
				IF ( MOD(v_random_block,  2) = 0 ) THEN
TABLE/PROCEDURE        7,766	   10,872	10,872		 0	     0
TRANSFORMATION		  63	       63	    63		 0	     0
TRIGGER 		   0		5	     5		 0	     0
					v_do_update := TRUE;
			  ------------------------------------------------------


Memory Dynamic Components		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
				ELSE
-> Min/Max sizes since instance startup
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
-> ordered by Component
					v_do_update := FALSE;

		 Begin Snap	Current 	Min	    Max   Oper Last Op
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
				END IF;
--------------- ----------- ----------- ----------- ----------- ------ -------
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
			ELSE
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
				-- UPDATE quota has been filled,  force drain some SELECTs
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT buffer	   7,872.00    7,872.00    7,872.00    7,872.00      0 INI/
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
				v_do_update := FALSE;
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
			END IF;
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
PGA Target	   3,232.00    3,232.00    3,232.00    3,232.00      0 STA/
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
		END IF;
SGA Target	   9,664.00    9,664.00    9,664.00    9,664.00      0 STA/
Shared IO Pool	     128.00	 128.00      128.00	 128.00      0 STA/
java pool		.00	    .00 	.00	    .00      0 STA/
	END IF;
large pool	     160.00	 160.00      160.00	 160.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
shared pool	   1,472.00    1,472.00    1,472.00    1,472.00      0 STA/

streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/
			  ------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

Memory Resize Operations Summary	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

-- The type of SQL is now determined...execute it in the following section
		  No data exists for this section of the report.
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
Memory Resize Ops			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------

Process Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> B: Begin Snap   E: End Snap
	IF ( v_do_update != TRUE ) THEN
-> All rows below contain absolute values (i.e. not diffed over the interval)
-> Max Alloc is Maximum PGA Allocation size at snapshot time
		--
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by Begin/End snapshot, Alloc (MB) desc
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed

		-- Do a SELECT statement
							     Hist
				     Avg  Std Dev     Max     Max
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
		-- Work out scan or random
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
B Freeable     121.5	    .0	    1.3      2.7      25     N/A     94     94
		IF  ( v_random_workload_only = TRUE ) THEN
  Other        865.3	   N/A	    3.6      3.2      22      22    238    238
  PL/SQL	31.6	  30.9	     .2       .2       1       1    172    171
  SQL		18.0	  10.3	     .2       .3       1       5     96     89
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
  Total      1,036.4	  41.2	    5.3      6.4      48      27    600    592
E Freeable     153.5	    .0	    4.1      8.7      42     N/A     37     37
  Other        636.7	   N/A	    3.1      4.5      37      37    205    205
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
  PL/SQL	 3.9	   3.4	     .0       .1       1       2    139    139
  SQL		 3.5	   1.8	     .1       .2       1      11     34     28
  Total        797.6	   5.2	    7.4     13.6      81      49    415    409
			IF ( v_scan_workload_only = TRUE ) THEN
			  ------------------------------------------------------

SGA Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
						      End Size (Bytes)
SGA regions			Begin Size (Bytes)	(if different)
------------------------------ ------------------- -------------------
				v_do_scan_query := TRUE;
Database Buffers		     8,388,608,000
Fixed Size				12,445,928
Redo Buffers				21,106,688
Variable Size			     1,711,276,032
				v_scan_query_quota := FALSE;
			       -------------------
sum				    10,133,436,648
			  ------------------------------------------------------
			ELSE

SGA breakdown difference by Pool and NameDB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> ordered by Pool, Name
				IF ( v_scan_query_quota = FALSE ) THEN
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

Pool   Name				    Begin MB	     End MB  % Diff
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
------ ------------------------------ -------------- -------------- -------
large  PX msg pool			       128.0	      128.0    0.00
large  free memory				31.6	       31.6    0.00
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
shared ASH buffers				64.0	       64.0    0.00
shared KCRAHT Free Blocks			 N/A	       15.0	N/A
shared KGLH0					24.5	       36.6   49.70
shared KGLS					 N/A	       19.1	N/A
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
shared KJSC rnb slots				37.9		N/A -100.00
shared SO private sga				30.6	       30.6    0.00
shared SQLA					32.2	       82.3  155.73
						v_do_scan_query := TRUE;
shared db_block_hash_buckets			32.0	       32.0    0.00
shared dbwriter coalesce buffer 		16.0	       16.0    0.00
shared free memory			       259.0	      186.9  -27.81
					ELSE
shared gc name table				48.0	       48.0    0.00
shared gcs resources			       266.7	      266.7    0.00
						v_do_scan_query := FALSE;
shared gcs resv res hash bucket 		72.0	       72.0    0.00
shared gcs shadows			       145.5	      145.5    0.00
shared ges big msg buffers			26.3	       26.3    0.00
					END IF;
shared ksunfy_meta 1				25.2	       25.2    0.00
shared object queue hash buckets		16.0	       16.0    0.00
shared row cache				  .0		 .0    0.00
       buffer_cache			     7,872.0	    7,872.0    0.00
				ELSE
       fixed_sga				11.9	       11.9    0.00
       log_buffer				20.1	       20.1    0.00
       shared_io_pool			       128.0	      128.0    0.00
					-- Scan quota has been filled,	force drain some random access SELECTS
			  ------------------------------------------------------


Replication System Resource Usage	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
					v_do_scan_query := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

				END IF;
Replication SGA Usage			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			END IF;
			  ------------------------------------------------------


GoldenGate Capture			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


GoldenGate Capture Rate 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------

GoldenGate Apply Reader 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		IF ( v_do_scan_query != TRUE ) THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Coordinator		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
			SELECT COUNT(c2) INTO v_rowcnt

		  No data exists for this section of the report.
			  ------------------------------------------------------

			FROM cf1
GoldenGate Apply Server 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

GoldenGate Apply Coordinator Rate	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------

GoldenGate Apply Reader and Server Rate  DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		  No data exists for this section of the report.
			  ------------------------------------------------------


		ELSE
XStream Capture 			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

XStream Capture Rate			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------

XStream Apply Reader			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Coordinator		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54


		  No data exists for this section of the report.
			  ------------------------------------------------------

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
XStream Apply Server			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------
				v_scan_query_quota := TRUE;

XStream Apply Coordinator Rate		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

			END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------

		END IF;
XStream Apply Reader and Server Rate	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------



Table Statistics by DML Operations	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
		  No data exists for this section of the report.
			  ------------------------------------------------------

Table Statistics by Conflict Resolutions DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	ELSE

		  No data exists for this section of the report.
			  ------------------------------------------------------

		--
Replication Large Transaction Statistics DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
		-- Do an UPDATE statement
			  ------------------------------------------------------

Replication Long Running Transaction StatisticsDB/Inst: P60SDB/p60sdb1	Snaps:

		--
		  No data exists for this section of the report.
			  ------------------------------------------------------



Advanced Queue CPU/IO Usage		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------
		v_my_serial := v_my_serial + v_loop_cnt ;

Buffered Queues 			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------

Buffered Queue Subscribers		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		  No data exists for this section of the report.
			  ------------------------------------------------------

Rule Set				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		--

		  No data exists for this section of the report.
			  ------------------------------------------------------

Persistent Queues			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		-- Increment count of UPDATES and set UPDATE quota flag if needed
		  No data exists for this section of the report.
			  ------------------------------------------------------

		--
Persistent Queues Rate			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------
		v_updates_cnt := v_updates_cnt + 1;

Persistent Queue Subscribers		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.

			  ------------------------------------------------------


Resource Limit Stats			     DB/Inst: P60SDB/p60sdb1  Snap: 54
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
   exceeds 2*Initial Allocation are shown
			v_update_quota := TRUE;
-> Ordered by Resource Name

				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
		END IF;
------------------------------ ------------ ------------ ---------- ----------
ges_cache_ress			      3,317	   4,274	  0  UNLIMITED
			  ------------------------------------------------------

	END IF ;
Shared Servers Activity 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active
----------------------------------------------------------------------------------------------------------------------
 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
	   0		0	     1		  0	       1	    0
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
			  ------------------------------------------------------

Shared Servers Rates			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

----------------------------------------------------------------------------------------------------------------------
  Common     Disp			 Common       Disp     Server
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)

-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0
			  ------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Shared Servers Utilization		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Statistics are combined for all servers
-> Incoming and Outgoing Net % are included in %Busy

		--
  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
-------------- -------- -------- --------- ---------
	   625	    0.0    100.0       0.0	 0.0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
			  ------------------------------------------------------

Shared Servers Common Queue		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		-- so reset flags and counters before continuing
		  No data exists for this section of the report.
			  ------------------------------------------------------

Shared Servers Dispatchers		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		--
-> Ordered by %Busy, descending
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue
-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
		v_update_quota := FALSE;
     "(R)" - dispatcher re-started between begin and end snapshots

	      Avg Total Disp			    Total Total Queue  Avg Queue
		v_updates_cnt := 0;
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 625	  0.0	 100.0		0	    0
			  ------------------------------------------------------
		v_selects_cnt := 0;


Modified Parameters			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> This section shows all the modified initialization parameters that
	END IF;
were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
the snapshot interval


								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
audit_file_dest 	      /u01/app/oracle/admin/p60sdb/adum
audit_trail		      DB
cluster_database	      TRUE
compatible		      19.0.0
control_files		      +P60S/P60SDB/CONTROLFILE/current.
db_block_size		      8192
db_create_file_dest	      +P60S
db_domain		      example.com
db_name 		      p60sdb
db_recovery_file_dest	      +FRA
db_recovery_file_dest_size    137438953472
diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p60sdbXDB
instance_number 	      1
listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
pga_aggregate_target	      3371171840
processes		      640
remote_listener 	       mcracpoc-scan.example.com:1521
remote_login_passwordfile     EXCLUSIVE
sga_target		      10133438464
thread			      1
undo_tablespace 	      UNDOTBS1
			  ------------------------------------------------------


Modified Multi-Valued Parameters	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot

								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
control_files		      +FRA/P60SDB/CONTROLFILE/current.2
			      +P60S/P60SDB/CONTROLFILE/current.
			  ------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		     2050	   51.96
gc current grant busy		 31.39 UPDATE				   31.39
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


db file sequential read 	 12.26 UPDATE				   12.19


gc current grant 2-way		  3.93 UPDATE				    3.93

	  bhdvtsvjhgvrh 	  1497866750		     1595	   40.41
gc cr multi block request	 21.94 TABLE ACCESS - BY INDEX ROWID BAT   21.92
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 10.13 TABLE ACCESS - BY INDEX ROWID BAT    6.97


db file parallel read		  4.64 TABLE ACCESS - BY INDEX ROWID BAT    4.64

			  ------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		     2050	   51.96
UPDATE					   51.23 gc current grant busy	   31.39
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	  bhdvtsvjhgvrh 	  1497866750		     1595	   40.41
TABLE ACCESS - BY INDEX ROWID BATCHED	   36.74 gc cr multi block reque   21.92
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    3.62 gc cr grant busy	    3.17

			  ------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> '# Samples Active' shows the number of ASH samples in which the session
      was found waiting for that particular event. The percentage shown
      in this column is calculated with respect to wall clock time
      and not total database activity.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
      when the session was waiting for that particular event

   Sid, Serial# % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------
User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
	5,37454       1.44 gc cr multi block request		0.46
USER42		     sqlplus@mcracp...m (TNS V1-V3)	  18/64 [ 28%]	      0

	6,20871       1.44 gc current grant busy		0.58
USER85		     sqlplus@mcracp...m (TNS V1-V3)	  23/64 [ 36%]	     23

       35,23290       1.44 gc current grant busy		0.51
USER37		     sqlplus@mcracp...m (TNS V1-V3)	  20/64 [ 31%]	     20

       36,21261       1.44 gc current grant busy		0.61
USER84		     sqlplus@mcracp...m (TNS V1-V3)	  24/64 [ 38%]	     23

       67,21674       1.44 gc cr multi block request		0.43
USER47		     sqlplus@mcracp...m (TNS V1-V3)	  17/64 [ 27%]	      0

			  ------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  ------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       52.01
   SQL								       52.01
			  ------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc current grant busy		    Cluster	    FOREGROUND
     31.42	19.50
gc cr multi block request	    Cluster	    FOREGROUND
     23.41	14.53
db file sequential read 	    User I/O	    FOREGROUND
     15.61	 9.69
gc cr grant busy		    Cluster	    FOREGROUND
     10.82	 6.71
db file parallel read		    User I/O	    FOREGROUND
      4.64	 2.88
			  ------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
gc cr multi block request	 23.41		  "9","15993157","1"	   0.03
file#			   block#		      class#

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
db file sequential read 	 15.61		       "2","675","1"	   0.03
file#			   block#		      blocks

		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
db file parallel read		  4.64		       "1","77","77"	   3.65
files			   blocks		      requests
		-- so reset flags and counters

gc current multi block request	  2.10	   "9","16340048","16777230"	   0.03
file#			   block#		      id#

db file parallel write		  1.60		"1","0","2147483647"	   0.63
		v_scan_query_quota := FALSE;
requests		   interrupt		      timeout

			  ------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
		v_scan_queries_cnt := 0;
-> Top DB Objects by DB Time with respect to Application, Cluster,
   User I/O,  buffer busy waits and In-Memory DB events only.
-> Tablespace name is not available for reports generated from the root PDB
   of a consolidated database.
		v_random_access_queries_cnt := 0;
-> When ** MISSING ** occurs, some of the object attributes may not be available

      Object ID % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------
Object Name (Type)				      Tablespace
	END IF;
----------------------------------------------------- --------------------------
	  73609       1.72 gc current grant busy		0.33
USER64.CF1 (TABLE)				      IOPS
	  73379       1.67 gc cr multi block request		0.46

USER21.CF1 (TABLE)				      IOPS
	  73263       1.62 gc current grant busy		0.41
USER3.CF1 (TABLE)				      IOPS
	  73276       1.44 gc current grant busy		0.66
USER4.CF1 (TABLE)				      IOPS
	v_loop_cnt := v_loop_cnt + 1 ;
	  73278       1.44 gc current grant busy		0.56
USER5.CF1 (TABLE)				      IOPS
			  ------------------------------------------------------

Activity Over Time			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	v_now := DBMS_UTILITY.GET_TIME();
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot

-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
-------------------- -------- ------------------------------ -------- -------
12:13:24   (1.6 min)	  699 gc current grant busy		  198	 5.02
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
			      gc cr multi block request 	  157	 3.98
			      db file sequential read		   99	 2.51
12:15:00   (5.0 min)	2,068 gc current grant busy		  723	18.32
	END IF;
			      gc cr multi block request 	  485	12.29
			      db file sequential read		  338	 8.56
12:20:00   (4.0 min)	1,180 gc current grant busy		  319	 8.08
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9sq9djzzhr19y"></a>9sq9djzzhr19y</td><td class='awrc'><pre_sqltext class="awr">WITH binds as
	 (select :dbid			as dbid
	       ,  :inst_id_low		 as instIdLow
	       ,  :inst_id_high 	 as instIdHigh
	       ,  :begin_snap		 as beginSnap
	       ,  :end_snap		 as endSnap
	       ,  :begin_time		 as beginTime
	       ,  :end_time		 as endTime
	       ,  :disk_begin_time	 as diskBeginTime
	       ,  :disk_end_time	 as diskEndTime
	       ,  :mem_begin_time	 as memBeginTime
	       ,  :mem_end_time 	 as memEndTime
	       ,  :bucket_count 	 as bucketCount
	       ,  :bucket_interval	 as bucketInterval
	       ,  :mem_enable		 as memEnable
	       ,  :disk_enable		 as diskEnable
	       ,  :disk_filter_ratio	 as filterRatio,  :filter_action as filter_action,  :filter_blocking_session as filter_blocking_session,  :filter_capture_id as filter_capture_id,  :filter_client_id as filter_client_id,  :filter_consumer_group_id as filter_consumer_group_id,  :filter_dbop as filter_dbop,  :filter_ecid as filter_ecid,	:filter_event as filter_event,	:filter_instance_number as filter_instance_number,  :filter_is_captured as filter_is_captured,	:filter_is_filtered_out as filter_is_filtered_out,  :filter_is_nc_background as filter_is_nc_background,  :filter_is_replayed as filter_is_replayed,  :filter_machine as filter_machine,  :filter_machine_port as filter_machine_port,	:filter_module as filter_module,  :filter_object as filter_object,  :filter_pdb as filter_pdb,	:filter_physical_session as filter_physical_session,  :filter_pl_sql as filter_pl_sql,	:filter_pl_sql_top as filter_pl_sql_top,  :filter_program as filter_program,  :filter_px_process as filter_px_process,	:filter_service_hash as filter_service_hash,  :filter_session_type as filter_session_type,  :filter_sql_fms as filter_sql_fms,	:filter_sql_id_top as filter_sql_id_top,  :filter_sql_opcode as filter_sql_opcode,  :filter_sql_opcode_top as filter_sql_opcode_top,  :filter_sql_rws as filter_sql_rws,  :filter_sql_rws_line as filter_sql_rws_line,	:filter_sqlid as filter_sqlid,	:filter_sqlid_fullphv as filter_sqlid_fullphv,	:filter_sqlid_phv as filter_sqlid_phv,	:filter_user_id as filter_user_id,  :filter_wait_class as filter_wait_class,  :filter_xid as filter_xid from sys.dual)	,  unified_ash as
	     (SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
			      gc cr multi block request 	  282	 7.14
       ,  a.sql_opcode
			      db file sequential read		  179	 4.54
			  ------------------------------------------------------
       ,  a.sql_opname



	  ADDM Report for Task 'ADDM:3889879926_1_54'
       ,  a.top_level_sql_id
	  -------------------------------------------

Analysis Period
       ,  a.top_level_sql_opcode
---------------
AWR snapshot range from 53 to 54.
Time period starts at 12-FEB-20 12.13.24 PM
       ,  a.sql_child_number
Time period ends at 12-FEB-20 12.24.01 PM

Analysis Target
       ,  a.sql_plan_hash_value
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
       ,  a.sql_full_plan_hash_value
ADDM performed an analysis of instance p60sdb1, numbered 1 and hosted at
mcracpoc1.example.com.

       ,  a.sql_plan_line_id
Activity During the Analysis Period
-----------------------------------
       ,  a.sql_plan_operation
Total database time was 36877 seconds.
The average number of active sessions was 57.89.
       ,  a.sql_plan_options

Summary of Findings
-------------------
       ,  a.sql_exec_id
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
       ,  a.force_matching_signature
1  Interconnect Latency       57.89 | 100	   1
2  Top SQL Statements	      56.26 | 97.17	   2
3  Global Cache Messaging     44 | 76.01	   1
       ,  a.plsql_entry_object_id
4  Buffer Busy - Hot Objects  26.03 | 44.97	   0
5  "User I/O" wait Class      12.95 | 22.37	   0

       ,  a.plsql_entry_subprogram_id

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       ,  a.plsql_object_id


	  Findings and Recommendations
	  ----------------------------
       ,  a.plsql_subprogram_id

Finding 1: Interconnect Latency
Impact is 57.98 active sessions, 100% of total activity.
       ,  a.service_hash
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
       ,  a.qc_session_id
The instance was consuming 51719 kilo bits per second of interconnect
bandwidth.
       ,  a.qc_instance_id
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 18742 microseconds.
       ,  a.qc_session_serial#
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.22.248 and source "?".

       ,  nvl(a.event,
   Recommendation 1: Host Configuration
   Estimated benefit is 57.89 active sessions, 100% of total activity.
   -------------------------------------------------------------------
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
		 THEN 'CPU: IM Populate'
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
		 THEN 'CPU: IM Prepopulate'
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
		 THEN 'CPU: IM Repopulate'
      Impact is 44 active sessions, 76.01% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 44.57 active sessions, 76.98% of total activity.
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0


Finding 2: Top SQL Statements
		 THEN 'CPU: IM Trickle Repop'
Impact is 56.34 active sessions, 97.17% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
		 THEN 'CPU: IM Query'
   Estimated benefit is 31.65 active sessions, 54.66% of total activity.
   ---------------------------------------------------------------------
   Action
	     ELSE 'CPU + Wait for CPU' END) as event
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
       ,  nvl(a.event_id,  1)
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
	   as event_id	
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
       ,  nvl(a.wait_class,  'CPU')
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
	   as wait_class	
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 15455 times and
      had an average elapsed time of 1.2 seconds.
       ,  nvl(a.wait_class_id,	9999)

   Recommendation 2: SQL Tuning
   Estimated benefit is 24.61 active sessions, 42.51% of total activity.
	   as wait_class_id
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
       ,  a.seq#
      "bhdvtsvjhgvrh".
      Related Object
       ,  a.p1
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
       ,  a.p1text
	 (CUSTID < :B1 )
   Rationale
       ,  a.p2
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
       ,  a.p2text	
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
       ,  a.p3
      Database time for this SQL was divided as follows: 100% for SQL
       ,  a.p3text	
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
       ,  a.wait_time
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 86747 times and
      had an average elapsed time of 0.17 seconds.
       ,  a.time_waited	


Finding 3: Global Cache Messaging
       ,  rawtohex(a.xid) as xid	
Impact is 44.07 active sessions, 76.01% of total activity.
----------------------------------------------------------
       ,  a.blocking_session
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
       ,  a.blocking_session_serial#
   Estimated benefit is 44 active sessions, 76.01% of total activity.
   ------------------------------------------------------------------
   Action
       ,  a.blocking_session_status
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
       ,  a.blocking_inst_id
      with SQL_ID "35dumc2tpr9dv" is responsible for 54% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
       ,  a.current_obj#
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 44.57 active sessions, 76.98% of total activity.
       ,  a.current_file#


Finding 4: Buffer Busy - Hot Objects
       ,  a.current_block#	
Impact is 26.07 active sessions, 44.97% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
       ,  a.top_level_call#
database time.

   No recommendations are available.

       ,  a.top_level_call_name
   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
       ,  a.program
      database time.
      Impact is 26.03 active sessions, 44.97% of total activity.
	 Inter-instance messaging was consuming significant database time on
       ,  a.module
	 this instance.
	 Impact is 44 active sessions, 76.01% of total activity.
	    Wait class "Cluster" was consuming significant database time.
       ,  a.action
	    Impact is 44.57 active sessions, 76.98% of total activity.


Finding 5: "User I/O" wait Class
       ,  a.client_id
Impact is 12.97 active sessions, 22.37% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
       ,  a.remote_instance#	
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.
       ,  a.ecid
The SGA was adequately sized.

   No recommendations are available.
       ,  a.consumer_group_id



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       ,  a.machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
       ,  a.port
	  ----------------------

Miscellaneous Information
-------------------------
       ,  a.in_connection_mgmt
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
       ,  a.in_parse
Wait class "Configuration" was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
       ,  a.in_hard_parse	
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.
       ,  a.in_sql_execution

RAC Statistics  DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

       ,  a.in_plsql_execution
				Begin	End
				----- -----
	   Number of Instances:     2	  2
	       Number of LMS's:     3	  3
       ,  a.in_plsql_rpc	
      Number of realtime LMS's:     3	  3  (0 priority changes)


       ,  a.in_plsql_compilation
Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
				      ---------------	    ---------------
       ,  a.in_java_execution
  Global Cache blocks received: 		 3.60		       0.14
    Global Cache blocks served: 		 3.62		       0.14
       ,  a.in_bind
     GCS/GES messages received: 	    31,724.50		   1,261.16
	 GCS/GES messages sent: 	    26,228.96		   1,042.69
	    DBWR Fusion writes: 		 0.10		       0.00
       ,  a.in_cursor_close
 Estd Interconnect traffic (KB) 	    11,376.78


       ,  a.in_sequence_load
Global Cache Efficiency Percentages (Target local+remote 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:    2.77
       ,  a.is_captured
Buffer access - remote cache %:    0.02
Buffer access - 	disk %:   97.21
Global Cache Locality	     %:   54.13

       ,  a.is_replayed

Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       ,  a.dbreplay_file_id
	  Avg global cache cr block receive time (us):		9,779.1
     Avg global cache current block receive time (us):	       28,883.2
			       Avg LMS process busy %:		   32.5
       ,  a.dbop_name

	    Avg global cache cr block build time (us):		    0.0
      Global cache log flushes for cr blocks served %:		    0.5
       ,  a.con_dbid,  decode(binds.diskEnable, 0, 1, binds.filterRatio)
	    Avg global cache cr block flush time (us):	       18,333.3

	 Avg global cache current block pin time (us):
 Global cache log flushes for current blocks served %:		    1.8
		       as sample_count
       Avg global cache current block flush time (us):	       15,263.2

		     Avg global enqueue get time (us):		  317.8
		   ,  inst_id as instance_number

Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		FROM sys.gv_$active_session_history a,	binds
		     Avg message sent queue time (us):		  247.1
	     Avg message sent queue time on ksxp (us):	       13,268.8
	  Avg message received kernel queue time (us):		   65.7
	       WHERE binds.memEnable = 1
		 Avg message received queue time (us):		   26.9
		    Avg GCS message process time (us):		   16.9
		    Avg GES message process time (us):		   29.6

		 AND (	binds.diskEnable = 0
			    % of direct sent messages:		  13.63
			  % of indirect sent messages:		  85.89
			% of flow controlled messages:		   0.48
		     OR (  binds.diskEnable = 1
	  -------------------------------------------------------------

Cluster Interconnect
-> if Public/Source at End snap is different a '*' is displayed
		       AND a.is_awr_sample = 'Y'
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End
	     --------------------------------------------------   -------
		       AND bitand(a.flags,  128) = 0 ) )
Interface    IP Address      Pub Source 			  Pub Src
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.22.248  N
		 AND a.inst_id between

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

Statistic				     Total   per Second    per Trans
			  binds.instIdLow
--------------------------------- ---------------- ------------ ------------
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
		      and binds.instIdHigh
Global Enqueue S-optim Broadcasts		84	    0.1 	 0.0
Global Enqueue S-optim S-lock get	    64,405	  101.2 	 4.0
Global Enqueue S-optim anti-locks		40	    0.1 	 0.0
		 AND a.sample_time between
KA local message waits				 0	    0.0 	 0.0
KA local messages received			 0	    0.0 	 0.0
KA messages received actual			 0	    0.0 	 0.0
			  binds.beginTime
KA messages received logical			 0	    0.0 	 0.0
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0
Pseudo reconfiguration count			 0	    0.0 	 0.0
		      and binds.endTime
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	     3,780	    5.9 	 0.2
	      UNION ALL
acks for commit broadcast(logical	    17,269	   27.1 	 1.1
broadcast msgs on commit(actual)	    12,691	   19.9 	 0.8
broadcast msgs on commit(logical)	    15,562	   24.5 	 1.0
	      SELECT a.sample_id
broadcast msgs on commit(wasted)	     8,108	   12.7 	 0.5
dynamically allocated gcs resourc		 0	    0.0 	 0.0
dynamically allocated gcs shadows		 0	    0.0 	 0.0
       ,  a.sample_time
flow control messages received			 3	    0.0 	 0.0
flow control messages sent			 1	    0.0 	 0.0
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			       549	    0.9 	 0.0
       ,  a.session_id
gcs ast to fg				   144,099	  226.5 	 9.0
gcs ast xid					 1	    0.0 	 0.0
gcs bidless ast to lms			     1,058	    1.7 	 0.1
       ,  a.session_serial#
gcs blocked converts			   110,460	  173.6 	 6.9
gcs blocked cr converts 		       832	    1.3 	 0.1
gcs compatible basts				11	    0.0 	 0.0
       ,  a.session_type
gcs compatible cr basts (global)		20	    0.0 	 0.0
gcs compatible cr basts (local) 	       421	    0.7 	 0.0
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 0	    0.0 	 0.0
       ,  a.session_state
gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			   647,263	1,017.2 	40.4
gcs dbwr write request msgs			61	    0.1 	 0.0
       ,  a.flags
gcs error msgs					 0	    0.0 	 0.0
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 0	    0.0 	 0.0
       ,  a.user_id
gcs force cr grant				11	    0.0 	 0.0
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				   145,157	  228.1 	 9.1
       ,  a.sql_id
gcs grant request in partial open		 0	    0.0 	 0.0
gcs immediate (compatible) conver	    17,528	   27.5 	 1.1
gcs immediate (null) converts		 1,650,231	2,593.5        103.1
       ,  a.sql_opcode
gcs immediate cr (compatible) con	    17,489	   27.5 	 1.1
gcs immediate cr (null) converts	 9,590,516     15,072.4        599.2
gcs lms flush pi msgs				 0	    0.0 	 0.0
       ,  a.sql_opname
gcs lms write request msgs		       123	    0.2 	 0.0
       ,  a.top_level_sql_id
gcs msgs process time(ms)		   339,635	  533.8 	21.2
gcs msgs received			20,155,012     31,675.6      1,259.2
gcs new served by master		       356	    0.6 	 0.0
gcs out-of-order msgs				20	    0.0 	 0.0
gcs pings refused			       355	    0.6 	 0.0
       ,  a.top_level_sql_opcode
gcs pkey conflicts retry			 0	    0.0 	 0.0
gcs queued converts				 0	    0.0 	 0.0
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
       ,  a.sql_child_number
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

       ,  a.sql_plan_hash_value
Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
       ,  a.sql_full_plan_hash_value
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
       ,  a.sql_plan_line_id
gcs reader bypass grant fg ast			 0	    0.0 	 0.0
gcs reader bypass grant immediate		10	    0.0 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
       ,  a.sql_plan_operation
gcs refuse xid					 0	    0.0 	 0.0
gcs refuse xid to fg				 0	    0.0 	 0.0
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
       ,  a.sql_plan_options
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
gcs retry convert request		       209	    0.3 	 0.0
       ,  a.sql_exec_id
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
gcs side channel msgs actual		       820	    1.3 	 0.1
gcs side channel msgs logical		    24,796	   39.0 	 1.5
       ,  a.force_matching_signature
gcs stale cr				       118	    0.2 	 0.0
gcs undo cr					 0	    0.0 	 0.0
gcs write notification msgs			 0	    0.0 	 0.0
       ,  a.plsql_entry_object_id
gcs writes refused				 0	    0.0 	 0.0
ges msgs process time(ms)		       256	    0.4 	 0.0
ges msgs received			     8,644	   13.6 	 0.5
       ,  a.plsql_entry_subprogram_id
ges remote lock allocation		       227	    0.4 	 0.0
global posts dropped				 0	    0.0 	 0.0
global posts queue time 			 0	    0.0 	 0.0
       ,  a.plsql_object_id
global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
implicit batch messages received	   246,906	  388.0 	15.4
       ,  a.plsql_subprogram_id
implicit batch messages sent		   195,400	  307.1 	12.2
lmd msg send time(ms)				 0	    0.0 	 0.0
lms(s) msg send time(ms)			 0	    0.0 	 0.0
       ,  a.service_hash
messages flow controlled		    29,003	   45.6 	 1.8
messages queue sent actual		 2,098,139	3,297.4        131.1
messages queue sent logical		 1,541,106	2,422.0 	96.3
       ,  a.qc_session_id
messages received actual		 4,081,453	6,414.4        255.0
messages received logical		20,163,656     31,689.2      1,259.8
messages sent directly			   823,480	1,294.2 	51.4
messages sent indirectly		 5,187,387	8,152.5        324.1
       ,  a.qc_instance_id
messages sent not implicit batche	   133,115	  209.2 	 8.3
messages sent pbatched			14,821,135     23,292.9        926.0
msgs causing lmd to send msgs			 0	    0.0 	 0.0
       ,  a.qc_session_serial#
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
msgs received kernel queue time ( 1.3251727639E+12 2.082639E+09 8.279225E+07
msgs received queue time (ms)		   543,228	  853.7 	33.9
       ,  nvl(a.event,
msgs received queued			20,163,656     31,689.2      1,259.8
msgs sent queue time (ms)		   661,095	1,039.0 	41.3
msgs sent queue time on ksxp (ms)	46,249,473     72,685.6      2,889.5
msgs sent queued			 2,675,532	4,204.9        167.2
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
msgs sent queued on ksxp		 3,485,585	5,477.9        217.8
number of broadcasted resources 		 0	    0.0 	 0.0
number of directly freed master r		 0	    0.0 	 0.0
		 THEN 'CPU: IM Populate'
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0
number of received ODPS messages		 0	    0.0 	 0.0
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
		 THEN 'CPU: IM Prepopulate'
number of sent RBA messages			 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
process batch messages received 	 2,142,756	3,367.6        133.9
		 THEN 'CPU: IM Repopulate'
process batch messages sent		 2,359,397	3,708.0        147.4
receiver cycle time			   902,117	1,417.8 	56.4
receiver loop count			 3,138,097	4,931.8        196.1
			  ------------------------------------------------------
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		 THEN 'CPU: IM Trickle Repop'
Statistic				    Total
------------------------------ ------------------
CR Block Requests			      146
CURRENT Block Requests			    1,172
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
Data Block Requests			    1,167
Undo Block Requests				0
TX Block Requests			       19
Current Results 			    1,265
		 THEN 'CPU: IM Query'
Private results 				0
Zero Results					2
Disk Read Results			       51
Fail Results					0
	     ELSE 'CPU + Wait for CPU' END) as event
Fairness Down Converts			      194
Light Works					0
Flushes 					6
Builds					      146
Errors						0
       ,  nvl(a.event_id,  1)
			  ------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
	   as event_id	
-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations

Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
       ,  nvl(a.wait_class,  'CPU')
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		      0
Flushes 	     19 		     47.37    52.63
	   as wait_class	
			  ------------------------------------------------------

Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
       ,  nvl(a.wait_class_id,	9999)
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc
	   as wait_class_id

			       CR			  Current
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
       ,  a.seq#
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   2 data block       203   98.0    1.0    1.0	    913   54.2	 43.7	 2.1
       ,  a.p1
   2 undo header    1,095   92.8    4.9    2.3	     15     .0	100.0	  .0
   2 Others	       23  100.0     .0     .0	     56   16.1	 82.1	 1.8
       ,  a.p1text
			  ------------------------------------------------------

Global Cache Transfer Times (us)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
       ,  a.p2
-> Immed, Busy, Congst -  Average times in us
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
       ,  a.p2text	
	      --------------------------- ---------------------------
Inst Block
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
       ,  a.p3
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   2 data blo  17069  17082  29744   3100  30667  30043  32714	 3940
   2 undo hea	8606   8039  21446   3908   1676    N/A   1676	  N/A
       ,  a.p3text	
   2 others	1367   1367    N/A    N/A   2130   1486   2199	 4740
   2 undo blo	 N/A	N/A    N/A    N/A    N/A    N/A    N/A	  N/A
			  ------------------------------------------------------
       ,  a.wait_time

Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
       ,  a.time_waited	
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc

				   CR			    Current
       ,  rawtohex(a.xid) as xid	
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
       ,  a.blocking_session
---- -------- ------- ----------- ------- ------- ----------- ------- -------
   2 undo hea		    1,016   100.0     0.0	  N/A	  N/A	  N/A
   2 data blo		      199   100.0     0.0	  495	100.0	  0.0
   2 others		       23   100.0     0.0	    9	100.0	  0.0
       ,  a.blocking_session_serial#
   2 undo blo		      N/A     N/A     N/A	  N/A	  N/A	  N/A
			  ------------------------------------------------------

Global Cache Times (Immediate)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
       ,  a.blocking_session_status
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
-> ordered by CR + Current Blocks Received desc

		       CR Avg Time (us)   Current Avg Time (us)
       ,  a.blocking_inst_id
		     -------------------- --------------------
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
       ,  a.current_obj#
---- -------- ------ ------ ------ ------ ------ ------ ------
   2 undo hea	       8039   8039    N/A    N/A    N/A    N/A
   2 data blo	      17082  17082    N/A  30043  30043    N/A
   2 others	       1367   1367    N/A   1486   1486    N/A
       ,  a.current_file#
   2 undo blo		N/A    N/A    N/A    N/A    N/A    N/A
			  ------------------------------------------------------

Interconnect Ping Latency Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
       ,  a.current_block#	
-> Ping latency of the roundtrip of a message from this instance to -> target in
-> The target instance is identified by an instance number.
       ,  a.top_level_call#
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
-> Note that latency of a message from the instance to itself is used as
-> control, since message latency can include wait for CPU
       ,  a.top_level_call_name

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
       ,  a.program
--------- -------- ------ ----------- -------- ------ -----------
	1	58    545	  .19	    63	  533	      .17
	2	58   1788	 1.50	    63	49841	   376.33
			  ------------------------------------------------------
       ,  a.module

Interconnect Throughput by Client	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Throughput of interconnect usage by major consumers
-> All throughput numbers are megabytes per second
       ,  a.action

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
---------------- ----------- -----------
       ,  a.client_id
Global Cache		 .04	     .02
Parallel Query		 .01	     .02
DB Locks		6.23	    8.35
DB Streams		 N/A	     N/A
Other			 .00	     .00
       ,  a.remote_instance#	
			  ------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
       ,  a.ecid
-> Throughput and errors of interconnect devices (at OS level)
-> All throughput numbers are megabytes per second

Device Name	IP Address	 Public Source
       ,  a.consumer_group_id
--------------- ---------------- ------ -------------------------------
				  Send	   Send
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
       ,  a.machine
----------- -------- -------- -------- --------
			       Receive	Receive
       ,  a.port
    Receive  Receive  Receive	Buffer	  Frame
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
----------- -------- -------- -------- --------
       ,  a.in_connection_mgmt
fg-priv:1	169.254.22.248	 NO
	.00	   0	    0	     0	      0
	.00	   0	    0	     0	      0
			  ------------------------------------------------------
       ,  a.in_parse

Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Times are in seconds
-> Affinity objects - Affinity objects mastered at the begin/end snapshot
       ,  a.in_hard_parse	
-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot

							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
       ,  a.in_sql_execution
-------------------------------- ------------ ------------- -------- --------
remaster ops				    1	       1.00
remastered objects			    3	       3.00
replayed locks received 		    0	       0.00
       ,  a.in_plsql_execution
replayed locks sent			    0	       0.00
resources cleaned			    0	       0.00
remaster time (s)			  0.5	       0.53
freeze time (s) 			  0.0	       0.01
       ,  a.in_plsql_rpc	
cleanup time (s)			  0.1	       0.09
replay time (s) 			  0.0	       0.00
fixwrite time (s)			  0.1	       0.14
sync time (s)				  0.3	       0.27
       ,  a.in_plsql_compilation
affinity objects					N/A	   1	    1
read-mostly objects					N/A	   7	   10
affinity objects (other inst)				N/A	   1	    1
read-mostly objects (persistent)			N/A	   7	    7
       ,  a.in_java_execution
			  ------------------------------------------------------

End of Report
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  binds.filterRatio as sample_count
		   ,  instance_number as instance_number
		FROM AWR_ROOT_active_sess_history a,
		     binds
	       WHERE binds.diskEnable = 1
		 AND a.dbid = binds.dbid
		 AND a.instance_number between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.snap_id between
			  binds.beginSnap
		      and binds.endSnap + 1
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	     ),  logical_ash as
	     (select sample_id
		   ,  sample_time
		   ,  sample_count
		   ,  instance_number as inst_id,  wait_class as global_hist_wc, event as event, instance_number || ':' || session_id || ', ' || session_serial# as physical_session, sql_id as sqlid, wait_class as wait_class,  xid as xid,  instance_number as instance_number,  user_id as user_id,  program as program from unified_ash) ,  bucketized_ash as
	   (SELECT ash0.*,
		  (case when binds.bucketCount &gt; 1
			then trunc( ( (24 * 60 * 60 *
				       extract(day from sample_time
						      - binds.beginTime))
				    + (60 * 60 *
				       extract(hour from sample_time
						      - binds.beginTime))
				    + (60 *
				       extract(minute from sample_time
						      - binds.beginTime))
				    + (1 *
				       extract(second from sample_time
						      - binds.beginTime))
				     ) / binds.bucketInterval
				   ) + 1
			else 1
		   end) as bucket_number
	   FROM logical_ash ash0,  binds),  filter_xml as
	 (SELECT xmlconcat(xmlelement(&quot;filters&quot; )
	 ,  xmlelement(&quot;report_time&quot;, xmlattributes(
	     to_char(o.begintime,  'HH24:MI:SS MM/DD/YYYY') as &quot;begin_time&quot;,
	     to_char(o.endtime,  'HH24:MI:SS MM/DD/YYYY') as &quot;end_time&quot;))) as xml_frag FROM
    (select binds.*,  nvl(to_number(filter_pdb), 0) as con_dbid from binds) o) ,  filtered_ash as
	      (SELECT ash.*,
		      (case when 1=1  then 1 else 0 end) filtered
	       FROM bucketized_ash ash,  binds),  grouped_ash as
		   (SELECT ash.*,   (CASE WHEN nvl(filtered,  2) = 1
				      THEN 0  -- target / no histogram
				      ELSE 1  -- totals/global
				 END) AS bucket_type  FROM (SELECT filtered,  event, physical_session, sqlid, wait_class, bucket_number      ,	grouping_id(filtered,  event, physical_session, sqlid, wait_class, bucket_number) as gid , global_hist_wc  , max(inst_id)	     as inst_id
			     , sum(sample_count)       as sample_count
			     , count(distinct sqlid)   as uniq_sqlids
			     , count(distinct xid)     as uniq_xids
			     , count(distinct physical_session)
						      as uniq_sessions
			     , count(distinct instance_number)
						      as uniq_instances, max(user_id) as user_id, max(program) as program from	filtered_ash
		     group by  grouping sets(  (bucket_number,	global_hist_wc) ,  ( bucket_number,  wait_class,  filtered),  (wait_class,  filtered),	(sqlid,  wait_class,  filtered),  (physical_session,  wait_class,  filtered),  (wait_class,  event,  filtered)) ) ash  -- eliminate rows with filtered = 0
		     -- keep filtered and from global/total
		     WHERE (nvl(filtered,  2) != 0)),  component_1_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   else (13 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 13
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 13
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 13
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 13
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select wait_class as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , wait_class) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 29
			      and wait_class is not null)
		    group by (case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_1_histogram as
		  (select bucket_number
			 , sum(sample_count)		as sample_count
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   when mem_rank is not null
				   then (13 + 1)
			       end)			as mem_rank
			 , bucket_type

		    from (select g1.bucket_number
				, g1.sample_count	 as sample_count
				, (case when g1.wait_class = g2.dim_val

				       then to_char(g2.dim_val)
				       -- global/totals
				       when g1.bucket_type = 1
				       then g1.global_hist_wc
				       else null
				   end) 		as dim_val
				, (case when g1.wait_class = g2.dim_val

				       then g2.mem_rank
				       when g1.bucket_type = 1 then NULL
				       else (13 + 1)
				   end) 		as mem_rank
				,  g1.bucket_type

			   from grouped_ash g1,
				component_1_treemap g2
			  where -- both filtered and global
				(g1.gid = 28  AND
				 g1.wait_class is not null OR
				 g1.bucket_type = 1)
			    and g1.wait_class = g2.dim_val(+)

			    -- join filtered rows only
			    and g1.bucket_type = g2.bucket_type(+)
			  )
		 group by bucket_number
			 , dim_val
Report written to awr.txt

			 , bucket_type
		  ) ,  component_1_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('wait_class' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , xmlconcat(
			    topmems.topmems_frag
			   , histogram.histogram_xml)) as dim_frag from (select xmlelement(
SQL> 			   &quot;top_mems&quot;
SQL> SQL> 			  , xmlattributes(sum(case when mem_rank &lt;= 13
SQL> SQL> 						  then sample_count
SQL> SQL> 						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 13
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 13
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_1_treemap) t
		   ) topmems , (SELECT xmlagg(
			  xmlelement(
			   &quot;histogram&quot;
			  , xmlattributes(
			     (case when bucket_type = 1 then 'all'
				   else 'target'
			      end) AS &quot;type&quot;
			    , max(binds.bucketCount)	as &quot;bucket_count&quot;
			    , max(binds.bucketInterval) as &quot;bucket_interval&quot;)
			  , xmlagg(bucket_xml
				    order by
				      bucket_type,
				      bucket_number asc)
				     )
				 ) as histogram_xml
		  FROM (SELECT	bucket_type
			       , bucket_number
			       , xmlelement(
				&quot;bucket
&quot;
			       , xmlattributes(bucket_number	 as &quot;number&quot;
					     , sum(sample_count) as &quot;count&quot;)
			       , (case
				 when bucket_type = 0 then -- filtered rows
				   xmlelement(
				    &quot;top_mems&quot;
				   , xmlattributes(
				     sum(case when mem_rank &lt;= 13
					      then sample_count
					      else 0
					  end) as &quot;count&quot;)
				   , xmlagg(
				     xmlelement(
				       &quot;mem&quot;
				       , xmlattributes(
					  mem_rank     as &quot;id&quot;
					 , sample_count as &quot;count&quot;))
				     order by mem_rank asc))
				 end)) as bucket_xml
			 FROM (component_1_histogram)
			 GROUP BY bucket_number,  bucket_type),  binds
		  GROUP by bucket_type) histogram ),  component_2_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'sqlid, wait_class' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as
&quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(sql_text1,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , sql_text1),  NULL)
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*
			  , NVL((SELECT replace(substr(v.sql_text,  1,	100), CHR(0), '') as sql_text
	 FROM sys.gv_$sql v
	 WHERE v.sql_id = dim_data.dim1_value
	       AND v.inst_id = dim_data.inst_id

	       AND rownum &lt; 2 ), ( SELECT replace(sys.dbms_lob.substr(v.sql_text,  100,  1), CHR(0), '')
	   as sql_text
	 FROM AWR_ROOT_sqltext v,  binds b
	 WHERE v.dbid = b.dbid
	   AND v.sql_id = dim_data.dim1_value

	   AND rownum &lt; 2)) as sql_text1

		  from (select
			     max(case when dim1_rank &lt;= 10
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 10
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 10
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 10
				      then dim1_rank
				      else (10 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 10
				      then dim12_rank
				      else (10 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 13
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 13
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 13
					      then dim12_rank
					      else (13 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select sqlid   as dim1_val
					     , wait_class   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by sqlid

						     order by sample_count desc
							     , wait_class

						) as dim12_rank
					     , sum(sample_count) over
						(partition by sqlid

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 25
					 and sqlid is not null
					 and wait_class is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 13
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 10
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 10
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     ),  component_3_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'physical_session, wait_class' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as &quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , NULL),  NULL)
				, NVL2(NULL,
				      xmlelement(
&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*


		  from (select
			     max(case when dim1_rank &lt;= 10
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 10
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 10
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 10
				      then dim1_rank
				      else (10 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 10
				      then dim12_rank
				      else (10 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 13
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 13
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 13
					      then dim12_rank
					      else (13 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select physical_session	 as dim1_val
					     , wait_class   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by physical_session

						     order by sample_count desc
							     , wait_class

						) as dim12_rank
					     , sum(sample_count) over
						(partition by physical_session

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 21
					 and physical_session is not null
					 and wait_class is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 13
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 10
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 10
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     ),  component_4_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'wait_class, event' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as &quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , NULL),  NULL)
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*


		  from (select
			     max(case when dim1_rank &lt;= 13
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 13
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 13
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 13
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 13
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 13
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 13
				      then dim1_rank
				      else (13 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 13
				      then dim12_rank
				      else (13 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 10
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 10
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 10
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 10
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 10
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 10
					      then dim12_rank
					      else (10 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select wait_class   as dim1_val
					     , event   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by wait_class

						     order by sample_count desc
							     , event

						) as dim12_rank
					     , sum(sample_count) over
						(partition by wait_class

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 13
					 and wait_class is not null
					 and event is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 10
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 13
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 13
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     )select xmlconcat((select xml_frag from filter_xml),
		      xmlelement(&quot;dim_list&quot;,
				 xmlconcat((select dim_frag from component_1_xml), (select dim_frag from component_2_xml), (select dim_frag from component_3_xml), (select dim_frag from component_4_xml)))
		) from sys.dual</pre_sqltext></td>
</tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9tt2m0mpc2qqp"></a>9tt2m0mpc2qqp</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_char$ i_idl_char1) */ piece#, length, piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,	SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,	DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,  SQL_TEXT,  PX_SERVER#,  PX_SERVER_GROUP,	PX_SERVER_SET,	PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,	USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,  FETCHES,	BUFFER_GETS,  IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,	PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,  PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,  0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,  IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,	IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,	ACTION,  SERVICE_NAME,	CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,  PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,	NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,  NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),	'00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,	TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,  CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,  MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,	DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,	MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,	MAX_PROGRAM,  MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,	QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,  MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,  MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,  MAX_SQL_EXEC_ID,	MAX_LAST_REFRESH_TIME,	MAX_DBOP_NAME,	MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,	NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,	SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,  MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,  SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,  SUM_WRITE_BYTES,	SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,  DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,	1,  'platform_name',  SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,  0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,  MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,	SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,	MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,	MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,	MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,	MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,  MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,  MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,	MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,	MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,	MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,  SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,	SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,  SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,	NVL(SUM(READ_BYTES),  0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES) S
UM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,  MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,  MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),  ASH_DATA AS (SELECT AD0.INST_ID,	AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,  AD0.DBOP_NAME,  AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,	AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,  AD0.CPU_COUNT,  AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,	AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,  AD0.DFO_MOST_ACTIVE_SID,	(CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,	AD0.BUCKET_DISTINCT_SAMPLES,  AD0.SQL_BUCKET_DISTINCT_SAMPLES,	CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,	CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,	ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,  ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,	ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,	TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,  ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,  MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,	ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,	MD.SID,  MD.SESSION_SERIAL#,  MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,  GVTF.SESSION_ID,	GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,  GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,	GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,  GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,  MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,  GVTF.PX_STEP_ID,	GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID,  GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,	GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,  CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,  ASH2.IS_MONITORED_SQL,  ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,	ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,  0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,  ASH2.PX_MIN_DOP,	:B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,  :B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,  ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,  SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,  MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,  MAX(ASH1.PX_DOP) PX_DOP,	MIN(ASH1.PX_DOP) PX_MIN_DOP,  MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,	ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,	ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,  ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL UNI
ON ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,	ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,  DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,	NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,	:B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,  NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,	NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,	ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,	ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,	ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,  ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,  ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,  TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),  RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,  ADH.SQL,	ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,  NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,	'PX Server(s) - Sampling Child DFO',  4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',	7,  'QC - Initializing Objects',  8,  'QC - Flushing Objects',	9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,	'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,	'PX Server(s) - Preparing Transaction',  14,  'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,  'PX Server(s) - Aborting Transaction',  17,  'QC - Executing Child DFO',	18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,  ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,	ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,  ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),	'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  ADH.DFO_PAIR_CPU_HEIGHT,	ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,  (
CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,	(CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,	AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,	(AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,	(AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,	NULL,  NULL,  SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,	AD01.ACTIVITY_COUNT,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,  :B27 ,  MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,	AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,	MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,	MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,	NULL,  NULL,  AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,	MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS
&quot;sql_id&quot;,  :B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,	:B52 AS &quot;session_serial&quot;,  TO_CHAR(:B51 ,  :B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',	:B48 ,	NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),  CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,	NULL,  XMLFOREST( DECODE(:B4 ,	1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,	:B2 AS &quot;server_set&quot;,	:B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,	XMLFOREST(:B11 AS &quot;instance_id_low&quot;,	:B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,  (SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,	NULL,  :B9 ) AS &quot;sql_id&quot;,  NVL2(:B6 ,  NULL,	TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,  NVL2(:B6 ,  :B6 ,	NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,  :B5 ,  NULL) AS &quot;dbop_exec_id&quot;,	NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,  MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,	NULL,  SUM_SERVERS_ALLOCATED),	NULL),	NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,  XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,  XMLELEMENT( &quot;con_id&quot;,  NULL,  MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,  MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,  MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,	MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,  NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,  NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,  NULL,  MAX_PL_PROGID),  NULL),  NVL2(MAX_PL_NAME,	XMLELEMENT( &quot;plsql_name&quot;,  NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,  'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,  XMLELEMENT( &quot;status&quot;,  NULL,  MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,  GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,	20))),	CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),	DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),  DECODE(NVL(SUM_READ_REQS,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),	SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE
 XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,	0,  1,	SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a3jpjzh7mtwwp"></a>a3jpjzh7mtwwp</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_ub2$ i_idl_ub21) */ piece#, length, piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,	dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,	creverid,  modappid,  modverid,  crepatchid,  modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="arusphb7uppr5"></a>arusphb7uppr5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '4';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="azs4x4stk5azf"></a>azs4x4stk5azf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '84';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bbp00h54hyg9h"></a>bbp00h54hyg9h</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '53';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bpy4xf8bfgtjp"></a>bpy4xf8bfgtjp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '17';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bra280pu141z8"></a>bra280pu141z8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '27';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;

v_brick_wall := v_now + v_seconds_to_run ;



v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="btxhvgkudmtmh"></a>btxhvgkudmtmh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="c886fvd0mv7mv"></a>c886fvd0mv7mv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cn5r6fnjj1b3d"></a>cn5r6fnjj1b3d</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '63';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;

v_do_hot_schema BOOLEAN := FALSE;
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
v_stop_immediate BOOLEAN := FALSE;
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
v_sharing_schema BOOLEAN := FALSE;
'text'		Text format
'active-html'	Includes Performance Hub active report

v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:

			IF ( v_update_quota = FALSE ) THEN
Type Specified:  text

				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cpwuynd81c18b"></a>cpwuynd81c18b</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '56';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cwr7y46j1ajy0"></a>cwr7y46j1ajy0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '13';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="d9wm318cx7far"></a>d9wm318cx7far</td><td class='awrnc'><pre_sqltext class="awr">WITH ash as
  (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60, 0) as t,
	  inst_id || '_' || session_id || '_' || session_serial# as sid,
	  decode(session_type,	'FOREGROUND',  1,  0) as session_type,
	  nvl(sql_id, 'null') as sql_id,
	  nvl(sql_opcode, 0) as sql_opcode,
	  nvl(force_matching_signature, 0) as fms,
	  QC_INSTANCE_ID || '_' || QC_SESSION_ID || '_' || qc_session_serial# as qsid,
	  decode(session_state,  'ON CPU',  'CPU',  event) as wait_event,
	  decode(session_state,  'ON CPU',  'CPU',  wait_class) as wait_class,
	  decode(blocking_session_status,  'VALID',  blocking_inst_id || '_' || BLOCKING_SESSION || '_' || BLOCKING_SESSION_SERIAL#,  '__') as bsid,
	  nvl(service_hash, 0) as service_hash,
	  nvl(program, '__') as program,
	  nvl(module, '__') as module,
	  nvl(action, '__') as action,	 nvl(pga_allocated, 0) as pga ,  decode(in_connection_mgmt,  'Y',  1,  0)
		     + decode(in_parse,  'Y',  2,  0)
		     + decode(in_hard_parse,  'Y',  4,	0)
		     + decode(in_sql_execution,  'Y',  8,  0)
		     + decode(in_plsql_execution,  'Y',  16,  0)
		     + decode(in_plsql_rpc,  'Y',  32,	0)
		     + decode(in_plsql_compilation,  'Y',  64,	0)
		     + decode(in_java_execution,  'Y',	128,  0)
		     + decode(in_bind,	'Y',  256,  0)
		     + decode(in_cursor_close,	'Y',  512,  0) as tm   FROM   sys.gv_$active_session_history
   WHERE  sample_time &gt;= :2 and sample_time &lt;= :3
     AND  (session_state = 'ON CPU' or wait_class &lt;&gt; 'Idle')   AND
       ora_hash(inst_id || '_' || session_id || '_' || sample_id
	       , 100000, 0) &lt;= (100000 / 20.37523365427451522711111111111111111111)	 ),
  map_op as ( SELECT xmlelement(&quot;op&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	   v.command_type as &quot;i&quot;,  v.command_name as &quot;n&quot;
	 )))) as x
  FROM	 (SELECT distinct sql_opcode FROM ash WHERE sql_opcode &lt;&gt; 0) a ,
	 sys.v_$sqlcommand v
  WHERE  a.sql_opcode = v.command_type	),
  map_sql as
  (SELECT fms,	sql_opcode,  sql_id,  rownum as id
   FROM   (SELECT fms,	sql_opcode,  max(sql_id) as sql_id
	   FROM ash GROUP BY fms,  sql_opcode)
  ),
  map_sql_xml as
  (SELECT xmlelement(&quot;sql&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	    fms as &quot;f&quot;,  sql_opcode as &quot;o&quot;,  sql_id as &quot;s&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_sql
  ),
  map_sid as
  (SELECT a,  rownum as id
   FROM   (SELECT sid as a FROM ash
	   UNION
	   SELECT qsid as a FROM ash
	   UNION
	   SELECT bsid as a FROM ash)
  ),
  map_sid_xml as
  (SELECT xmlelement(&quot;sid&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     a as &quot;v&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_sid
  ),
  map_event as
  (SELECT wait_class,  wait_event,  rownum as id
   FROM  (SELECT DISTINCT wait_class , wait_event FROM ash)
  ),
  map_event_xml as
  (SELECT xmlelement(&quot;evt&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     wait_class as &quot;c&quot;,  wait_event as &quot;e&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_event
  ),
  map_service as
  (SELECT a.service_hash as sh,  s.service_id as id,  s.name as name
   FROM  (SELECT distinct service_hash from ash) a,
	 sys.v_$services s
   WHERE s.name_hash = a.service_hash
  ),
  map_service_xml as
  (SELECT xmlelement(&quot;service&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     sh as &quot;h&quot;,  name as &quot;n&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_service
  ),
  map_program as
  (SELECT program,  rownum as id
   FROM  (SELECT distinct program FROM ash)
  ),
  map_program_xml as
  (SELECT xmlelement(&quot;program&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     program as &quot;v&quot;,	id as &quot;i&quot;
	  )))) as x
   FROM   map_program
  ),
  map_module as
  (SELECT module,  rownum as id
   FROM  (SELECT distinct module FROM ash)
  ),
  map_module_xml as
  (SELECT xmlelement(&quot;module&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     module as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_module
  ),
  map_action as
  (SELECT action,  rownum as id
   FROM  (SELECT distinct action FROM ash)
  ),
  map_action_xml as
  (SELECT xmlelement(&quot;action&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     action as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_action
  ),
  ash_xml as
  (SELECT xmlelement(&quot;data&quot;, xmlagg(xmlelement(&quot;a&quot;,
	    ash.t || ', ' ||
	    ms1.id || ', ' ||
	    ash.session_type || ', ' ||
	    ms2.id || ', ' ||
	    ms3.id  || ', ' ||
	    msql.id  || ', ' ||
	    trunc(ash.pga/(1024*1024)) || ', ' ||
	    mp.id  || ', ' ||
	    ms.id  || ', ' ||
	    mm.id  || ', ' ||
	    ma.id  || ', ' ||
	    me.id  || ', ' ||
	    ash.tm
	  ))) as x
   FROM   ash,
	  map_sid ms1,	map_sid ms2,  map_sid ms3,
	  map_event me,
	  map_service ms,
	  map_program mp,
	  map_module mm,
	  map_action ma,
	  map_sql    msql
   WHERE  ash.sid = ms1.a
     AND  ash.qsid = ms2.a
     AND  ash.bsid = ms3.a
     AND  ash.wait_class = me.wait_class
     AND  ash.wait_event = me.wait_event
     AND  ash.service_hash = ms.sh
     AND  ash.program = mp.program
     AND  ash.module = mm.module
     AND  ash.action = ma.action
     AND  ash.fms = msql.fms
  )
SELECT xmlelement(&quot;ash_data&quot;,
	  xmlattributes(round(:4, 4) as &quot;sampling_ratio&quot;,
			round(:5, 4) as &quot;avg_active_sessions&quot;,
			round((:6 - :7) * (24 * 60 * 60), 0) as &quot;secs&quot;),
	  map_op.x,
	  map_sid_xml.x,
	  map_event_xml.x,
	  map_service_xml.x,
	  map_program_xml.x,
	  map_module_xml.x,
	  map_action_xml.x,
	  map_sql_xml.x,
	  ash_xml.x
       ) as data
FROM   map_op,	map_sid_xml,  map_event_xml,  map_service_xml,
       map_program_xml,  map_module_xml,  map_action_xml,
       map_sql_xml,  ash_xml </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="du9ud3dmb4xun"></a>du9ud3dmb4xun</td><td class='awrc'><pre_sqltext class="awr">WITH ash as
  (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60, 0) as t,
	  inst_id || '_' || session_id || '_' || session_serial# as sid,
	  decode(session_type,	'FOREGROUND',  1,  0) as session_type,
	  nvl(sql_id, 'null') as sql_id,
	  nvl(sql_opcode, 0) as sql_opcode,
	  nvl(force_matching_signature, 0) as fms,
	  QC_INSTANCE_ID || '_' || QC_SESSION_ID || '_' || qc_session_serial# as qsid,
	  decode(session_state,  'ON CPU',  'CPU',  event) as wait_event,
	  decode(session_state,  'ON CPU',  'CPU',  wait_class) as wait_class,
	  decode(blocking_session_status,  'VALID',  blocking_inst_id || '_' || BLOCKING_SESSION || '_' || BLOCKING_SESSION_SERIAL#,  '__') as bsid,
	  nvl(service_hash, 0) as service_hash,
	  nvl(program, '__') as program,
	  nvl(module, '__') as module,
	  nvl(action, '__') as action,	 nvl(pga_allocated, 0) as pga ,  decode(in_connection_mgmt,  'Y',  1,  0)
		     + decode(in_parse,  'Y',  2,  0)
		     + decode(in_hard_parse,  'Y',  4,	0)
		     + decode(in_sql_execution,  'Y',  8,  0)
		     + decode(in_plsql_execution,  'Y',  16,  0)
		     + decode(in_plsql_rpc,  'Y',  32,	0)
		     + decode(in_plsql_compilation,  'Y',  64,	0)
		     + decode(in_java_execution,  'Y',	128,  0)
		     + decode(in_bind,	'Y',  256,  0)
		     + decode(in_cursor_close,	'Y',  512,  0) as tm   FROM   sys.gv_$active_session_history
   WHERE  sample_time &gt;= :2 and sample_time &lt;= :3
     AND  (session_state = 'ON CPU' or wait_class &lt;&gt; 'Idle')   AND
       ora_hash(inst_id || '_' || session_id || '_' || sample_id
	       , 100000, 0) &lt;= (100000 / 142.947347769387371333333333333333333333)	),
  map_op as ( SELECT xmlelement(&quot;op&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	   v.command_type as &quot;i&quot;,  v.command_name as &quot;n&quot;
	 )))) as x
  FROM	 (SELECT distinct sql_opcode FROM ash WHERE sql_opcode &lt;&gt; 0) a ,
	 sys.v_$sqlcommand v
  WHERE  a.sql_opcode = v.command_type	),
  map_sql as
  (SELECT fms,	sql_opcode,  sql_id,  rownum as id
   FROM   (SELECT fms,	sql_opcode,  max(sql_id) as sql_id
	   FROM ash GROUP BY fms,  sql_opcode)
  ),
  map_sql_xml as
  (SELECT xmlelement(&quot;sql&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	    fms as &quot;f&quot;,  sql_opcode as &quot;o&quot;,  sql_id as &quot;s&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_sql
  ),
  map_sid as
  (SELECT a,  rownum as id
   FROM   (SELECT sid as a FROM ash
	   UNION
	   SELECT qsid as a FROM ash
	   UNION
	   SELECT bsid as a FROM ash)
  ),
  map_sid_xml as
  (SELECT xmlelement(&quot;sid&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     a as &quot;v&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_sid
  ),
  map_event as
  (SELECT wait_class,  wait_event,  rownum as id
   FROM  (SELECT DISTINCT wait_class , wait_event FROM ash)
  ),
  map_event_xml as
  (SELECT xmlelement(&quot;evt&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     wait_class as &quot;c&quot;,  wait_event as &quot;e&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_event
  ),
  map_service as
  (SELECT a.service_hash as sh,  s.service_id as id,  s.name as name
   FROM  (SELECT distinct service_hash from ash) a,
	 sys.v_$services s
   WHERE s.name_hash = a.service_hash
  ),
  map_service_xml as
  (SELECT xmlelement(&quot;service&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     sh as &quot;h&quot;,  name as &quot;n&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_service
  ),
  map_program as
  (SELECT program,  rownum as id
   FROM  (SELECT distinct program FROM ash)
  ),
  map_program_xml as
  (SELECT xmlelement(&quot;program&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     program as &quot;v&quot;,	id as &quot;i&quot;
	  )))) as x
   FROM   map_program
  ),
  map_module as
  (SELECT module,  rownum as id
   FROM  (SELECT distinct module FROM ash)
  ),
  map_module_xml as
  (SELECT xmlelement(&quot;module&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     module as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_module
  ),
  map_action as
  (SELECT action,  rownum as id
   FROM  (SELECT distinct action FROM ash)
  ),
  map_action_xml as
  (SELECT xmlelement(&quot;action&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     action as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_action
  ),
  ash_xml as
  (SELECT xmlelement(&quot;data&quot;, xmlagg(xmlelement(&quot;a&quot;,
	    ash.t || ', ' ||
	    ms1.id || ', ' ||
	    ash.session_type || ', ' ||
	    ms2.id || ', ' ||
	    ms3.id  || ', ' ||
	    msql.id  || ', ' ||
	    trunc(ash.pga/(1024*1024)) || ', ' ||
	    mp.id  || ', ' ||
	    ms.id  || ', ' ||
	    mm.id  || ', ' ||
	    ma.id  || ', ' ||
	    me.id  || ', ' ||
	    ash.tm
	  ))) as x
   FROM   ash,
	  map_sid ms1,	map_sid ms2,  map_sid ms3,
	  map_event me,
	  map_service ms,
	  map_program mp,
	  map_module mm,
	  map_action ma,
	  map_sql    msql
   WHERE  ash.sid = ms1.a
     AND  ash.qsid = ms2.a
     AND  ash.bsid = ms3.a
     AND  ash.wait_class = me.wait_class
     AND  ash.wait_event = me.wait_event
     AND  ash.service_hash = ms.sh
     AND  ash.program = mp.program
     AND  ash.module = mm.module
     AND  ash.action = ma.action
     AND  ash.fms = msql.fms
  )
SELECT xmlelement(&quot;ash_data&quot;,
	  xmlattributes(round(:4, 4) as &quot;sampling_ratio&quot;,
			round(:5, 4) as &quot;avg_active_sessions&quot;,
			round((:6 - :7) * (24 * 60 * 60), 0) as &quot;secs&quot;),
	  map_op.x,
	  map_sid_xml.x,
	  map_event_xml.x,
	  map_service_xml.x,
	  map_program_xml.x,
	  map_module_xml.x,
	  map_action_xml.x,
	  map_sql_xml.x,
	  ash_xml.x
       ) as data
FROM   map_op,	map_sid_xml,  map_event_xml,  map_service_xml,
       map_program_xml,  map_module_xml,  map_action_xml,
       map_sql_xml,  ash_xml </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f4rq0sufc25j7"></a>f4rq0sufc25j7</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '78';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();




	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrnc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)	values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fd7ncyq8wrtcp"></a>fd7ncyq8wrtcp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '85';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;




IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fg11facbfjwvx"></a>fg11facbfjwvx</td><td class='awrnc'><pre_sqltext class="awr">
	  SELECT  /*+ no_monitor leading(mo_px) use_hash(mo_px) */
	  xmlelement(
	    &quot;sql_monitor_list_report&quot;,
	    xmlattributes(
	      :report_version				  as &quot;version&quot;,
	      :total_count				  as &quot;total_count&quot;,
	      to_char(:new_last_refresh_time,
		      :date_fmt)			  as &quot;sysdate&quot;,
	      :auto_refresh				  as &quot;auto_refresh&quot;,
	      :base_path				  as &quot;base_path&quot;),
	    case
	      when :debug_xml is NULL
	      then NULL
	      else xmltype(:debug_xml)
	    end,
	    xmlagg(
	      case
	       when mo.dbop_name is not NULL
	       then
	       xmlelement(
		 &quot;dbop&quot;,
		  xmlattributes(mo.detail_level 	as &quot;detail&quot;,
				mo.report_ref		as &quot;report_ref&quot;,
				mo.dbop_name		as &quot;dbop_name&quot;,
				to_char(mo.sql_exec_start,
					:date_fmt)	as &quot;dbop_exec_start&quot;,
				mo.dbop_exec_id 	as &quot;dbop_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat
&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
	       else
	       xmlelement(
		 &quot;sql&quot;,
		 xmlattributes(mo.detail_level	       as &quot;detail&quot;,
			       mo.report_ref	       as &quot;report_ref&quot;,
			       mo.sql_id	       as &quot;sql_id&quot;,
			       to_char(mo.sql_exec_start,
				       :date_fmt)      as &quot;sql_exec_start&quot;,
			       mo.sql_exec_id	       as &quot;sql_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.px_is_cross_instance	   as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		   as &quot;dop&quot;,
		     mo.px_maxdop_instances	   as &quot;instances&quot;,
		     mo.px_servers_requested	   as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	   as &quot;px_servers_allocated&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.sql_plan_hash_value	   as &quot;plan_hash&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.px_servers_requested	as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	as &quot;px_servers_allocated&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 case
		   when :sel_sqltext = 0 or
			mo.detail_level != 'F'
		   then null
		   else
		     xmlelement(
		       &quot;sql_text&quot;,
		       xmlattributes(mo.is_full_sqltext  as &quot;is_full&quot;),
		       to_clob(mo.sql_text))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   decode(:top_n_count,  NULL,	NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('row_rank' as &quot;name&quot;),
			      mo.row_rank)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
		end
		order by decode(mo.running,  'Y',  1,  2),
			 decode(mo.running,  'Y',  mo.sql_exec_start,
				mo.last_refresh_time) desc,
			 mo.sql_id,
			 mo.dbop_name,
			 mo.sql_exec_id,
			 mo.dbop_exec_id desc))FROM
	  (SELECT
	    decode(
	      :top_n_count,  null,  0,
	      (rank() over
		(order by
		  decode(
		    lower(nvl(:top_n_rankby,  'last_active_time')),
		    'duration',  mo0.duration,
		    'db_time',	mo0.elapsed_time,
		    'cpu_time',  mo0.cpu_time,
		    'io_requests',  (mo0.read_reqs + mo0.write_reqs),
		    'io_bytes',  mo0.io_bytes,
		    decode(mo0.running,  'Y',  0,
			   (mo0.last_refresh_time - sysdate) *
			    3600 * 24)) desc))) row_rank,
	    mo0.*
	  FROM
	    (SELECT
	       mo_qc.status status,
	       case
		 when mo_qc.status = 'EXECUTING' or mo_qc.status = 'QUEUED'
		 then 'Y'
		 else 'N'
	       end running,
	       case
		 when mo_qc.last_active &lt;
			      :show_detail_after
		 then 'N'
		 when mo_qc.first_refresh_time &lt;
			      :show_detail_after
		 then 'P'
		 else 'F'
	       end detail_level,
	       mo_qc.error_number,
	       mo_qc.error_facility,
	       mo_qc.error_message,
	       mo_qc.rm_last_action,
	       mo_qc.rm_last_action_reason,
	       case
		 when :need_url = 1 and mo_qc.dbop_name is not NULL
		 then
		     'main?report_level=all'||chr(38)||
		     'dbop_name='||mo_qc.dbop_name||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'dbop_exec_id='||mo_qc.dbop_exec_id
		 when :need_url = 1
		 then
		     'main?report_level=all'||chr(38)||
		     'sql_id='||mo_qc.sql_id||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'sql_exec_id='||mo_qc.sql_exec_id
		 else
		   null
	       end report_ref,
	       mo_qc.sql_id,
	       mo_qc.dbop_name,
	       mo_qc.sql_exec_start,
	       mo_qc.sql_exec_id,
	       mo_qc.dbop_exec_id,
	       mo_qc.first_refresh_time,
	       case when mo_px.last_refresh_time is null or
			 mo_qc.last_refresh_time &gt; mo_px.last_refresh_time
		    then mo_qc.last_refresh_time
		    else mo_px.last_refresh_time
	       end last_refresh_time,
	       mo_qc.refresh_count + nvl(mo_px.refresh_count,  0) refresh_count,
	       round((mo_qc.last_active - mo_qc.sql_exec_start) *
							24 * 3600) duration,
	       mo_qc.inst_id inst_id,
	       mo_qc.sid sid,
	       mo_qc.session_serial# session_serial#,
	       mo_qc.user# user#,
	       mo_qc.username username,
	       mo_qc.module module,
	       mo_qc.action action,
	       mo_qc.service_name service_name,
	       mo_qc.client_identifier client_identifier,
	       mo_qc.client_info client_info,
	       mo_qc.program program,
	       mo_qc.sql_plan_hash_value sql_plan_hash_value,
	       mo_qc.plsql_entry_object_id plsql_entry_object_id,
	       mo_qc.plsql_entry_subprogram_id plsql_entry_subprogram_id,
	       mo_qc.plsql_object_id plsql_object_id,
	       mo_qc.plsql_subprogram_id plsql_subprogram_id,
	       mo_qc.rm_consumer_group rm_consumer_group,
	       mo_qc.px_is_cross_instance px_is_cross_instance,
	       mo_qc.px_maxdop px_maxdop,
	       decode(mo_qc.px_is_cross_instance,  'Y',
		      mo_qc.px_maxdop_instances,  NULL) px_maxdop_instances,
	       mo_qc.px_servers_requested px_servers_requested,
	       mo_qc.px_servers_allocated px_servers_allocated,
	       decode(:max_sqltext_length,  null,
		      mo_qc.is_full_sqltext,
		      case
			when length(mo_qc.sql_text) &gt;
			     :max_sqltext_length
			then 'N'
			else 'Y'
		      end) is_full_sqltext,
	       decode(:max_sqltext_length,  null,
		      mo_qc.sql_text,
		      substr(mo_qc.sql_text,  1,
			     :max_sqltext_length)) sql_text,
	       nvl(mo_px.sum_elapsed_time,  0) +
		mo_qc.elapsed_time elapsed_time,
	       mo_qc.queuing_time queuing_time,
	       nvl(mo_px.sum_cpu_time,	0) + mo_qc.cpu_time cpu_time,
	       nvl(mo_px.sum_user_io_wait_time,  0) +
		   mo_qc.user_io_wait_time user_io_wait_time,
	       nvl(mo_px.sum_application_wait_time,  0) +
		   mo_qc.application_wait_time application_wait_time,
	       nvl(mo_px.sum_concurrency_wait_time,  0) +
		   mo_qc.concurrency_wait_time concurrency_wait_time,
	       nvl(mo_px.sum_cluster_wait_time,  0) +
		   mo_qc.cluster_wait_time cluster_wait_time,
	       nvl(mo_px.sum_plsql_exec_time,  0) +
		   mo_qc.plsql_exec_time plsql_exec_time,
	       nvl(mo_px.sum_java_exec_time,  0) +
		   mo_qc.java_exec_time java_exec_time,
	       nvl(mo_px.sum_other_wait_time,  0) +
		   mo_qc.other_wait_time other_wait_time,
	       nvl(mo_px.sum_fetches,  0) + mo_qc.fetches fetches,
	       nvl(mo_px.sum_buffer_gets,  0) + mo_qc.buffer_gets buffer_gets,
	       nvl(mo_px.sum_read_reqs,  0) + mo_qc.read_reqs read_reqs,
	       nvl(mo_px.sum_read_bytes,  0) + mo_qc.read_bytes read_bytes,
	       nvl(mo_px.sum_write_reqs,  0) + mo_qc.write_reqs write_reqs,
	       nvl(mo_px.sum_write_bytes,  0) + mo_qc.write_bytes write_bytes,
	       nvl(mo_px.sum_io_inter_bytes,  0) +
		   mo_qc.io_inter_bytes io_inter_bytes,
	       nvl(mo_px.sum_io_bytes,	0) + mo_qc.io_bytes io_bytes,
	       mo_qc.con_id,
	       mo_qc.con_name,
	       mo_qc.ecid
	     FROM
	     (SELECT /*+ no_merge */
		     mo1.inst_id,
		     mo1.sid,
		     mo1.session_serial#,
		     mo1.sql_id,
		     mo1.dbop_name,
		     nvl(mo1.sql_exec_start,
			 mo1.first_refresh_time) sql_exec_start,
		     mo1.sql_exec_id,
		     mo1.dbop_exec_id,
		     mo1.first_refresh_time,
		     mo1.last_refresh_time,
		     mo1.refresh_count,
		     case
		       when mo1.status = 'EXECUTING' or mo1.status = 'QUEUED'
		       then :new_last_refresh_time
		       else mo1.last_refresh_time
		     end last_active,
		     mo1.sql_plan_hash_value,
		     mo1.status,
		     mo1.error_number,
		     mo1.error_facility,
		     mo1.error_message,
		     mo1.rm_last_action,
		     mo1.rm_last_action_reason,
		     mo1.px_is_cross_instance,
		     mo1.px_maxdop,
		     mo1.px_maxdop_instances,
		     mo1.px_servers_requested,
		     mo1.px_servers_allocated,
		     mo1.is_full_sqltext,
		     mo1.sql_text,
		     mo1.user#,
		     mo1.username,
		     mo1.module,
		     mo1.action,
		     mo1.service_name,
		     mo1.client_identifier,
		     mo1.client_info,
		     mo1.program,
		     mo1.plsql_entry_object_id,
		     mo1.plsql_entry_subprogram_id,
		     mo1.plsql_object_id,
		     mo1.plsql_subprogram_id,
		     mo1.rm_consumer_group,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       (mo1.cpu_time+
			mo1.application_wait_time+
			mo1.concurrency_wait_time+
			mo1.cluster_wait_time+
			mo1.user_io_wait_time+
			mo1.queuing_time)
		     else
			mo1.elapsed_time
		     end elapsed_time,
		     mo1.cpu_time cpu_time,
		     mo1.user_io_wait_time user_io_wait_time,
		     mo1.application_wait_time application_wait_time,
		     mo1.concurrency_wait_time concurrency_wait_time,
		     mo1.cluster_wait_time cluster_wait_time,
		     mo1.plsql_exec_time plsql_exec_time,
		     mo1.java_exec_time java_exec_time,
		     mo1.queuing_time queuing_time,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       0
		     else
		       mo1.elapsed_time - (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     end other_wait_time,
		     mo1.fetches,
		     mo1.buffer_gets,
		     mo1.physical_read_requests read_reqs,
		     mo1.physical_read_bytes read_bytes,
		     mo1.physical_write_requests write_reqs,
		     mo1.physical_write_bytes write_bytes,
		     nvl(mo1.physical_read_bytes,  0) +
		       nvl(mo1.physical_write_bytes,  0) io_bytes,
		     mo1.io_interconnect_bytes io_inter_bytes,
		     mo1.con_id,
		     mo1.con_name,
		     mo1.ecid
	     FROM    gv$all_sql_monitor mo1
	     WHERE   mo1.px_qcsid is NULL
	       AND   mo1.inst_id between :target_inst_id_low and
					 :target_inst_id_high
	       AND   mo1.sid =
			 nvl(:target_session_id,
			     mo1.sid)
	       AND   ((:dbop_name is NULL and
		      mo1.sql_id = nvl(:sql_id,
				      mo1.sql_id))
		     OR
		     (:sql_id is NULL and
		      mo1.dbop_name =
			nvl(:dbop_name,
			    mo1.dbop_name))
		     OR
		     (mo1.dbop_name = :dbop_name or
		      mo1.sql_id = :sql_id))
	       AND   mo1.session_serial# =
			 nvl(:target_session_serial,
			       mo1.session_serial#)
	       AND   (mo1.status = 'EXECUTING' or
		      mo1.status = 'QUEUED' or
		      mo1.last_refresh_time &gt;=
			  :active_since_filter)
	       AND (nvl(mo1.sql_exec_start,  mo1.first_refresh_time) between
			:target_first_exec_start and
			:target_last_exec_start)
	       AND   1 = nvl(1,  :dbsearch_value)
	     ) mo_qc,
	    (SELECT /*+ no_merge */
		     mo2.sql_id,
		     mo2.sql_exec_start,
		     mo2.sql_exec_id,
		     max(mo2.last_refresh_time) last_refresh_time,
		     sum(mo2.refresh_count) refresh_count,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   (mo2.cpu_time+
			    mo2.application_wait_time+
			    mo2.concurrency_wait_time+
			    mo2.cluster_wait_time+
			    mo2.user_io_wait_time)
			 else
			   mo2.elapsed_time
		       end) sum_elapsed_time,
		     sum(mo2.cpu_time) sum_cpu_time,
		     sum(mo2.user_io_wait_time) sum_user_io_wait_time,
		     sum(mo2.application_wait_time) sum_application_wait_time,
		     sum(mo2.concurrency_wait_time) sum_concurrency_wait_time,
		     sum(mo2.cluster_wait_time) sum_cluster_wait_time,
		     sum(mo2.plsql_exec_time) sum_plsql_exec_time,
		     sum(mo2.java_exec_time) sum_java_exec_time,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   0
			 else
			   mo2.elapsed_time - (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
		       end) sum_other_wait_time,
		     sum(mo2.fetches) sum_fetches,
		     sum(mo2.buffer_gets) sum_buffer_gets,
		     sum(mo2.physical_read_requests) sum_read_reqs,
		     sum(mo2.physical_read_bytes) sum_read_bytes,
		     sum(mo2.physical_write_requests) sum_write_reqs,
		     sum(mo2.physical_write_bytes) sum_write_bytes,
		     sum(nvl(mo2.physical_read_bytes,  0) +
			 nvl(mo2.physical_write_bytes,	0)) sum_io_bytes,
		     sum(nvl(mo2.io_interconnect_bytes,  0)) sum_io_inter_bytes
	     FROM    gv$all_sql_monitor mo2
	     WHERE   :detail_is_parallel is not null
	       AND   mo2.inst_id between
			  :px_inst_id_low and
			  :px_inst_id_high
	       AND   mo2.px_qcinst_id between
			  :target_inst_id_low and
			  :target_inst_id_high
	       AND   mo2.sql_id between
			  :detail_px_min_sqlid and
			  :detail_px_max_sqlid
	       AND   mo2.sql_exec_start &gt;=
			  :detail_px_first_exec_start
	       AND   (mo2.px_qcsid =
			 nvl(:target_session_id,
			     mo2.px_qcsid))
	       AND   mo2.con_id = nvl(:con_id,	mo2.con_id)
	       AND   1 = nvl(1,  :dbsearch_value)
	     GROUP BY mo2.sql_id,
		      mo2.sql_exec_start,
		      mo2.sql_exec_id
	    ) mo_px
	  WHERE mo_qc.sql_id	     = mo_px.sql_id(+)
	    AND mo_qc.sql_exec_start = mo_px.sql_exec_start(+)
	    AND mo_qc.sql_exec_id    = mo_px.sql_exec_id(+)) mo0) mo
	WHERE row_rank &lt;= nvl(:top_n_count,	1)
	</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fh5ufah919kun"></a>fh5ufah919kun</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_sb4$ i_idl_sb41) */ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fhgqn1rt3jmh3"></a>fhgqn1rt3jmh3</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '37';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fvgh1q9dsd479"></a>fvgh1q9dsd479</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '64';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="g1x4b9bfdxz35"></a>g1x4b9bfdxz35</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '5';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gcfrxjr5zjhjy"></a>gcfrxjr5zjhjy</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '99';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrnc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>2,624,198</td><td align="right" class='awrc'>4,124.18</td><td align="right" class='awrc'>163.95</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>123,265</td><td align="right" class='awrnc'>193.72</td><td align="right" class='awrnc'>7.70</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,284</td><td align="right" class='awrc'>2.02</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>1,313</td><td align="right" class='awrnc'>2.06</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>2,819</td><td align="right" class='awrc'>4.43</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>976</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>382</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>138,899</td><td align="right" class='awrnc'>218.29</td><td align="right" class='awrnc'>8.68</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>7,028</td><td align="right" class='awrc'>11.05</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>526</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>9,128,427</td><td align="right" class='awrc'>14,346.22</td><td align="right" class='awrc'>570.31</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>1,360,387</td><td align="right" class='awrnc'>2,137.98</td><td align="right" class='awrnc'>84.99</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>1,046,737,896</td><td align="right" class='awrc'>1,645,051.27</td><td align="right" class='awrc'>65,396.59</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>136,650</td><td align="right" class='awrnc'>214.76</td><td align="right" class='awrnc'>8.54</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>9,392,804</td><td align="right" class='awrc'>14,761.71</td><td align="right" class='awrc'>586.83</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>4,732</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>0.30</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>16,006</td><td align="right" class='awrc'>25.15</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,873</td><td align="right" class='awrnc'>2.94</td><td align="right" class='awrnc'>0.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>498</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>155</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>361</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>168,800</td><td align="right" class='awrnc'>265.29</td><td align="right" class='awrnc'>10.55</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>6,697,541</td><td align="right" class='awrc'>10,525.84</td><td align="right" class='awrc'>418.44</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO buffer defrag count</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>92,620</td><td align="right" class='awrc'>145.56</td><td align="right" class='awrc'>5.79</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>125,137</td><td align="right" class='awrc'>196.67</td><td align="right" class='awrc'>7.82</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>6,741,942</td><td align="right" class='awrnc'>10,595.62</td><td align="right" class='awrnc'>421.21</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>132,287</td><td align="right" class='awrc'>207.90</td><td align="right" class='awrc'>8.26</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>216,708</td><td align="right" class='awrnc'>340.58</td><td align="right" class='awrnc'>13.54</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>123,155</td><td align="right" class='awrc'>193.55</td><td align="right" class='awrc'>7.69</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>6,847,362</td><td align="right" class='awrc'>10,761.30</td><td align="right" class='awrc'>427.80</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>455</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>455</td><td align="right" class='awrc'>0.72</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>4,259,775</td><td align="right" class='awrnc'>6,694.65</td><td align="right" class='awrnc'>266.14</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>478</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>339,769</td><td align="right" class='awrc'>533.98</td><td align="right" class='awrc'>21.23</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>543,990</td><td align="right" class='awrnc'>854.93</td><td align="right" class='awrnc'>33.99</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>1,017,395</td><td align="right" class='awrc'>1,598.94</td><td align="right" class='awrc'>63.56</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>396,403</td><td align="right" class='awrnc'>622.99</td><td align="right" class='awrnc'>24.77</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoint buffers written</td><td align="right" class='awrnc'>13,863</td><td align="right" class='awrnc'>21.79</td><td align="right" class='awrnc'>0.87</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoints</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DBWR fusion writes</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR object drop buffers written</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>228</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>57,408</td><td align="right" class='awrc'>90.22</td><td align="right" class='awrc'>3.59</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>38,397</td><td align="right" class='awrc'>60.34</td><td align="right" class='awrc'>2.40</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>1,257,164</td><td align="right" class='awrnc'>1,975.76</td><td align="right" class='awrnc'>78.54</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>3,473,408</td><td align="right" class='awrc'>5,458.80</td><td align="right" class='awrc'>217.01</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>21,066</td><td align="right" class='awrnc'>33.11</td><td align="right" class='awrnc'>1.32</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>3,801</td><td align="right" class='awrc'>5.97</td><td align="right" class='awrc'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>3,863</td><td align="right" class='awrnc'>6.07</td><td align="right" class='awrnc'>0.24</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>1,145</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>656</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>327</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for instance recovery</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks created</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks executed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>6,632</td><td align="right" class='awrnc'>10.42</td><td align="right" class='awrnc'>0.41</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>420,132</td><td align="right" class='awrc'>660.28</td><td align="right" class='awrc'>26.25</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>20,787,832</td><td align="right" class='awrc'>32,670.12</td><td align="right" class='awrc'>1,298.75</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>8,311,714</td><td align="right" class='awrnc'>13,062.67</td><td align="right" class='awrnc'>519.29</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>456,823</td><td align="right" class='awrc'>717.94</td><td align="right" class='awrc'>28.54</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>59,381</td><td align="right" class='awrnc'>93.32</td><td align="right" class='awrnc'>3.71</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>157,506</td><td align="right" class='awrc'>247.54</td><td align="right" class='awrc'>9.84</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>33,876</td><td align="right" class='awrnc'>53.24</td><td align="right" class='awrnc'>2.12</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>6,345</td><td align="right" class='awrc'>9.97</td><td align="right" class='awrc'>0.40</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>100,889,904,128</td><td align="right" class='awrnc'>158,558,379.57</td><td align="right" class='awrnc'>6,303,255.29</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>1,991</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>3,122</td><td align="right" class='awrc'>4.91</td><td align="right" class='awrc'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>2,092</td><td align="right" class='awrnc'>3.29</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: cannot pin</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>1,258,853</td><td align="right" class='awrc'>1,978.41</td><td align="right" class='awrc'>78.65</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>1,258,796</td><td align="right" class='awrnc'>1,978.32</td><td align="right" class='awrnc'>78.65</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>8,210</td><td align="right" class='awrnc'>12.90</td><td align="right" class='awrnc'>0.51</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>7,954,173</td><td align="right" class='awrc'>12,500.76</td><td align="right" class='awrc'>496.95</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>248,331</td><td align="right" class='awrnc'>390.28</td><td align="right" class='awrnc'>15.51</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>247,904</td><td align="right" class='awrc'>389.61</td><td align="right" class='awrc'>15.49</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>7,954,173</td><td align="right" class='awrnc'>12,500.76</td><td align="right" class='awrnc'>496.95</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>7,705,842</td><td align="right" class='awrc'>12,110.49</td><td align="right" class='awrc'>481.43</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>7,157,871</td><td align="right" class='awrnc'>11,249.30</td><td align="right" class='awrnc'>447.20</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>246</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>2,624,198</td><td align="right" class='awrc'>4,124.18</td><td align="right" class='awrc'>163.95</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>1,438,630</td><td align="right" class='awrnc'>2,260.95</td><td align="right" class='awrnc'>89.88</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>2,230</td><td align="right" class='awrc'>3.50</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>1,436,400</td><td align="right" class='awrnc'>2,257.44</td><td align="right" class='awrnc'>89.74</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>118,500</td><td align="right" class='awrc'>186.23</td><td align="right" class='awrc'>7.40</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>422,333</td><td align="right" class='awrnc'>663.74</td><td align="right" class='awrnc'>26.39</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>1,180,061</td><td align="right" class='awrc'>1,854.58</td><td align="right" class='awrc'>73.73</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>1,692</td><td align="right" class='awrnc'>2.66</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>65,449</td><td align="right" class='awrc'>102.86</td><td align="right" class='awrc'>4.09</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>65,287</td><td align="right" class='awrnc'>102.60</td><td align="right" class='awrnc'>4.08</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>880</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>123,265</td><td align="right" class='awrnc'>193.72</td><td align="right" class='awrnc'>7.70</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>265,320,520</td><td align="right" class='awrc'>416,977.22</td><td align="right" class='awrc'>16,576.32</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>9,223,397</td><td align="right" class='awrnc'>14,495.47</td><td align="right" class='awrnc'>576.25</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>9,368,094</td><td align="right" class='awrc'>14,722.88</td><td align="right" class='awrc'>585.29</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>1,858</td><td align="right" class='awrnc'>2.92</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout applied</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>112,626</td><td align="right" class='awrnc'>177.00</td><td align="right" class='awrnc'>7.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>329</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,284</td><td align="right" class='awrc'>2.02</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>1,313</td><td align="right" class='awrnc'>2.06</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>1,267</td><td align="right" class='awrc'>1.99</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>11,882,806</td><td align="right" class='awrnc'>18,675.00</td><td align="right" class='awrnc'>742.40</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>6,397,173</td><td align="right" class='awrc'>10,053.78</td><td align="right" class='awrc'>399.67</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>2,819</td><td align="right" class='awrnc'>4.43</td><td align="right" class='awrnc'>0.18</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>976</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>1,037</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>7,458</td><td align="right" class='awrc'>11.72</td><td align="right" class='awrc'>0.47</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>10,974</td><td align="right" class='awrnc'>17.25</td><td align="right" class='awrnc'>0.69</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>5,074,648</td><td align="right" class='awrc'>7,975.31</td><td align="right" class='awrc'>317.05</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read time waited</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>4,299,767</td><td align="right" class='awrc'>6,757.51</td><td align="right" class='awrc'>268.63</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>22,483</td><td align="right" class='awrnc'>35.33</td><td align="right" class='awrnc'>1.40</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>144,102</td><td align="right" class='awrc'>226.47</td><td align="right" class='awrc'>9.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>55,203</td><td align="right" class='awrnc'>86.76</td><td align="right" class='awrnc'>3.45</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>112,635</td><td align="right" class='awrc'>177.02</td><td align="right" class='awrc'>7.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access record drops</td><td align="right" class='awrnc'>1,751</td><td align="right" class='awrnc'>2.75</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>8,595,182</td><td align="right" class='awrc'>13,508.17</td><td align="right" class='awrc'>537.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>16,536,165</td><td align="right" class='awrnc'>25,988.21</td><td align="right" class='awrnc'>1,033.12</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>121,308</td><td align="right" class='awrc'>190.65</td><td align="right" class='awrc'>7.58</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>918,087</td><td align="right" class='awrnc'>1,442.86</td><td align="right" class='awrnc'>57.36</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>9,090</td><td align="right" class='awrnc'>14.29</td><td align="right" class='awrnc'>0.57</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>2,835</td><td align="right" class='awrc'>4.46</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>89,194</td><td align="right" class='awrc'>140.18</td><td align="right" class='awrc'>5.57</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>89,084</td><td align="right" class='awrnc'>140.00</td><td align="right" class='awrnc'>5.57</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>7,028</td><td align="right" class='awrc'>11.05</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>107,829</td><td align="right" class='awrnc'>169.46</td><td align="right" class='awrnc'>6.74</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>339</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>11,976</td><td align="right" class='awrc'>18.82</td><td align="right" class='awrc'>0.75</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>116,702</td><td align="right" class='awrnc'>183.41</td><td align="right" class='awrnc'>7.29</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>795</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>4,910</td><td align="right" class='awrc'>7.72</td><td align="right" class='awrc'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>4,910</td><td align="right" class='awrnc'>7.72</td><td align="right" class='awrnc'>0.31</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>76,927,574,016</td><td align="right" class='awrc'>120,899,227.58</td><td align="right" class='awrc'>4,806,171.06</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>382</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>477</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>125,101</td><td align="right" class='awrnc'>196.61</td><td align="right" class='awrnc'>7.82</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>125,101</td><td align="right" class='awrc'>196.61</td><td align="right" class='awrc'>7.82</td></tr>
<tr><td scope="row" class='awrnc'>min active SCN optimization applied on CR</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>7,691,329</td><td align="right" class='awrc'>12,087.68</td><td align="right" class='awrc'>480.53</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>4,470,210</td><td align="right" class='awrnc'>7,025.37</td><td align="right" class='awrnc'>279.28</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>138,899</td><td align="right" class='awrc'>218.29</td><td align="right" class='awrc'>8.68</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (failures)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>773</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>7,028</td><td align="right" class='awrc'>11.05</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>194</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>526</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>8,485,282</td><td align="right" class='awrnc'>13,335.45</td><td align="right" class='awrnc'>530.13</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>74,780,073,984</td><td align="right" class='awrc'>117,524,220.66</td><td align="right" class='awrc'>4,672,002.62</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>8,491,603</td><td align="right" class='awrnc'>13,345.39</td><td align="right" class='awrnc'>530.53</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>76,396,550,144</td><td align="right" class='awrc'>120,064,671.49</td><td align="right" class='awrc'>4,772,994.51</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>1,473</td><td align="right" class='awrnc'>2.31</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>9,128,427</td><td align="right" class='awrc'>14,346.22</td><td align="right" class='awrc'>570.31</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>9,128,399</td><td align="right" class='awrnc'>14,346.17</td><td align="right" class='awrnc'>570.31</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>7,250,167</td><td align="right" class='awrc'>11,394.35</td><td align="right" class='awrc'>452.97</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct (lob)</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct temporary tablespace</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads prefetch warmup</td><td align="right" class='awrc'>25,532</td><td align="right" class='awrc'>40.13</td><td align="right" class='awrc'>1.60</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>1,301,272</td><td align="right" class='awrnc'>2,045.08</td><td align="right" class='awrnc'>81.30</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>11,144,290,304</td><td align="right" class='awrc'>17,514,345.24</td><td align="right" class='awrc'>696,257.05</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>1,328,858</td><td align="right" class='awrnc'>2,088.43</td><td align="right" class='awrnc'>83.02</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>12,241,909,248</td><td align="right" class='awrc'>19,239,361.06</td><td align="right" class='awrc'>764,832.52</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>4,079</td><td align="right" class='awrnc'>6.41</td><td align="right" class='awrnc'>0.25</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>1,360,387</td><td align="right" class='awrc'>2,137.98</td><td align="right" class='awrc'>84.99</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>2,254</td><td align="right" class='awrnc'>3.54</td><td align="right" class='awrnc'>0.14</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>2,022</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>1,358,133</td><td align="right" class='awrc'>2,134.44</td><td align="right" class='awrc'>84.85</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>1,359,291</td><td align="right" class='awrnc'>2,136.26</td><td align="right" class='awrnc'>84.92</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>177</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrnc'>112,668</td><td align="right" class='awrnc'>177.07</td><td align="right" class='awrnc'>7.04</td></tr>
<tr><td scope="row" class='awrc'>prefetched blocks aged out before use</td><td align="right" class='awrc'>526,398</td><td align="right" class='awrc'>827.29</td><td align="right" class='awrc'>32.89</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>627</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>207,878</td><td align="right" class='awrc'>326.70</td><td align="right" class='awrc'>12.99</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>109,964</td><td align="right" class='awrnc'>172.82</td><td align="right" class='awrnc'>6.87</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>847,872</td><td align="right" class='awrc'>1,332.51</td><td align="right" class='awrc'>52.97</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>780,589</td><td align="right" class='awrnc'>1,226.77</td><td align="right" class='awrnc'>48.77</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>2,124,958</td><td align="right" class='awrc'>3,339.58</td><td align="right" class='awrc'>132.76</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>1,756,426</td><td align="right" class='awrnc'>2,760.40</td><td align="right" class='awrnc'>109.74</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>368,532</td><td align="right" class='awrc'>579.18</td><td align="right" class='awrc'>23.02</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>1,384,984</td><td align="right" class='awrnc'>2,176.64</td><td align="right" class='awrnc'>86.53</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>1,046,737,896</td><td align="right" class='awrc'>1,645,051.27</td><td align="right" class='awrc'>65,396.59</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>900</td><td align="right" class='awrnc'>1.41</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>226</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>605,535</td><td align="right" class='awrc'>951.66</td><td align="right" class='awrc'>37.83</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>4,032</td><td align="right" class='awrnc'>6.34</td><td align="right" class='awrnc'>0.25</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>6,551,716</td><td align="right" class='awrc'>10,296.66</td><td align="right" class='awrc'>409.33</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>26,897</td><td align="right" class='awrnc'>42.27</td><td align="right" class='awrnc'>1.68</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>325,729,326</td><td align="right" class='awrc'>511,915.58</td><td align="right" class='awrc'>20,350.45</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>12,112,495</td><td align="right" class='awrnc'>19,035.97</td><td align="right" class='awrnc'>756.75</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>12,333,310</td><td align="right" class='awrnc'>19,383.01</td><td align="right" class='awrnc'>770.54</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>543</td><td align="right" class='awrc'>0.85</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>775</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>1,534</td><td align="right" class='awrc'>2.41</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>2,597</td><td align="right" class='awrnc'>4.08</td><td align="right" class='awrnc'>0.16</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>7,915</td><td align="right" class='awrc'>12.44</td><td align="right" class='awrc'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>1,911</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>277</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>32,634</td><td align="right" class='awrnc'>51.29</td><td align="right" class='awrnc'>2.04</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>326,350,152</td><td align="right" class='awrc'>512,891.27</td><td align="right" class='awrc'>20,389.24</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>343,244,701</td><td align="right" class='awrnc'>539,442.71</td><td align="right" class='awrnc'>21,444.75</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>10,796,035</td><td align="right" class='awrc'>16,967.03</td><td align="right" class='awrc'>674.50</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>15,583</td><td align="right" class='awrnc'>24.49</td><td align="right" class='awrnc'>0.97</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>15,583</td><td align="right" class='awrc'>24.49</td><td align="right" class='awrc'>0.97</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>10,250</td><td align="right" class='awrnc'>16.11</td><td align="right" class='awrnc'>0.64</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>5,333</td><td align="right" class='awrc'>8.38</td><td align="right" class='awrc'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>15,583</td><td align="right" class='awrnc'>24.49</td><td align="right" class='awrnc'>0.97</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>15,583</td><td align="right" class='awrc'>24.49</td><td align="right" class='awrc'>0.97</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>5,689</td><td align="right" class='awrnc'>8.94</td><td align="right" class='awrnc'>0.36</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts successfully completed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>196,608</td><td align="right" class='awrc'>308.99</td><td align="right" class='awrc'>12.28</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>174,381</td><td align="right" class='awrc'>274.06</td><td align="right" class='awrc'>10.89</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read bytes</td><td align="right" class='awrnc'>229,376</td><td align="right" class='awrnc'>360.49</td><td align="right" class='awrnc'>14.33</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read ops</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>196,608</td><td align="right" class='awrnc'>308.99</td><td align="right" class='awrnc'>12.28</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load tasks</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>535</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>665</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>136,650</td><td align="right" class='awrnc'>214.76</td><td align="right" class='awrnc'>8.54</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>9,392,804</td><td align="right" class='awrc'>14,761.71</td><td align="right" class='awrc'>586.83</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>2,525,176</td><td align="right" class='awrnc'>3,968.56</td><td align="right" class='awrnc'>157.76</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>2,393</td><td align="right" class='awrc'>3.76</td><td align="right" class='awrc'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>2,564,757</td><td align="right" class='awrnc'>4,030.77</td><td align="right" class='awrnc'>160.24</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>7,538,238</td><td align="right" class='awrc'>11,847.08</td><td align="right" class='awrc'>470.96</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>13,852,675</td><td align="right" class='awrnc'>21,770.84</td><td align="right" class='awrnc'>865.47</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>490</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>402,086</td><td align="right" class='awrnc'>631.92</td><td align="right" class='awrnc'>25.12</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>1,218,012</td><td align="right" class='awrc'>1,914.23</td><td align="right" class='awrc'>76.10</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>1,218,012</td><td align="right" class='awrnc'>1,914.23</td><td align="right" class='awrnc'>76.10</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>1,491</td><td align="right" class='awrc'>2.34</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>3,145,728</td><td align="right" class='awrnc'>4,943.82</td><td align="right" class='awrnc'>196.53</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>3,068</td><td align="right" class='awrc'>4.82</td><td align="right" class='awrc'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>total number of times SMON posted</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background get time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock background gets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock foreground requests</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>432,003,356</td><td align="right" class='awrc'>678,935.64</td><td align="right" class='awrc'>26,990.09</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>4,732</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>0.30</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>16,006</td><td align="right" class='awrc'>25.15</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,873</td><td align="right" class='awrnc'>2.94</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>138</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>410</td><td align="right" class='awrnc'>102</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>3,715</td><td align="right" class='awrc'>4,357</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>803,783,984</td><td align="right" class='awrnc'>531,808,304</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>868,177,136</td><td align="right" class='awrc'>636,603,056</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>288,914,888</td><td align="right" class='awrnc'>235,747,672</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>396,290,048</td><td align="right" class='awrc'>1,316,929,584</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>69G</td><td align="right" class='awrc'>13216.60</td><td align="right" class='awrc'>111.085M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1.9M</td><td align="right" class='awrc'>4.38ms</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>10.1G</td><td align="right" class='awrnc'>1990.21</td><td align="right" class='awrnc'>16.231M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Others</td><td align="right" class='awrc'>1.5G</td><td align="right" class='awrc'>8.55</td><td align="right" class='awrc'>2.376M</td><td align="right" class='awrc'>17M</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>.027M</td><td align="right" class='awrc'>3398</td><td align="right" class='awrc'>2.33ms</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1022M</td><td align="right" class='awrnc'>41.83</td><td align="right" class='awrnc'>1.606M</td><td align="right" class='awrnc'>15.4K</td><td align="right" class='awrnc'>20.07ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10M</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>.016M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>.002M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>2.17ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Reads</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>70.5G</td><td align="right" class='awrnc'>13225.39</td><td align="right" class='awrnc'>113.463M</td><td align="right" class='awrnc'>11.1G</td><td align="right" class='awrnc'>2033.11</td><td align="right" class='awrnc'>17.88M</td><td align="right" class='awrnc'>1.9M</td><td align="right" class='awrnc'>4.50ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>69G</td><td align="right" class='awrc'>13212.53</td><td align="right" class='awrc'>110.989M</td><td align="right" class='awrc'>10.1G</td><td align="right" class='awrc'>1989.42</td><td align="right" class='awrc'>16.227M</td><td align="right" class='awrc'>690.36us</td><td align="right" class='awrc'>16.50ms</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>1.4G</td><td align="right" class='awrnc'>2.53</td><td align="right" class='awrnc'>2.282M</td><td align="right" class='awrnc'>1022M</td><td align="right" class='awrnc'>41.83</td><td align="right" class='awrnc'>1.606M</td><td align="right" class='awrnc'>160.26us</td><td align="right" class='awrnc'>1716.18ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>59M</td><td align="right" class='awrc'>6.01</td><td align="right" class='awrc'>.093M</td><td align="right" class='awrc'>9M</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>.014M</td><td align="right" class='awrc'>24.83us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Temp File</td><td align="right" class='awrnc'>17M</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>.027M</td><td align="right" class='awrnc'>17M</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>.027M</td><td align="right" class='awrnc'>69.31us</td><td align="right" class='awrnc'>.00ns</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>30M</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>.047M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2.45ms</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>70.5G</td><td align="right" class='awrnc'>13222.80</td><td align="right" class='awrnc'>113.438M</td><td align="right" class='awrnc'>11.1G</td><td align="right" class='awrnc'>2032.33</td><td align="right" class='awrnc'>17.874M</td><td align="right" class='awrnc'>690.25us</td><td align="right" class='awrnc'>1691.75ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>69G</td><td align="right" class='awrc'>13210.01</td><td align="right" class='awrc'>110.993M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1.7M</td><td align="right" class='awrc'>3.70ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>69G</td><td align="right" class='awrnc'>13209.82</td><td align="right" class='awrnc'>110.966M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1.7M</td><td align="right" class='awrnc'>3.70ms</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>17M</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>.027M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>330.51us</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>10.1G</td><td align="right" class='awrnc'>1986.03</td><td align="right" class='awrnc'>16.197M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
DBWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10.1G</td><td align="right" class='awrc'>1986.09</td><td align="right" class='awrc'>16.197M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Others
</td><td align="right" class='awrc'>1.5G</td><td align="right" class='awrc'>8.55</td><td align="right" class='awrc'>2.375M</td><td align="right" class='awrc'>17M</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>.027M</td><td align="right" class='awrc'>3109</td><td align="right" class='awrc'>317.75us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Log File)
</td><td align="right" class='awrnc'>1.4G</td><td align="right" class='awrnc'>2.53</td><td align="right" class='awrnc'>2.282M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>510.15us</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>59M</td><td align="right" class='awrc'>6.01</td><td align="right" class='awrc'>.093M</td><td align="right" class='awrc'>9M</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>.014M</td><td align="right" class='awrc'>2945</td><td align="right" class='awrc'>307.09us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>6M</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>.009M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2M</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>491.00us</td></tr>
<tr><td scope="row" class='awrnc'>
 LGWR (Log File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1022M</td><td align="right" class='awrnc'>41.82</td><td align="right" class='awrnc'>1.606M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
LGWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1022M</td><td align="right" class='awrc'>41.82</td><td align="right" class='awrc'>1.606M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 Streams AQ (Data File)
</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>.002M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>2.17ms</td></tr>
<tr><td scope="row" class='awrc'>
Streams AQ
</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>2.17ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Reads (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Direct Reads (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Direct Reads
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
TOTAL:
</td><td align="right" class='awrc'>70.4G</td><td align="right" class='awrc'>13218.81</td><td align="right" class='awrc'>113.369M</td><td align="right" class='awrc'>11.1G</td><td align="right" class='awrc'>2028.95</td><td align="right" class='awrc'>17.83M</td><td align="right" class='awrc'>1.7M</td><td align="right" class='awrc'>3.69ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>917,088</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>9,416,587</td><td align="right" class='awrc'>9,146,849</td><td align="right" class='awrc'>1,369,027</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			  1,360,387</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13,860</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>108205</td><td align="right" class='awrc'>202589</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>59653</td><td align="right" class='awrnc'>950497</td><td align="right" class='awrnc'>16986915</td><td align="right" class='awrnc'>16986915</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>30</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>768</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>10,020</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9060.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,536</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>9,965</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>9008.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>2,304</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>9,952</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8996.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>3,072</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>9,940</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8985.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>3,840</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>447</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>9,925</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8971.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>4,608</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>537</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>9,907</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8954.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>5,376</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>626</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>9,890</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8938.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>6,144</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>716</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>9,875</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8924.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>6,912</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>805</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>9,861</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8911.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>7,680</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>9,849</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8900.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>7,872</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>917</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>9,845</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8896.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>8,448</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>984</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>9,835</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8887.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>9,216</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>9,820</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8873.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>9,984</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>1,163</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>9,805</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8859.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>10,752</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>1,253</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>9,792</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8847.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>11,520</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>1,342</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>9,781</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8836.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>12,288</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>1,432</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>9,769</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8825.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>13,056</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>1,521</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>9,758</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8815.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>13,824</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>1,610</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>9,746</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8804.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>14,592</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>1,700</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>9,736</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8795.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>15,360</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>1,789</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>9,725</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8784.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>356</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>3,215</td><td align="right" class='awrc'>1,708</td><td align="right" class='awrc'>1,548.12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>329,210</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>1,921</td><td align="right" class='awrnc'>1,309.52</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>329,210</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>1,440</td><td align="right" class='awrc'>1,440</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>402</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>62.38</td><td align="right" class='awrc'>96.00</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>2,816,529</td></tr>
<tr><td align="right" scope="row" class='awrnc'>804</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>62.38</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>2,816,529</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,608</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,411</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,215</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,858</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,501</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,144</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,787</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,430</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,645</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,860</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,290</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>1,478.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,702,527</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,720</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>1,478.84</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,702,527</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,152</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1,314</td><td align="right" class='awrc'>320</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>776</td><td align="right" class='awrc'>8.53</td><td align="right" class='awrc'>24</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,184</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>1,923</td><td align="right" class='awrnc'>567</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>529</td><td align="right" class='awrnc'>5.81</td><td align="right" class='awrnc'>34</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,216</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>2,453</td><td align="right" class='awrc'>962</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>134</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>60</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,248</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>3,982</td><td align="right" class='awrnc'>979</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,280</td><td align="right" class='awrc'>0.87</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>5,292</td><td align="right" class='awrc'>982</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,312</td><td align="right" class='awrnc'>0.89</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>983</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>1.24</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,344</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>987</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>109</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,376</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>992</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,408</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>996</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,440</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,000</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,472</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,504</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,536</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,568</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,600</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,632</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,664</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,696</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,728</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,760</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,792</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,952</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,112</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,272</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,432</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,592</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,752</td><td align="right" class='awrc'>1.87</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,912</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>5,764</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>61</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,072</td><td align="right" class='awrc'>2.09</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>5,764</td><td align="right" class='awrc'>1,005</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>61</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>2,416</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>39,754</td><td align="right" class='awrc'>9,983,720</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,624</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>39,691</td><td align="right" class='awrnc'>9,928,838</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,832</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>39,667</td><td align="right" class='awrc'>9,903,357</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,040</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>39,647</td><td align="right" class='awrnc'>9,871,995</td></tr>
<tr><td align="right" scope="row" class='awrc'>7,248</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>39,624</td><td align="right" class='awrc'>9,855,335</td></tr>
<tr><td align="right" scope="row" class='awrnc'>8,456</td><td align="right" class='awrnc'>0.88</td><td align="right" class='awrnc'>39,596</td><td align="right" class='awrnc'>9,825,933</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,664</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>39,580</td><td align="right" class='awrc'>9,800,452</td></tr>
<tr><td align="right" scope="row" class='awrnc'>10,872</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>39,560</td><td align="right" class='awrnc'>9,785,751</td></tr>
<tr><td align="right" scope="row" class='awrc'>12,080</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>39,533</td><td align="right" class='awrc'>9,758,310</td></tr>
<tr><td align="right" scope="row" class='awrnc'>13,288</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>39,521</td><td align="right" class='awrnc'>9,734,789</td></tr>
<tr><td align="right" scope="row" class='awrc'>14,496</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>39,501</td><td align="right" class='awrc'>9,724,008</td></tr>
<tr><td align="right" scope="row" class='awrnc'>15,704</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>39,481</td><td align="right" class='awrnc'>9,702,447</td></tr>
<tr><td align="right" scope="row" class='awrc'>16,912</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>39,469</td><td align="right" class='awrc'>9,690,687</td></tr>
<tr><td align="right" scope="row" class='awrnc'>18,120</td><td align="right" class='awrnc'>1.88</td><td align="right" class='awrnc'>39,469</td><td align="right" class='awrnc'>9,690,687</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,328</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>39,469</td><td align="right" class='awrc'>9,690,687</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>data block</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrc'>810</td><td align="right" class='awrc'>810</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>284</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>15.82</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>17,040</td><td align="right" class='awrnc'>17,040</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>22.92</td></tr>
<tr><td scope="row" class='awrc'>PS-PX Process Reservation</td>
<td align="right" class='awrc'>1,349</td><td align="right" class='awrc'>1,346</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.52</td></tr>
<tr><td scope="row" class='awrnc'>CR-Reuse Block Range (block range reuse ckpt)</td>
<td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>86.82</td></tr>
<tr><td scope="row" class='awrc'>CF-Controlfile Transaction</td>
<td align="right" class='awrc'>1,640</td><td align="right" class='awrc'>1,640</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.90</td></tr>
<tr><td scope="row" class='awrnc'>TO-Temp Object</td>
<td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.42</td></tr>
<tr><td scope="row" class='awrc'>XL-ASM Extent Fault Lock (fault extent map)</td>
<td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40.00</td></tr>
<tr><td scope="row" class='awrnc'>WF-AWR Flush</td>
<td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.86</td></tr>
<tr><td scope="row" class='awrc'>TQ-Queue table enqueue (TM contention)</td>
<td align="right" class='awrc'>12</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.88</td></tr>
<tr><td scope="row" class='awrnc'>TT-Tablespace</td>
<td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.00</td></tr>
<tr><td scope="row" class='awrc'>FB-Format Block</td>
<td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.75</td></tr>
<tr><td scope="row" class='awrnc'>HW-Segment High Water Mark</td>
<td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.11</td></tr>
<tr><td scope="row" class='awrc'>DW-In memory Dispenser</td>
<td align="right" class='awrc'>5</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.60</td></tr>
<tr><td scope="row" class='awrnc'>TX-Transaction</td>
<td align="right" class='awrnc'>16,672</td><td align="right" class='awrnc'>16,672</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.50</td></tr>
<tr><td scope="row" class='awrc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>JS-Job Scheduler (job run lock - synchronize)</td>
<td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.50</td></tr>
<tr><td scope="row" class='awrc'>RA-Real-Time ADDM Flood Control (RT ADDM flood control)</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.00</td></tr>
<tr><td scope="row" class='awrc'>TX-Transaction (index contention)</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.50</td></tr>
<tr><td scope="row" class='awrnc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>TA-Instance Undo</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1</td>
<td align="right" class='awrnc'>11,628</td><td align="right" class='awrnc'>11,628</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrc'>11,628</td><td align="right" class='awrc'>11,628</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrnc'>1,106</td><td align="right" class='awrnc'>1,106</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrc'>520</td><td align="right" class='awrc'>520</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CU-Cursor</td>
<td align="right" class='awrnc'>485</td><td align="right" class='awrnc'>485</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrc'>437</td><td align="right" class='awrc'>437</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SE-Session Migration</td>
<td align="right" class='awrnc'>418</td><td align="right" class='awrnc'>418</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrc'>223</td><td align="right" class='awrc'>223</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrc'>168</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IS-Instance State</td>
<td align="right" class='awrc'>126</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MR-Media Recovery</td>
<td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PR-Process Startup</td>
<td align="right" class='awrc'>51</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TQ-Queue table enqueue (INI contention)</td>
<td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TQ-Queue table enqueue (TM Job cache use)</td>
<td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SH-Active Session History Flushing</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrc'>10</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>RS-Reclaimable Space (write alert level)</td>
<td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RS-Reclaimable Space (read alert level)</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>
<ul>
<li class="awr"> Min/Max TR (mins) - Min and Max Tuned Retention (minutes) </li>
<li class="awr"> STO - Snapshot Too Old count,	OOS - Out of Space count </li>
<li class="awr"> Undo segment block stats: </li>
<li class="awr"> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed </li>
<li class="awr"> eS - expired	Stolen,   eR - expired	 Released,   eU - expired   reUsed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays undo segment summary. It displays undo tablespace number, number of undo blocks, number of transactions, max query length, etc."><tr><th class="awrbg" scope="col">Undo TS#</th><th class="awrbg" scope="col">Num Undo Blocks (K)</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concurcy</th><th class="awrbg" scope="col">Min/Max TR (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">	uS/uR/uU/    eS/eR/eU</th></tr>
<tr><td align="right" scope="row" class='awrc'>2</td><td align="right" class='awrc'>45.56</td><td align="right" class='awrc'>14,598</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>63</td><td class='awrc'>15/15</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>
<ul>
<li class="awr"> Most recent 35 Undostat rows, ordered by Time desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the 35 most recent Undostat rows."><tr><th class="awrbg" scope="col">End Time</th><th class="awrbg" scope="col">Num Undo Blocks</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concy</th><th class="awrbg" scope="col">Tun Ret (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">  uS/uR/uU/   eS/eR/eU</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 12:19</td><td align="right" class='awrc'>45,561</td><td align="right" class='awrc'>14,598</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>15</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Slave freSlvL_kwsbgsgn latch</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ deq hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ dequeue txn counter latch</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ process state object latch</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ: IPC master latch</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM allocation</td><td align="right" class='awrc'>37,877</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM connection state latch</td><td align="right" class='awrnc'>5,508</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM db client latch</td><td align="right" class='awrc'>793</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map headers</td><td align="right" class='awrnc'>1,101</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map load waiting list</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>14,661</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>20,369,257</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network background latch</td><td align="right" class='awrnc'>5,449</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network state latch</td><td align="right" class='awrc'>360</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM remote client latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Alerted Metric Element list</td><td align="right" class='awrc'>6,597</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Autotask management</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Change Notification Hash table latch</td><td align="right" class='awrc'>283</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Column stats entry latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>15,755</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DML lock allocation</td><td align="right" class='awrnc'>34,934</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Event Group Locks</td><td align="right" class='awrc'>439</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FIB s.o chain latch</td><td align="right" class='awrnc'>314</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FOB consolidated s.o list latch</td><td align="right" class='awrc'>314</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>File State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile block</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile write queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hang Manager wait event statistics</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,389</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>I/O Staticstics latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats main anchor latch</td><td align="right" class='awrnc'>756</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM access tracking extent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM activity tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary rw latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area sb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area scb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM emb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM seg hdr latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMFS defer write list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMXT hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC other latch</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC stats buffer allocation latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>In memory undo latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS Sh mem access</td><td align="right" class='awrc'>595</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast add buf latch</td><td align="right" class='awrnc'>612</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast drop buf latch</td><td align="right" class='awrc'>612</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast load blnc latch</td><td align="right" class='awrnc'>126</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS global state obj latch</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS mem alloc latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue access latch</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue state obj latch</td><td align="right" class='awrnc'>24,978</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS slv state obj latch</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KCNIBR - invalid block range tree</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDCStatHash latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Buffer Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Bucket Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Elem Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO action list latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO bll latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC FX Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFCL LE Freelist</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS client latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS cluster latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS endpoint latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS process latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFK SGA Libload latch</td><td align="right" class='awrc'>12,980</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFMD SGA</td><td align="right" class='awrnc'>366</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool KGH calls</td><td align="right" class='awrc'>4,250</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>763,266</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,160,413</td><td align="right" class='awrnc'>0.58</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool pending avail list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>9,021,122</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS req layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS id table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS ksfs_node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFSD name cache parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL LS Segment latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC ASPC anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrnc'>403</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Namespace latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSK PDB IO STAT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMA SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMF SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSWL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrc'>499</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR large replies</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTF sga latch</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>233</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTILM latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTU in-memory txn table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA ODPSCN latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KWQMN job cache list latch</td><td align="right" class='awrc'>141</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KWQS pqueue ctx latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Latch for NonceHistory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Locator state objects pool parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lost write change tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lsod array latch</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA asr alloc latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>232</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>4,189</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>285</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MQL Tracking Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Management Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>210</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Subscriber</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Message cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MinActiveScn Latch</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex Stats</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrc'>208</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process</td><td align="right" class='awrnc'>1,089</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process allocation</td><td align="right" class='awrc'>1,597</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process: request allocation</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB Hash Table Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB LRU structure</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL warning settings</td><td align="right" class='awrc'>384</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX hash array latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for dependency tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for query hash table access</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for segments scanning</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>QMT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Real-time descriptor latch</td><td align="right" class='awrc'>3,501</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request stats latch</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request struct latch</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Request holder compeltion list latch</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Blackbox latch</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA IO buffer pool latch</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Bkt Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Log Latch</td><td align="right" class='awrnc'>11,449</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA blob parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA bucket locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA heap locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA pool locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SO private so latch</td><td align="right" class='awrc'>290</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>210</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager workarea list latch</td><td align="right" class='awrc'>15,718</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SR Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched IM Job latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched InMem Job Cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Shared B-Tree</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams Generic</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Subscriber Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Testing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Token Manager</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>UM object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>WCR: sync</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>X$KSFQP</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB NFS Security Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB unused session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB used session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>111,484</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active service list</td><td align="right" class='awrnc'>15,342</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,467</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>archive destination</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>begin backup scn array</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>business card</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffer handles</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers chains</td><td align="right" class='awrnc'>47,879,079</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17,458,366</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>10,406,050</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10,877,579</td><td align="right" class='awrc'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>cache table scan latch</td><td align="right" class='awrnc'>92,635</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>92,636</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>2,262</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>0.57</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>change notification client cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel handle pool latch</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel operations parent latch</td><td align="right" class='awrnc'>4,165</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>2,602,916</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,323,105</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>client/application info</td><td align="right" class='awrnc'>2,390</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>compile environment latch</td><td align="right" class='awrc'>390</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp handoff latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp server hash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp sga latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type state latch</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type wait latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr slave free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cvmap freelist lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>deferred cleanup latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher info</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dml lock allocation</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>done queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dtp latch</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dummy allocation</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eighth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eleventh spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enqueue freelist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>63,441</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>175,644</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueues</td><td align="right" class='awrnc'>501</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>error message lists</td><td align="right" class='awrc'>803</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fast space usage latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fifteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>file cache latch</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>first Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flash file access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flashback copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourth Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>31,958,254</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,774,453</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc imc list</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc persistent rm</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc xid list</td><td align="right" class='awrc'>101</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcr global ctx</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity object freelist latch</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs commit scn state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>219,943</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs opaque info freelist</td><td align="right" class='awrnc'>219,297</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs partitioned table hash</td><td align="right" class='awrc'>21,302,844</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,117,212</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>6,644</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>39.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering latch</td><td align="right" class='awrnc'>31,945</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>776</td><td align="right" class='awrnc'>0.52</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>11,800,843</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4,195,867</td><td align="right" class='awrc'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>40,952,825</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9,419</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>gcs resource scan list</td><td align="right" class='awrc'>549</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource timerq list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource validate list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows freelist</td><td align="right" class='awrnc'>7,689,405</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>84,931</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>34,262</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>ges deadlock list</td><td align="right" class='awrnc'>892</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges domain table</td><td align="right" class='awrc'>180,008</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>39,603</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges group table</td><td align="right" class='awrc'>182,075</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process hash list</td><td align="right" class='awrnc'>19,352</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process parent latch</td><td align="right" class='awrc'>364,510</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process table freelist</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote lock freelist</td><td align="right" class='awrc'>1,117</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>260,098</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12,056</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges resource scan list</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource table freelist</td><td align="right" class='awrnc'>23,045</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges s-lock bitvec freelist</td><td align="right" class='awrc'>2,765</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges timeout list</td><td align="right" class='awrnc'>1,065</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>233</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges value block free list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>global KZLD latch for auth type mem in SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global tx hash mapping</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>granule from data transfer cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gws:Sharding global descriptor latch</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table Sql Plan Finding latch</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table column usage latch</td><td align="right" class='awrc'>415</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>55,516</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table expression usage tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table modification latch</td><td align="right" class='awrc'>109</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table sql contorl latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat check</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>394</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat structure management</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>315</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>imc buf hdl lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc cr clone buf</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc hash lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc sj lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc srchsp lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc-txn-wrk-lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory area latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar segment hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory global pool latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>internal temp table object number allocation latch</td><td align="right" class='awrc'>398</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>interrupt manipulation</td><td align="right" class='awrnc'>1,473</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>intra txn parallel recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule list</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule metadata list</td><td align="right" class='awrc'>147</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job workq parent latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>job_queue_processes free list latch</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes parameter latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>jslv pdb context latch</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q global data latch</td><td align="right" class='awrnc'>422</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q lock allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kKCN Cqn SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcn buffer chains</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kdlx hb parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgb parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgnfs mount latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjbr roi instance map</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci objects freelist latch</td><td align="right" class='awrc'>6,421</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci process context latch</td><td align="right" class='awrnc'>4,871</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>38,666</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjci process list latch</td><td align="right" class='awrc'>2,799</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci request sequence latch</td><td align="right" class='awrnc'>490</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjcipctx state object freelist latch</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>1.27</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoedcso state object freelist latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoer owner hash bucket</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjpm my inst data</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Request obj freelist latch</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect control request queue</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6,340</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect warm up context</td><td align="right" class='awrc'>385</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca pkey obj freelist latch</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrc'>2,683</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect service hash table bucket</td><td align="right" class='awrnc'>6,364</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjscpss state object freelist latch</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kokc descriptor allocation latch</td><td align="right" class='awrnc'>414</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kpoxft latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>krso process</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksbxic instance latch</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksevn object root latch</td><td align="right" class='awrnc'>210</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksfv messages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksi resource reuse count</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim group membership cache</td><td align="right" class='awrc'>2,899</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim membership request latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksns object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kss move lock</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksuosstats global area</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>242</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksutcpistat latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv allocation latch</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv class latch</td><td align="right" class='awrnc'>16,374</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv instance latch</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv msg queue latch</td><td align="right" class='awrnc'>382</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>381</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxp shared latch</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxp so latch</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktfbn latch</td><td align="right" class='awrnc'>131</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg space</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg stages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg worklink</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm global data</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm prv jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktmpj HT ls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwqbsn:qsga</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbmdl: metadata latch</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbql: queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsslLat: skiplist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kxfxscanrate_latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>15,826</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>list of block allocation</td><td align="right" class='awrnc'>64,470</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>loader state object freelist</td><td align="right" class='awrc'>152</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment dispenser latch</td><td align="right" class='awrnc'>223</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment hash table latch</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment query latch</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock DBA buffer during media recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log write info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16,542</td><td align="right" class='awrnc'>3.37</td></tr>
<tr><td scope="row" class='awrc'>log write worker phase</td><td align="right" class='awrc'>5,279</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logical standby cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer context allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer local</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer work area</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>longop free list parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>managed standby</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message bitmap latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message pool operations parent latch</td><td align="right" class='awrc'>1,500</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>messages</td><td align="right" class='awrnc'>366,779</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>msg queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>456,551</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service memory objects</td><td align="right" class='awrc'>1,285</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service namespace bucket</td><td align="right" class='awrnc'>4,773</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service namespace objects</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service pending queue</td><td align="right" class='awrnc'>598</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request queue</td><td align="right" class='awrnc'>8,129</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ncodef allocation latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ninth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header freelist</td><td align="right" class='awrc'>14,792</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>22,834,302</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>210,941</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>object queue memory</td><td align="right" class='awrc'>697</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object stats modification</td><td align="right" class='awrnc'>1,334</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel query alloc buffer</td><td align="right" class='awrc'>3,230</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>380</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parallel query stats</td><td align="right" class='awrnc'>713</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel txn reco latch</td><td align="right" class='awrc'>456</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parameter table management</td><td align="right" class='awrnc'>1,810</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pdb enqueue hash chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>peshm</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_free_list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_hash_node</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pkey global statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon dead latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>51,882</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>51,875</td><td align="right" class='awrc'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>process allocation</td><td align="right" class='awrnc'>3,297</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process group creation</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process memory detail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process pkey statistics list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue</td><td align="right" class='awrnc'>1,630</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue reference</td><td align="right" class='awrc'>133,127</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10,125</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>qmn state object latch</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>qmn task queue latch</td><td align="right" class='awrc'>144</td><td align="right" class='awrc'>11.11</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>quarantine object</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server freelists</td><td align="right" class='awrc'>1,783</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server process</td><td align="right" class='awrnc'>468</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>queued dump request</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>queuing load statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read-moslty lock queue under pkey</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>recovery domain hash bucket</td><td align="right" class='awrnc'>769</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>60,338</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,397,881</td><td align="right" class='awrc'>0.47</td></tr>
<tr><td scope="row" class='awrnc'>redo copy</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,399,400</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo transport task</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>169,988</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote tool request latch</td><td align="right" class='awrc'>416</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr group change latch</td><td align="right" class='awrnc'>380</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:active threads</td><td align="right" class='awrc'>820</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change group</td><td align="right" class='awrnc'>389</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change state</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:free threads list</td><td align="right" class='awrnc'>800</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change alloc latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:resource group CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:schema config</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:session queuing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache objects</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rt rmv count latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>315</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>second Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>segmented array pool</td><td align="right" class='awrnc'>314</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence cache</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>service drain list</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session allocation</td><td align="right" class='awrc'>1,441</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>645</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session idle bit</td><td align="right" class='awrnc'>10,565</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session state list latch</td><td align="right" class='awrnc'>983</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session statistics</td><td align="right" class='awrc'>804</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session switching</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session timer</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>seventh spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga hash table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shard latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shardgroup list latch</td><td align="right" class='awrc'>686</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>145,213</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool sim alloc</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool simulator</td><td align="right" class='awrnc'>2,295</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared server configuration</td><td align="right" class='awrc'>211</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sim partition latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>2,225,113</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator lru latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,180,148</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>sixth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sort extent pool</td><td align="right" class='awrnc'>603</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>space background state object latch</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>1,612</td><td align="right" class='awrnc'>47.15</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>461</td><td align="right" class='awrnc'>1.52</td></tr>
<tr><td scope="row" class='awrc'>state object free list</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>statistics aggregation</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>subscriber Ht bkt</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tablespace key chain</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temp lob duration state obj allocation</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temporary table state object allocation</td><td align="right" class='awrnc'>171</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tenth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 lmid cln</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mixed exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mode exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test open exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test pdb exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test shared parent2 lmid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thirteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>threshold alerts latch</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>trace latch</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction allocation</td><td align="right" class='awrc'>499</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twelfth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fifth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-first spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fourth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-second spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-third spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>108,065</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit holder</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit queues</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>11,800,843</td><td align="right" class='awrc'>18,407</td><td align="right" class='awrc'>482</td><td align="right" class='awrc'>17,967</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>10,406,050</td><td align="right" class='awrnc'>15,412</td><td align="right" class='awrnc'>295</td><td align="right" class='awrnc'>15,128</td></tr>
<tr><td scope="row" class='awrc'>gc element</td><td align="right" class='awrc'>31,958,254</td><td align="right" class='awrc'>11,467</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>11,153</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>40,952,825</td><td align="right" class='awrnc'>7,066</td><td align="right" class='awrnc'>890</td><td align="right" class='awrnc'>6,238</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>9,021,122</td><td align="right" class='awrc'>4,341</td><td align="right" class='awrc'>260</td><td align="right" class='awrc'>4,103</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>763,266</td><td align="right" class='awrnc'>1,139</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>1,063</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>60,338</td><td align="right" class='awrc'>889</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>811</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers chains</td><td align="right" class='awrnc'>47,879,079</td><td align="right" class='awrnc'>799</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>759</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>1,612</td><td align="right" class='awrc'>760</td><td align="right" class='awrc'>636</td><td align="right" class='awrc'>165</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>22,834,302</td><td align="right" class='awrnc'>506</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>484</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>366,779</td><td align="right" class='awrc'>382</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>370</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation hash table</td><td align="right" class='awrnc'>20,369,257</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>333</td></tr>
<tr><td scope="row" class='awrc'>shared pool</td><td align="right" class='awrc'>145,213</td><td align="right" class='awrc'>273</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>267</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>456,551</td><td align="right" class='awrnc'>160</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>152</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering latch</td><td align="right" class='awrc'>31,945</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>134</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>111,484</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>98</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>2,602,916</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>76</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>169,988</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>52</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>84,931</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>20</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>2,262</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>10</td></tr>
<tr><td scope="row" class='awrc'>cache table scan latch</td><td align="right" class='awrc'>92,635</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>20</td></tr>
<tr><td scope="row" class='awrnc'>qmn task queue latch</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>15,826</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>12</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>260,098</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>6</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>175,644</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>5</td></tr>
<tr><td scope="row" class='awrnc'>Consistent RBA</td><td align="right" class='awrnc'>15,755</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>232</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>gcs remaster request queue</td><td align="right" class='awrnc'>6,644</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmTranslate</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmDoDone_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>18</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>90</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctcsnd: send normal message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>123</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>56</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>21</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>39</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>12</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgcur: slow path</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: convert latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: fast path pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>23</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclcls_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclpdcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrwrite_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: aux pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbnlc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: fast pin release</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzib: finish processing buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgb_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>59</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgws</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzfw</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbbwlru</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbxsv: move to being written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbz_decr_wspwbcnt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>116</td></tr>
<tr><td class='awrc'>cache table scan latch</td><td class='awrc'>kcbz_free_table_scan_read_buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>call allocation</td><td class='awrnc'>ksuxds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbklbc_cql</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbbwdl: thread checkpoint queue</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndnewm</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>86</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>24</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclulb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>127</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>KCLUNLNK</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>69</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>28</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclpdcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndx</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclantilock_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclhngcbk1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnd</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remaster request queue</td><td class='awrnc'>kjdrrmq</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjdrchkdrm remastering request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjfcdrmrfg end step</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbralc: check freelist nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbrralc: reserve allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>25</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrfr_bg2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>84</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc add resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>373</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>267</td><td align="right" class='awrc'>78</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>196</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>39</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbclose_remaster</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>122</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>127</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpclose</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>64</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcfwst</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblpast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>50</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcres_99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclpdc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>103</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclrwrite</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>52</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblocalobj_nolock</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>47</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpflushpi</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrprmexpack</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbralc: reacquire</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrdowncvt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges cached resource lists</td><td class='awrc'>kjruch: cached obj cleanup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges cached resource lists</td><td class='awrnc'>kjchc: clean resource cache</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjakcai: search for resp by resname</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrref: find matched resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjucvl: lock convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksarcv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksaamb: after wakeup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcs024</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcsnew_scn_rba</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>multiblock read objects</td><td class='awrnc'>kcbzibmlt: normal mbr free</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>multiblock read objects</td><td class='awrc'>kcbzibmlt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_unlink_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>15</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_link_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_cq</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_q_bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>qmn task queue latch</td><td class='awrc'>kwqmngettsk: get task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>8</td></tr>
<tr><td class='awrnc'>qmn task queue latch</td><td class='awrnc'>kwqmnmvtsks: delay to ready list</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfwcr</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_post: rba scn pair</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_grab_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>452</td><td align="right" class='awrnc'>620</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_detach_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>119</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_purgeexpired</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_movetasks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghalo</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghfre</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfnd: min scan</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghupr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcnl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqrcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Cursor Pin</td><td class='awrc'>kkslce [KKSCHLPIN2]</td><td align="right" class='awrc'>218</td><td align="right" class='awrc'>250</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kgllkdl1  85</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>10</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	   9,392,804</li>
<li class="awr">Captured Segments account for	66.6% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td>
<td scope="row" class='awrc'>IND$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>386,160</td><td align="right" class='awrc'>4.11</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73244</td><td align="right" class='awrnc'>73251</td><td align="right" class='awrnc'>157,856</td><td align="right" class='awrnc'>1.68</td></tr>
<tr><td class='awrc'>USER64</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>152,752</td><td align="right" class='awrc'>1.63</td></tr>
<tr><td class='awrnc'>USER17</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73350</td><td align="right" class='awrnc'>73357</td><td align="right" class='awrnc'>150,720</td><td align="right" class='awrnc'>1.60</td></tr>
<tr><td class='awrc'>USER20</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73377</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>149,872</td><td align="right" class='awrc'>1.60</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	    9,128,427</li>
<li class="awr">Captured Segments account for	69.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER64</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>370,383</td><td align="right" class='awrc'>4.06</td></tr>
<tr><td class='awrnc'>USER21</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73379</td><td align="right" class='awrnc'>73374</td><td align="right" class='awrnc'>277,707</td><td align="right" class='awrnc'>3.04</td></tr>
<tr><td class='awrc'>USER3</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>251,341</td><td align="right" class='awrc'>2.75</td></tr>
<tr><td class='awrnc'>USER27</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73408</td><td align="right" class='awrnc'>73411</td><td align="right" class='awrnc'>159,419</td><td align="right" class='awrnc'>1.75</td></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73244</td><td align="right" class='awrc'>73251</td><td align="right" class='awrc'>156,702</td><td align="right" class='awrc'>1.72</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	    8,485,282</li>
<li class="awr">Captured Segments account for	68.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER64</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>176,065</td><td align="right" class='awrc'>2.07</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73244</td><td align="right" class='awrnc'>73251</td><td align="right" class='awrnc'>155,819</td><td align="right" class='awrnc'>1.84</td></tr>
<tr><td class='awrc'>USER3</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>154,697</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'>USER17</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73350</td><td align="right" class='awrnc'>73357</td><td align="right" class='awrnc'>148,203</td><td align="right" class='awrnc'>1.75</td></tr>
<tr><td class='awrc'>USER20</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73377</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>148,144</td><td align="right" class='awrc'>1.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:       8,485,282</li>
<li class="awr">Captured Segments account for	68.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER64</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>176,065</td><td align="right" class='awrc'>2.07</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73244</td><td align="right" class='awrnc'>73251</td><td align="right" class='awrnc'>155,819</td><td align="right" class='awrnc'>1.84</td></tr>
<tr><td class='awrc'>USER3</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>154,697</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'>USER17</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73350</td><td align="right" class='awrnc'>73357</td><td align="right" class='awrnc'>148,203</td><td align="right" class='awrnc'>1.75</td></tr>
<tr><td class='awrc'>USER20</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73377</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>148,144</td><td align="right" class='awrc'>1.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	     1,360,387</li>
<li class="awr">Captured Segments account for	65.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73244</td><td align="right" class='awrc'>73251</td><td align="right" class='awrc'>24,026</td><td align="right" class='awrc'>1.77</td></tr>
<tr><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>23,766</td><td align="right" class='awrnc'>1.75</td></tr>
<tr><td class='awrc'>USER20</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73377</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>22,882</td><td align="right" class='awrc'>1.68</td></tr>
<tr><td class='awrnc'>USER48</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73531</td><td align="right" class='awrnc'>73529</td><td align="right" class='awrnc'>22,846</td><td align="right" class='awrnc'>1.68</td></tr>
<tr><td class='awrc'>USER17</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73350</td><td align="right" class='awrc'>73357</td><td align="right" class='awrc'>22,815</td><td align="right" class='awrc'>1.68</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	     1,301,272</li>
<li class="awr">Captured Segments account for	67.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73244</td><td align="right" class='awrc'>73251</td><td align="right" class='awrc'>23,984</td><td align="right" class='awrc'>1.84</td></tr>
<tr><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>23,699</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'>USER20</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73377</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>22,861</td><td align="right" class='awrc'>1.76</td></tr>
<tr><td class='awrnc'>USER17</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73350</td><td align="right" class='awrnc'>73357</td><td align="right" class='awrnc'>22,786</td><td align="right" class='awrnc'>1.75</td></tr>
<tr><td class='awrc'>USER48</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73531</td><td align="right" class='awrc'>73529</td><td align="right" class='awrc'>22,780</td><td align="right" class='awrc'>1.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		2,254</li>
<li class="awr">Captured Segments account for	 9.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>208</td><td align="right" class='awrc'>9.23</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
Current Database
		  No data exists for this section of the report.
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
<p />
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb


<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73244</td><td align="right" class='awrc'>73251</td><td align="right" class='awrc'>23,536</td><td align="right" class='awrc'>2.69</td></tr>
<tr><td class='awrnc'>USER20</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73377</td><td align="right" class='awrnc'>73373</td><td align="right" class='awrnc'>22,608</td><td align="right" class='awrnc'>2.59</td></tr>
<tr><td class='awrc'>USER17</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73350</td><td align="right" class='awrc'>73357</td><td align="right" class='awrc'>22,512</td><td align="right" class='awrc'>2.58</td></tr>
<tr><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>22,512</td><td align="right" class='awrnc'>2.58</td></tr>
<tr><td class='awrc'>USER85</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73713</td><td align="right" class='awrc'>73716</td><td align="right" class='awrc'>22,512</td><td align="right" class='awrc'>2.58</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>
<ul>
<li class="awr"> % of Capture shows % of row lock waits for each top segment compared  </li>
<li class="awr"> with total row lock waits for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by row lock waits. Owner, tablespace name, object type, row lock waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Row Lock Waits</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11582</td><td align="right" class='awrc'>11582</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	    1,313</li>
<li class="awr">Captured Segments account for	 1.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ROWCACHE_SUMMARY</td><td class='awrc'>WRH$_ROWCACHE_SUMMARY_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74047</td><td align="right" class='awrc'>74047</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.23</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRP$_REPORTS</td><td class='awrnc'>SYS_P268</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74206</td><td align="right" class='awrnc'>74206</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRP$_REPORTS_DETAILS</td><td class='awrc'>SYS_P269</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74209</td><td align="right" class='awrc'>74209</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.23</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRP$_REPORTS_TIME_BANDS</td><td class='awrnc'>SYS_P272</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74214</td><td align="right" class='awrnc'>74214</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>74077</td><td align="right" class='awrc'>74077</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.15</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		   976</li>
<li class="awr">Captured Segments account for	71.7% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER35</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>171</td><td align="right" class='awrc'>17.52</td></tr>
<tr><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnc'>16.80</td></tr>
<tr><td class='awrc'>USER21</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73379</td><td align="right" class='awrc'>73374</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>9.53</td></tr>
<tr><td class='awrnc'>USER27</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73408</td><td align="right" class='awrnc'>73411</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>7.89</td></tr>
<tr><td class='awrc'>USER3</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>7.48</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	4,299,767</li>
<li class="awr">Captured Segments account for	65.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER21</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73379</td><td align="right" class='awrc'>73374</td><td align="right" class='awrc'>157,840</td><td align="right" class='awrc'>3.67</td></tr>
<tr><td class='awrnc'>USER27</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73408</td><td align="right" class='awrnc'>73411</td><td align="right" class='awrnc'>77,875</td><td align="right" class='awrnc'>1.81</td></tr>
<tr><td class='awrc'>USER66</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73621</td><td align="right" class='awrc'>73626</td><td align="right" class='awrc'>73,183</td><td align="right" class='awrc'>1.70</td></tr>
<tr><td class='awrnc'>USER11</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73327</td><td align="right" class='awrnc'>73331</td><td align="right" class='awrnc'>73,154</td><td align="right" class='awrnc'>1.70</td></tr>
<tr><td class='awrc'>USER76</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73669</td><td align="right" class='awrc'>73673</td><td align="right" class='awrc'>71,407</td><td align="right" class='awrc'>1.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>4.44</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>7,321</td><td align="right" class='awrnc'>2.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>266</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>9,494</td><td align="right" class='awrc'>7.04</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,212</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>24,712</td><td align="right" class='awrnc'>11.31</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>827</td><td align="right" class='awrnc'>7,235</td></tr>
<tr><td scope="row" class='awrc'>dc_object_grants</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>417</td></tr>
<tr><td scope="row" class='awrnc'>dc_objects</td><td align="right" class='awrnc'>18,147</td><td align="right" class='awrnc'>3.23</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>244</td><td align="right" class='awrnc'>3,196</td></tr>
<tr><td scope="row" class='awrc'>dc_profiles</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_props</td><td align="right" class='awrnc'>547</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>51</td></tr>
<tr><td scope="row" class='awrc'>dc_rollback_segments</td><td align="right" class='awrc'>2,988</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>230</td></tr>
<tr><td scope="row" class='awrnc'>dc_segments</td><td align="right" class='awrnc'>892</td><td align="right" class='awrnc'>39.46</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>1,206</td></tr>
<tr><td scope="row" class='awrc'>dc_sequences</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>6</td></tr>
<tr><td scope="row" class='awrnc'>dc_tablespaces</td><td align="right" class='awrnc'>981</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22</td></tr>
<tr><td scope="row" class='awrc'>dc_users</td><td align="right" class='awrc'>617</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>387</td></tr>
<tr><td scope="row" class='awrnc'>outstanding_alerts</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td></tr>
<tr><td scope="row" class='awrc'>sch_lj_oids</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>406</td><td align="right" class='awrc'>6.90</td><td align="right" class='awrc'>912</td><td align="right" class='awrc'>3.62</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>18.18</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>18.18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>70.73</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>70.73</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>16.24</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>16.24</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>1,104</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>3,444</td><td align="right" class='awrnc'>43.15</td><td align="right" class='awrnc'>131,354</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>60</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>625</td><td align="right" class='awrc'>76.80</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>624</td><td align="right" class='awrnc'>99.68</td><td align="right" class='awrnc'>624</td><td align="right" class='awrnc'>99.68</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>4,426</td><td align="right" class='awrc'>12.31</td><td align="right" class='awrc'>15,698</td><td align="right" class='awrc'>8.98</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>418</td><td align="right" class='awrc'>880</td><td align="right" class='awrc'>880</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>QUEUE</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>7,766</td><td align="right" class='awrc'>10,872</td><td align="right" class='awrc'>10,872</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>0</td><td class='awrc'>INI/</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>121.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>2.66</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>94</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>865.27</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.64</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>238</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>31.57</td><td align="right" class='awrc'>30.87</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>171</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>18.04</td><td align="right" class='awrnc'>10.29</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>89</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1,036.38</td><td align="right" class='awrc'>41.16</td><td align="right" class='awrc'>5.30</td><td align="right" class='awrc'>6.40</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>592</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>153.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.15</td><td align="right" class='awrnc'>8.70</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>636.72</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.11</td><td align="right" class='awrc'>4.55</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>205</td><td align="right" class='awrc'>205</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>3.43</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>139</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.50</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>28</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>797.58</td><td align="right" class='awrnc'>5.21</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>13.56</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>415</td><td align="right" class='awrnc'>409</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>8,388,608,000</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>12,445,928</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>21,106,688</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>1,711,276,032</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KCRAHT Free Blocks</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>15.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KGLH0</td><td align="right" class='awrc'>24.46</td><td align="right" class='awrc'>36.62</td><td align="right" class='awrc'>49.70</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLS</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.11</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>37.92</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>-100.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SO private sga</td><td align="right" class='awrnc'>30.55</td><td align="right" class='awrnc'>30.55</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SQLA</td><td align="right" class='awrc'>32.18</td><td align="right" class='awrc'>82.28</td><td align="right" class='awrc'>155.73</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>db_block_hash_buckets</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>dbwriter coalesce buffer</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>258.96</td><td align="right" class='awrnc'>186.94</td><td align="right" class='awrnc'>-27.81</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gc name table</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resources</td><td align="right" class='awrnc'>266.69</td><td align="right" class='awrnc'>266.69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resv res hash bucket</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs shadows</td><td align="right" class='awrnc'>145.46</td><td align="right" class='awrnc'>145.46</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges big msg buffers</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ksunfy_meta 1</td><td align="right" class='awrnc'>25.23</td><td align="right" class='awrnc'>25.23</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>object queue hash buckets</td><td align="right" class='awrc'>16.00</td><td align="right" class='awrc'>16.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>row cache</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>3,317</td><td align="right" class='awrc'>4,274</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>625</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>625</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P60S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p60sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>137438953472</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>3371171840</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>640</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>10133438464</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>UNDOTBS1</td><td class='awrc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>2050</td><td align="right" class='awrc'>51.96</td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>31.39</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>31.39</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2050</div></td><td align="right" class='awrnc'><div class="hidden">51.96351659488218900430706865974157588042</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>12.26</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>12.19</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">2050</div></td><td align="right" class='awrc'><div class="hidden">51.96351659488218900430706865974157588042</div></td>
<td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>3.93</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>3.93</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>1595</td><td align="right" class='awrnc'>40.41</td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>21.94</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>21.92</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">1595</div></td><td align="right" class='awrc'><div class="hidden">40.41043830757537370154547757790727134533</div></td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>10.13</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>6.97</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">1595</div></td><td align="right" class='awrnc'><div class="hidden">40.41043830757537370154547757790727134533</div></td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>4.64</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>4.64</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>2050</td><td align="right" class='awrc'>51.96</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>51.23</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>31.39</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>1595</td><td align="right" class='awrnc'>40.41</td>
<td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>36.74</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>21.92</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">1595</div></td><td align="right" class='awrc'><div class="hidden">40.41043830757537370154547757790727134533</div></td>
<td class='awrc'>INDEX - RANGE SCAN</td><td align="right" class='awrc'>3.62</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>3.17</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>
<ul>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the session	was found waiting for that particular event. The percentage shown	in this column is calculated with respect to wall clock time	   and not total database activity. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the session was waiting for that particular event</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top session by wait event"><tr><th class="awrbg" scope="col">Sid, Serial#</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>5,37454</td><td align="right" class='awrc'>1.44</td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>0.46</td>
<td class='awrc'>USER42</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>18/64 [ 28%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,20871</td><td align="right" class='awrnc'>1.44</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>0.58</td>
<td class='awrnc'>USER85</td><td class='awrnc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrnc'>23/64 [ 36%]</td><td align="right" class='awrnc'>23</td></tr>
<tr><td align="right" scope="row" class='awrc'>35,23290</td><td align="right" class='awrc'>1.44</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>0.51</td>
<td class='awrc'>USER37</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>20/64 [ 31%]</td><td align="right" class='awrc'>20</td></tr>
<tr><td align="right" scope="row" class='awrnc'>36,21261</td><td align="right" class='awrnc'>1.44</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>0.61</td>
<td class='awrnc'>USER84</td><td class='awrnc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrnc'>24/64 [ 38%]</td><td align="right" class='awrnc'>23</td></tr>
<tr><td align="right" scope="row" class='awrc'>67,21674</td><td align="right" class='awrc'>1.44</td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>0.43</td>
<td class='awrc'>USER47</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>17/64 [ 27%]</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>52.01</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>52.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>31.42</td><td align="right" class='awrc'>19.50</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>23.41</td><td align="right" class='awrnc'>14.53</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>15.61</td><td align="right" class='awrc'>9.69</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>10.82</td><td align="right" class='awrnc'>6.71</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>4.64</td><td align="right" class='awrc'>2.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>23.41</td><td align="right" class='awrc'>&quot;9&quot;,&quot;15993157&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>15.61</td><td align="right" class='awrnc'>&quot;2&quot;,&quot;675&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.03</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>blocks</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>4.64</td><td align="right" class='awrc'>&quot;1&quot;,&quot;77&quot;,&quot;77&quot;</td><td align="right" class='awrc'>3.65</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>2.10</td><td align="right" class='awrnc'>&quot;9&quot;,&quot;16340048&quot;,&quot;16777230&quot;</td><td align="right" class='awrnc'>0.03</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>id#</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1.60</td><td align="right" class='awrc'>&quot;1&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrc'>0.63</td>
<td class='awrc'>requests</td><td class='awrc'>interrupt</td><td class='awrc'>timeout</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>
<ul>
<li class="awr"> Top DB Objects by DB Time with respect to Application, Cluster,     User I/O,	buffer busy waits and In-Memory DB events only. </li>
<li class="awr"> Tablespace name is not available for reports generated from the root PDB     of a consolidated database. </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available.</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the Top DB Objects"><tr><th class="awrbg" scope="col">Object ID</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Object Name (Type)</th><th class="awrbg" scope="col">Tablespace</th></tr>
<tr><td align="right" scope="row" class='awrc'>73609</td><td align="right" class='awrc'>1.72</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>0.33</td>
<td class='awrc'>USER64.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73379</td><td align="right" class='awrnc'>1.67</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>0.46</td>
<td class='awrnc'>USER21.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73263</td><td align="right" class='awrc'>1.62</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>0.41</td>
<td class='awrc'>USER3.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73276</td><td align="right" class='awrnc'>1.44</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>0.66</td>
<td class='awrnc'>USER4.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73278</td><td align="right" class='awrc'>1.44</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>0.56</td>
<td class='awrc'>USER5.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>12:13:24   (1.6 min)</td><td align="right" class='awrc'>699</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>5.02</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">12:13:24   (1.6 min)</div></td><td align="right" class='awrnc'><div class="hidden">699</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>3.98</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">12:13:24   (1.6 min)</div></td><td align="right" class='awrc'><div class="hidden">699</div></td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>2.51</td></tr>
<tr><td align="right" class='awrnc'>12:15:00   (5.0 min)</td><td align="right" class='awrnc'>2,068</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>723</td><td align="right" class='awrnc'>18.32</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">12:15:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">2068</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>485</td><td align="right" class='awrc'>12.29</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">12:15:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">2068</div></td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>338</td><td align="right" class='awrnc'>8.56</td></tr>
<tr><td align="right" class='awrc'>12:20:00   (4.0 min)</td><td align="right" class='awrc'>1,180</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>319</td><td align="right" class='awrc'>8.08</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">12:20:00   (4.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">1180</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>282</td><td align="right" class='awrnc'>7.14</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">12:20:00   (4.0 min)</div></td><td align="right" class='awrc'><div class="hidden">1180</div></td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>4.54</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:3889879926_1_54</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_1_54&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 53 to 54.
Time period starts at 12-FEB-20 12.13.24 PM
Time period ends at 12-FEB-20 12.24.01 PM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb1, numbered 1 and hosted at
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 36877 seconds.
The average number of active sessions was 57.89.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       57.89 | 100	   1
2  Top SQL Statements	      56.26 | 97.17	   2
3  Global Cache Messaging     44 | 76.01	   1
4  Buffer Busy - Hot Objects  26.03 | 44.97	   0
5  &quot;User I/O&quot; wait Class	12.95 | 22.37	     0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 57.98 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 51719 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 18742 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.22.248 and source &quot;?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 57.89 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 44 active sessions, 76.01% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 44.57 active sessions, 76.98% of total activity.


Finding 2: Top SQL Statements
Impact is 56.34 active sessions, 97.17% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 31.65 active sessions, 54.66% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 15455 times and
      had an average elapsed time of 1.2 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 24.61 active sessions, 42.51% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 86747 times and
      had an average elapsed time of 0.17 seconds.


Finding 3: Global Cache Messaging
Impact is 44.07 active sessions, 76.01% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 44 active sessions, 76.01% of total activity.
   ------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 54% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 44.57 active sessions, 76.98% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 26.07 active sessions, 44.97% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 26.03 active sessions, 44.97% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 44 active sessions, 76.01% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 44.57 active sessions, 76.98% of total activity.


Finding 5: &quot;User I/O&quot; wait Class
Impact is 12.97 active sessions, 22.37% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.
The SGA was adequately sized.

   No recommendations are available.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 3</td><td align="right" class='awrc'>	  3</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    3</td><td align="right" class='awrnc'>    3</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		     3.60</td><td align="right" class='awrnc'>		       0.14</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		 3.62</td><td align="right" class='awrc'>		  0.14</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     31,724.50</td><td align="right" class='awrnc'>		1,261.16</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       26,228.96</td><td align="right" class='awrc'>		 1,042.69</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.10</td><td align="right" class='awrnc'>		     0.00</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>	       11,376.78</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	 2.77</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.02</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	97.21</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  54.13</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	    9,779.1</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	      28,883.2</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  32.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	    0.0</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    0.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'>        18,333.3</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       1.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	      15,263.2</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>		 317.8</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	   247.1</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	      13,268.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	       65.7</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      26.9</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     16.9</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   29.6</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   13.63</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   85.89</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 0.48</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>64,405</td><td align="right" class='awrnc'>101.22</td><td align="right" class='awrnc'>4.02</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>3,780</td><td align="right" class='awrnc'>5.94</td><td align="right" class='awrnc'>0.24</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>17,269</td><td align="right" class='awrc'>27.14</td><td align="right" class='awrc'>1.08</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>12,691</td><td align="right" class='awrnc'>19.95</td><td align="right" class='awrnc'>0.79</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>15,562</td><td align="right" class='awrc'>24.46</td><td align="right" class='awrc'>0.97</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>8,108</td><td align="right" class='awrnc'>12.74</td><td align="right" class='awrnc'>0.51</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>549</td><td align="right" class='awrnc'>0.86</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>144,099</td><td align="right" class='awrc'>226.47</td><td align="right" class='awrc'>9.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>1,058</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>110,460</td><td align="right" class='awrnc'>173.60</td><td align="right" class='awrnc'>6.90</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>832</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>421</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>647,263</td><td align="right" class='awrnc'>1,017.24</td><td align="right" class='awrnc'>40.44</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>145,157</td><td align="right" class='awrnc'>228.13</td><td align="right" class='awrnc'>9.07</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>17,528</td><td align="right" class='awrnc'>27.55</td><td align="right" class='awrnc'>1.10</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>1,650,231</td><td align="right" class='awrc'>2,593.50</td><td align="right" class='awrc'>103.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>17,489</td><td align="right" class='awrnc'>27.49</td><td align="right" class='awrnc'>1.09</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>9,590,516</td><td align="right" class='awrc'>15,072.44</td><td align="right" class='awrc'>599.18</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>339,635</td><td align="right" class='awrnc'>533.77</td><td align="right" class='awrnc'>21.22</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>20,155,012</td><td align="right" class='awrc'>31,675.58</td><td align="right" class='awrc'>1,259.22</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>356</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>355</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>


<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>820</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>24,796</td><td align="right" class='awrc'>38.97</td><td align="right" class='awrc'>1.55</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>8,644</td><td align="right" class='awrc'>13.58</td><td align="right" class='awrc'>0.54</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>227</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>246,906</td><td align="right" class='awrnc'>388.04</td><td align="right" class='awrnc'>15.43</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>195,400</td><td align="right" class='awrc'>307.09</td><td align="right" class='awrc'>12.21</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>29,003</td><td align="right" class='awrnc'>45.58</td><td align="right" class='awrnc'>1.81</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>2,098,139</td><td align="right" class='awrc'>3,297.43</td><td align="right" class='awrc'>131.08</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>1,541,106</td><td align="right" class='awrnc'>2,422.00</td><td align="right" class='awrnc'>96.28</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>4,081,453</td><td align="right" class='awrc'>6,414.40</td><td align="right" class='awrc'>255.00</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>20,163,656</td><td align="right" class='awrnc'>31,689.16</td><td align="right" class='awrnc'>1,259.76</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>823,480</td><td align="right" class='awrc'>1,294.18</td><td align="right" class='awrc'>51.45</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>5,187,387</td><td align="right" class='awrnc'>8,152.49</td><td align="right" class='awrnc'>324.09</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>133,115</td><td align="right" class='awrc'>209.20</td><td align="right" class='awrc'>8.32</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>14,821,135</td><td align="right" class='awrnc'>23,292.87</td><td align="right" class='awrnc'>925.97</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>1,325,172,763,947</td><td align="right" class='awrc'>2,082,638,970.83</td><td align="right" class='awrc'>82,792,250.65</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>543,228</td><td align="right" class='awrnc'>853.74</td><td align="right" class='awrnc'>33.94</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>20,163,656</td><td align="right" class='awrc'>31,689.16</td><td align="right" class='awrc'>1,259.76</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>661,095</td><td align="right" class='awrnc'>1,038.98</td><td align="right" class='awrnc'>41.30</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>46,249,473</td><td align="right" class='awrc'>72,685.58</td><td align="right" class='awrc'>2,889.51</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>2,675,532</td><td align="right" class='awrnc'>4,204.86</td><td align="right" class='awrnc'>167.16</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>3,485,585</td><td align="right" class='awrc'>5,477.94</td><td align="right" class='awrc'>217.77</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>2,142,756</td><td align="right" class='awrc'>3,367.55</td><td align="right" class='awrc'>133.87</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>2,359,397</td><td align="right" class='awrnc'>3,708.02</td><td align="right" class='awrnc'>147.41</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>902,117</td><td align="right" class='awrc'>1,417.77</td><td align="right" class='awrc'>56.36</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>3,138,097</td><td align="right" class='awrnc'>4,931.83</td><td align="right" class='awrnc'>196.06</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>146</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>1,172</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>1,167</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>19</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>1,265</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>51</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>194</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>6</td></tr>

<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>146</td></tr>

<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>47.37</td><td align="right" class='awrnc'>52.63</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>203</td><td align="right" headers="CR %|Immed" class='awrc'>98.03</td><td align="right" headers="CR %|Busy" class='awrc'>0.99</td><td align="right" headers="CR %|Congst" class='awrc'>0.99</td><td align="right" headers="Current Blocks|Received" class='awrclb'>913</td><td align="right" headers="Current %|Immed" class='awrc'>54.22</td><td align="right" headers="Current %|Busy" class='awrc'>43.70</td><td align="right" headers="Current %|Congst" class='awrcrb'>2.08</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>1,095</td><td align="right" headers="CR %|Immed" class='awrnc'>92.79</td><td align="right" headers="CR %|Busy" class='awrnc'>4.93</td><td align="right" headers="CR %|Congst" class='awrnc'>2.28</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>15</td><td align="right" headers="Current %|Immed" class='awrnc'>0.00</td><td align="right" headers="Current %|Busy" class='awrnc'>100.00</td><td align="right" headers="Current %|Congst" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrclb'>23</td><td align="right" headers="CR %|Immed" class='awrc'>100.00</td><td align="right" headers="CR %|Busy" class='awrc'>0.00</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>56</td><td align="right" headers="Current %|Immed" class='awrc'>16.07</td><td align="right" headers="Current %|Busy" class='awrc'>82.14</td><td align="right" headers="Current %|Congst" class='awrcrb'>1.79</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>17069</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>17082</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>29744</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>3100</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>30667</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>30043</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>32714</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>3940</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>8606</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>8039</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>21446</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>3908</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>1676</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1676</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>1367</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1367</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>2130</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>1486</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>2199</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>4740</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>1,016</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>data block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>199</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>495</td><td align="right" headers="Current %|2hop" class='awrnc'>100.00</td><td align="right" headers="Current %|3hop" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>23</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>9</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="CR %|2hop" class='awrnc'>&#160;</td><td align="right" headers="CR %|3hop" class='awrnc'>&#160;</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>8039</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>8039</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>data block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>17082</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>17082</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>30043</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>30043</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>1367</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>1367</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>1486</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>1486</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>545</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>533</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>1788</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>49841</td><td align="right" class='awrnc'>376.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>6.23</td><td align="right" class='awrc'>8.35</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.22.248</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>remaster ops</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remastered objects</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replayed locks received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>replayed locks sent</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resources cleaned</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remaster time (s)</td><td align="right" class='awrnc'>0.5</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>freeze time (s)</td><td align="right" class='awrc'>0.0</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cleanup time (s)</td><td align="right" class='awrnc'>0.1</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replay time (s)</td><td align="right" class='awrc'>0.0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fixwrite time (s)</td><td align="right" class='awrnc'>0.1</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sync time (s)</td><td align="right" class='awrc'>0.3</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>10</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects (other inst)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects (persistent)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0





Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1
		    53	12 Feb 2020 12:13    1
		    54	12 Feb 2020 12:24    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 53

End   Snapshot Id specified: 54



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_53_54.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.txt

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 3889879926 P60SDB    p60sdb	  PRIMARY	   EE	   YES NO	 8192	      53       54	    2	     2		 2	  2	 1,223.82	 10.61
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p60sdb1   mcracpoc1. 12-Feb-20 12:10 12-Feb-20 12:13 12-Feb-20 12:24 19.0.0.0.0		      10.60	  614.61	 0.23	   57.98 Linux x86 64-bi
   2 p60sdb2   mcracpoc2. 12-Feb-20 12:10 12-Feb-20 12:13 12-Feb-20 12:24 19.0.0.0.0		      10.58	  609.21	 0.23	   57.56 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  115.64 1.E+02 ADDM:3889879926_54	       12-Feb-20 12:13 12-Feb-20 12:24
Top SQL Statements			  115.64  96.70 ADDM:3889879926_54	       12-Feb-20 12:13 12-Feb-20 12:24
Global Cache Messaging			  115.64  64.51 ADDM:3889879926_54	       12-Feb-20 12:13 12-Feb-20 12:24
Buffer Busy - Hot Objects		  115.64  37.20 ADDM:3889879926_54	       12-Feb-20 12:13 12-Feb-20 12:24
"User I/O" wait Class			  115.64  32.41 ADDM:3889879926_54	       12-Feb-20 12:13 12-Feb-20 12:24
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
   2			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 Min			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 Max			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4

OS Statistics By Instance		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  32	16     1     14.1    7.4     16.3    4.5    8.4   20.2	 83.7	       3,050.8	     15,674.8	    18,725.6	257,947.8
   2	  32	16     1     13.3   11.1     29.7    8.0   13.5   23.2	 70.3	       5,462.6	     12,956.3	    18,418.8	257,947.8
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										       8,513.4	     28,631.0	    37,144.5
			  --------------------------------------------------------------------------------------------------------------------


Time Model				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	   36,876.6	   1,130.6	 35,875.6	    12.0	   11.6 	   9.2		  0.0	     1,859.7	    1,190.5
   2	   36,552.4	   2,882.1	 35,550.9	     4.4	    4.3 	  12.1		  0.0	     2,268.9	    1,472.8
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	   73,429.0	   4,012.6	 71,426.6	    16.4	   15.9 	  21.3		  0.0	     4,128.6	    2,663.3
 Avg	   36,714.5	   2,006.3	 35,713.3	     8.2	    7.9 	  10.6		  0.0	     2,064.3	    1,331.7
 Std	      229.3	   1,238.5	    229.6	     5.4	    5.2 	   2.0		  0.0	       289.4	      199.6
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       50.2		 3.1	       97.3	       0.0	      0.0	     0.0	    0.0 	    45.0	     64.0
   2	       49.8		 7.9	       97.3	       0.0	      0.0	     0.0	    0.0 	    55.0	     64.9
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 5.5	       97.3	       0.0	      0.0	     0.0	    0.0 	    50.0	     64.5
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P60SDB/p60sdb1  Snaps: 5
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      32.4	     0.0	   0.9		 0.0	       0.0	     0.0	   0.0		 0.0	      65.5	     0.0	   N/A		 5.5
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	   8,249.5	     0.0	  72.5		 0.3	       0.4	     0.0	   1.9		 0.0	  28,388.9	     N/A	   N/A	     1,130.6	   36,876.6
   2	  15,546.5	     0.0	 587.7		 0.0	       0.5	     0.0	   0.2		 0.0	  19,742.7	     0.0	   N/A	     2,882.1	   36,552.4
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  23,796.0	     0.0	 660.2		 0.3	       0.9	     0.0	   2.1		 0.0	  48,131.6	     0.0	   0.0	     4,012.6	   73,429.0
 Avg	  11,898.0	     0.0	 330.1		 0.1	       0.5	     0.0	   1.0		 0.0	  24,065.8	     0.0	   N/A	     2,006.3	   36,714.5
 Std	   5,159.7	     0.0	 364.3		 0.2	       0.0	     0.0	   1.2		 0.0	   6,113.8	     N/A	   N/A	     1,238.5	      229.3
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time  DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		22.4	       0.0	     0.2	   0.0		 0.0	       0.0	     0.0	   0.0		77.0	       N/A	     N/A	   3.1		  50.2
   2		42.5	       0.0	     1.6	   0.0		 0.0	       0.0	     0.0	   0.0		54.0	       0.0	     N/A	   7.9		  49.8
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		32.5	       0.0	     0.9	   0.0		 0.0	       0.0	     0.0	   0.0		65.5	       0.0	     N/A	   5.5
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc current grant busy 			1,451,825	0.0	  20,446.54  14.08ms	27.85	   15.77ms     9.02ms	 22.52ms     9.55ms    2
       User I/O   db file sequential read			4,492,009	0.0	  17,645.53   3.93ms	24.03	    3.87ms     3.65ms	  4.09ms   317.53us    2
       Cluster	  gc cr multi block grant			  641,219	0.0	  15,165.31  23.65ms	20.65	   27.94ms    14.38ms	 41.49ms    19.16ms    2
       Cluster	  gc cr grant busy				  504,824	0.0	   6,891.28  13.65ms	 9.38	   15.53ms     8.11ms	 22.95ms    10.49ms    2
       User I/O   db file parallel read 			  410,927	0.0	   5,202.55  12.66ms	 7.09	   12.83ms    12.35ms	 13.31ms   680.95us    2
		  DB CPU					      N/A	N/A	   4,012.64		 5.46						       2
       Cluster	  gc current grant 2-way			  207,283	0.0	   2,304.71  11.12ms	 3.14	   15.10ms     5.31ms	 24.89ms    13.85ms    2
       Cluster	  gc current block lost 			    2,330	0.0	   1,265.51 543.14ms	 1.72	  565.24ms   542.19ms	588.30ms    32.60ms    2
       System I/O db file parallel write			  230,183	0.0	   1,012.08   4.40ms	 1.38	    4.55ms     3.66ms	  5.44ms     1.25ms    2
       User I/O   db file scattered read			  202,182	0.0	     966.29   4.78ms	 1.32	    4.77ms     4.42ms	  5.11ms   483.79us    2

   1   Cluster	  gc current grant busy 			  544,405	0.0	  12,260.62  22.52ms	33.25
       Cluster	  gc cr multi block grant			  219,218	0.0	   9,094.92  41.49ms	24.66
       User I/O   db file sequential read			1,662,922	0.0	   6,062.00   3.65ms	16.44
       Cluster	  gc cr grant busy				  188,475	0.0	   4,325.19  22.95ms	11.73
       User I/O   db file parallel read 			  132,420	0.0	   1,762.93  13.31ms	 4.78
       Cluster	  gc current grant 2-way			   61,481	0.0	   1,530.47  24.89ms	 4.15
		  DB CPU					      N/A	N/A	   1,130.56		 3.07
       System I/O db file parallel write			   95,249	0.0	     517.86   5.44ms	 1.40
       Cluster	  gc current multi block request		   21,573	0.0	     509.97  23.64ms	 1.38
       User I/O   db file scattered read			   97,065	0.0	     429.38   4.42ms	 1.16

   2   User I/O   db file sequential read			2,829,087	0.0	  11,583.53   4.09ms	31.69
       Cluster	  gc current grant busy 			  907,420	0.0	   8,185.92   9.02ms	22.40
       Cluster	  gc cr multi block grant			  422,001	0.0	   6,070.40  14.38ms	16.61
       User I/O   db file parallel read 			  278,507	0.0	   3,439.62  12.35ms	 9.41
		  DB CPU					      N/A	N/A	   2,882.09		 7.88
       Cluster	  gc cr grant busy				  316,349	0.0	   2,566.08   8.11ms	 7.02
       Cluster	  gc current block lost 			    2,282	0.0	   1,237.27 542.19ms	 3.38
       Cluster	  gc current grant 2-way			  145,802	0.0	     774.24   5.31ms	 2.12
       Other	  KJC: Wait for msg sends to complete		    4,395      33.1	     580.91 132.17ms	 1.59
       User I/O   db file scattered read			  105,117	0.0	     536.91   5.11ms	 1.47
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc current grant busy 			1,451,366	0.0	  20,443.53  14.09ms	27.84	   15.77ms     9.02ms	 22.52ms     9.55ms    2
       User I/O   db file sequential read			4,484,749	0.0	  17,627.75   3.93ms	24.01	    3.87ms     3.65ms	  4.10ms   316.13us    2
       Cluster	  gc cr multi block grant			  641,153	0.0	  15,165.08  23.65ms	20.65	   27.94ms    14.39ms	 41.49ms    19.17ms    2
       Cluster	  gc cr grant busy				  501,572	0.0	   6,857.03  13.67ms	 9.34	   15.55ms     8.11ms	 22.99ms    10.52ms    2
       User I/O   db file parallel read 			  410,918	0.0	   5,202.45  12.66ms	 7.09	   12.83ms    12.35ms	 13.31ms   681.03us    2
		  DB CPU					      N/A	N/A	   4,012.64		 5.46						       2
       Cluster	  gc current grant 2-way			  207,191	0.0	   2,304.29  11.12ms	 3.14	   15.10ms     5.31ms	 24.89ms    13.85ms    2
       Cluster	  gc current block lost 			    2,322	0.0	   1,260.83 542.99ms	 1.72	  565.17ms   542.04ms	588.30ms    32.71ms    2
       User I/O   db file scattered read			  201,981	0.0	     965.76   4.78ms	 1.32	    4.77ms     4.43ms	  5.11ms   483.40us    2
       Cluster	  gc current grant read-mostly invalidatio	  121,867	0.0	     758.46   6.22ms	 1.03	    6.22ms     6.12ms	  6.32ms   138.36us    2

   1   Cluster	  gc current grant busy 			  544,334	0.0	  12,259.35  22.52ms	33.24
       Cluster	  gc cr multi block grant			  219,204	0.0	   9,094.87  41.49ms	24.66
       User I/O   db file sequential read			1,659,991	0.0	   6,057.32   3.65ms	16.43
       Cluster	  gc cr grant busy				  187,517	0.0	   4,311.08  22.99ms	11.69
       User I/O   db file parallel read 			  132,419	0.0	   1,762.93  13.31ms	 4.78
       Cluster	  gc current grant 2-way			   61,479	0.0	   1,530.47  24.89ms	 4.15
		  DB CPU					      N/A	N/A	   1,130.56		 3.07
       Cluster	  gc current multi block request		   21,573	0.0	     509.97  23.64ms	 1.38
       User I/O   db file scattered read			   96,988	0.0	     429.28   4.43ms	 1.16
       Cluster	  gc current grant read-mostly invalidatio	   58,097	0.0	     355.63   6.12ms	 0.96

   2   User I/O   db file sequential read			2,824,758	0.0	  11,570.44   4.10ms	31.65
       Cluster	  gc current grant busy 			  907,032	0.0	   8,184.18   9.02ms	22.39
       Cluster	  gc cr multi block grant			  421,949	0.0	   6,070.20  14.39ms	16.61
       User I/O   db file parallel read 			  278,499	0.0	   3,439.51  12.35ms	 9.41
		  DB CPU					      N/A	N/A	   2,882.09		 7.88
       Cluster	  gc cr grant busy				  314,055	0.0	   2,545.94   8.11ms	 6.97
       Cluster	  gc current block lost 			    2,274	0.0	   1,232.59 542.04ms	 3.37
       Cluster	  gc current grant 2-way			  145,712	0.0	     773.82   5.31ms	 2.12
       Other	  KJC: Wait for msg sends to complete		    2,845	0.0	     574.63 201.98ms	 1.57
       User I/O   db file scattered read			  104,993	0.0	     536.48   5.11ms	 1.47
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   2,663.32		64.51						       2
       System I/O db file parallel write			  230,183	0.0	   1,012.08   4.40ms	24.51	    4.55ms     3.66ms	  5.44ms     1.25ms    2
       System I/O log file parallel write			   40,820	0.0	     780.64  19.12ms	18.91	   19.29ms    18.56ms	 20.02ms     1.03ms    2
       Other	  LGWR any worker group 			   11,055	0.0	     121.12  10.96ms	 2.93	   11.82ms    10.03ms	 13.61ms     2.53ms    2
       Other	  LGWR worker group ordering			    7,748	0.0	      46.97   6.06ms	 1.14	    6.09ms     6.01ms	  6.17ms   117.14us    2
       Cluster	  gc cr grant busy				    3,250	0.0	      34.24  10.53ms	 0.83	   11.75ms     8.78ms	 14.73ms     4.21ms    2
       Other	  PX Deq: Join ACK				      638	0.0	      19.65  30.79ms	 0.48	   30.68ms    12.11ms	 49.24ms    26.26ms    2
       User I/O   db file sequential read			    7,259	0.0	      17.66   2.43ms	 0.43	    2.30ms     1.60ms	  3.00ms      .99ms    2
       Other	  PX Deq: Signal ACK EXT			      638	0.0	      17.27  27.06ms	 0.42	   26.95ms     8.00ms	 45.89ms    26.79ms    2
       System I/O control file parallel write			      582	0.0	      10.52  18.08ms	 0.25	   18.08ms    12.27ms	 23.90ms     8.22ms    2

   1		  background cpu time				      N/A	N/A	   1,190.52		64.02
       System I/O db file parallel write			   95,249	0.0	     517.86   5.44ms	27.85
       System I/O log file parallel write			   15,757	0.0	     315.40  20.02ms	16.96
       Other	  LGWR any worker group 			    2,854	0.0	      38.85  13.61ms	 2.09
       Other	  LGWR worker group ordering			    2,641	0.0	      16.30   6.17ms	 0.88
       Other	  PX Deq: Join ACK				      321	0.0	      15.81  49.24ms	 0.85
       Other	  PX Deq: Signal ACK EXT			      321	0.0	      14.73  45.89ms	 0.79
       Cluster	  gc cr grant busy				      958	0.0	      14.11  14.73ms	 0.76
       Cluster	  gc cr block 2-way				    1,023	0.0	       8.20   8.01ms	 0.44
       System I/O control file parallel write			      291	0.0	       6.95  23.90ms	 0.37

   2		  background cpu time				      N/A	N/A	   1,472.80		64.91
       System I/O db file parallel write			  134,934	0.0	     494.21   3.66ms	21.78
       System I/O log file parallel write			   25,063	0.0	     465.24  18.56ms	20.50
       Other	  LGWR any worker group 			    8,201	0.0	      82.27  10.03ms	 3.63
       Other	  LGWR worker group ordering			    5,107	0.0	      30.67   6.01ms	 1.35
       Cluster	  gc cr grant busy				    2,292	0.0	      20.13   8.78ms	 0.89
       User I/O   db file sequential read			    4,328	0.0	      12.98   3.00ms	 0.57
       User I/O   Disk file Mirror Read 			      856	0.0	       8.50   9.93ms	 0.37
       Other	  DLM cross inst call completion		    1,221	0.0	       8.50   6.96ms	 0.37
       Other	  IMR slave acknowledgement msg 		    1,888	0.0	       7.00   3.71ms	 0.31
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc current grant busy			 1,451,366	 0.0	   20,443.53  14.09ms	 27.84	    15.77ms	9.02ms	  22.52ms     9.55ms
User I/O   db file sequential read			 4,484,749	 0.0	   17,627.75   3.93ms	 24.01	     3.87ms	3.65ms	   4.10ms   316.13us
Cluster    gc cr multi block grant			   641,153	 0.0	   15,165.08  23.65ms	 20.65	    27.94ms    14.39ms	  41.49ms    19.17ms
Cluster    gc cr grant busy				   501,572	 0.0	    6,857.03  13.67ms	  9.34	    15.55ms	8.11ms	  22.99ms    10.52ms
User I/O   db file parallel read			   410,918	 0.0	    5,202.45  12.66ms	  7.09	    12.83ms    12.35ms	  13.31ms   681.03us
Cluster    gc current grant 2-way			   207,191	 0.0	    2,304.29  11.12ms	  3.14	    15.10ms	5.31ms	  24.89ms    13.85ms
Cluster    gc current block lost			     2,322	 0.0	    1,260.83 542.99ms	  1.72	   565.17ms   542.04ms	 588.30ms    32.71ms
User I/O   db file scattered read			   201,981	 0.0	      965.76   4.78ms	  1.32	     4.77ms	4.43ms	   5.11ms   483.40us
Cluster    gc current grant read-mostly invalidatio	   121,867	 0.0	      758.46   6.22ms	  1.03	     6.22ms	6.12ms	   6.32ms   138.36us
Other	   KJC: Wait for msg sends to complete		     3,187	 0.0	      623.54 195.65ms	  0.85	   172.50ms   143.02ms	 201.98ms    41.69ms
Cluster    gc current multi block request		    21,573	 0.0	      509.97  23.64ms	  0.69	    23.64ms    23.64ms	  23.64ms
Cluster    gc cr block lost				       619	 0.0	      334.48 540.36ms	  0.46	   555.61ms   539.80ms	 571.43ms    22.37ms
Cluster    gc current grant congested			    10,683	 0.0	      244.91  22.93ms	  0.33	    25.39ms    13.34ms	  37.44ms    17.04ms
Cluster    gc cr grant 2-way				    31,112	 0.0	      168.23   5.41ms	  0.23	    10.30ms	2.97ms	  17.63ms    10.37ms
Cluster    gc cr multi block mixed			     1,758	 0.0	       48.08  27.35ms	  0.07	    26.96ms    25.81ms	  28.10ms     1.62ms
Other	   PX Deq: Slave Session Stats			       640	 0.0	       17.96  28.06ms	  0.02	    27.58ms    10.29ms	  44.86ms    24.45ms
Cluster    gc current block busy			       625	 0.0	       14.60  23.36ms	  0.02	    22.10ms	8.82ms	  35.39ms    18.78ms
Cluster    gc cr grant congested			       975	 0.0		7.78   7.98ms	  0.01	    13.00ms	3.89ms	  22.11ms    12.88ms
Cluster    gc cr multi block request				 7	 0.0		7.75 1107.03m	  0.01	  1107.03ms  1107.03ms	1107.03ms
Other	   IPC send completion sync			       641	 0.0		4.96   7.73ms	  0.01	     7.74ms	7.65ms	   7.82ms   121.32us
Cluster    gc remaster						 4	50.0		4.03 1008.39m	  0.01	  1338.80ms   677.99ms	1999.61ms   934.53ms
Other	   reliable message					 1	 0.0		3.90 3899.70m	  0.01	  3899.70ms  3899.70ms	3899.70ms
Other	   latch: gc element				     3,412	 0.0		2.96 867.38us	  0.00	   689.20us   480.29us	 898.12us   295.45us
Other	   latch free					     4,103	 0.0		2.33 567.37us	  0.00	   497.32us   400.65us	 594.00us   136.72us
Cluster    gc current block 2-way			       138	 0.0		1.28   9.28ms	  0.00	     5.76ms	1.17ms	  10.35ms     6.49ms
Other	   gcs drm freeze in enter server mode			 3	 0.0		1.27 422.66ms	  0.00	   401.49ms   338.00ms	 464.99ms    89.80ms
Concurrenc library cache lock					46	 0.0		1.07  23.32ms	  0.00	    13.48ms	2.69ms	  24.26ms    15.25ms
Cluster    gc current retry					 1	 0.0		1.01 1007.65m	  0.00	  1007.65ms  1007.65ms	1007.65ms
Other	   latch: gcs resource hash			     1,917	 0.0		0.99 515.73us	  0.00	   435.27us   324.85us	 545.68us   156.15us
Commit	   log file sync					82	 0.0		0.92  11.25ms	  0.00	    11.50ms	9.46ms	  13.55ms     2.89ms
Other	   enq: PS - contention 			       195	 1.0		0.91   4.68ms	  0.00	     4.57ms	1.40ms	   7.73ms     4.48ms
Concurrenc library cache pin					42	 0.0		0.56  13.28ms	  0.00	     7.50ms	1.12ms	  13.89ms     9.03ms
Other	   ges message buffer allocation			 1	 0.0		0.30 300.42ms	  0.00	   300.42ms   300.42ms	 300.42ms
Applicatio enq: TM - contention 				58	 0.0		0.26   4.44ms	  0.00	     4.44ms	4.44ms	   4.44ms
Concurrenc cursor: pin S wait on X				 4	 0.0		0.25  62.46ms	  0.00	    62.46ms    62.46ms	  62.46ms
Other	   latch: cache buffers lru chain		       685	 0.0		0.22 318.63us	  0.00	   300.19us   264.42us	 335.96us    50.59us
Concurrenc latch: cache buffers chains			       299	 0.0		0.19 638.17us	  0.00	   531.49us   393.41us	 669.57us   195.27us
Other	   latch: object queue header operation 	       243	 0.0		0.19 779.17us	  0.00	   737.19us   686.43us	 787.95us    71.78us
Other	   PX Deq: reap credit				     4,401     100.0		0.14  30.86us	  0.00	    29.80us    23.74us	  35.86us     8.57us
Cluster    gc current block congested				25	 0.0		0.10   4.20ms	  0.00	     4.29ms	3.82ms	   4.77ms   676.51us
Other	   DLM cross inst call completion			60	 0.0		0.10   1.72ms	  0.00	     1.73ms	1.46ms	   2.01ms   391.77us
Other	   latch: redo allocation			       319	 0.0		0.10 311.92us	  0.00	   249.74us   150.05us	 349.42us   140.98us
Other	   lock deadlock retry				     2,322	99.9		0.08  36.56us	  0.00	    33.26us    29.81us	  36.70us     4.87us
Other	   KSV master wait					 4	 0.0		0.06  14.66ms	  0.00	    14.66ms    14.66ms	  14.66ms
Cluster    gc cr block 2-way					20	 0.0		0.05   2.27ms	  0.00	     2.12ms	1.75ms	   2.49ms   518.43us
Other	   enq: XL - fault extent map				 1	 0.0		0.04  40.70ms	  0.00	    40.70ms    40.70ms	  40.70ms
System I/O control file sequential read 		       172	 0.0		0.03 187.03us	  0.00	   276.43us   156.31us	 396.55us   169.87us
User I/O   Disk file Mirror Read				44	 0.0		0.03 719.93us	  0.00	     1.98ms   248.61us	   3.71ms     2.44ms
Other	   enq: TO - contention 				20	 0.0		0.03   1.44ms	  0.00	     1.23ms	 .99ms	   1.47ms   340.71us
Cluster    gc cr block busy					 1	 0.0		0.03  26.57ms	  0.00	    26.57ms    26.57ms	  26.57ms
Other	   enq: WF - contention 				13	 0.0		0.03   1.95ms	  0.00	     1.95ms	1.95ms	   1.95ms
Cluster    gc buffer busy release				 1	 0.0		0.02  20.40ms	  0.00	    20.40ms    20.40ms	  20.40ms
Other	   wait list latch free 				 7	 0.0		0.02   2.68ms	  0.00	     2.68ms	2.68ms	   2.68ms
Other	   PGA memory operation 			       965	 0.0		0.02  16.85us	  0.00	    16.90us    16.50us	  17.30us   564.20ns
Other	   enq: TT - contention 				 2	 0.0		0.01   6.40ms	  0.00	     6.40ms	6.40ms	   6.40ms
Cluster    gc buffer busy acquire				 2	 0.0		0.01   6.14ms	  0.00	     6.14ms	6.14ms	   6.14ms
Cluster    gc cr failure					 3	 0.0		0.01   3.61ms	  0.00	     3.61ms	3.61ms	   3.61ms
Other	   name-service call wait				 8	 0.0		0.01   1.34ms	  0.00	     1.34ms	1.25ms	   1.43ms   125.33us
Concurrenc library cache: mutex X				 2	 0.0		0.01   4.81ms	  0.00	     4.81ms	8.00us	   9.62ms     6.79ms
Applicatio SQL*Net break/reset to client		       126	 0.0		0.01  70.95us	  0.00	    70.95us    70.95us	  70.95us
Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc cr block congested				 2	 0.0		0.01   4.33ms	  0.00	     4.33ms	3.47ms	   5.19ms     1.22ms
Other	   CSS initialization					 2	 0.0		0.01   3.58ms	  0.00	     3.58ms	3.58ms	   3.58ms
User I/O   direct path write					 1	 0.0		0.01   5.73ms	  0.00	     5.73ms	5.73ms	   5.73ms
Other	   enq: WT - contention 				 5	 0.0		0.01   1.11ms	  0.00	     1.11ms	1.11ms	   1.11ms
Other	   ges ipc enter server mode			       556	 0.0		0.00   8.16us	  0.00	     7.86us	6.84us	   8.88us     1.44us
Network    SQL*Net message to client			       393	 0.0		0.00   6.65us	  0.00	     6.95us	6.09us	   7.81us     1.22us
User I/O   Disk file operations I/O				57	 0.0		0.00  43.77us	  0.00	    36.13us    20.00us	  52.26us    22.81us
User I/O   read by other session				 1	 0.0		0.00   2.48ms	  0.00	     2.48ms	2.48ms	   2.48ms
Concurrenc latch: shared pool					13	 0.0		0.00 181.38us	  0.00	   232.16us   158.82us	 305.50us   103.72us
Other	   latch: call allocation				25	 0.0		0.00  86.08us	  0.00	    86.69us    71.38us	 102.00us    21.65us
Concurrenc row cache lock					 3     100.0		0.00 700.00us	  0.00	   700.00us   700.00us	 700.00us
Configurat enq: HW - contention 				 3	 0.0		0.00 616.67us	  0.00	   616.67us   616.67us	 616.67us
Other	   CSS operation: action				 2	 0.0		0.00 881.00us	  0.00	   881.00us   881.00us	 881.00us
Other	   latch: enqueue hash chains				 5	 0.0		0.00 287.20us	  0.00	   236.88us   153.00us	 320.75us   118.62us
Other	   CSS operation: query 				 6	 0.0		0.00 198.17us	  0.00	   198.17us   198.17us	 198.17us
Other	   PX qref latch					52     100.0		0.00  19.56us	  0.00	    16.65us    13.50us	  19.80us     4.45us
Cluster    gc quiesce						 7     100.0		0.00 113.71us	  0.00	   113.71us   113.71us	 113.71us
Other	   latch: messages					 3	 0.0		0.00 259.33us	  0.00	   259.33us   259.33us	 259.33us
Other	   latch: undo global data				 3	 0.0		0.00 123.00us	  0.00	   123.00us   123.00us	 123.00us
Other	   ges enter server mode				41	 0.0		0.00   8.80us	  0.00	     7.76us	5.89us	   9.63us     2.64us
Other	   latch: ges resource hash list			 1	 0.0		0.00 266.00us	  0.00	   266.00us   266.00us	 266.00us
Network    IPC group service call				12	 0.0		0.00   8.92us	  0.00	    10.06us	7.78us	  12.33us     3.22us
Other	   ASM file metadata operation				 2	 0.0		0.00  27.00us	  0.00	    27.00us    27.00us	  27.00us
User I/O   ASM IO for non-blocking poll 			 4	 0.0		0.00  12.75us	  0.00	    12.75us    12.75us	  12.75us
Other	   asynch descriptor resize				 2     100.0		0.00  16.00us	  0.00	    16.00us    16.00us	  16.00us
Other	   ges resource directory to be unfrozen		 4	 0.0		0.00   6.50us	  0.00	     6.50us	5.00us	   8.00us     2.12us
Other	   AWR Flush						 2	 0.0		0.00   5.50us	  0.00	     5.50us	5.50us	   5.50us
Idle	   watchdog main loop				     2,097	 0.0	    6,297.07 3002.89m	  8.58	  3002.90ms  3000.06ms	3005.74ms     4.02ms
Idle	   SQL*Net message from client			       393	 0.0	      630.32 1603.87m	  0.86	  1189.70ms	1.63ms	2377.78ms  1680.19ms
Idle	   PX Deque wait				     5,776	 0.0	      509.43  88.20ms	  0.69	    88.19ms    87.23ms	  89.15ms     1.36ms
Idle	   PX Deq: Execution Msg			     1,158	 0.0	       30.19  26.07ms	  0.04	    26.07ms    17.77ms	  34.36ms    11.73ms
Idle	   PX Deq: Msg Fragment 			     1,002	 0.0		2.00   2.00ms	  0.00	     2.00ms	1.97ms	   2.03ms    41.72us
Idle	   PX Deq Credit: send blkd			       875	 0.0		1.81   2.07ms	  0.00	     2.01ms	1.60ms	   2.43ms   580.93us
Idle	   PX Deq Credit: need buffer				60	 0.0		0.14   2.36ms	  0.00	     1.43ms   319.00us	   2.55ms     1.58ms
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O db file parallel write			   230,183	 0.0	    1,012.08   4.40ms	  0.25	     4.55ms	3.66ms	   5.44ms     1.25ms
System I/O log file parallel write			    40,820	 0.0	      780.64  19.12ms	  0.19	    19.29ms    18.56ms	  20.02ms     1.03ms
Other	   LGWR any worker group			    11,055	 0.0	      121.12  10.96ms	  0.03	    11.82ms    10.03ms	  13.61ms     2.53ms
Other	   LGWR worker group ordering			     7,748	 0.0	       46.97   6.06ms	  0.01	     6.09ms	6.01ms	   6.17ms   117.14us
Cluster    gc cr grant busy				     3,250	 0.0	       34.24  10.53ms	  0.01	    11.75ms	8.78ms	  14.73ms     4.21ms
Other	   PX Deq: Join ACK				       638	 0.0	       19.65  30.79ms	  0.00	    30.68ms    12.11ms	  49.24ms    26.26ms
User I/O   db file sequential read			     7,259	 0.0	       17.66   2.43ms	  0.00	     2.30ms	1.60ms	   3.00ms      .99ms
Other	   PX Deq: Signal ACK EXT			       638	 0.0	       17.27  27.06ms	  0.00	    26.95ms	8.00ms	  45.89ms    26.79ms
System I/O control file parallel write			       582	 0.0	       10.52  18.08ms	  0.00	    18.08ms    12.27ms	  23.90ms     8.22ms
Applicatio enq: RO - fast object reuse			       481	 0.0	       10.29  21.39ms	  0.00	    22.63ms    15.77ms	  29.49ms     9.70ms
Other	   DLM cross inst call completion		     1,679	 0.0		9.56   5.70ms	  0.00	     4.64ms	2.32ms	   6.96ms     3.28ms
User I/O   Disk file Mirror Read			     1,710	 0.0		8.77   5.13ms	  0.00	     5.12ms   315.81us	   9.93ms     6.80ms
Cluster    gc cr block 2-way				     1,199	 0.0		8.46   7.06ms	  0.00	     4.75ms	1.49ms	   8.01ms     4.61ms
Other	   KJC: Wait for msg sends to complete		     4,924	96.7		7.65   1.55ms	  0.00	     2.23ms   406.45us	   4.05ms     2.58ms
Other	   IMR slave acknowledgement msg		     3,778	 0.0		7.43   1.97ms	  0.00	     1.97ms   224.14us	   3.71ms     2.46ms
User I/O   ASM IO for non-blocking poll 		   215,451	 0.0		6.24  28.96us	  0.00	    28.10us    22.94us	  33.27us     7.31us
Other	   reliable message				       330	 0.0		5.11  15.47ms	  0.00	    15.28ms	4.42ms	  26.13ms    15.35ms
Cluster    gc current block lost				 8	 0.0		4.68 584.60ms	  0.00	   584.60ms   584.60ms	 584.60ms
Concurrenc library cache lock				       474	 3.6		4.43   9.34ms	  0.00	    14.56ms	2.20ms	  26.91ms    17.47ms
Other	   ASM file metadata operation			     5,673	 0.0		4.17 735.37us	  0.00	   738.85us   662.70us	 814.99us   107.69us
Other	   LGWR all worker groups			       183	 0.0		4.13  22.58ms	  0.00	    24.41ms    19.70ms	  29.11ms     6.65ms
Other	   KSV master wait				     2,193	44.1		3.93   1.79ms	  0.00	     1.79ms	1.61ms	   1.98ms   263.55us
Cluster    gc cr disk read				       142	 0.0		3.44  24.25ms	  0.00	    19.62ms	3.18ms	  36.07ms    23.25ms
Cluster    gc current block busy			       403	 0.0		3.01   7.46ms	  0.00	    10.15ms	5.69ms	  14.62ms     6.31ms
Cluster    gc current grant busy			       465	 0.0		2.99   6.42ms	  0.00	    11.11ms	4.36ms	  17.86ms     9.55ms
Other	   oracle thread bootstrap			       103	 0.0		2.81  27.27ms	  0.00	    27.22ms    22.14ms	  32.31ms     7.19ms
Other	   Sync ASM rebalance				       126	 0.0		2.72  21.61ms	  0.00	    21.71ms    21.00ms	  22.41ms      .99ms
Other	   PX Deq: reap credit				    94,130     100.0		2.69  28.57us	  0.00	    28.63us    24.68us	  32.57us     5.58us
System I/O control file sequential read 		     7,312	 0.0		2.50 342.19us	  0.00	   343.93us   232.83us	 455.02us   157.11us
Applicatio enq: TM - contention 			       107	 0.0		2.38  22.24ms	  0.00	    23.12ms    16.82ms	  29.42ms     8.91ms
Other	   enq: WF - contention 				14	 0.0		2.02 144.12ms	  0.00	    78.23ms	1.35ms	 155.10ms   108.71ms
Concurrenc library cache pin				       475	 0.0		1.93   4.07ms	  0.00	     5.83ms	1.67ms	   9.99ms     5.88ms
Cluster    gc cr block lost					 3	 0.0		1.91 635.49ms	  0.00	   604.35ms   510.91ms	 697.78ms   132.14ms
User I/O   direct path write temp			       152	 0.0		1.68  11.03ms	  0.00	    11.90ms	5.28ms	  18.51ms     9.36ms
User I/O   direct path write					39	 0.0		1.37  35.07ms	  0.00	    35.43ms    30.78ms	  40.08ms     6.57ms
Other	   DFS lock handle				       434     100.0		1.36   3.14ms	  0.00	     3.08ms   728.35us	   5.43ms     3.33ms
Other	   latch: gcs resource hash			     2,640	 0.0		1.25 472.45us	  0.00	   410.81us   302.60us	 519.01us   153.02us
Other	   IPC send completion sync			     1,489	84.6		1.19 800.08us	  0.00	   788.61us   105.94us	   1.47ms      .97ms
Cluster    gc cr block busy					52	 0.0		1.17  22.48ms	  0.00	    17.16ms    11.14ms	  23.17ms     8.51ms
Other	   PX Deq: Slave Session Stats			       638	 0.0		1.13   1.78ms	  0.00	     1.77ms   223.26us	   3.31ms     2.18ms
Other	   gcs log flush sync				     2,621	 0.0		1.12 427.94us	  0.00	   397.94us   335.76us	 460.11us    87.93us
Cluster    gc cr grant 2-way					47	 0.0		1.09  23.22ms	  0.00	    12.37ms	1.04ms	  23.70ms    16.03ms
System I/O log file sequential read			       885	 0.0		1.03   1.16ms	  0.00	     1.18ms   883.94us	   1.48ms   423.24us
Other	   enq: CR - block range reuse ckpt			19	 0.0		0.99  52.16ms	  0.00	    45.69ms	4.76ms	  86.63ms    57.89ms
Other	   enq: PS - contention 			       484	29.1		0.89   1.84ms	  0.00	     1.79ms	1.30ms	   2.28ms   690.69us
Other	   latch free					     2,424	 0.0		0.85 351.91us	  0.00	   334.97us   276.65us	 393.29us    82.48us
Other	   gcs remastering wait for read latch			14	 0.0		0.71  50.91ms	  0.00	    50.91ms    46.79ms	  55.02ms     5.82ms
System I/O db file async I/O submit			    73,028	 0.0		0.62   8.45us	  0.00	     8.20us	7.25us	   9.15us     1.34us
Cluster    gc cr multi block mixed				24	 0.0		0.60  24.91ms	  0.00	    13.63ms	1.32ms	  25.93ms    17.40ms
Other	   ges lms sync during dynamic remastering		10	60.0		0.56  55.56ms	  0.00	    55.56ms    48.69ms	  62.42ms     9.70ms
User I/O   db file scattered read			       201	 0.0		0.53   2.64ms	  0.00	     2.39ms	1.30ms	   3.47ms     1.54ms
Concurrenc row cache lock					47     100.0		0.44   9.29ms	  0.00	     9.32ms	9.02ms	   9.63ms   431.62us
Other	   CGS wait for IPC msg 			    14,717     100.0		0.43  29.48us	  0.00	    29.64us    23.88us	  35.39us     8.14us
Cluster    gc current grant 2-way				90	 0.0		0.42   4.67ms	  0.00	     3.83ms	2.95ms	   4.71ms     1.25ms
Other	   AQ: RAC AQ Network				    12,576     100.0		0.38  29.89us	  0.00	    29.90us    26.11us	  33.68us     5.36us
Other	   latch: gc element				       447	 0.0		0.37 817.88us	  0.00	   793.80us   760.25us	 827.34us    47.44us
Other	   latch: cache buffers lru chain		       797	 0.0		0.34 431.62us	  0.00	   392.69us   336.99us	 448.39us    78.77us
Other	   ges inquiry response 			       124	 0.0		0.31   2.48ms	  0.00	     2.60ms	1.16ms	   4.04ms     2.04ms
Other	   ges message buffer allocation			 1	 0.0		0.30 299.71ms	  0.00	   299.71ms   299.71ms	 299.71ms
User I/O   Disk file operations I/O			     1,032	 0.0		0.25 237.57us	  0.00	   237.70us   224.71us	 250.68us    18.37us
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc cr multi block grant				66	 0.0		0.24   3.58ms	  0.00	     3.36ms	2.99ms	   3.74ms   527.63us
Other	   os thread creation				       103	 0.0		0.22   2.14ms	  0.00	     2.14ms	1.62ms	   2.65ms   729.46us
Other	   enq: TO - contention 				49	 0.0		0.21   4.35ms	  0.00	     6.37ms	1.14ms	  11.60ms     7.40ms
Commit	   log file sync					 5	 0.0		0.18  35.07ms	  0.00	    24.42ms	6.66ms	  42.17ms    25.11ms
Other	   LGWR wait for redo copy			       228	 0.0		0.14 633.06us	  0.00	   563.75us   483.13us	 644.37us   114.02us
Other	   enq: CF - contention 				79	59.5		0.13   1.70ms	  0.00	     1.65ms	1.47ms	   1.84ms   259.44us
Other	   CSS initialization					16	 0.0		0.11   6.89ms	  0.00	     6.98ms	6.62ms	   7.34ms   510.55us
Other	   ksxr poll remote instances			     2,869     100.0		0.11  37.36us	  0.00	    37.57us    29.39us	  45.75us    11.57us
User I/O   db file parallel read				 9	 0.0		0.11  11.69ms	  0.00	     6.90ms   754.00us	  13.05ms     8.70ms
Cluster    gc cr block congested				27	 0.0		0.10   3.86ms	  0.00	     3.61ms	3.31ms	   3.91ms   423.43us
Administra JS kgl get object wait				 1	 0.0		0.10  99.70ms	  0.00	    99.70ms    99.70ms	  99.70ms
Cluster    gc current block 2-way				62	 0.0		0.09   1.39ms	  0.00	     1.47ms	1.36ms	   1.58ms   156.37us
Cluster    gc current multi block request			21	 0.0		0.08   3.91ms	  0.00	     3.91ms	3.91ms	   3.91ms
Other	   latch: redo allocation			       167	 0.0		0.08 454.91us	  0.00	   349.93us   216.11us	 483.76us   189.26us
Network    IPC group service call			     1,041	 0.0		0.08  72.92us	  0.00	    72.81us    59.25us	  86.36us    19.17us
Other	   PGA memory operation 			     2,506	 0.0		0.08  30.17us	  0.00	    30.63us    25.34us	  35.92us     7.48us
Other	   CSS operation: data query				38	 0.0		0.07   1.95ms	  0.00	     1.95ms	1.24ms	   2.67ms     1.01ms
Other	   CSS operation: data update				42	 0.0		0.06   1.51ms	  0.00	     1.51ms	1.22ms	   1.79ms   405.54us
Other	   name-service call wait				 5	 0.0		0.06  11.29ms	  0.00	    13.75ms	1.46ms	  26.04ms    17.38ms
Concurrenc libcache interrupt action by LCK		     6,197	 0.0		0.05   8.39us	  0.00	     8.72us	6.08us	  11.37us     3.74us
Cluster    gc current grant congested				 7	 0.0		0.05   7.27ms	  0.00	     7.27ms	7.27ms	   7.27ms
Other	   CSS operation: action				18	 0.0		0.04   2.25ms	  0.00	     2.84ms	1.07ms	   4.60ms     2.50ms
Other	   kjctssqmg: quick message send wait		       115     100.0		0.04 335.52us	  0.00	   340.20us   308.58us	 371.82us    44.72us
User I/O   direct path read					29	 0.0		0.04   1.24ms	  0.00	     1.02ms   593.14us	   1.45ms   604.41us
Concurrenc latch: cache buffers chains				40	 0.0		0.03 821.65us	  0.00	   702.79us   533.00us	 872.59us   240.13us
Cluster    gc current block congested				 6	 0.0		0.02   3.89ms	  0.00	     4.23ms	3.72ms	   4.74ms   723.37us
Cluster    gc buffer busy acquire				12	 0.0		0.02   1.92ms	  0.00	     1.92ms	1.92ms	   1.92ms
Other	   enq: TQ - TM contention				 8	 0.0		0.02   2.60ms	  0.00	     2.60ms	2.60ms	   2.60ms
Configurat latch: redo writing					52	 0.0		0.02 388.98us	  0.00	   373.11us   338.71us	 407.50us    48.64us
Other	   enq: DW - contention 				 9     100.0		0.02   2.24ms	  0.00	     2.32ms	1.59ms	   3.05ms     1.03ms
Other	   enq: WT - contention 				12	 0.0		0.02   1.65ms	  0.00	     1.65ms	1.65ms	   1.65ms
Other	   enq: FB - contention 				10	 0.0		0.02   1.71ms	  0.00	     1.84ms	1.21ms	   2.46ms   882.53us
Other	   enq: JS - job run lock - synchronize 		 6     100.0		0.02   2.81ms	  0.00	     2.49ms	1.53ms	   3.45ms     1.36ms
Other	   latch: checkpoint queue latch			53	 0.0		0.01 278.17us	  0.00	   198.42us   104.50us	 292.35us   132.83us
Configurat enq: HW - contention 				 7	 0.0		0.01   1.99ms	  0.00	     2.03ms	1.70ms	   2.37ms   468.81us
Other	   CSS operation: query 				48	 0.0		0.01 285.04us	  0.00	   304.49us   226.70us	 382.28us   110.01us
Other	   latch: object queue header operation 		18	 0.0		0.01 655.94us	  0.00	   457.38us   234.00us	 680.76us   315.91us
Other	   enq: TT - contention 				 7	57.1		0.01   1.67ms	  0.00	     1.67ms	1.67ms	   1.67ms
Other	   enq: CO - master slave det				11     100.0		0.01   1.01ms	  0.00	     1.01ms	1.01ms	   1.01ms
Other	   ges enter server mode			     1,764	 0.0		0.01   5.87us	  0.00	     6.58us	5.77us	   7.39us     1.15us
Other	   latch: messages					51	 0.0		0.01 200.82us	  0.00	   197.02us   189.83us	 204.21us    10.16us
Other	   enq: TX - contention 				 2     100.0		0.01   3.45ms	  0.00	     3.45ms	3.45ms	   3.45ms
Other	   ges2 LMON to wake up LMD - mrcvr			21	 0.0		0.00 235.86us	  0.00	   235.86us   235.86us	 235.86us
Applicatio enq: PW - flush prewarm buffers			 3     100.0		0.00   1.30ms	  0.00	     1.45ms	1.02ms	   1.87ms   603.16us
Other	   wait list latch free 				 1	 0.0		0.00   3.24ms	  0.00	     3.24ms	3.24ms	   3.24ms
Other	   PX qref latch				       169     100.0		0.00  18.80us	  0.00	    15.09us    10.69us	  19.48us     6.21us
Other	   latch: ges resource hash list			13	 0.0		0.00 224.38us	  0.00	   251.84us   212.18us	 291.50us    56.09us
Other	   enq: RA - RT ADDM flood control			 3     100.0		0.00 947.33us	  0.00	   901.25us   763.00us	   1.04ms   195.52us
Other	   enq: TD - KTF dump entries				 2	 0.0		0.00   1.38ms	  0.00	     1.38ms   752.00us	   2.02ms   894.49us
Other	   enq: TA - contention 				 3	 0.0		0.00 584.33us	  0.00	   584.50us   584.00us	 585.00us   707.11ns
User I/O   read by other session				 1	 0.0		0.00   1.65ms	  0.00	     1.65ms	1.65ms	   1.65ms
Other	   asynch descriptor resize			       160     100.0		0.00   9.26us	  0.00	     9.27us	8.95us	   9.58us   446.65ns
Concurrenc latch: shared pool					11	 0.0		0.00 129.82us	  0.00	   116.95us    69.75us	 164.14us    66.75us
Other	   latch: kjci process context latch			 8	 0.0		0.00 121.25us	  0.00	   121.25us   121.25us	 121.25us
Other	   ges ipc enter server mode			       142	 0.0		0.00   6.06us	  0.00	     7.05us	5.74us	   8.35us     1.84us
Network    SQL*Net message to client			       131	 0.0		0.00   6.26us	  0.00	     6.25us	5.89us	   6.61us   510.05ns
Other	   enq: SM -  contention				 2	 0.0		0.00 348.00us	  0.00	   348.00us   348.00us	 348.00us
Other	   AQ Background Master: slave start			 3	 0.0		0.00 219.67us	  0.00	   201.25us   146.00us	 256.50us    78.14us
Other	   GCR CSS group update 				38	 0.0		0.00  15.00us	  0.00	    15.00us    12.74us	  17.26us     3.20us
Concurrenc latch: MGA shared context latch			 2	 0.0		0.00 271.00us	  0.00	   271.00us   271.00us	 271.00us
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   GCR CSS group query					38	 0.0		0.00  13.61us	  0.00	    13.61us    13.32us	  13.89us   409.38ns
Other	   latch: call allocation				 1	 0.0		0.00 233.00us	  0.00	   233.00us   233.00us	 233.00us
Other	   latch: active service list				 1	 0.0		0.00 207.00us	  0.00	   207.00us   207.00us	 207.00us
Concurrenc latch: MGA shared context root latch 		 2	 0.0		0.00  75.50us	  0.00	    75.50us    75.50us	  75.50us
Other	   ges resource directory to be unfrozen		23	 0.0		0.00   6.39us	  0.00	     6.10us	4.78us	   7.43us     1.87us
Other	   latch: enqueue hash chains				 1	 0.0		0.00 102.00us	  0.00	   102.00us   102.00us	 102.00us
Other	   lock deadlock retry					 6     100.0		0.00  13.50us	  0.00	    13.50us    13.50us	  13.50us
Concurrenc latch: MGA heap latch				 4	 0.0		0.00  10.50us	  0.00	    10.33us    10.00us	  10.67us   471.40ns
Concurrenc row cache mutex					 3	 0.0		0.00  10.67us	  0.00	    10.67us    10.67us	  10.67us
Other	   buffer deadlock					 2     100.0		0.00  13.50us	  0.00	    13.50us    13.50us	  13.50us
Other	   undo_retention publish retry 			 3	 0.0		0.00   8.33us	  0.00	     8.75us	7.50us	  10.00us     1.77us
Other	   AWR Flush						 2	 0.0		0.00   4.00us	  0.00	     4.00us	4.00us	   4.00us
Other	   ASM background starting				 1	 0.0		0.00   6.00us	  0.00	     6.00us	6.00us	   6.00us
Idle	   PX Idle Wait 				       643	 0.0	   82,563.19 128.40 s	 20.00	   128.49 s   125.19 s	 131.79 s  4666.47ms
Idle	   rdbms ipc message				   153,902	16.2	   31,019.24 201.55ms	  7.51	   205.13ms   177.56ms	 232.69ms    38.98ms
Idle	   Space Manager: slave idle wait		     5,635	 0.0	   21,307.03 3781.19m	  5.16	  3780.82ms  3772.76ms	3788.88ms    11.39ms
Idle	   class slave wait				    15,938	77.4	   14,739.01 924.77ms	  3.57	   924.98ms   820.88ms	1029.08ms   147.22ms
Idle	   wait for unread message on broadcast cha	     1,932	99.9	    3,781.27 1957.18m	  0.92	  1957.18ms  1957.17ms	1957.18ms     5.57us
Idle	   LMS CR slave timer				   375,988	 0.0	    3,775.83  10.04ms	  0.91	    10.04ms    10.01ms	  10.07ms    42.60us
Idle	   gcs yield cpu				   132,700	99.6	    3,734.40  28.14ms	  0.90	    28.14ms    27.83ms	  28.46ms   444.48us
Idle	   pmon timer					       840     100.0	    2,519.96 2999.95m	  0.61	  2999.95ms  2999.92ms	2999.99ms    49.34us
Idle	   ges remote message				    44,890	 0.0	    2,517.79  56.09ms	  0.61	    56.09ms    56.06ms	  56.11ms    36.72us
Idle	   GCR sleep					     8,382	 0.0	    2,517.35 300.33ms	  0.61	   300.33ms   300.20ms	 300.46ms   189.17us
Idle	   DIAG idle wait				    17,198	80.1	    2,514.34 146.20ms	  0.61	   146.21ms   145.33ms	 147.09ms     1.25ms
Idle	   gcs remote message				 5,551,432	 0.0	    2,476.72 446.14us	  0.60	   451.42us   410.76us	 492.08us    57.50us
Idle	   Streams AQ: qmn slave idle wait			59	25.4	    2,440.01  41.36 s	  0.59	    41.54 s    39.37 s	  43.70 s  3061.67ms
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		23	95.7	    1,860.25  80.88 s	  0.45	    78.81 s    62.97 s	  94.66 s    22.41 s
Idle	   LGWR worker group idle			    33,659	 0.0	    1,681.43  49.95ms	  0.41	    52.67ms    37.92ms	  67.41ms    20.86ms
Idle	   dispatcher timer					22     100.0	    1,320.13  60.01 s	  0.32	    60.01 s    60.01 s	  60.01 s    78.68us
Idle	   AQPC idle						43     100.0	    1,290.03  30.00 s	  0.31	    30.00 s    30.00 s	  30.00 s    30.24us
Idle	   ASM background timer 			     4,266	 0.0	    1,260.84 295.55ms	  0.31	   295.78ms   287.61ms	 303.96ms    11.57ms
Idle	   PING 					     1,170	18.5	    1,260.54 1077.39m	  0.31	  1080.83ms  1019.88ms	1141.78ms    86.20ms
Idle	   ASM cluster membership changes		       720	87.8	    1,260.32 1750.45m	  0.31	  1750.45ms  1750.40ms	1750.50ms    70.58us
Idle	   heartbeat redo informer			     1,260	 0.0	    1,260.23 1000.18m	  0.31	  1000.18ms  1000.15ms	1000.22ms    50.77us
Idle	   shared server idle wait				 0	 N/A	    1,260.23		  0.31
Idle	   VKRM Idle						 0	 N/A	    1,260.11		  0.31
Idle	   OFS idle					       420     100.0	    1,260.02 3000.06m	  0.31	  3000.06ms  3000.02ms	3000.10ms    54.05us
Idle	   pman timer					       420     100.0	    1,259.90 2999.75m	  0.31	  2999.75ms  2999.71ms	2999.80ms    65.77us
Idle	   lreg timer					       419     100.0	    1,258.08 3002.59m	  0.30	  3002.59ms  3002.54ms	3002.64ms    65.88us
Idle	   Streams AQ: waiting for time management		 2     100.0	    1,258.01 629.00 s	  0.30	   314.00 s   314.00 s	 314.00 s
Idle	   SCM slave idle				    12,676	 0.0	    1,255.33  99.03ms	  0.30	    99.03ms    98.85ms	  99.22ms   260.99us
Idle	   PX Deq Credit: send blkd			     3,912	 0.0	    1,236.64 316.11ms	  0.30	   316.11ms   313.72ms	 318.49ms     3.37ms
Idle	   Streams AQ: qmn coordinator idle wait	       100	 0.0	    1,232.04  12.32 s	  0.30	    12.34 s    11.85 s	  12.83 s   698.00ms
Idle	   Data Guard: Gap Manager				20	 0.0	    1,200.01  60.00 s	  0.29	    60.00 s    60.00 s	  60.00 s   389.33us
Idle	   smon timer						 4     100.0	    1,200.00 300.00 s	  0.29	   300.00 s   300.00 s	 300.00 s   141.07us
Idle	   Data Guard: Timer					 2	 0.0	    1,200.00 600.00 s	  0.29	   600.00 s   600.00 s	 600.00 s   614.48us
Idle	   jobq slave wait				       563	97.9	      279.08 495.70ms	  0.07	   495.70ms   495.28ms	 496.11ms   587.71us
Idle	   Streams AQ: load balancer idle			 5     100.0	      135.33  27.07 s	  0.03	    27.58 s    25.00 s	  30.16 s  3651.48ms
Idle	   PX Deq: Parse Reply				       386	 0.0	       10.96  28.40ms	  0.00	    28.02ms    15.74ms	  40.31ms    17.38ms
Idle	   PX Deq: Execute Reply			     1,418	 0.0		1.92   1.35ms	  0.00	     1.81ms	1.06ms	   2.55ms     1.05ms
Idle	   PX Deq Credit: need buffer				 9	 0.0		0.15  17.11ms	  0.00	    16.86ms    14.60ms	  19.11ms     3.19ms
Idle	   SQL*Net message from client			       132	 0.0		0.09 692.24us	  0.00	   703.66us   326.99us	   1.08ms   532.69us
Idle	   RMA: IPC0 completion sync			     1,363	 0.0		0.03  20.68us	  0.00	    20.68us    18.48us	  22.89us     3.12us
Idle	   heartbeat monitor sleep				45	 0.0		0.00   5.84us	  0.00	     5.76us	5.67us	   5.86us   134.69ns
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ Background Master: sla      3									       66.7	33.3
AQ: RAC AQ Network	   12.4K					 0.0(1)     88.7      6.0      3.3	1.2	 0.4	  0.2	   0.1
ASM IO for non-blocking p 212.9K				   0.2	   64.8     21.4      6.2      3.8	2.3	 0.9	  0.3	   0.1	0.0(59)  0.0(17)   0.0(1)
ASM background starting        1				 100.0
ASM file metadata operati   5610			  0.1	  26.8	    1.1     29.7     14.7      4.6	6.9	 4.5	  0.7	   1.1	    3.2      4.8      1.3      0.3	0.2   0.0(1)
AWR Flush		       4				 100.0
CGS wait for IPC msg	   14.6K					   11.9     77.4      5.3      3.3	1.3	 0.5	  0.2	   0.1	 0.0(3)   0.0(2)
CSS initialization	      18					   22.2     27.8								     5.6     33.3     11.1
CSS operation: action	      20					    5.0 						 35.0	  40.0	   10.0      5.0      5.0
CSS operation: data query     36											13.9	 22.2	  36.1	   22.2      5.6
CSS operation: data updat     42												 40.5	  38.1	   19.0      2.4
CSS operation: query	      54				  70.4	   11.1 	      1.9					  14.8	    1.9
DFS lock handle 	     434								       0.2	0.5	27.6	 38.9	  21.2	    8.8      1.8      0.5				  0.2		    0.2
DLM cross inst call compl   1734					    0.2      1.5      0.3      0.1	0.3	 3.6	 47.4	  34.7	    9.1      2.1      0.1			 0.3	  0.1			     0.2
Disk file Mirror Read	    1737								       0.4     36.4	 9.3	  5.8	  10.3	   13.0     13.5      6.5      2.9	0.8	 0.4	  0.6	   0.1
Disk file operations I/O    1059				   0.8	    7.7     12.7     15.4      5.7     34.7	16.8	  4.7	   1.3						0.1
GCR CSS group query	      36					   80.6     19.4
GCR CSS group update	      38					   94.7      2.6	       2.6
IMR slave acknowledgement   3738					   11.0     12.1      3.8     18.7     15.5	18.9	  4.4	   3.7	    3.2      4.6      2.2      1.1	0.4	 0.1	  0.2	0.0(1)
IPC group service call	    1043				   3.5	    4.9     17.8     36.0     31.4	4.2	 1.5	  0.4	   0.2	    0.1
IPC send completion sync    2107						    54.7      3.2      2.3	5.0	 8.6	 12.1	   8.6	    4.3      0.7      0.2   0.0(1)		       0.0(1)		    0.2
JS kgl get object wait	       1																			       100.0
KJC: Wait for msg sends t   8012					   20.7     10.7      9.2     14.8	6.4	 6.4	  4.1	   2.5	    0.9      0.3   0.0(2)					  23.0	    0.8   0.0(2)
KSV master wait 	    2166					   13.7     22.2      4.8      3.3     20.3	 4.4	  1.8	   2.2	    9.2     13.3      3.7      0.7	0.2   0.0(1)
LGWR all worker groups	     189														    1.6      7.4     48.7     27.5     12.2	 1.6	  0.5	   0.5
LGWR any worker group	   10.8K					    0.1 	      0.1      0.5	1.0	 1.9	  3.9	   7.7	   22.5     22.8     24.5     12.0	1.7	 0.3	  0.9	   0.1	 0.0(3)
LGWR wait for redo copy      224				   1.3	    3.6      1.3      3.6     16.5     19.6	19.6	 13.8	  14.3	    5.4      0.9
LGWR worker group orderin   7604				   0.6	    0.6      0.4      1.3      2.4	1.8	 1.9	  3.0	   6.2	   43.4     24.0      7.8      5.6	0.5   0.0(2)	  0.3	   0.1	 0.0(1)
PGA memory operation	    3429				  26.9	   52.4     11.8      2.6      1.4	2.8	 1.8	  0.2	   0.1	 0.0(1)
PX Deq: Join ACK	     612				   4.9	    0.8 	      0.3      3.6	2.8	 3.8	 38.4	  14.4	   16.3      9.0      2.9      0.5			  0.2	   1.1	    0.7      0.3
PX Deq: Signal ACK EXT	     614				   4.2	    3.1     41.4      6.5     13.0     11.4	 5.7	  3.3	   1.3	    0.7      0.7      0.2      1.3	2.6	 2.0	  1.1	   0.2	    0.7      0.8
PX Deq: Slave Session Sta   1233				   6.5	   10.5      6.8      3.3     12.3     17.6	13.0	 11.9	   9.3	    3.2      0.9      0.3      0.6	1.2	 0.9	  0.6	   0.1	    0.4      0.4
PX Deq: reap credit	   97.3K					    5.5     85.0      4.9      2.9	1.1	 0.4	  0.2	   0.1	0.0(18)  0.0(10)
PX qref latch		     220					   66.4     26.4      3.2      3.2	0.9
SQL*Net break/reset to cl    124				  41.1	    6.5 	      1.6     41.9	8.1			   0.8
SQL*Net message to client    522			  0.2	  91.2	    6.1      0.6      1.7      0.2
Sync ASM rebalance	     126					   38.1      3.2      1.6      1.6	4.0	 4.0	  9.5	   4.0	    0.8 	      5.6      4.0	7.9	14.3	  1.6
asynch descriptor resize     161				  65.8	   28.6      1.9      2.5      1.2
buffer deadlock 	       1					  100.0
control file parallel wri    579														   13.8     57.5     18.3      3.6	1.6	 0.7	  3.5	   1.0
control file sequential r   7417					   12.4      9.0      1.1      2.3     37.9	23.7	  9.0	   3.2	    0.8      0.3      0.1      0.1   0.0(1)
cursor: pin S wait on X        4																		       50.0	50.0
db file async I/O submit   72.6K		      0.0(12)	  93.9	    2.4      0.9      1.5      0.7	0.4	 0.1  0.0(36)  0.0(16)	 0.0(3)   0.0(1)
db file parallel read	  407.4K									    0.0(25)	 1.2	  1.8	   1.3	   16.1     36.1     19.1     14.8	9.3	 0.2  0.0(53)	0.0(6)
db file parallel write	  227.8K					    0.1      0.4      4.9      5.5	7.8	11.0	 15.3	  16.8	   21.6     11.4      3.0      0.9	0.2	 0.3	  0.9  0.0(55)	0.0(20)
db file scattered read	  199.8K								   0.0(13)	1.0	 0.9	  1.0	   0.2	   44.4     48.3      2.3      1.4	0.5  0.0(10)   0.0(6)
db file sequential read     4.4M								  0.0(154)	0.3	 8.8	  3.9	   1.5	   61.8     19.8      2.1      1.4	0.4 0.0(205) 0.0(197)	0.0(1)
direct path read	      29					    6.9      6.9     13.8     17.2     20.7	 3.4	  3.4	   3.4	   17.2      3.4      3.4
direct path write	      40												  5.0		   27.5     20.0     32.5      7.5			  2.5	   5.0
direct path write temp	     152														   41.4     45.4      8.6      1.3	2.0		  0.7		    0.7
enq: CF - contention	      79										1.3	 1.3	 35.4	  35.4	   21.5      2.5      2.5
enq: CO - master slave de     11												 63.6	  36.4
enq: CR - block range reu     19							      5.3				 21.1	  21.1	   26.3      5.3	       5.3			  5.3	  10.5
enq: DW - contention	       9												 11.1	  55.6	   22.2     11.1
enq: FB - contention	      10											20.0	 40.0	  10.0	   20.0     10.0
enq: HW - contention	      10											10.0	 50.0	  40.0
enq: JS - job run lock -       6												 16.7	  50.0	   16.7     16.7
enq: PS - contention	     663					    0.3      0.2      0.5      4.5     10.6	10.4	 28.8	  26.7	   14.0      3.0      0.5				  0.5	   0.2
enq: PW - flush prewarm b      3												 33.3	  66.7
enq: RA - RT ADDM flood c      3												 66.7	  33.3
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
enq: RO - fast object reu    481											11.6	 28.1	  21.4	   13.9      9.4      6.0      3.1	0.8	 1.2	  2.1	   1.7	    0.4      0.2
enq: SM -  contention	       2									       50.0		 50.0
enq: TA - contention	       3												100.0
enq: TD - KTF dump entrie      2												 50.0	  50.0
enq: TM - contention	     124											 5.6	 27.4	  31.5	   18.5      9.7      2.4			 0.8	  1.6	   1.6	    0.8
enq: TO - contention	      69										1.4	11.6	 40.6	  29.0	   15.9 						  1.4
enq: TQ - TM contention        8												 37.5	  25.0	   12.5     25.0
enq: TT - contention	       8											25.0		  50.0	   12.5     12.5
enq: TX - contention	       2														   50.0     50.0
enq: TX - index contentio      2												100.0
enq: WF - contention	      27											22.2	 25.9	  22.2	   18.5      3.7      3.7							     3.7
enq: WT - contention	      17											11.8	 41.2	  29.4	    5.9     11.8
enq: XL - fault extent ma      1																		      100.0
gc buffer busy acquire	      14											 7.1	 35.7	  21.4	   14.3     14.3      7.1
gc buffer busy release	       3																	     100.0
gc cr block 2-way	    1232							      0.2      0.1	0.2	34.5	 28.2	  20.8	   12.4      2.8      0.2						    0.6
gc cr block busy	      60													   1.7	    6.7     15.0     41.7     18.3     15.0		  1.7
gc cr block congested	      28													   3.6	   53.6     42.9
gc cr block lost	     621																						  44.3	   55.7
gc cr disk read 	     134											 2.2	 21.6	  25.4	   23.1     19.4      5.2      0.7					    2.2
gc cr failure		       3													  33.3	   33.3     33.3
gc cr grant 2-way	   31.2K							      0.1      0.4	0.8	16.0	 30.4	  30.3	   17.4      3.8      0.4   0.0(8)	      0.0(1)			    0.4   0.0(1)
gc cr grant busy	  499.1K					 0.0(2)  0.0(52)  0.0(29)  0.0(65) 0.0(191)	 2.7	 14.9	  27.6	   30.9     16.6      4.2      0.7	0.2	 1.3  0.0(21)	0.0(7)	    0.8      0.1
gc cr grant congested	     975													   6.8	   59.9     30.7      2.3						    0.4
gc cr multi block grant   633.1K						 0.0(26)  0.0(15)  0.0(30)  0.0(81)	 0.7	  8.5	  16.4	   32.0     27.6      8.6      1.4	0.3	 2.8 0.0(129)  0.0(28)	    1.3      0.2
gc cr multi block mixed     1768								       0.2	0.1	 4.8	 24.0	  26.5	   24.5     13.0      2.5      0.5		 0.4	  0.1	   0.5	    3.2
gc cr multi block request      7																							   71.4     28.6
gc current block 2-way	     199											 8.0	 28.1	  32.2	   24.1      6.0      1.0						    0.5
gc current block busy	    1020							      0.1		0.6	12.8	 27.6	  28.3	   20.6      6.0      1.6      0.7	0.5				    1.0      0.2
gc current block congeste     31													   9.7	   51.6     32.3      6.5
gc current block lost	    2328																						  44.3	   55.6   0.0(1)
gc current grant 2-way	  206.6K							      0.1      0.2	0.5	10.4	 17.7	  21.3	   22.2     17.1      7.4      1.3	0.2	 0.9 0.0(102)	0.0(2)	    0.6      0.1
gc current grant busy	    1.4M					0.0(13) 0.0(171)  0.0(85) 0.0(218) 0.0(639)	 2.5	 13.5	  25.8	   31.2     18.1      4.9      0.8	0.3	 2.0 0.0(155)  0.0(13)	    0.8      0.1
gc current grant congeste  10.6K								    0.0(1)	      0.0(1)   0.0(1)	   2.8	   22.2     34.0     27.6      6.3	0.9	 5.0	  0.2	0.0(1)	    0.7      0.2
gc current grant read-mos   121K						  0.0(6)   0.0(3)   0.0(6)  0.0(17)	 0.2	  8.0	  25.3	   33.6     22.5      6.7      1.1	0.3	 2.1  0.0(32)	0.0(3)	0.0(34)   0.0(4)
gc current multi block re   9655								    0.0(1)   0.0(1)	 0.1	  6.0	  19.2	   35.3     27.5      8.3      0.9	0.1	 0.5			    1.9      0.2
gc current retry	       1																							  100.0
gc current split	       1										       100.0
gc index operation	       1																		      100.0
gc quiesce		       7								      71.4     28.6
gc remaster		       4						    25.0											       25.0					    50.0
gcs drm freeze in enter s      3																						 100.0
gcs log flush sync	    2151					    2.2      3.3     14.5     17.3     18.0	18.6	 14.3	   7.3	    2.8      1.3      0.3      0.1
gcs remastering wait for      14								       7.1     21.4	 7.1		   7.1			      7.1			50.0
ges enter server mode	    1805			  1.1	  96.0	    0.7      0.5      1.1      0.5	0.2
ges inquiry response	     124											23.4	 41.9	  22.6	    7.3      2.4      1.6				  0.8
ges ipc enter server mode    699				  88.4	    8.6      0.7      1.4      0.6	0.1	 0.1
ges lms sync during dynam     10														   30.0     10.0     10.0	       10.0	20.0	 20.0
ges message buffer alloca      2																						 100.0
ges resource directory to     27			  3.7	  85.2	    7.4 	      3.7
ges2 LMON to wake up LMD      21					    4.8     14.3      4.8     14.3     14.3	38.1	  9.5
kjctssqmg: quick message     115					   12.2     20.0      5.2      4.3	9.6	14.8	 31.3	   1.7	    0.9
ksxr poll remote instance   2835					    0.1     88.5      5.4      4.0	1.3	 0.5	  0.2	   0.1	 0.0(1) 	   0.0(1)
latch free		    6427					   10.2      2.3      3.5     16.8     25.9	18.9	 10.6	   7.7	    3.1      0.8      0.2	     0.0(1)   0.0(1)
latch: MGA heap latch	       4					  100.0
latch: MGA shared context      2								      50.0		50.0
latch: MGA shared context      2					   50.0 			       50.0
latch: active service lis      1									      100.0
latch: cache buffers chai    331					   15.7      2.1      1.5     12.1     19.6	16.9	 13.9	  10.3	    6.0      1.2      0.6
latch: cache buffers lru    1404					   17.7      2.8      4.7     17.2     21.7	17.0	 10.6	   5.6	    2.1      0.5      0.1      0.1
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
latch: call allocation	      25					   32.0      8.0     20.0     24.0	8.0	 4.0	  4.0
latch: checkpoint queue l     53					   15.1      3.8      3.8     15.1     22.6	18.9	 17.0	   3.8
latch: enqueue hash chain      6								      50.0     33.3		 16.7
latch: gc element	    3796					    4.0      1.1      1.8      8.1     15.4	20.8	 23.3	  15.0	    8.2      2.2      0.2
latch: gcs resource hash    4468					   12.6      2.4      4.1     15.4     20.6	18.1	 13.5	   9.0	    3.2      0.9      0.1
latch: ges resource hash      14					   14.3 	      7.1     42.9	7.1	14.3	 14.3
latch: kjci process conte      8					   12.5 	     37.5	       37.5	12.5
latch: messages 	      54					   14.8 	      3.7     22.2     25.9	29.6	  3.7
latch: object queue heade    259					    5.4      0.8      2.3     10.0     17.4	18.5	 22.4	  15.1	    6.6      1.2      0.4
latch: redo allocation	     481					   11.4      3.1      3.5     21.4     25.2	17.5	 10.0	   4.8	    2.9      0.2
latch: redo writing	      52					    9.6 	      9.6      9.6     25.0	19.2	 19.2	   5.8	    1.9
latch: shared pool	      22					   18.2 	      9.1     13.6     45.5	 9.1	  4.5
latch: undo global data        3					   33.3 			       66.7
libcache interrupt action   6173			  0.6	  95.9	    1.2      0.4      1.0      0.5	0.2   0.0(3)   0.0(3)	0.0(2)			   0.0(1)
library cache lock	     505										0.2	12.5	 45.5	  27.3	    9.9      3.0      0.4				  0.4	   0.6		     0.2
library cache pin	     502								       0.2	0.2	14.3	 44.2	  28.5	    9.2      2.0      0.2			 0.4	  0.2	   0.6
library cache: mutex X	       2					   50.0 										     50.0
lock deadlock retry	    2326					    7.3     76.8      6.5      5.6	2.6	 0.9	  0.2	   0.2	 0.0(1)
log file parallel write    40.1K														    0.9     10.7     50.8     25.5     11.0	 0.4	  0.5	   0.1	 0.0(6)
log file sequential read     876						     1.8     28.2      2.3	8.2	11.2	 13.1	  11.1	   18.9      4.3      0.8
log file sync		      87								       1.1					    4.6     33.3     44.8     11.5	3.4	 1.1
name-service call wait	      13												 38.5	  30.8	   23.1 				7.7
oracle thread bootstrap      101																	      78.2     21.8
os thread creation	     101													  66.3	   25.7      6.9      1.0
read by other session	       2													  50.0	   50.0
reliable message	     325											 0.3	 20.3	  26.8	   23.7     16.6      7.4      2.2	0.3	 0.3	  0.3	   1.2		     0.6
row cache lock		      48												 29.2	  39.6	   12.5     14.6					  4.2
row cache mutex 	       3					  100.0
transaction		       1									      100.0
undo_retention publish re      3				  33.3	   66.7
wait list latch free	       8													  12.5	   75.0     12.5
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   9,392,804	9,128,427    1,360,387	  1,022,205    2,624,198	4,732	   123,265	  7,028        382	 16,006
   2	  15,361,934   14,935,799    2,245,882	  1,712,568    4,426,009	4,465	   192,657	  4,471        359	 27,038
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  24,754,738   24,064,226    3,606,269	  2,734,773    7,050,207	9,197	   315,922	 11,499        741	 43,044
 Avg	  12,377,369   12,032,113    1,803,135	  1,367,386    3,525,104	4,599	   157,961	  5,750        371	 21,522
 Std	   4,220,812	4,106,432      626,140	    488,160    1,274,073	  189	    49,068	  1,808 	16	  7,801
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   14,761.71	 14,346.2      2,138.0	    1,606.5	 4,124.2	  7.4	     193.7	   11.0       0.60	   25.2
   2	   24,183.83	 23,513.0      3,535.6	    2,696.0	 6,967.7	  7.0	     303.3	    7.0       0.57	   42.6
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	   38,945.55	 37,859.2      5,673.6	    4,302.5	11,091.9	 14.5	     497.0	   18.1       1.17	   67.7
 Avg	   19,472.77	 18,929.6      2,836.8	    2,151.3	 5,546.0	  7.2	     248.5	    9.0       0.58	   33.9
 Std	    6,662.45	  6,481.9	 988.3	      770.4	 2,010.7	  0.3	      77.5	    2.8       0.02	   12.3
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	      586.83	    570.3	  85.0	       63.9	   164.0	  0.3	       7.7	    0.4       0.02
   2	      568.16	    552.4	  83.1	       63.3	   163.7	  0.2	       7.1	    0.2       0.01
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	      577.50	    561.4	  84.0	       63.6	   163.8	  0.2	       7.4	    0.3       0.02
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	       976	 1,313	       1,037	   1,267	  N/A	       0       20,177,495	   8,644     16,680,267       9,090	 823,480   5,187,387	    63		0
   2	       974	 1,228		 956	   1,305	  N/A	       0       16,465,325	   5,324     20,032,632      11,935    1,420,074   8,654,413	 2,943		3
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     1,950	 2,541	       1,993	   2,572	    0	       0       36,642,820	  13,968     36,712,899      21,025    2,243,554  13,841,800	 3,006		3
 Avg	       975	 1,271		 997	   1,286	  N/A	       0       18,321,410	   6,984     18,356,450      10,513    1,121,777   6,920,900	 1,503		2
 Std		 1	    60		  57	      27	  N/A	       0	2,624,901	   2,348      2,370,480       2,012	 421,856   2,451,558	 2,036		2
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 53-

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      1.53	  2.06		1.63	    1.99	  N/A	    0.00	31,710.91	   13.58      26,214.68       14.29	 1,294.2    8,152.49	     0		0
   2	      1.53	  1.93		1.51	    2.05	  N/A	    0.00	25,920.87	    8.38      31,536.77       18.79	 2,235.6   13,624.38	     5		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	      3.07	  4.00		3.13	    4.05	 0.00	    0.00	57,631.78	   21.97      57,751.45       33.07	 3,529.8   21,776.87	     5		0
 Avg	      1.53	  2.00		1.57	    2.02	  N/A	    0.00	28,815.89	   10.98      28,875.72       16.54	 1,764.9   10,888.44	     2		0
 Std	      0.00	  0.09		0.09	    0.04	  N/A	    0.00	 4,094.18	    3.68       3,763.29        3.18	   665.7    3,869.22	     3		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 53-5

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.06	  0.08		0.06	    0.08	  N/A	    0.00	 1,260.62	    0.54       1,042.13        0.57	    51.4      324.09	  0.0	     0.0
   2	      0.04	  0.05		0.04	    0.05	  N/A	    0.00	   608.97	    0.20	 740.91        0.44	    52.5      320.08	  0.1	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.05	  0.06		0.05	    0.06	  N/A	    0.00	   934.80	    0.37	 891.52        0.50	    52.0      322.09	  0.1	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	      2.77     0.02    97.21	     54.13
   2	      2.76     0.01    97.23	     51.80
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	   318	      9779	   0	 18333	     0.5       28883	   N/A	   15263       1.8
   2	  1591	      3200	   0	 19825	     4.4	5021	   N/A	   20000       1.3
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	    247    13269       27	  17	   30	    13.6     85.9      0.5
   2	    516     5689       47	  25	   62	    14.0     85.6      0.3
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	       146	 1,172	     1,167	  0	  19	     1,265	 0	    2	   51	    0	       194	    0		 6	  146	 0
   2		27	 1,374	       201	  0    1,090	     1,314	 0	    0	   87	    0		46	    0		57	   27	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	       173	 2,546	     1,368	  0    1,109	     2,579	 0	    2	  138	    0	       240	    0		63	  173	 0
 Avg		87	 1,273	       684	  0	 555	     1,290	 0	    1	   69	    0	       120	    0		32	   87	 0
 Std		84	   143	       683	  0	 757		35	 0	    1	   25	    0	       105	    0		36	   84	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       0     0.00     0.00     0.00	0.00	 0.00	  0.00		19     0.00	0.00	47.37	 52.63	   0.00     0.00
   2	       0     0.00     0.00     0.00	0.00	 0.00	  0.00		12     0.00	0.00	83.33	 16.67	   0.00     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	       0								31
 Avg	       0								16
 Std	       0								 5
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		   203	 98.0	 1.0	1.0	      913   54.2   43.7    2.1	  17069  17082	29744	3100	30667  30043  32714   3940
	2   undo header 	 1,095	 92.8	 4.9	2.3	       15    0.0  100.0    0.0	   8606   8039	21446	3908	 1676	 N/A   1676    N/A
	2   others		    23	100.0	 0.0	0.0	       56   16.1   82.1    1.8	   1367   1367	  N/A	 N/A	 2130	1486   2199   4740

   2	1   data block		 1,134	 98.8	 0.4	0.9	      834   43.9   54.3    1.8	   3382   3322	15506	5310	 5567	4753   6268   4280
	1   others		    73	100.0	 0.0	0.0	      106   12.3   85.8    1.9	   1272   1272	  N/A	 N/A	 1802	1257   1809   5028
	1   undo header 	    15	 86.7	 6.7	6.7	       14    0.0  100.0    0.0	   3346   1418	26568	5193	 4805	 N/A   4805    N/A
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   undo header 	 0    N/A	  1,016   100.0      0.0	     0	   N/A	    N/A      8039    8039     N/A	N/A	N/A	N/A
	2   data block		 0    N/A	    199   100.0      0.0	   495	 100.0	    0.0     17082   17082     N/A     30043   30043	N/A
	2   others		 0    N/A	     23   100.0      0.0	     9	 100.0	    0.0      1367    1367     N/A      1486    1486	N/A
	2   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	  1,120   100.0      0.0	   366	 100.0	    0.0      3322    3322     N/A      4753    4753	N/A
	1   others		 0    N/A	     73   100.0      0.0	    13	 100.0	    0.0      1272    1272     N/A      1257    1257	N/A
	1   undo header 	 0    N/A	     13   100.0      0.0	     0	   N/A	    N/A      1418    1418     N/A	N/A	N/A	N/A
	1   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.22.248  N
   2 fg-priv:1	  169.254.31.173  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      58      545    0.2	   63	   533	  0.2
	  2	      58     1788    1.5	   63	 49841	376.3

   2	  1	      58     1711    1.2	   61	 14283	 67.8
	  2	      57      516    0.4	   62	   465	  0.3
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  4,015.3	26.3	    7.3    3,959.8	  1.1	    20.8      5,350.9	     9.7       14.9    5,307.8	      1.1	17.5
   2	  5,293.2	 9.6	   14.8    5,250.2	  1.0	    17.5      3,958.0	    25.4	7.2    3,903.8	      1.0	20.5
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	  9,308.5	35.9	   22.1    9,210.0	  2.1	    38.3      9,308.9	    35.1       22.1    9,211.5	      2.1	38.1
 Avg	  4,654.3	18.0	   11.1    4,605.0	  1.1	    19.2      4,654.4	    17.5       11.1    4,605.8	      1.1	19.0
 Std	    903.6	11.8	    5.3      912.4	  0.0	     2.4	985.0	    11.1	5.5	 992.8	      0.0	 2.1
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 53-

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      6.3	 0.0	    0.0        6.2	  0.0	     0.0	  8.4	     0.0	0.0	   8.3	      0.0	 0.0
   2	      8.3	 0.0	    0.0        8.3	  0.0	     0.0	  6.2	     0.0	0.0	   6.1	      0.0	 0.0
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	     14.6	 0.1	    0.0       14.5	  0.0	     0.1	 14.6	     0.1	0.0	  14.5	      0.0	 0.1
 Avg	      7.3	 0.0	    0.0        7.2	  0.0	     0.0	  7.3	     0.0	0.0	   7.2	      0.0	 0.0
 Std	      1.4	 0.0	    0.0        1.4	  0.0	     0.0	  1.5	     0.0	0.0	   1.6	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	 17,744.9   12,761,107	     0	     0	     0	     0	      25,751.6	 12,435,892	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  5,732.7    7,296,889	     0	     0	     0	     0	       6,758.9	  9,379,423	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      1.1	 2,670	     0	     0	     0	     0		   1.0	      2,386	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      4.1	 4,063	     0	     0	     0	     0		   3.1	      4,073	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     84.0    1,604,798	     0	     0	     0	     0		  84.0	  1,604,798	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	 25,906.9   12,764,193	     0	     0	     0	     0	      17,558.4	 12,441,300	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  6,700.9    6,589,350	     0	     0	     0	     0	       5,771.0	  9,450,621	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      1.0	 2,371	     0	     0	     0	     0		   1.1	      2,685	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      4.0	 3,985	     0	     0	     0	     0		   3.3	      4,107	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    151.7    2,579,902	     0	     0	     0	     0		 151.7	  2,579,902	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 56,331.4   43,609,328	     0	     0	     0	     0	      56,084.2	 47,905,187	  0	  0	  0	  0
 Avg							  3,313.6    2,565,255	     0	     0	     0	     0	       3,299.1	  2,817,952	  0	  0	  0	  0
 Std							  7,404.3    4,470,716	     0	     0	     0	     0	       7,354.6	  4,749,750	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 53-
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	     27.9	20,055	     0	     0	     0	     0		  40.5	     19,544	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	      9.0	11,468	     0	     0	     0	     0		  10.6	     14,741	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	     4	     0	     0	     0	     0		   0.0		  4	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  6	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.1	 2,522	     0	     0	     0	     0		   0.1	      2,522	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	     40.8	20,094	     0	     0	     0	     0		  27.6	     19,586	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	     10.5	10,373	     0	     0	     0	     0		   9.1	     14,878	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	     4	     0	     0	     0	     0		   0.0		  4	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  6	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 4,061	     0	     0	     0	     0		   0.2	      4,061	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							     88.6	68,595	     0	     0	     0	     0		  88.2	     75,353	  0	  0	  0	  0
 Avg							      5.2	 4,035	     0	     0	     0	     0		   5.2	      4,433	  0	  0	  0	  0
 Std							     11.7	 7,032	     0	     0	     0	     0		  11.6	      7,471	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    1		 3.0	      0.0	   0.0		0.0	   0.53      0.01      0.09	 0.00	   0.14      0.27	       1	    1		   7		7	    10
   2	    1		 3.0	      0.0	   0.0		0.0	   0.35      0.01      0.10	 0.00	   0.19      0.02	       1	    1		   7		7	    10
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    1		 3.0	      0.0	   0.0		0.0	   0.44      0.01      0.10	 0.00	   0.17      0.15	       1	    1		   7		7	    10
 Max				      0.0	   0.0		0.0	   0.53      0.01      0.10	 0.00	   0.19      0.27	       1	    1		   7		7	    10
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Captured SQL account for   93.0% of Total DB Time (s):	   73,429
-> Captured PL/SQL account for	 63.1% of Total DB Time (s):	      73,429

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	    38,747.92	 1,675.76   13,133.72	   3,718,866	3,261,866    3,264,517	 24,799.26	 41,323 	   0.94        0.04	   0.32 	  90.0	       78.9	    79.0	0.60	   52.8     41.8      0.6     15.0     13.6	51.5	 13.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	    29,503.83	 2,003.45    8,571.68	  19,105,083   18,365,466      232,537	 20,233.08	232,484 	   0.13        0.01	   0.04 	  82.2	       79.0	     1.0	0.09	   40.2     49.9      0.4     77.2     76.3	42.0	 73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

3scs6w7r6f9xa	       542.17	    15.13      105.86	     121,555	  114,552	     1	    430.65	      1 	 542.17       15.13	 105.86      121,555.0	  114,552.0	     1.0      430.65	    0.7      0.4      0.0      0.5	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

btxhvgkudmtmh	       541.42	    16.91      122.05	     137,376	  130,170	     1	    413.34	      1 	 541.42       16.91	 122.05      137,376.0	  130,170.0	     1.0      413.34	    0.7      0.4      0.0      0.6	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0raxwcmc41phu	       541.23	    17.93      131.21	     146,941	  139,264	     1	    404.45	      1 	 541.23       17.93	 131.21      146,941.0	  139,264.0	     1.0      404.45	    0.7      0.4      0.0      0.6	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

6uftfsj7stway	       541.15	    17.09      120.89	     137,590	  130,607	     1	    412.57	      1 	 541.15       17.09	 120.89      137,590.0	  130,607.0	     1.0      412.57	    0.7      0.4      0.0      0.6	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

181vungw6p8xd	       541.00	    15.39      113.20	     120,001	  113,700	     1	    422.25	      1 	 541.00       15.39	 113.20      120,001.0	  113,700.0	     1.0      422.25	    0.7      0.4      0.0      0.5	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

2kagcss8t5vv4	       540.98	    17.62      119.82	     138,620	  130,476	     1	    414.88	      1 	 540.98       17.62	 119.82      138,620.0	  130,476.0	     1.0      414.88	    0.7      0.4      0.0      0.6	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cpwuynd81c18b	       540.93	    16.30      120.01	     137,989	  130,619	     1	    414.93	      1 	 540.93       16.30	 120.01      137,989.0	  130,619.0	     1.0      414.93	    0.7      0.4      0.0      0.6	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3zfwa5fbzfumr	       540.92	    16.57      116.26	     133,436	  126,364	     1	    419.29	      1 	 540.92       16.57	 116.26      133,436.0	  126,364.0	     1.0      419.29	    0.7      0.4      0.0      0.5	0.5	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Captured SQL account for   92.3% of Total CPU Time (s):	     4,013
-> Captured PL/SQL account for	 63.5% of Total CPU Time (s):		4,013

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   2,003.45	29,503.83    8,571.68	  19,105,083   18,365,466      232,537	 20,233.08	232,484 	 0.01	       0.13	   0.04 	  82.2	       79.0	     1.0	0.09	   49.9     40.2     36.0     77.2     76.3	42.0	 73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   1,675.76	38,747.92   13,133.72	   3,718,866	3,261,866    3,264,517	 24,799.26	 41,323 	 0.04	       0.94	   0.32 	  90.0	       78.9	    79.0	0.60	   41.8     52.8     55.1     15.0     13.6	51.5	 13.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

fg2dv5vmw40x5	      45.19	   536.73      234.27	     241,542	  228,561	     1	    276.68	      1 	45.19	     536.73	 234.27      241,542.0	  228,561.0	     1.0      276.68	    1.1      0.7      1.0      1.0	0.9	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '50'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

19x7x3wquabr5	      45.06	   537.22      232.19	     244,355	  231,443	     1	    280.74	      1 	45.06	     537.22	 232.19      244,355.0	  231,443.0	     1.0      280.74	    1.1      0.7      1.0      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

718uskqq9cb7g	      44.42	   535.55      233.92	     247,325	  233,039	     1	    275.38	      1 	44.42	     535.55	 233.92      247,325.0	  233,039.0	     1.0      275.38	    1.1      0.7      1.0      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

2ygtzr5pfgqjx	      44.41	   535.65      245.05	     250,187	  236,083	     1	    263.77	      1 	44.41	     535.65	 245.05      250,187.0	  236,083.0	     1.0      263.77	    1.1      0.7      1.0      1.0	1.0	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

2ayr68un3a6cv	      44.38	   537.08      239.75	     251,263	  237,558	     1	    265.73	      1 	44.38	     537.08	 239.75      251,263.0	  237,558.0	     1.0      265.73	    1.1      0.7      1.0      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

bk0nwr6ducbsw	      44.33	   536.50      234.75	     244,379	  231,393	     1	    276.69	      1 	44.33	     536.50	 234.75      244,379.0	  231,393.0	     1.0      276.69	    1.1      0.7      1.0      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

c4t1p9t7x1x0h	      43.99	   535.81      225.77	     226,744	  215,016	     1	    284.49	      1 	43.99	     535.81	 225.77      226,744.0	  215,016.0	     1.0      284.49	    1.1      0.7      0.9      0.9	0.9	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '19'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

czcqz0vzf0sbx	      43.98	   537.29      226.00	     233,641	  220,461	     1	    284.89	      1 	43.98	     537.29	 226.00      233,641.0	  220,461.0	     1.0      284.89	    1.1      0.7      0.9      0.9	0.9	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Captured SQL account for   91.1% of Total User I/O Wait Time (s):	      23,833
-> Captured PL/SQL account for	 62.2% of Total User I/O Wait Time (s): 	 23,833

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	  13,133.72	38,747.92    1,675.76	   3,718,866	3,261,866    3,264,517	 24,799.26	 41,323 	 0.32	       0.94	   0.04 	  90.0	       78.9	    79.0	0.60	   55.1     52.8     41.8     15.0     13.6	51.5	 13.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	   8,571.68	29,503.83    2,003.45	  19,105,083   18,365,466      232,537	 20,233.08	232,484 	 0.04	       0.13	   0.01 	  82.2	       79.0	     1.0	0.09	   36.0     40.2     49.9     77.2     76.3	42.0	 73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

2ygtzr5pfgqjx	     245.05	   535.65	44.41	     250,187	  236,083	     1	    263.77	      1        245.05	     535.65	  44.41      250,187.0	  236,083.0	     1.0      263.77	    1.0      0.7      1.1      1.0	1.0	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

2ayr68un3a6cv	     239.75	   537.08	44.38	     251,263	  237,558	     1	    265.73	      1        239.75	     537.08	  44.38      251,263.0	  237,558.0	     1.0      265.73	    1.0      0.7      1.1      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

bk0nwr6ducbsw	     234.75	   536.50	44.33	     244,379	  231,393	     1	    276.69	      1        234.75	     536.50	  44.33      244,379.0	  231,393.0	     1.0      276.69	    1.0      0.7      1.1      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

fg2dv5vmw40x5	     234.27	   536.73	45.19	     241,542	  228,561	     1	    276.68	      1        234.27	     536.73	  45.19      241,542.0	  228,561.0	     1.0      276.68	    1.0      0.7      1.1      1.0	0.9	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '50'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

718uskqq9cb7g	     233.92	   535.55	44.42	     247,325	  233,039	     1	    275.38	      1        233.92	     535.55	  44.42      247,325.0	  233,039.0	     1.0      275.38	    1.0      0.7      1.1      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

19x7x3wquabr5	     232.19	   537.22	45.06	     244,355	  231,443	     1	    280.74	      1        232.19	     537.22	  45.06      244,355.0	  231,443.0	     1.0      280.74	    1.0      0.7      1.1      1.0	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

czcqz0vzf0sbx	     226.00	   537.29	43.98	     233,641	  220,461	     1	    284.89	      1        226.00	     537.29	  43.98      233,641.0	  220,461.0	     1.0      284.89	    0.9      0.7      1.1      0.9	0.9	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

c4t1p9t7x1x0h	     225.77	   535.81	43.99	     226,744	  215,016	     1	    284.49	      1        225.77	     535.81	  43.99      226,744.0	  215,016.0	     1.0      284.49	    0.9      0.7      1.1      0.9	0.9	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '19'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Buffer Gets:	   24,754,738
-> Captured SQL account for   95.1% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    19,105,083	 18,365,466	29,503.83    2,003.45	 8,571.68      232,537	 20,233.08	232,484 	    82.2	 79.0	       0.13	   0.01        0.04	     1.0	0.09	   77.2     76.3     40.2     49.9     36.0	42.0	 73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     3,718,866	  3,261,866	38,747.92    1,675.76	13,133.72    3,264,517	 24,799.26	 41,323 	    90.0	 78.9	       0.94	   0.04        0.32	    79.0	0.60	   15.0     13.6     52.8     41.8     55.1	51.5	 13.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

0gw0hh7k29jxb	       581,984		  0	     0.97	 0.92	     0.00	   104	      0.00	    104 	 5,596.0	  0.0	       0.01	   0.01        0.00	     1.0	0.00	    2.4      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj.obj#, obj.file#, obj.block# from ((select obj#, file#, block# from sy
s.tab$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#, file#, block#
 from sys.tabpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#, f
ile#, block# from sys.clu$ t where t.ts# = :1 AND t.dataobj# = :2) union (select

2ayr68un3a6cv	       251,263	    237,558	   537.08	44.38	   239.75	     1	    265.73	      1        251,263.0    237,558.0	     537.08	  44.38      239.75	     1.0      265.73	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

2ygtzr5pfgqjx	       250,187	    236,083	   535.65	44.41	   245.05	     1	    263.77	      1        250,187.0    236,083.0	     535.65	  44.41      245.05	     1.0      263.77	    1.0      1.0      0.7      1.1	1.0	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

718uskqq9cb7g	       247,325	    233,039	   535.55	44.42	   233.92	     1	    275.38	      1        247,325.0    233,039.0	     535.55	  44.42      233.92	     1.0      275.38	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

bk0nwr6ducbsw	       244,379	    231,393	   536.50	44.33	   234.75	     1	    276.69	      1        244,379.0    231,393.0	     536.50	  44.33      234.75	     1.0      276.69	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

19x7x3wquabr5	       244,355	    231,443	   537.22	45.06	   232.19	     1	    280.74	      1        244,355.0    231,443.0	     537.22	  45.06      232.19	     1.0      280.74	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

fg2dv5vmw40x5	       241,542	    228,561	   536.73	45.19	   234.27	     1	    276.68	      1        241,542.0    228,561.0	     536.73	  45.19      234.27	     1.0      276.68	    1.0      0.9      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '50'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1a042w3h7hz1n	       241,471	    228,501	   536.93	42.88	   235.05	     1	    271.72	      1        241,471.0    228,501.0	     536.93	  42.88      235.05	     1.0      271.72	    1.0      0.9      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Disk Reads:	  24,064,226
-> Captured SQL account for   89.9% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  18,365,466	 19,105,083	29,503.83    2,003.45	 8,571.68      232,537	 20,233.08	232,484 	  79.0		 82.2	       0.13	   0.01        0.04	     1.0	0.09	   76.3     77.2     40.2     49.9     36.0	42.0	 73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   3,261,866	  3,718,866	38,747.92    1,675.76	13,133.72    3,264,517	 24,799.26	 41,323 	  78.9		 90.0	       0.94	   0.04        0.32	    79.0	0.60	   13.6     15.0     52.8     41.8     55.1	51.5	 13.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

2ayr68un3a6cv	     237,558	    251,263	   537.08	44.38	   239.75	     1	    265.73	      1      237,558.0	    251,263.0	     537.08	  44.38      239.75	     1.0      265.73	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

2ygtzr5pfgqjx	     236,083	    250,187	   535.65	44.41	   245.05	     1	    263.77	      1      236,083.0	    250,187.0	     535.65	  44.41      245.05	     1.0      263.77	    1.0      1.0      0.7      1.1	1.0	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

718uskqq9cb7g	     233,039	    247,325	   535.55	44.42	   233.92	     1	    275.38	      1      233,039.0	    247,325.0	     535.55	  44.42      233.92	     1.0      275.38	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

19x7x3wquabr5	     231,443	    244,355	   537.22	45.06	   232.19	     1	    280.74	      1      231,443.0	    244,355.0	     537.22	  45.06      232.19	     1.0      280.74	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bk0nwr6ducbsw	     231,393	    244,379	   536.50	44.33	   234.75	     1	    276.69	      1      231,393.0	    244,379.0	     536.50	  44.33      234.75	     1.0      276.69	    1.0      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

fg2dv5vmw40x5	     228,561	    241,542	   536.73	45.19	   234.27	     1	    276.68	      1      228,561.0	    241,542.0	     536.73	  45.19      234.27	     1.0      276.68	    0.9      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '50'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1a042w3h7hz1n	     228,501	    241,471	   536.93	42.88	   235.05	     1	    271.72	      1      228,501.0	    241,471.0	     536.93	  42.88      235.05	     1.0      271.72	    0.9      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

8vdk6ufyytjkc	     227,993	    240,756	   536.54	43.47	   227.23	     1	    281.49	      1      227,993.0	    240,756.0	     536.54	  43.47      227.23	     1.0      281.49	    0.9      1.0      0.7      1.1	1.0	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '90'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P60SDB/p60sdb1  Snap
-> Total Physical Read Requests:      22,708,352
-> Captured SQL account for    1.5% of Total
-> Total UnOptimized Read Requests:	 22,708,352
-> Captured SQL account for    1.5% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
bhdvtsvjhgvrh	     298,317	  298,317   18,365,466	   29,503.83	2,003.45    8,571.68	  232,537   20,233.08	   232,484	      1.3	   1.3	       79.0	     0.13	 0.01	     0.04	   1.0	      0.09	     1.3      1.3   76.3    40.2   49.9    36.0    42.0   73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

2ayr68un3a6cv	     237,558	  237,558      237,558	      537.08	   44.38      239.75		1      265.73		 1	237,558.0    237,558.0	  237,558.0	   537.08	44.38	   239.75	   1.0	    265.73	     1.0      1.0    1.0     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

2ygtzr5pfgqjx	     236,083	  236,083      236,083	      535.65	   44.41      245.05		1      263.77		 1	236,083.0    236,083.0	  236,083.0	   535.65	44.41	   245.05	   1.0	    263.77	     1.0      1.0    1.0     0.7    1.1     1.0     0.5    0.0
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

718uskqq9cb7g	     233,039	  233,039      233,039	      535.55	   44.42      233.92		1      275.38		 1	233,039.0    233,039.0	  233,039.0	   535.55	44.42	   233.92	   1.0	    275.38	     1.0      1.0    1.0     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

19x7x3wquabr5	     231,443	  231,443      231,443	      537.22	   45.06      232.19		1      280.74		 1	231,443.0    231,443.0	  231,443.0	   537.22	45.06	   232.19	   1.0	    280.74	     1.0      1.0    1.0     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bk0nwr6ducbsw	     231,393	  231,393      231,393	      536.50	   44.33      234.75		1      276.69		 1	231,393.0    231,393.0	  231,393.0	   536.50	44.33	   234.75	   1.0	    276.69	     1.0      1.0    1.0     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

fg2dv5vmw40x5	     228,561	  228,561      228,561	      536.73	   45.19      234.27		1      276.68		 1	228,561.0    228,561.0	  228,561.0	   536.73	45.19	   234.27	   1.0	    276.68	     1.0      1.0    0.9     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '50'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1a042w3h7hz1n	     228,501	  228,501      228,501	      536.93	   42.88      235.05		1      271.72		 1	228,501.0    228,501.0	  228,501.0	   536.93	42.88	   235.05	   1.0	    271.72	     1.0      1.0    0.9     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

8vdk6ufyytjkc	     227,993	  227,993      227,993	      536.54	   43.47      227.23		1      281.49		 1	227,993.0    227,993.0	  227,993.0	   536.54	43.47	   227.23	   1.0	    281.49	     1.0      1.0    0.9     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '90'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

91pf1uf7kttt1	     226,997	  226,997      226,997	      536.59	   42.61      229.73		1      281.45		 1	226,997.0    226,997.0	  226,997.0	   536.59	42.61	   229.73	   1.0	    281.45	     1.0      1.0    0.9     0.7    1.1     1.0     0.6    0.0
DECLARE v_default_schema_number PLS_INTEGER := '119'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Executions:	     315,922
-> Captured SQL account for   90.1% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	     232,484	 29,503.83    2,003.45	  8,571.68     19,105,083   18,365,466	    232,537   20,233.08 	   0.13        0.01	   0.04 	  82.2	       79.0	     1.0	0.09	   73.6     40.2     49.9     36.0     77.2	76.3	 42.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	      41,323	 38,747.92    1,675.76	 13,133.72	3,718,866    3,261,866	  3,264,517   24,799.26 	   0.94        0.04	   0.32 	  90.0	       78.9	    79.0	0.60	   13.1     52.8     41.8     55.1     15.0	13.6	 51.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

87gaftwrm2h68	       3,277	      0.15	  0.14	      0.00	    6,652	     0		 98	   0.01 	   0.00        0.00	   0.00 	   2.0		0.0	     0.0	0.00	    1.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

f3ww8rgva3hrs	       1,733	      1.00	  0.26	      0.04	    5,912	    40	      1,733	   0.69 	   0.00        0.00	   0.00 	   3.4		0.0	     1.0	0.00	    0.5      0.0      0.0      0.0	0.0	 0.0	  0.0
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

24djtk7r8fz33	       1,565	      0.13	  0.12	      0.00	    4,681	     0	      1,496	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.5      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

acmvv4fhdc9zh		 499	      0.17	  0.06	      0.07	    1,773	    29		276	   0.05 	   0.00        0.00	   0.00 	   3.6		0.1	     0.6	0.00	    0.2      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

3dbzmtf9ahvzt		 374	      0.13	  0.12	      0.00	    2,263	     0		374	   0.00 	   0.00        0.00	   0.00 	   6.1		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

2p9fv35c7zxtg		 355	      0.08	  0.06	      0.01	    1,953	     5		355	   0.02 	   0.00        0.00	   0.00 	   5.5		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
wcnt, 0) rowcnt, o.pobjn pobjn from

5u7g54s63p4ts		 294	      0.03	  0.03	      0.00	      588	     0		294	   0.00 	   0.00        0.00	   0.00 	   2.0		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
select toid from type$ where package_obj#=:1 and typ_name=:2

grwydz59pu6mc		 287	      0.10	  0.06	      0.02	      586	    27		287	   0.04 	   0.00        0.00	   0.00 	   2.0		0.1	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
select text from view$ where rowid=:1

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Total Cluster Wait Time (s): 	 48,194
-> Captured SQL account for   93.5% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	  24,799.26	38,747.92    1,675.76	13,133.72      3,718,866    3,261,866	 3,264,517	 41,323 	 0.60	       0.94	   0.04        0.32	      90.0	   78.9 	79.0	   51.5     52.8     41.8     55.1     15.0	13.6	 13.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	  20,233.08	29,503.83    2,003.45	 8,571.68     19,105,083   18,365,466	   232,537	232,484 	 0.09	       0.13	   0.01        0.04	      82.2	   79.0 	 1.0	   42.0     40.2     49.9     36.0     77.2	76.3	 73.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

azs4x4stk5azf	     434.97	   540.19	15.30	    99.78	 113,914      108,209		 1	      1        434.97	     540.19	  15.30       99.78	 113,914.0    108,209.0 	 1.0	    0.9      0.7      0.4      0.4	0.5	 0.4	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1y2qx24pugffb	     431.46	   540.50	15.60	   102.86	 122,914      116,459		 1	      1        431.46	     540.50	  15.60      102.86	 122,914.0    116,459.0 	 1.0	    0.9      0.7      0.4      0.4	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cn5r6fnjj1b3d	     430.69	   540.76	15.12	   105.26	 118,604      112,446		 1	      1        430.69	     540.76	  15.12      105.26	 118,604.0    112,446.0 	 1.0	    0.9      0.7      0.4      0.4	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '63'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3scs6w7r6f9xa	     430.65	   542.17	15.13	   105.86	 121,555      114,552		 1	      1        430.65	     542.17	  15.13      105.86	 121,555.0    114,552.0 	 1.0	    0.9      0.7      0.4      0.4	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

gcfrxjr5zjhjy	     427.13	   540.05	16.03	   107.48	 127,299      120,745		 1	      1        427.13	     540.05	  16.03      107.48	 127,299.0    120,745.0 	 1.0	    0.9      0.7      0.4      0.5	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

6kvyh9k0yg876	     425.27	   540.52	15.48	   109.18	 125,541      119,196		 1	      1        425.27	     540.52	  15.48      109.18	 125,541.0    119,196.0 	 1.0	    0.9      0.7      0.4      0.5	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bbp00h54hyg9h	     424.34	   540.47	15.83	   110.66	 126,116      119,290		 1	      1        424.34	     540.47	  15.83      110.66	 126,116.0    119,290.0 	 1.0	    0.9      0.7      0.4      0.5	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3q9qpxjx8mtpr	     422.63	   540.07	16.19	   112.20	 130,025      122,905		 1	      1        422.63	     540.07	  16.19      112.20	 130,025.0    122,905.0 	 1.0	    0.9      0.7      0.4      0.5	0.5	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM bg: segment fix monitor						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM cbk:blocks examined						    955 	   1.5		0.0		0.8	      0.0	    0.7 	  0.8
ASSM cbk:blocks marked full						    280 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
ASSM gsp:L1 bitmaps examined						    722 	   1.1		0.0		0.6	      0.0	    0.6 	  0.6
ASSM gsp:L2 bitmap full 						     25 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    240 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
ASSM gsp:Search all							     27 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search hint							      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search steal							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						    677 	   1.1		0.0		0.5	      0.0	    0.5 	  0.5
ASSM gsp:get free data block						    490 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
ASSM gsp:get free index block						    187 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
ASSM gsp:good hint							    471 	   0.7		0.0		0.4	      0.0	    0.4 	  0.4
ASSM rsv:fill reserve							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM wasted db state change						      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO (full) vector count						526,254 	 828.0	       12.2	      414.0	    210.3	  265.3 	562.7
Batched IO block miss count					     17,877,899       28,126.7	      415.3	   14,063.4	  5,002.8      10,525.8      17,600.9
Batched IO buffer defrag count						     53 	   0.1		0.0		0.0	      0.1	    0.0 	  0.1
Batched IO double miss count						250,800 	 394.6		5.8	      197.3	     73.2	  145.6 	249.0
Batched IO single block count						354,180 	 557.2		8.2	      278.6	    115.9	  196.7 	360.6
Batched IO vector block count					     18,052,079       28,400.8	      419.4	   14,200.4	  5,097.9      10,595.6      17,805.2
Batched IO vector read count						408,114 	 642.1		9.5	      321.1	    160.0	  207.9 	434.2
Block Cleanout Optim referenced 					     28 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
CCursor + sql area evicted						    118 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
CPU used by this session						621,251 	 977.4	       14.4	      488.7	    209.5	  340.6 	636.9
CPU used when call started						432,225 	 680.1	       10.0	      340.1	    207.2	  193.6 	486.6
CR blocks created							     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Cached Commit SCN referenced					     18,695,142       29,412.9	      434.3	   14,706.5	  5,579.3      10,761.3      18,651.6
Client Advertised Receive Window					    903 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
Client Advertised Send Window						    903 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
Client Path Maximum Transmission Unit(MTU)			      4,352,575        6,840.7	      101.1	    3,420.4	  4,630.5	  146.1       6,694.7
Client Send Congestion Window						  1,290 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
Client Time (usec) Last Ack Received					    190 	   0.3		0.0		0.1	      0.2	    0.0 	  0.3
Client Time (usec) Last Data Received					     38 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Client Time (usec) Last Data Sent					    736 	   1.2		0.0		0.6	      0.2	    0.4 	  0.8
Client Time (usec) Round Trip Time					540,234 	 849.6	       12.6	      424.8	    154.4	  315.6 	534.0
Client Time (usec) Round Trip Time Variance				703,345        1,105.8	       16.3	      552.9	    427.1	  250.9 	854.9
Client Total Bytes Acked					      2,030,389        3,193.7	       47.2	    1,596.8	      3.0	1,594.7       1,598.9
Client Total Bytes Received						787,756        1,239.1	       18.3	      619.5	      4.9	  616.1 	623.0
Commit SCN cached							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
DB time 							      7,896,017       12,419.9	      183.4	    6,210.0	      2.7	6,208.1       6,211.8
DBWR checkpoint buffers written 					 37,830 	  59.5		0.9	       29.8	     11.3	   21.8 	 37.7
DBWR checkpoints							    248 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
DBWR fusion writes							    227 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
DBWR object drop buffers written					     88 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
DBWR transaction table writes						    442 	   0.7		0.0		0.3	      0.0	    0.3 	  0.4
DBWR undo block writes							152,077 	 239.3		3.5	      119.6	     41.6	   90.2 	149.0
DFO trees parallelized							    127 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
Effective IO time							 46,736 	  73.5		1.1	       36.7	     33.4	   13.1 	 60.3
HSC Heap Segment Block Changes					      3,384,628        5,325.0	       78.6	    2,662.5	    971.2	1,975.8       3,349.2
Heap Segment Array Inserts						    310 	   0.5		0.0		0.2	      0.0	    0.2 	  0.2
Heap Segment Array Updates						      8 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
KTFB alloc req								     13 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc space (block)					      5,767,168        9,069.8	      134.0	    4,534.9	  1,306.6	3,611.0       5,458.8
KTFB alloc time (ms)							 34,109 	  53.6		0.8	       26.8	      8.9	   20.5 	 33.1
PX local messages recv'd						  7,168 	  11.3		0.2		5.6	      0.5	    5.3 	  6.0
PX local messages sent							  7,294 	  11.5		0.2		5.7	      0.5	    5.4 	  6.1
PX remote messages recv'd						  1,778 	   2.8		0.0		1.4	      0.6	    1.0 	  1.8
PX remote messages sent 						  1,802 	   2.8		0.0		1.4	      0.5	    1.0 	  1.8

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Parallel operations not downgraded					    192 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
Requests to/from client 						    519 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
SQL*Net roundtrips to/from client					    391 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
active txn count during cleanout					    433 	   0.7		0.0		0.3	      0.1	    0.3 	  0.4
application wait time							  1,239 	   1.9		0.0		1.0	      0.0	    1.0 	  1.0
background timeouts							 13,235 	  20.8		0.3	       10.4	      0.0	   10.4 	 10.4
blocks cleaned out using minact 					925,882        1,456.5	       21.5	      728.2	     96.1	  660.3 	796.2
branch node splits							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
buffer is not pinned count					     55,494,365       87,307.6	    1,289.2	   43,653.8	 15,533.3      32,670.1      54,637.5
buffer is pinned count						     22,272,300       35,040.4	      517.4	   17,520.2	  6,303.9      13,062.7      21,977.7
bytes received via SQL*Net from client					520,055 	 817.5	       12.1	      408.7	    437.3	   99.5 	717.9
bytes sent via SQL*Net to client					 92,942 	 146.2		2.2	       73.1	     28.6	   52.8 	 93.3
calls to get snapshot scn: kcmgss					400,923 	 630.7		9.3	      315.4	     95.9	  247.5 	383.2
calls to kcmgas 							 88,458 	 139.2		2.1	       69.6	     23.1	   53.2 	 85.9
calls to kcmgcs 							 13,385 	  21.1		0.3	       10.5	      0.8	   10.0 	 11.1
cell physical IO interconnect bytes				265,272,821,248  417,341,495.7	6,162,829.2   2.0867075E+08  70,869,590.9 1.5855838E+08 2.5878312E+08
change write time							  7,258 	  11.4		0.2		5.7	      3.7	    3.1 	  8.3
cleanout - number of ktugct calls					    447 	   0.7		0.0		0.4	      0.1	    0.3 	  0.4
cleanouts and rollbacks - consistent read gets				      6 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
cleanouts only - consistent read gets					     42 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
cluster key scan block gets						  5,541 	   8.7		0.1		4.4	      0.8	    3.8 	  4.9
cluster key scans							  3,629 	   5.7		0.1		2.9	      0.6	    2.4 	  3.3
cluster wait time						      4,773,456        7,507.2	      110.9	    3,753.6	    962.4	3,073.1       4,434.1
commit batch/immediate performed					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit batch/immediate requested					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: block lost					     41 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
commit cleanout failures: buffer being written				     21 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: callback failure				     38 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: cannot pin					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
commit cleanouts						      3,388,388        5,330.9	       78.7	    2,665.4	    971.6	1,978.4       3,352.5
commit cleanouts successfully completed 			      3,388,287        5,330.7	       78.7	    2,665.4	    971.6	1,978.3       3,352.4
commit immediate performed						      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit immediate requested						      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit txn count during cleanout					    259 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
concurrency wait time							    894 	   1.4		0.0		0.7	      0.6	    0.3 	  1.1
consistent changes							 19,617 	  30.9		0.5	       15.4	      3.6	   12.9 	 18.0
consistent gets 						     20,905,504       32,889.7	      485.7	   16,444.8	  5,577.8      12,500.8      20,388.9
consistent gets examination						634,373 	 998.0	       14.7	      499.0	    153.8	  390.3 	607.7
consistent gets examination (fastpath)					633,586 	 996.8	       14.7	      498.4	    153.8	  389.6 	607.2
consistent gets from cache					     20,905,504       32,889.7	      485.7	   16,444.8	  5,577.8      12,500.8      20,388.9
consistent gets pin						     20,271,131       31,891.6	      470.9	   15,945.8	  5,424.0      12,110.5      19,781.2
consistent gets pin (fastpath)					     18,735,933       29,476.3	      435.3	   14,738.1	  4,934.0      11,249.3      18,227.0
cursor authentications							    430 	   0.7		0.0		0.3	      0.1	    0.3 	  0.4
data blocks consistent reads - undo records applied			     17 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
db block changes						      7,050,207       11,091.9	      163.8	    5,546.0	  2,010.7	4,124.2       6,967.7
db block gets							      3,849,227        6,055.9	       89.4	    3,027.9	  1,084.7	2,260.9       3,794.9
db block gets direct							  2,845 	   4.5		0.1		2.2	      1.8	    1.0 	  3.5
db block gets from cache					      3,846,382        6,051.4	       89.4	    3,025.7	  1,086.5	2,257.4       3,794.0
db block gets from cache (fastpath)					300,197 	 472.3		7.0	      236.1	     70.6	  186.2 	286.0
deferred (CURRENT) block cleanout applications				931,204        1,464.8	       21.6	      732.4	     97.1	  663.7 	801.1
dirty buffers inspected 					      3,197,720        5,030.9	       74.3	    2,515.5	    934.6	1,854.6       3,176.3
enqueue conversions							  3,408 	   5.4		0.1		2.7	      0.0	    2.7 	  2.7
enqueue releases							152,849 	 240.5		3.6	      120.2	     24.6	  102.9 	137.6
enqueue requests							152,626 	 240.1		3.5	      120.1	     24.7	  102.6 	137.5
enqueue timeouts							     94 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
enqueue waits								  1,587 	   2.5		0.0		1.2	      0.2	    1.1 	  1.4
exchange deadlocks							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
execute count								315,922 	 497.0		7.3	      248.5	     77.5	  193.7 	303.3
file io service time						    796,051,142    1,252,490.6	   18,493.9	  626,245.3	295,949.7     416,977.2     835,513.4
file io wait time						217,363,595,006  341,944,557.7	5,049,800.1   1.7097228E+08  38,455,189.3 1.4378035E+08 1.9816420E+08

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
free buffer inspected						     24,345,711       38,302.1	      565.6	   19,151.0	  6,584.0      14,495.5      23,806.6
free buffer requested						     24,402,410       38,391.0	      566.9	   19,195.5	  6,325.2      14,722.9      23,668.1
gc blocks compressed							  4,057 	   6.4		0.1		3.2	      0.4	    2.9 	  3.5
gc blocks lost								  3,006 	   4.7		0.1		2.4	      3.2	    0.1 	  4.6
gc cleanout saved							      7 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc cr anti locks created						225,044 	 354.0		5.2	      177.0	      0.0	  177.0 	177.0
gc cr anti locks expanded						     69 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
gc cr anti locks shrunk 						    667 	   1.0		0.0		0.5	      0.0	    0.5 	  0.5
gc cr block flush time							    124 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
gc cr block receive time						  1,677 	   2.6		0.0		1.3	      1.0	    0.6 	  2.0
gc cr blocks built							    173 	   0.3		0.0		0.1	      0.1	    0.0 	  0.2
gc cr blocks flushed							     62 	   0.1		0.0		0.0	      0.1	    0.0 	  0.1
gc cr blocks received							  2,541 	   4.0		0.1		2.0	      0.1	    1.9 	  2.1
gc cr blocks served							  2,572 	   4.0		0.1		2.0	      0.0	    2.0 	  2.1
gc cr multiblock grant time					     18,033,967       28,358.6	      419.0	   14,179.3	  6,357.9	9,683.6      18,675.0
gc cr multiblock grants received				     17,517,876       27,560.8	      407.0	   13,780.4	  5,270.2      10,053.8      17,507.0
gc current block flush time						     53 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc current block receive time						  3,308 	   5.2		0.1		2.6	      2.6	    0.8 	  4.4
gc current blocks flushed						     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks received						  1,950 	   3.1		0.0		1.5	      0.0	    1.5 	  1.5
gc current blocks served						  1,993 	   3.1		0.0		1.6	      0.1	    1.5 	  1.6
gc force cr read cr							    376 	   0.6		0.0		0.3	      0.1	    0.2 	  0.3
gc force cr read current						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc kbytes saved 							 18,572 	  29.2		0.4	       14.6	      4.1	   11.7 	 17.5
gc kbytes sent								 17,948 	  28.2		0.4	       14.1	      4.4	   11.0 	 17.2
gc local grants 						     12,869,951       20,247.2	      299.0	   10,123.6	  3,038.2	7,975.3      12,271.9
gc merge pi fg								     67 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
gc no change made							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass grants 						     21 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass waits							      9 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc remote grants						     11,553,440       18,176.7	      268.4	    9,088.4	  3,296.3	6,757.5      11,419.2
gc status messages received						163,714 	 257.7		3.8	      128.8	    132.2	   35.3 	222.3
gc status messages sent 						166,641 	 262.0		3.9	      131.0	    135.0	   35.5 	226.5
gcs affinity lock grants						148,268 	 233.3		3.4	      116.6	     42.3	   86.8 	146.5
gcs anti-locks created							225,060 	 354.0		5.2	      177.0	      0.0	  177.0 	177.0
gcs data block access record drops					  1,751 	   2.8		0.0		2.8	      N/A	    2.8 	  2.8
gcs data block access records					     22,711,014       35,730.3	      527.6	   17,865.2	  6,161.7      13,508.2      22,222.1
gcs messages sent						     36,546,258       57,489.5	      849.0	   28,744.7	  3,898.3      25,988.2      31,501.3
gcs read-mostly lock failures						228,248 	 359.0		5.3	      179.5	     15.8	  168.4 	190.6
gcs read-mostly lock grants					      1,525,447        2,399.0	       35.4	    1,199.5	    344.2	  956.1       1,442.9
gcs stats management (SCM) process posts				     22 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges messages sent							 21,025 	  33.1		0.5	       16.5	      3.2	   14.3 	 18.8
global enqueue get time 						 18,035 	  28.4		0.4	       14.2	     13.8	    4.5 	 23.9
global enqueue gets sync						184,733 	 290.6		4.3	      145.3	      7.2	  140.2 	150.4
global enqueue releases 						184,438 	 290.1		4.3	      145.1	      7.1	  140.0 	150.1
heap block compress							 14,589 	  22.9		0.3	       11.5	      0.6	   11.0 	 11.9
hot buffers moved to head of LRU					268,335 	 422.1		6.2	      211.1	     58.8	  169.5 	252.7
immediate (CR) block cleanout applications				     48 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
immediate (CURRENT) block cleanout applications 			    554 	   0.9		0.0		0.4	      0.1	    0.3 	  0.5
in call idle wait time						     12,291,755       19,333.9	      285.6	    9,666.9	    175.8	9,542.6       9,791.3
index crx upgrade (positioned)						     72 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fetch by key							 20,482 	  32.2		0.5	       16.1	      3.8	   13.4 	 18.8
index range scans							304,926 	 479.7		7.1	      239.9	     79.8	  183.4 	296.3
leaf node 90-10 splits							     22 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
leaf node splits							    182 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
lob reads								  1,840 	   2.9		0.0		1.4	      0.3	    1.2 	  1.6
lob writes								 12,704 	  20.0		0.3	       10.0	      3.2	    7.7 	 12.3
lob writes unaligned							 12,704 	  20.0		0.3	       10.0	      3.2	    7.7 	 12.3
logical read bytes from cache					202,767,441,920  319,005,172.7	4,710,701.7   1.5950259E+08  54,593,393.5 1.2089923E+08 1.9810595E+08
logons cumulative							    741 	   1.2		0.0		0.6	      0.0	    0.6 	  0.6

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
max cf enq hold time							    701 	   1.1		0.0		0.6	      0.3	    0.4 	  0.7
messages received							312,881 	 492.2		7.3	      246.1	     70.0	  196.6 	295.6
messages sent								312,881 	 492.2		7.3	      246.1	     70.0	  196.6 	295.6
min active SCN optimization applied on CR				      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
no work - consistent read gets					     20,231,745       31,829.7	      470.0	   15,914.8	  5,412.4      12,087.7      19,742.0
non-idle wait count						     11,902,487       18,725.8	      276.5	    9,362.9	  3,305.8	7,025.4      11,700.4
non-idle wait time						      7,407,134       11,650.8	      172.1	    5,825.4	     80.8	5,768.3       5,882.6
opened cursors cumulative						358,597 	 564.2		8.3	      282.1	     90.2	  218.3 	345.9
parse count (hard)							  1,409 	   2.2		0.0		1.1	      0.2	    1.0 	  1.2
parse count (total)							 11,499 	  18.1		0.3		9.0	      2.8	    7.0 	 11.0
parse time cpu								    430 	   0.7		0.0		0.3	      0.0	    0.3 	  0.4
parse time elapsed							  1,185 	   1.9		0.0		0.9	      0.1	    0.8 	  1.0
physical read IO requests					     22,708,352       35,726.4	      527.6	   17,863.2	  6,403.2      13,335.5      22,391.0
physical read bytes						197,134,139,392  310,142,571.0	4,579,828.5   1.5507129E+08  53,099,568.3 1.1752422E+08 1.9261835E+08
physical read total IO requests 				     22,721,394       35,746.9	      527.9	   17,873.5	  6,403.7      13,345.4      22,401.5
physical read total bytes					200,306,788,864  315,132,859.0	4,653,535.7   1.5756643E+08  53,035,494.8 1.2006467E+08 1.9506819E+08
physical read total multi block requests				  2,850 	   4.5		0.1		2.2	      0.1	    2.2 	  2.3
physical reads							     24,064,226       37,859.2	      559.1	   18,929.6	  6,481.9      14,346.2      23,513.0
physical reads cache						     24,064,190       37,859.1	      559.1	   18,929.6	  6,481.9      14,346.2      23,513.0
physical reads cache prefetch					     18,991,996       29,879.2	      441.2	   14,939.6	  5,013.7      11,394.3      18,484.8
physical reads direct							     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
physical reads direct (lob)						     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
physical reads prefetch warmup						 25,532 	  40.1		0.6	       40.1	      N/A	   40.1 	 40.1
physical write IO requests					      3,451,378        5,429.9	       80.2	    2,715.0	    947.4	2,045.1       3,384.8
physical write bytes						 29,542,555,648   46,478,184.8	  686,333.9    23,239,092.4   8,096,015.1  17,514,345.2  28,963,839.6
physical write total IO requests				      3,526,672        5,548.4	       81.9	    2,774.2	    969.8	2,088.4       3,460.0
physical write total bytes					 32,473,497,088   51,089,345.5	  754,425.6    25,544,672.7   8,917,057.3  19,239,361.1  31,849,984.4
physical write total multi block requests				 10,735 	  16.9		0.2		8.4	      2.9	    6.4 	 10.5
physical writes 						      3,606,269        5,673.6	       83.8	    2,836.8	    988.3	2,138.0       3,535.6
physical writes direct							  2,909 	   4.6		0.1		2.3	      1.8	    1.0 	  3.5
physical writes direct (lob)						     64 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
physical writes direct temporary tablespace				  2,429 	   3.8		0.1		1.9	      1.8	    0.6 	  3.2
physical writes from cache					      3,603,360        5,669.0	       83.7	    2,834.5	    990.1	2,134.4       3,534.6
physical writes non checkpoint					      3,604,169        5,670.3	       83.7	    2,835.2	    988.4	2,136.3       3,534.0
pinned buffers inspected						    482 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
prefetch warmup blocks aged out before use				198,612 	 312.4		4.6	      156.2	     29.5	  135.3 	177.1
prefetched blocks aged out before use				      1,171,667        1,843.1	       27.2	      921.6	    133.3	  827.3       1,015.8
process last non-idle time						  1,250 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
recursive calls 							484,075 	 761.5	       11.2	      380.8	     76.4	  326.7 	434.8
recursive cpu usage							391,754 	 616.4		9.1	      308.2	    191.5	  172.8 	443.6
redo KB read							      1,691,648        2,660.8	       39.3	    1,330.4	      3.0	1,328.3       1,332.5
redo blocks checksummed by FG (exclusive)			      2,077,734        3,268.8	       48.3	    1,634.4	    576.5	1,226.8       2,042.1
redo blocks written						      5,686,072        8,945.7	      132.1	    4,472.9	  1,602.7	3,339.6       5,606.2
redo blocks written (group 0)					      4,374,475        6,881.9	      101.6	    3,441.0	    962.5	2,760.4       4,121.5
redo blocks written (group 1)					      1,311,597        2,063.8	       30.5	    1,031.9	    640.3	  579.2       1,484.6
redo entries							      3,698,906        5,819.4	       85.9	    2,909.7	  1,036.7	2,176.6       3,642.7
redo size							  2,800,407,516    4,405,801.0	   65,059.2	2,202,900.5	788,917.9   1,645,051.3   2,760,749.7
redo size for direct writes						  1,740 	   2.7		0.0		1.4	      0.1	    1.3 	  1.4
redo subscn max counts							    470 	   0.7		0.0		0.4	      0.0	    0.4 	  0.4
redo synch time 							    126 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
redo synch time (usec)						      1,100,993        1,731.6	       25.6	      865.8	    121.4	  780.0 	951.7
redo synch time overhead (usec) 					  9,645 	  15.2		0.2		7.6	      1.8	    6.3 	  8.8
redo synch time overhead count (  2ms)					     87 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
redo synch writes							    136 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
redo wastage							     18,020,116       28,351.0	      418.6	   14,175.5	  5,485.5      10,296.7      18,054.4
redo write active strands						 73,838 	 116.2		1.7	       58.1	     22.4	   42.3 	 73.9
redo write broadcast ack count						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write broadcast ack time						  4,820 	   7.6		0.1		7.6	      N/A	    7.6 	  7.6
redo write finish time						    817,688,206    1,286,391.8	   18,996.6	  643,195.9	185,658.4     511,915.6     774,476.2
redo write gather time						     40,841,675       64,263.5	      948.8	   32,131.7	 18,520.2      19,036.0      45,227.5

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo write info find							     87 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
redo write schedule time					     41,593,973       65,447.2	      966.3	   32,723.6	 18,866.4      19,383.0      46,064.2
redo write size count (   4KB)						  1,224 	   1.9		0.0		1.0	      0.2	    0.9 	  1.1
redo write size count (   8KB)						  1,709 	   2.7		0.0		1.3	      0.2	    1.2 	  1.5
redo write size count (  16KB)						  3,579 	   5.6		0.1		2.8	      0.6	    2.4 	  3.2
redo write size count (  32KB)						  6,699 	  10.5		0.2		5.3	      1.7	    4.1 	  6.5
redo write size count ( 128KB)						 21,330 	  33.6		0.5	       16.8	      6.1	   12.4 	 21.1
redo write size count ( 256KB)						  5,131 	   8.1		0.1		4.0	      1.5	    3.0 	  5.1
redo write size count ( 512KB)						    693 	   1.1		0.0		0.5	      0.2	    0.4 	  0.7
redo write size count (1024KB)						     72 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
redo write size count (inf)						     15 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write time 							 81,970 	 129.0		1.9	       64.5	     18.7	   51.3 	 77.7
redo write time (usec)						    819,703,256    1,289,562.3	   19,043.4	  644,781.2	186,520.5     512,891.3     776,671.1
redo write total time						    868,577,448    1,366,458.4	   20,178.8	  683,229.2	203,344.8     539,442.7     827,015.7
redo write worker delay (usec)					     36,485,347       57,408.9	      847.6	   28,704.5	 16,599.3      16,967.0      40,441.9
redo write worker delay count						 40,451 	  63.6		0.9	       31.8	     10.4	   24.5 	 39.1
redo writes								 40,451 	  63.6		0.9	       31.8	     10.4	   24.5 	 39.1
redo writes (group 0)							 24,919 	  39.2		0.6	       19.6	      4.9	   16.1 	 23.1
redo writes (group 1)							 15,532 	  24.4		0.4	       12.2	      5.4	    8.4 	 16.1
redo writes adaptive all						 40,451 	  63.6		0.9	       31.8	     10.4	   24.5 	 39.1
redo writes adaptive worker						 40,451 	  63.6		0.9	       31.8	     10.4	   24.5 	 39.1
rollbacks only - consistent read gets					     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
rows fetched via callback						 10,645 	  16.7		0.2		8.4	      0.8	    7.8 	  8.9
securefile allocation bytes						524,288 	 824.8	       12.2	      412.4	    146.3	  309.0 	515.9
securefile allocation chunks						     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
securefile bytes non-transformed					453,736 	 713.8	       10.5	      356.9	    117.2	  274.1 	439.8
securefile direct read bytes						294,912 	 463.7		6.9	      231.8	    181.9	  103.2 	360.5
securefile direct read ops						     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
securefile direct write bytes						524,288 	 824.8	       12.2	      412.4	    146.3	  309.0 	515.9
securefile direct write ops						     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
securefile number of non-transformed flushes				     31 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment chunks allocation from dispenser				     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment dispenser allocations						     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment dispenser load empty						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
segment dispenser load tasks						      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc ops							     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc tasks							      9 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc time (ms)						  6,475 	  10.2		0.2		5.1	      6.0	    0.8 	  9.4
session connect time							    665 	   1.0		0.0		1.0	      N/A	    1.0 	  1.0
session cursor cache hits						354,149 	 557.2		8.2	      278.6	     90.3	  214.8 	342.4
session logical reads						     24,754,738       38,945.5	      575.1	   19,472.8	  6,662.4      14,761.7      24,183.8
shared hash latch upgrades - no wait				      6,773,783       10,657.0	      157.4	    5,328.5	  1,923.3	3,968.6       6,688.5
shared hash latch upgrades - wait					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
shared io pool buffer get success					     66 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
sorts (memory)								  4,457 	   7.0		0.1		3.5	      0.4	    3.2 	  3.8
sorts (rows)							      2,947,925        4,634.0	       68.5	    2,317.0	  2,423.6	  603.2       4,030.8
sql area evicted							    118 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
sql area purged 							    118 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
summed dirty queue length					     19,281,281       30,333.8	      447.9	   15,166.9	  4,694.9      11,847.1      18,486.7
switch current caused by our pin					    418 	   0.7		0.0		0.3	      0.2	    0.2 	  0.4
switch current to new buffer						    429 	   0.7		0.0		0.3	      0.2	    0.2 	  0.5
table fetch by rowid						     37,029,602       58,257.6	      860.3	   29,128.8	 10,405.7      21,770.8      36,486.7
table fetch continued row						    911 	   1.4		0.0		0.7	      0.1	    0.7 	  0.8
table scan blocks gotten						726,749        1,143.0	       16.9	      571.5	     85.4	  511.1 	631.9
table scan disk non-IMC rows gotten				      1,884,018        2,962.7	       43.8	    1,481.3	    612.2	1,048.5       1,914.2
table scan rows gotten						      1,884,018        2,962.7	       43.8	    1,481.3	    612.2	1,048.5       1,914.2
table scans (short tables)						  2,766 	   4.4		0.1		2.2	      0.2	    2.0 	  2.3
temp space allocated (bytes)					      5,242,880        8,245.3	      121.8	    4,122.7	  1,161.3	3,301.5       4,943.8
total cf enq hold time							  6,240 	   9.8		0.1		4.9	      0.1	    4.8 	  5.0
total number of cf enq holders						    478 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
undo change vector size 					  1,160,400,428    1,825,629.4	   26,958.5	  912,814.7	330,754.9     678,935.6   1,146,693.8
user I/O wait time						      2,359,691        3,712.6	       54.8	    1,856.3	    803.3	1,288.3       2,424.3
user calls								  9,197 	  14.5		0.2		7.2	      0.3	    7.0 	  7.4
user commits								 43,044 	  67.7		1.0	       33.9	     12.3	   25.2 	 42.6
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    129 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
workarea executions - optimal						  3,599 	   5.7		0.1		2.8	      0.2	    2.7 	  2.9
write clones created in foreground					     26 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    164 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
Global Enqueue S-optim S-lock gets					123,682 	 194.5		2.9	       97.3	      5.6	   93.3 	101.2
Global Enqueue S-optim anti-locks crea					     80 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
acks for commit broadcast(actual)					  7,721 	  12.1		0.2		6.1	      0.2	    5.9 	  6.2
acks for commit broadcast(logical)					 29,843 	  46.9		0.7	       23.5	      5.2	   19.8 	 27.1
broadcast msgs on commit(actual)					 29,849 	  47.0		0.7	       23.5	      5.0	   19.9 	 27.0
broadcast msgs on commit(logical)					 40,384 	  63.5		0.9	       31.8	     10.3	   24.5 	 39.1
broadcast msgs on commit(wasted)					 21,512 	  33.8		0.5	       16.9	      5.9	   12.7 	 21.1
flow control messages received						      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
flow control messages sent						      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs assume no cvt							    985 	   1.5		0.0		0.8	      0.1	    0.7 	  0.9
gcs ast to fg								166,627 	 261.9		3.9	      131.0	    135.1	   35.5 	226.5
gcs ast xid								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs bidless ast to lms							  1,295 	   2.0		0.0		1.0	      0.9	    0.4 	  1.7
gcs blocked converts							219,353 	 345.0		5.1	      172.5	      1.5	  171.4 	173.6
gcs blocked cr converts 						  2,574 	   4.0		0.1		2.0	      1.0	    1.3 	  2.7
gcs compatible basts							     11 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs compatible cr basts (global)					     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (local) 					    878 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
gcs dbwr flush pi msgs						      1,721,095        2,707.7	       40.0	    1,353.9	    476.1	1,017.2       1,690.5
gcs dbwr write request msgs						    227 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
gcs force cr block only 						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs force cr grant							     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs grant ast								167,922 	 264.0		3.9	      132.0	    136.0	   35.8 	228.1
gcs immediate (compatible) converts					 34,641 	  54.5		0.8	       27.2	      0.4	   26.9 	 27.5
gcs immediate (null) converts					      3,233,370        5,085.8	       75.1	    2,542.9	     71.6	2,492.3       2,593.5
gcs immediate cr (compatible) converts					 39,791 	  62.6		0.9	       31.3	      5.4	   27.5 	 35.1
gcs immediate cr (null) converts				     19,143,562       30,111.5	      444.7	   15,055.8	     23.6      15,039.1      15,072.4
gcs lms write request msgs						    175 	   0.3		0.0		0.1	      0.1	    0.1 	  0.2
gcs msgs process time(ms)						751,328        1,181.9	       17.5	      590.9	     80.9	  533.8 	648.1
gcs msgs received						     36,479,106       57,374.1	      847.5	   28,687.1	  4,226.4      25,698.5      31,675.6
gcs new served by master						    356 	   0.6		0.0		0.6	      N/A	    0.6 	  0.6
gcs out-of-order msgs							    170 	   0.3		0.0		0.1	      0.1	    0.0 	  0.2
gcs pings refused							    548 	   0.9		0.0		0.4	      0.2	    0.3 	  0.6
gcs reader bypass grant immediate					     21 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs refuse xid								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs refuse xid to fg							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs retry convert request						    379 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
gcs side channel msgs actual						  2,514 	   4.0		0.1		2.0	      1.0	    1.3 	  2.7
gcs side channel msgs logical						171,160 	 269.4		4.0	      134.7	    135.4	   39.0 	230.4
gcs stale cr								    376 	   0.6		0.0		0.3	      0.2	    0.2 	  0.4
ges msgs process time(ms)						    585 	   0.9		0.0		0.5	      0.1	    0.4 	  0.5
ges msgs received							 13,968 	  22.0		0.3	       11.0	      3.7	    8.4 	 13.6
ges remote lock allocation						    421 	   0.7		0.0		0.3	      0.0	    0.3 	  0.4
implicit batch messages received					439,716 	 691.6	       10.2	      345.8	     59.8	  303.5 	388.0
implicit batch messages sent						441,820 	 695.0	       10.3	      347.5	     57.2	  307.1 	387.9
messages flow controlled						 62,079 	  97.7		1.4	       48.8	      4.6	   45.6 	 52.1
messages queue sent actual					      3,704,949        5,827.0	       86.1	    2,913.5	    543.0	2,529.6       3,297.4
messages queue sent logical					      3,520,423        5,538.0	       81.8	    2,769.0	    490.7	2,422.0       3,116.0
messages received actual					      7,538,490       11,856.7	      175.1	    5,928.4	    687.4	5,442.3       6,414.4
messages received logical					     36,493,074       57,396.1	      847.8	   28,698.0	  4,230.1      25,706.9      31,689.2
messages sent directly						      2,243,554        3,529.8	       52.1	    1,764.9	    665.7	1,294.2       2,235.6
messages sent indirectly					     13,841,800       21,776.9	      321.6	   10,888.4	  3,869.2	8,152.5      13,624.4
messages sent not implicit batched					298,314 	 469.3		6.9	      234.6	     36.0	  209.2 	260.1
messages sent pbatched						     32,059,440       50,430.6	      744.8	   25,215.3	  2,718.7      23,292.9      27,137.7
msgs received kernel queue time (ns)			      3,873,944,292,357 6.09509385E+09 8.999964E+07   3.0475469E+09 1.3645859E+09 2.0826390E+09 4.0124549E+09
msgs received queue time (ms)					      1,317,104        2,072.0	       30.6	    1,036.0	    257.8	  853.7       1,218.3
msgs received queued						     36,493,074       57,396.1	      847.8	   28,698.0	  4,230.1      25,706.9      31,689.2
msgs sent queue time (ms)					      1,987,131        3,126.5	       46.2	    1,563.3	    741.4	1,039.0       2,087.5
msgs sent queue time on ksxp (ms)				     69,317,544      109,001.0	    1,610.4	   54,500.5	 25,717.6      36,315.4      72,685.6

Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
msgs sent queued						      5,243,051        8,246.8	      121.8	    4,123.4	    115.2	4,042.0       4,204.9
msgs sent queued on ksxp					      7,540,111       11,860.9	      175.2	    5,930.4	    639.9	5,477.9       6,382.9
process batch messages received 				      4,333,680        6,816.7	      100.7	    3,408.3	     57.7	3,367.6       3,449.1
process batch messages sent					      4,633,280        7,287.7	      107.6	    3,643.9	     90.7	3,579.7       3,708.0
receiver cycle time						      1,813,322        2,852.2	       42.1	    1,426.1	     11.8	1,417.8       1,434.5
receiver loop count						      5,550,936        8,730.3	      129.0	    4,365.1	    801.4	3,798.5       4,931.8
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    170      138	      410	   102		  3,715        4,357
   2	    167      134	      378	    64		  3,043        3,360
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    337      272	      788	   166		  6,758        7,717
 Avg	    169      136	      394	    83		  3,379        3,859
 Std	      2        3	       23	    27		    475 	 705
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     41,250.24	    35,707.89	    5,542.35
Database Requests		     41,111.42	    35,687.39	    5,424.03
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				 63.57		  N/A	       63.57
Total (MB)				348.88	       300.21	       48.67
Database (MB)				339.73	       295.45	       44.28
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  4.20		  N/A		4.20
Database (blocks)		     43,485.67	    37,818.22	    5,667.45
Via Buffer Cache (blocks)	     43,481.04	    37,818.16	    5,662.87
Direct (blocks) 			  4.63		 0.06		4.57
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 25,830,907   40,594.66   35,182.81    5,411.85        218,486	    343.36	295.83	     47.54	  5M   4.78ms
     Buffer Cache Re	 22,376,652   35,166.11   35,166.11	   0.00        185,318	    291.24	291.24	      0.00	  5M   4.67ms
     DBWR		  3,369,532    5,295.40        0.00    5,295.40 	27,486	     43.20	  0.00	     43.20	   0
     Others		     11,795	  18.54       16.44	   2.09 	 2,949	      4.63	  4.59	      0.05	6510   2.00ms
     LGWR		     72,733	 114.30        0.00	 114.30 	 2,721	      4.28	  0.00	      4.28     39.7K  19.13ms
     Direct Writes		 30	   0.05        0.00	   0.05 	    11	      0.02	  0.00	      0.02	   0
     Streams AQ 		127	   0.20        0.20	   0.00 	     1	      0.00	  0.00	      0.00	 127   2.17ms
     Direct Reads		 38	   0.06        0.06	   0.00 	     0	      0.00	  0.00	      0.00	   0

   1 Total		  9,708,908   15,258.07   13,225.02    2,033.05 	83,573	    131.34	113.46	     17.88	1.9M   4.50ms
     Buffer Cache Re	  8,409,655   13,216.22   13,216.22	   0.00 	70,683	    111.08	111.08	      0.00	1.9M   4.38ms
     DBWR		  1,266,361    1,990.15        0.00    1,990.15 	10,328	     16.23	  0.00	     16.23	   0
     Others		      6,107	   9.60        8.55	   1.05 	 1,529	      2.40	  2.38	      0.03	3398   2.33ms
     LGWR		     26,615	  41.83        0.00	  41.83 	 1,022	      1.61	  0.00	      1.61     15.4K  20.07ms
     Direct Writes		 14	   0.02        0.00	   0.02 	    10	      0.02	  0.00	      0.02	   0
     Streams AQ 		127	   0.20        0.20	   0.00 	     1	      0.00	  0.00	      0.00	 127   2.17ms
     Direct Reads		 29	   0.05        0.04	   0.00 	     0	      0.00	  0.00	      0.00	   0

   2 Total		 16,121,999   25,336.59   21,957.79    3,378.80        134,913	    212.02	182.37	     29.66	3.2M   4.94ms
     Buffer Cache Re	 13,966,997   21,949.88   21,949.88	   0.00        114,635	    180.16	180.16	      0.00	3.1M   4.84ms
     DBWR		  2,103,171    3,305.25        0.00    3,305.25 	17,158	     26.96	  0.00	     26.96	   0
     LGWR		     46,118	  72.48        0.00	  72.48 	 1,699	      2.67	  0.00	      2.67     24.4K  18.54ms
     Others		      5,688	   8.94        7.89	   1.05 	 1,420	      2.23	  2.21	      0.02	3112   1.64ms
     Direct Writes		 16	   0.03        0.00	   0.03 	     1	      0.00	  0.00	      0.00	   0
     Direct Reads		  9	   0.01        0.01	   0.00 	     0	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 25,806,067   40,555.62   35,153.14    5,402.47        218,279	    343.04	295.57	     47.46   744.49us 1746.15m
     Data File		 25,718,460   40,417.94   35,131.89    5,286.04        212,501	    333.96	290.83	     43.13   744.49us  19.13ms
     Log File		     75,776	 119.09        4.85	 114.24 	 5,516	      8.67	  4.39	      4.27   348.28us 1762.33m
     Control File	      8,490	  13.34       11.54	   1.80 	   132	      0.21	  0.18	      0.03   101.96us
     Other		      2,834	   4.45        4.45	   0.00 	    88	      0.14	  0.14	      0.00     2.45ms
     Temp File			507	   0.80        0.40	   0.39 	    42	      0.07	  0.03	      0.03    71.43us	 .00ns

   1 Total		  9,706,766   15,254.70   13,222.43    2,032.28 	83,553	    131.31	113.43	     17.87   690.25us 1691.75m
     Data File		  9,672,924   15,201.52   13,212.16    1,989.36 	80,947	    127.21	110.99	     16.23   690.36us  16.50ms
     Log File		     28,223	  44.35        2.53	  41.83 	 2,474	      3.89	  2.28	      1.61   160.26us 1716.18m
     Control File	      4,404	   6.92        6.01	   0.91 	    68	      0.11	  0.09	      0.01    24.83us
     Temp File			233	   0.37        0.19	   0.18 	    34	      0.05	  0.03	      0.03    69.31us	 .00ns
     Other			982	   1.54        1.54	   0.00 	    30	      0.05	  0.05	      0.00     2.45ms

   2 Total		 16,099,301   25,300.91   21,930.72    3,370.20        134,726	    211.73	182.14	     29.59   777.19us 1805.54m
     Data File		 16,045,536   25,216.42   21,919.74    3,296.68        131,554	    206.74	179.84	     26.90   777.12us  21.75ms
     Log File		     47,553	  74.73        2.32	  72.41 	 3,042	      4.78	  2.11	      2.67   567.16us 1812.19m
     Control File	      4,086	   6.42        5.53	   0.89 	    64	      0.10	  0.09	      0.01   185.80us
     Other		      1,852	   2.91        2.91	   0.00 	    58	      0.09	  0.09	      0.00     2.45ms
     Temp File			274	   0.43        0.22	   0.21 	     8	      0.01	  0.01	      0.01    72.99us	 .00ns
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   68.8% of Total Logical Reads:      24,754,738
-> Captured Segments account for   70.0% of Total Physical Reads:      24,064,226
-> Captured Segments account for   71.5% of Total Physical Read Requests:      22,708,352
-> Captured Segments account for   71.5% of Total UnOptimized Read Requests:	  22,708,352
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	      36
-> Captured Segments account for   68.6% of Total Physical Writes:	 3,606,269
-> Captured Segments account for   71.5% of Total Physical Write Requests:	 3,451,378
-> Captured Segments account for   14.3% of Total Direct Physical Writes:	    2,909
-> Captured Segments account for    0.0% of Total Table Scans:		     1
-> Captured Segments account for    2.2% of Total CR Blocks Received:		2,541
-> Captured Segments account for   58.7% of Total Current Blocks Received:	     1,950
-> Captured Segments account for    2.1% of Total CR Blocks Served:	      2,572
-> Captured Segments account for   57.4% of Total Current Blocks Served:	   1,993
-> Captured Segments account for   69.8% of Total Global Cache Remote Grants:	   11,553,440
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
db block changes	 USER93     IOPS       CF1			       TABLE	  73751      73757	 36,368    N/A	   17.0
			 USER108    IOPS       CF1			       TABLE	  73833      73837	 36,336    N/A	   16.9
			 USER31     IOPS       CF1			       TABLE	  73429      73424	 35,552    N/A	   16.6
			 USER88     IOPS       CF1			       TABLE	  73729      73733	 35,552    N/A	   16.6
			 USER124    IOPS       CF1			       TABLE	  73913      73917	 35,520    N/A	   16.6
			 USER106    IOPS       CF1			       TABLE	  73823      73827	 35,184    N/A	   16.4
gc cr blocks received	 SYS	    SYSAUX     WRH$_SQL_PLAN		       TABLE	  11147      11147	     17    0.7	   30.9
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 9879926_31 INDEX	  74077      74077	      6    0.2	   10.9
			 SYS	    SYSAUX     WRH$_CON_SYSSTAT     9879926_31 TABLE	  74159      74159	      4    0.2	    7.3
			 SYS	    SYSAUX     WRH$_CON_SYSTEM_EVEN 9879926_31 INDEX	  74165      74165	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_CON_SYSTEM_EVEN 9879926_31 TABLE	  74163      74163	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_ROWCACHE_SUMMAR 9879926_31 TABLE	  74047      74047	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_SERVICE_STAT    9879926_31 TABLE	  74071      74071	      3    0.1	    5.5
			 SYS	    SYSAUX     WRP$_REPORTS	    SYS_P268   TABLE	  74206      74206	      3    0.1	    5.5
			 SYS	    SYSAUX     WRP$_REPORTS_DETAILS SYS_P269   TABLE	  74209      74209	      3    0.1	    5.5
			 SYS	    SYSAUX     WRP$_REPORTS_TIME_BA SYS_P272   TABLE	  74214      74214	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_SYSMETRIC_SUMMA	       INDEX	  11351      11351	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_EVENT_HISTOGRAM 9879926_31 INDEX	  74105      74105	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_PARAMETER_PK    9879926_31 INDEX	  74061      74061	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_SYSSTAT_PK	    9879926_31 INDEX	  74057      74057	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_PARAMETER	    9879926_31 TABLE	  74059      74059	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_SEG_STAT	    9879926_31 TABLE	  74063      74063	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_SYSTEM_EVENT    9879926_31 TABLE	  74027      74027	      1    0.0	    1.8
gc cr blocks served	 SYS	    SYSAUX     WRH$_SQL_PLAN		       TABLE	  11147      11147	     17    0.7	   30.9
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 9879926_31 INDEX	  74077      74077	      6    0.2	   10.9
			 SYS	    SYSAUX     WRH$_CON_SYSSTAT     9879926_31 TABLE	  74159      74159	      4    0.2	    7.3
			 SYS	    SYSAUX     WRH$_CON_SYSTEM_EVEN 9879926_31 INDEX	  74165      74165	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_CON_SYSTEM_EVEN 9879926_31 TABLE	  74163      74163	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_ROWCACHE_SUMMAR 9879926_31 TABLE	  74047      74047	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_SERVICE_STAT    9879926_31 TABLE	  74071      74071	      3    0.1	    5.5
			 SYS	    SYSAUX     WRP$_REPORTS	    SYS_P268   TABLE	  74206      74206	      3    0.1	    5.5
			 SYS	    SYSAUX     WRP$_REPORTS_DETAILS SYS_P269   TABLE	  74209      74209	      3    0.1	    5.5
			 SYS	    SYSAUX     WRP$_REPORTS_TIME_BA SYS_P272   TABLE	  74214      74214	      3    0.1	    5.5
			 SYS	    SYSAUX     WRH$_SYSMETRIC_SUMMA	       INDEX	  11351      11351	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_EVENT_HISTOGRAM 9879926_31 INDEX	  74105      74105	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_PARAMETER_PK    9879926_31 INDEX	  74061      74061	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_SYSSTAT_PK	    9879926_31 INDEX	  74057      74057	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_PARAMETER	    9879926_31 TABLE	  74059      74059	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_SEG_STAT	    9879926_31 TABLE	  74063      74063	      1    0.0	    1.8
			 SYS	    SYSAUX     WRH$_SYSTEM_EVENT    9879926_31 TABLE	  74027      74027	      1    0.0	    1.8
gc cu blocks received	 USER12     IOPS       CF1			       TABLE	  73335      73342	    174    8.9	   23.2
			 USER35     IOPS       CF1			       TABLE	  73450      73453	    171    8.8	   22.8
			 USER64     IOPS       CF1			       TABLE	  73609      73613	    164    8.4	   21.8
			 USER43     IOPS       CF1			       TABLE	  73490      73493	    149    7.6	   19.8
			 USER21     IOPS       CF1			       TABLE	  73379      73374	     93    4.8	   12.4
gc cu blocks served	 USER12     IOPS       CF1			       TABLE	  73335      73342	    174    8.7	   23.2
			 USER35     IOPS       CF1			       TABLE	  73450      73453	    171    8.6	   22.8
			 USER64     IOPS       CF1			       TABLE	  73609      73613	    164    8.2	   21.8
			 USER43     IOPS       CF1			       TABLE	  73490      73493	    149    7.5	   19.8
			 USER21     IOPS       CF1			       TABLE	  73379      73374	     93    4.7	   12.4
gc remote grants	 USER21     IOPS       CF1			       TABLE	  73379      73374	157,840    1.4	   23.5
			 USER43     IOPS       CF1			       TABLE	  73490      73493	155,330    1.3	   23.1
			 USER91     IOPS       CF1			       TABLE	  73743      73740	120,761    1.0	   18.0
			 USER111    IOPS       CF1			       TABLE	  73844      73847	119,812    1.0	   17.8
			 USER126    IOPS       CF1			       TABLE	  73922      73926	117,503    1.0	   17.5
logical reads		 SYS	    SYSTEM     IND$			       TABLE	     19 	 2	654,688    2.6	   40.9
			 USER108    IOPS       CF1			       TABLE	  73833      73837	239,216    1.0	   14.9
			 USER93     IOPS       CF1			       TABLE	  73751      73757	238,288    1.0	   14.9
			 USER124    IOPS       CF1			       TABLE	  73913      73917	235,232    1.0	   14.7
			 USER50     IOPS       CF1			       TABLE	  73540      73535	233,888    0.9	   14.6

Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   68.8% of Total Logical Reads:      24,754,738
-> Captured Segments account for   70.0% of Total Physical Reads:      24,064,226
-> Captured Segments account for   71.5% of Total Physical Read Requests:      22,708,352
-> Captured Segments account for   71.5% of Total UnOptimized Read Requests:	  22,708,352
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	      36
-> Captured Segments account for   68.6% of Total Physical Writes:	 3,606,269
-> Captured Segments account for   71.5% of Total Physical Write Requests:	 3,451,378
-> Captured Segments account for   14.3% of Total Direct Physical Writes:	    2,909
-> Captured Segments account for    0.0% of Total Table Scans:		     1
-> Captured Segments account for    2.2% of Total CR Blocks Received:		2,541
-> Captured Segments account for   58.7% of Total Current Blocks Received:	     1,950
-> Captured Segments account for    2.1% of Total CR Blocks Served:	      2,572
-> Captured Segments account for   57.4% of Total Current Blocks Served:	   1,993
-> Captured Segments account for   69.8% of Total Global Cache Remote Grants:	   11,553,440
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
physical reads		 USER64     IOPS       CF1			       TABLE	  73609      73613	370,383    1.5	   24.5
			 USER43     IOPS       CF1			       TABLE	  73490      73493	314,087    1.3	   20.8
			 USER12     IOPS       CF1			       TABLE	  73335      73342	298,779    1.2	   19.8
			 USER21     IOPS       CF1			       TABLE	  73379      73374	277,707    1.2	   18.4
			 USER3	    IOPS       CF1			       TABLE	  73263      73267	251,341    1.0	   16.6
physical read requests	 USER108    IOPS       CF1			       TABLE	  73833      73837	236,034    1.0	   20.3
			 USER93     IOPS       CF1			       TABLE	  73751      73757	234,684    1.0	   20.2
			 USER124    IOPS       CF1			       TABLE	  73913      73917	231,325    1.0	   19.9
			 USER12     IOPS       CF1			       TABLE	  73335      73342	230,965    1.0	   19.8
			 USER88     IOPS       CF1			       TABLE	  73729      73733	230,772    1.0	   19.8
physical writes 	 USER108    IOPS       CF1			       TABLE	  73833      73837	 36,655    N/A	   20.4
			 USER93     IOPS       CF1			       TABLE	  73751      73757	 36,214    N/A	   20.2
			 USER88     IOPS       CF1			       TABLE	  73729      73733	 35,568    N/A	   19.8
			 USER31     IOPS       CF1			       TABLE	  73429      73424	 35,541    N/A	   19.8
			 USER124    IOPS       CF1			       TABLE	  73913      73917	 35,423    N/A	   19.7
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	  74075      74075	    416    N/A	  100.0
physical write requests  USER108    IOPS       CF1			       TABLE	  73833      73837	 36,516    1.1	   20.4
			 USER93     IOPS       CF1			       TABLE	  73751      73757	 36,105    1.0	   20.2
			 USER88     IOPS       CF1			       TABLE	  73729      73733	 35,440    1.0	   19.8
			 USER31     IOPS       CF1			       TABLE	  73429      73424	 35,435    1.0	   19.8
			 USER124    IOPS       CF1			       TABLE	  73913      73917	 35,303    1.0	   19.7
row lock waits		 SYS	    SYSAUX     WRM$_SNAPSHOT_DETAIL	       INDEX	  11582      11582	      4    N/A	  100.0
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 745	7.5	     1,848    3.5	   0	    0	       812	  1,768        1,768	       0	   0
CLUSTER 		  99	2.0		99    2.0	   0	    0		99	     99 	  99	       0	   0
DBLINK			   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
EDITION 		  13	0.0		26    0.0	   0	    0		13	     13 	  13	       0	   0
HINTSET OBJECT		  57   17.5		57   17.5	   0	    0		57	     57 	  57	       0	   0
INDEX			  82   69.5		82   69.5	   0	    0		82	     82 	  82	       0	   0
OBJECT ID		 120  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			 117   16.2	       117   16.2	   0	    0		95	    117 	 117	       0	   0
SCHEMA		       2,096	0.0		 0    N/A	   0	    0	       125	      0 	   0	       0	   0
SQL AREA	       6,552   43.6	   331,589    1.0	   4	  120		 0	      0 	   0	       0	   0
SQL AREA BUILD	       1,168   77.7		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS	       1,166   99.7	     1,166   99.7	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        8,528   12.3	    31,250    8.6	 126	    0	    15,021	 21,840       21,840	       0	   0
TRANSFORMATION		  63	0.0		63    0.0	   0	    0		63	     63 	  63	       0	   0
TRIGGER 		   5	0.0		 5    0.0	   0	    0		 0	      5 	   5	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  3,215.0    3,215.0	    1,708.2    1,920.8	      1,548.1	 1,309.5	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
   2	  3,215.0    3,215.0	    1,706.9    1,936.2	      1,508.9	 1,288.8	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      121.5	 .0	1.3	2.7	25    N/A    94    94
       Other	     865.3	N/A	3.6	3.2	22     22   238   238
       PL/SQL	      31.6     30.9	 .2	 .2	 1	1   172   171
       SQL	      18.0     10.3	 .2	 .3	 1	5    96    89
       Total	    1036.4     41.2	5.3	6.4	48     27   600   592
     E Freeable      153.5	 .0	4.1	8.7	42    N/A    37    37
       Other	     636.7	N/A	3.1	4.5	37     37   205   205
       PL/SQL	       3.9	3.4	 .0	 .1	 1	2   139   139
       SQL	       3.5	1.8	 .1	 .2	 1     11    34    28
       Total	     797.6	5.2	7.4    13.6	81     49   415   409
   2 B Freeable       97.5	 .0	1.1	2.7	25    N/A    92    92
       Other	     847.9	N/A	3.6	3.4	21     21   234   234
       PL/SQL	      32.4     31.8	 .2	 .2	 1	1   168   168
       SQL	      21.4     14.8	 .2	 .4	 1	5    91    86
       Total	     999.2     46.6	5.1	6.7	48     28   585   580
     E Freeable      136.6	 .0	3.7	8.7	42    N/A    37    37
       Other	     634.9	N/A	3.2	5.2	50     50   201   201
       PL/SQL	       3.0	2.4	 .0	 .2	 2	2   135   135
       SQL	       2.4	1.0	 .1	 .1	 1     11    33    24
       Total	     776.9	3.4	6.9    14.1	95     64   406   397
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p60sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P60S/P60SDB/CONTROLFILE/current.267.1031675639, +FRA
db_block_size			* 8192
db_create_file_dest		* +P60S
db_domain			* example.com
db_name 			* p60sdb
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 137438953472
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p60sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 3371171840
processes			* 640
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_target			* 10133438464
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P60SDB/CONTROLFILE/current.270.1031675639
				* +P60S/P60SDB/CONTROLFILE/current.267.1031675639
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		     4185	   53.12
gc current grant busy		 24.65 UPDATE				   24.65
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


db file sequential read 	 19.02 UPDATE				   18.89


gc current grant 2-way		  3.25 UPDATE				    3.25

	  bhdvtsvjhgvrh 	  1497866750		     3049	   38.56
gc cr multi block request	 17.66 TABLE ACCESS - BY INDEX ROWID BAT   17.64
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		  7.79 TABLE ACCESS - BY INDEX ROWID BAT    5.62


db file parallel read		  6.49 TABLE ACCESS - BY INDEX ROWID BAT    6.49

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		     4185	   53.12
UPDATE					   52.28 gc current grant busy	   24.65
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	  bhdvtsvjhgvrh 	  1497866750		     3049	   38.56
TABLE ACCESS - BY INDEX ROWID BATCHED	   35.41 gc cr multi block reque   17.64
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    3.10 gc cr grant busy	    2.18

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       53.70
   SQL								       53.70
			  --------------------------------------------------------------------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc current grant busy		    Cluster	    FOREGROUND
     24.66	30.71
db file sequential read 	    User I/O	    FOREGROUND
     23.74	29.56
gc cr multi block request	    Cluster	    FOREGROUND
     18.86	23.48
gc cr grant busy		    Cluster	    FOREGROUND
      8.26	10.28
db file parallel read		    User I/O	    FOREGROUND
      6.49	 8.08
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
db file sequential read 	 23.76		     "1","41338","1"	   0.01
file#			   block#		      blocks

gc cr multi block request	 18.86		     "8","33937","1"	   0.01
file#			   block#		      class#

db file parallel read		  6.49		       "1","77","77"	   4.68
files			   blocks		      requests

gc current multi block request	  1.35	   "9","16340048","16777230"	   0.01
file#			   block#		      id#

db file parallel write		  1.33		"1","0","2147483647"	   0.53
requests		   interrupt		      timeout

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Top DB Objects by DB Time with respect to Application, Cluster,
   User I/O,  buffer busy waits and In-Memory DB events only.
-> Tablespace name is not available for reports generated from the root PDB
   of a consolidated database.
-> When ** MISSING ** occurs, some of the object attributes may not be available.

      Object ID % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------
Object Name (Type)				      Tablespace
----------------------------------------------------- --------------------------------
	  73335       1.04 db file sequential read		0.28
USER12.CF1 (TABLE)				      IOPS
	  73609       1.02 db file scattered read		0.23
USER64.CF1 (TABLE)				      IOPS
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			 DB/Inst: P60SDB/p60sdb1  Snaps: 53-54
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
12:13:25   (1.6 min)	1,402 db file sequential read		  349	 4.41
			      gc current grant busy		  336	 4.25
			      gc cr multi block request 	  240	 3.04
12:15:00   (5.0 min)	4,137 gc current grant busy		1,121	14.18
			      db file sequential read		  960	12.14
			      gc cr multi block request 	  829	10.48
12:20:00   (4.0 min)	2,368 db file sequential read		  570	 7.21
			      gc current grant busy		  493	 6.23
			      gc cr multi block request 	  422	 5.34
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_54'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 53 to 54.
Time period starts at 12-FEB-20 12.13.24 PM
Time period ends at 12-FEB-20 12.24.01 PM

Analysis Target
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 73429 seconds.
The average number of active sessions was 115.27.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       115.27 | 100	   1
2  Top SQL Statements	      111.47 | 96.7	   2
3  Global Cache Messaging     74.36 | 64.51	   1
4  Buffer Busy - Hot Objects  42.88 | 37.2	   0
5  "User I/O" wait Class      37.36 | 32.41	   0
6  Global Cache Lost Blocks   2.5 | 2.17	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 115.64 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 120086 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 10026 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.22	     ADDM:3889879926_1_54
    2	    p60sdb2  49.78	     ADDM:3889879926_2_54

   Recommendation 1: Host Configuration
   Estimated benefit is 115.27 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 74.36 active sessions, 64.51% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 75.56 active sessions, 65.55% of total activity.


Finding 2: Top SQL Statements
Impact is 111.83 active sessions, 96.7% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.3	     ADDM:3889879926_1_54
    2	    p60sdb2  49.7	     ADDM:3889879926_2_54

   Recommendation 1: SQL Tuning
   Estimated benefit is 64.37 active sessions, 55.84% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 41323 times and
      had an average elapsed time of 0.93 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 46.87 active sessions, 40.66% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 232484 times and
      had an average elapsed time of 0.12 seconds.


Finding 3: Global Cache Messaging
Impact is 74.6 active sessions, 64.51% of total activity.
---------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  60.03	     ADDM:3889879926_1_54
    2	    p60sdb2  39.97	     ADDM:3889879926_2_54

   Recommendation 1: Application Analysis
   Estimated benefit is 74.36 active sessions, 64.51% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID "35dumc2tpr9dv" is responsible for 54% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 75.56 active sessions, 65.55% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 43.02 active sessions, 37.2% of total activity.
---------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  100	     ADDM:3889879926_1_54

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 42.88 active sessions, 37.2% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 74.36 active sessions, 64.51% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 75.56 active sessions, 65.55% of total activity.


Finding 5: "User I/O" wait Class
Impact is 37.47 active sessions, 32.41% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  65.33	     ADDM:3889879926_2_54
    1	    p60sdb1  34.67	     ADDM:3889879926_1_54

   No recommendations are available.


Finding 6: Global Cache Lost Blocks
Impact is 2.51 active sessions, 2.17% of total activity.
--------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The database was consuming 120086 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 10026 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  97.84	     ADDM:3889879926_2_54

   Recommendation 1: Host Configuration
   Estimated benefit is 2.5 active sessions, 2.17% of total activity.
   ------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 74.36 active sessions, 64.51% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 75.56 active sessions, 65.55% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  57.98	     50.22
    2	    p60sdb2  mcracpoc2.example.com  57.56	     49.78

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1
		    53	12 Feb 2020 12:13    1
		    54	12 Feb 2020 12:24    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 53

End   Snapshot Id specified: 54



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_53_54.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P60SDB, Snaps: 53-54</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>3889879926</td><td headers="Database Name" class='awrc'>P60SDB</td><td headers="Database UniqueName" class='awrc'>p60sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>53</td><td align="right" headers="SnapshotIds End" class='awrc'>54</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>1,223.82</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>10.61</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p60sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>12-Feb-20 12:10</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>10.60</td><td align="right" class='awrc'>614.61</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>57.98</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p60sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>12-Feb-20 12:10</td><td class='awrnc'>12-Feb-20 12:13</td><td class='awrnc'>12-Feb-20 12:24</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>10.58</td><td align="right" class='awrnc'>609.21</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>57.56</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>115.64</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_54</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>115.64</td><td align="right" class='awrnc'>96.70</td><td scope="row" class='awrnc'>ADDM:3889879926_54</td><td class='awrnc'>12-Feb-20 12:13</td><td class='awrnc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>115.64</td><td align="right" class='awrc'>64.51</td><td scope="row" class='awrc'>ADDM:3889879926_54</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>115.64</td><td align="right" class='awrnc'>37.20</td><td scope="row" class='awrnc'>ADDM:3889879926_54</td><td class='awrnc'>12-Feb-20 12:13</td><td class='awrnc'>12-Feb-20 12:24</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>115.64</td><td align="right" class='awrc'>32.41</td><td scope="row" class='awrc'>ADDM:3889879926_54</td><td class='awrc'>12-Feb-20 12:13</td><td class='awrc'>12-Feb-20 12:24</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>7,872</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>1,472</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>160</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>3,232</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>7,872</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>1,472</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>160</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>3,232</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>9,664</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>7,872</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,472</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>160</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,232</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9,664</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>7,872</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,472</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>160</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,232</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>9,664</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>7,872</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,472</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>160</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,232</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>32</td><td align="right" headers="CPU #Cores" class='awrc'>16</td><td align="right" headers="CPU #Sckts" class='awrc'>1</td><td align="right" headers="Load Begin" class='awrclb'>14.10</td><td align="right" headers="Load End" class='awrc'>7.36</td><td align="right" headers="%CPU %Busy" class='awrclb'>16.29</td><td align="right" headers="%CPU %Usr" class='awrc'>4.49</td><td align="right" headers="%CPU %Sys" class='awrc'>8.40</td><td align="right" headers="%CPU %WIO" class='awrc'>20.21</td><td align="right" headers="%CPU %Idl" class='awrc'>83.71</td><td align="right" headers="Time(s) Busy" class='awrclb'>3,050.84</td><td align="right" headers="Time(s) Idle" class='awrc'>15,674.78</td><td align="right" headers="Time(s) Total" class='awrc'>18,725.62</td><td align="right" headers="Memory MB" class='awrclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>32</td><td align="right" headers="CPU #Cores" class='awrnc'>16</td><td align="right" headers="CPU #Sckts" class='awrnc'>1</td><td align="right" headers="Load Begin" class='awrnclb'>13.32</td><td align="right" headers="Load End" class='awrnc'>11.12</td><td align="right" headers="%CPU %Busy" class='awrnclb'>29.66</td><td align="right" headers="%CPU %Usr" class='awrnc'>7.96</td><td align="right" headers="%CPU %Sys" class='awrnc'>13.48</td><td align="right" headers="%CPU %WIO" class='awrnc'>23.19</td><td align="right" headers="%CPU %Idl" class='awrnc'>70.34</td><td align="right" headers="Time(s) Busy" class='awrnclb'>5,462.57</td><td align="right" headers="Time(s) Idle" class='awrnc'>12,956.26</td><td align="right" headers="Time(s) Total" class='awrnc'>18,418.83</td><td align="right" headers="Memory MB" class='awrnclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>8,513.41</td><td align="right" class='awrct'>28,631.04</td><td align="right" class='awrct'>37,144.45</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>36,876.64</td><td align="right" class='awrc'>1,130.56</td><td align="right" class='awrc'>35,875.63</td><td align="right" class='awrc'>11.98</td><td align="right" class='awrc'>11.59</td><td align="right" class='awrc'>9.19</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1,859.69</td><td align="right" class='awrc'>1,190.52</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>36,552.35</td><td align="right" class='awrnc'>2,882.09</td><td align="right" class='awrnc'>35,550.93</td><td align="right" class='awrnc'>4.40</td><td align="right" class='awrnc'>4.27</td><td align="right" class='awrnc'>12.07</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,268.95</td><td align="right" class='awrnc'>1,472.80</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>73,428.99</td><td align="right" class='awrct'>4,012.64</td><td align="right" class='awrct'>71,426.56</td><td align="right" class='awrct'>16.38</td><td align="right" class='awrct'>15.86</td><td align="right" class='awrct'>21.25</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>4,128.64</td><td align="right" class='awrct'>2,663.32</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>36,714.50</td><td align="right" class='awrnc'>2,006.32</td><td align="right" class='awrnc'>35,713.28</td><td align="right" class='awrnc'>8.19</td><td align="right" class='awrnc'>7.93</td><td align="right" class='awrnc'>10.63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,064.32</td><td align="right" class='awrnc'>1,331.66</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>229.30</td><td align="right" class='awrc'>1,238.52</td><td align="right" class='awrc'>229.60</td><td align="right" class='awrc'>5.37</td><td align="right" class='awrc'>5.17</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>289.38</td><td align="right" class='awrc'>199.60</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>50.22</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>3.07</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>97.29</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.03</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.03</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>45.04</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>64.02</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>49.78</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>7.88</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>97.26</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.01</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.01</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>54.96</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>64.91</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>5.48</td><td align="right" class='awrct'>97.27</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>64.46</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>32.41</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>65.55</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.46</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>8,249.54</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>72.49</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.90</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>28,388.87</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,130.56</td><td align="right" class='awrc'>36,876.64</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>15,546.46</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>587.69</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>19,742.69</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,882.09</td><td align="right" class='awrnc'>36,552.35</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>23,796.00</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>660.18</td><td align="right" class='awrct'>0.27</td><td align="right" class='awrct'>0.92</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>2.09</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>48,131.57</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>4,012.64</td><td align="right" class='awrct'>73,428.99</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>11,898.00</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>330.09</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>24,065.78</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,006.32</td><td align="right" class='awrnc'>36,714.50</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>5,159.70</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>364.30</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>6,113.77</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,238.52</td><td align="right" class='awrc'>229.30</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>22.37</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.00</td><td align="right" headers="%DBtime Other" class='awrc'>0.20</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>0.00</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.01</td><td align="right" headers="%DBtime Config" class='awrc'>0.00</td><td align="right" headers="%DBtime Cluster" class='awrc'>76.98</td><td align="right" headers="%DBtime Admin" class='awrc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>3.07</td><td align="right" class='awrc'>50.22</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>42.53</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>1.61</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.00</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.00</td><td align="right" headers="%DBtime Config" class='awrnc'>0.00</td><td align="right" headers="%DBtime Cluster" class='awrnc'>54.01</td><td align="right" headers="%DBtime Admin" class='awrnc'>0.00</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>7.88</td><td align="right" class='awrnc'>49.78</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>32.45</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.90</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>65.50</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>5.48</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,451,825</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20,446.54</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>27.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>9.55ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>4,492,009</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17,645.53</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>317.53us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>641,219</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15,165.31</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>20.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>41.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>19.16ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>504,824</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,891.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>10.49ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>410,927</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,202.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>680.95us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,012.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>207,283</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,304.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>24.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>13.85ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>2,330</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,265.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>543.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>565.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>542.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>588.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>32.60ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>230,183</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,012.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.25ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>202,182</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>966.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>483.79us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>544,405</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>12,260.62</td><td align="right" headers="WaitTime AvgWait" class='awrct'>22.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>33.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>219,218</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,094.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>41.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.66</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,662,922</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,062.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>188,475</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,325.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>11.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>132,420</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,762.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>61,481</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,530.47</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,130.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>95,249</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>517.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>21,573</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>509.97</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>97,065</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>429.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,829,087</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>11,583.53</td><td align="right" headers="WaitTime AvgWait" class='awrct'>4.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>31.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>907,420</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,185.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>22.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>422,001</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,070.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>278,507</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,439.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,882.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>316,349</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,566.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,282</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,237.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>542.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>145,802</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>774.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>4,395</td><td align="right" headers="Event %Timeouts" class='awrc'>33.13</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>580.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>132.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>105,117</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>536.91</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,451,366</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20,443.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>27.84</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>9.55ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>4,484,749</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17,627.75</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>316.13us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>641,153</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15,165.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>20.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>41.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>19.17ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>501,572</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,857.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>10.52ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>410,918</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,202.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>681.03us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,012.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>207,191</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,304.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>24.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>13.85ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>2,322</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.83</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>542.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>565.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>542.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>588.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>32.71ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>201,981</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>965.76</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>483.40us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>121,867</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>758.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>138.36us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>544,334</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>12,259.35</td><td align="right" headers="WaitTime AvgWait" class='awrct'>22.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>33.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>219,204</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,094.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>41.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.66</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,659,991</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,057.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>187,517</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,311.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>11.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>132,419</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,762.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>61,479</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,530.47</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,130.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>21,573</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>509.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>23.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>96,988</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>429.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>58,097</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>355.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,824,758</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>11,570.44</td><td align="right" headers="WaitTime AvgWait" class='awrct'>4.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>31.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>907,032</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,184.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>22.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>421,949</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,070.20</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>278,499</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,439.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,882.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>314,055</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,545.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.97</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,274</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,232.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>542.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>145,712</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>773.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>2,845</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>574.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>201.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>104,993</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>536.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,663.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>64.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>230,183</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,012.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.25ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>40,820</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>780.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>19.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>18.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>19.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>11,055</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>121.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.53ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>7,748</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>46.97</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>117.14us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>3,250</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>34.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.21ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>638</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19.65</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>49.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>26.26ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7,259</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17.66</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>.99ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>638</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>45.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>26.79ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>582</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>8.22ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,190.52</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>64.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>95,249</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>517.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>15,757</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>315.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>2,854</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>38.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>2,641</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrnclb'>321</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>15.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>49.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>321</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>45.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>958</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.76</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,023</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.20</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>291</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>23.90ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,472.80</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>64.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>134,934</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>494.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>21.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>25,063</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>465.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>20.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>8,201</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>82.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>5,107</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>2,292</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>20.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>4,328</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12.98</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.00ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>856</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>1,221</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>1,888</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,451,366</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20,443.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>27.84</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.55ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>4,484,749</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17,627.75</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>316.13us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>641,153</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15,165.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>20.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>41.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>501,572</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,857.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>410,918</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,202.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>681.03us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>207,191</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,304.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>24.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.85ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,322</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>542.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>565.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>542.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>588.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>32.71ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>201,981</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>965.76</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>483.40us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>121,867</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>758.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>138.36us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>3,187</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>623.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>195.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>172.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>143.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>201.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.69ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>21,573</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>509.97</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>23.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>619</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>334.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>540.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>555.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>539.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>571.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.37ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>10,683</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>244.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>25.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>37.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.04ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>31,112</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>168.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.37ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>1,758</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>48.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.62ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>640</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>44.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.45ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>625</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>18.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>975</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>12.88ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block request</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.75</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1107.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1107.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1107.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1107.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>641</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>121.32us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc remaster</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>50.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1008.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1338.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>677.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1999.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>934.53ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3899.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3899.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3899.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3899.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>3,412</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>867.38us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>689.20us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>480.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>898.12us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>295.45us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>4,103</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>567.37us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>497.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>400.65us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>594.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>136.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>138</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.49ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>422.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>401.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>338.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>464.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>89.80ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache lock</td><td align="right" headers="Event Waits" class='awrclb'>46</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>24.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current retry</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1007.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1007.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1007.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1007.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>1,917</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>515.73us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>435.27us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>324.85us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>545.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>156.15us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Commit</td><td headers="Wait Event" class='awrnc'>log file sync</td><td align="right" headers="Event Waits" class='awrnclb'>82</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.25ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.89ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>195</td><td align="right" headers="Event %Timeouts" class='awrc'>1.03</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.68ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.48ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>42</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.03ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges message buffer allocation</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>58</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>62.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>62.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>62.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrnclb'>685</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>318.63us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.19us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>264.42us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>335.96us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>50.59us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>299</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>638.17us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>531.49us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>393.41us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>669.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>195.27us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>243</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>779.17us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>737.19us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>686.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>787.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>71.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>4,401</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.86us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.57us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>25</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>676.51us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>60</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>391.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>319</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>311.92us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>249.74us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>150.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>349.42us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>140.98us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>2,322</td><td align="right" headers="Event %Timeouts" class='awrc'>99.87</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.56us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>29.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>36.70us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.87us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>14.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>518.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: XL - fault extent map</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>40.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>40.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>172</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>187.03us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>276.43us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>156.31us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>396.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>169.87us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>44</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>719.93us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>248.61us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.44ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>340.71us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>26.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>26.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.68ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>965</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.85us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.30us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>564.20ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.25ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>125.33us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.79ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrnclb'>126</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>70.95us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>70.95us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>70.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>70.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.33ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.58ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>556</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.16us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.84us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.44us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>393</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.65us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.95us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.09us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.81us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.22us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>57</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>43.77us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>36.13us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>20.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>52.26us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>22.81us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>read by other session</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>181.38us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>232.16us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>158.82us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>305.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>103.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>25</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>86.08us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>86.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>71.38us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>21.65us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>700.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>700.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>700.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>700.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>616.67us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>616.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>616.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>616.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>881.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>881.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>881.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>881.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>287.20us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>236.88us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>153.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>320.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>118.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>198.17us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>198.17us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>198.17us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>198.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrnclb'>52</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.56us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.65us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>19.80us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.45us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc quiesce</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>113.71us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>113.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>113.71us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>113.71us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>259.33us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>259.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>259.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>259.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>123.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>123.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>123.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>123.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>41</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.80us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.89us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.63us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.64us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>266.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>266.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>266.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>266.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.92us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.06us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.78us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.22us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>27.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.75us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.50us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.12us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrnclb'>2,097</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,297.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3002.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3002.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3000.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3005.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.02ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>393</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>630.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1603.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.86</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1189.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2377.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1680.19ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deque wait</td><td align="right" headers="Event Waits" class='awrnclb'>5,776</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>509.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>88.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>88.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>87.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>89.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.36ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrclb'>1,158</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.73ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrnclb'>1,002</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.00ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>875</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>580.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrnclb'>60</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>319.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.58ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>230,183</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,012.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>40,820</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>780.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.03ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>11,055</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>121.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.53ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrnclb'>7,748</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>46.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>117.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>3,250</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>34.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.53ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.21ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrnclb'>638</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.65</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>49.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>26.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>7,259</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrnclb'>638</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>26.79ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>582</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>18.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>481</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.63ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>15.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.70ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>1,679</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.28ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>1,710</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.13ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>315.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.80ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,199</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.61ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>4,924</td><td align="right" headers="Event %Timeouts" class='awrnc'>96.71</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.65</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.55ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>406.45us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.58ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>3,778</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>224.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.46ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>215,451</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.96us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.27us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>reliable message</td><td align="right" headers="Event Waits" class='awrclb'>330</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.47ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.35ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.68</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>584.60ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>584.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>584.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>584.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache lock</td><td align="right" headers="Event Waits" class='awrclb'>474</td><td align="right" headers="Event %Timeouts" class='awrc'>3.59</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.34ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.47ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrnclb'>5,673</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>735.37us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>738.85us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>662.70us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>814.99us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>107.69us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>183</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>19.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>29.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.65ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrnclb'>2,193</td><td align="right" headers="Event %Timeouts" class='awrnc'>44.14</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>263.55us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrclb'>142</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.44</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.25ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>19.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>36.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>403</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.31ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>465</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.55ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrnclb'>103</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.19ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrclb'>126</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.61ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>94,130</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.69</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.57us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>24.68us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.58us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>7,312</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>342.19us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>343.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>232.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>455.02us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>157.11us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>107</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>23.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.91ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>144.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>78.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>155.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>108.71ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>475</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.88ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>635.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>604.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>510.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>697.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>132.14ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrnclb'>152</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.68</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.36ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write</td><td align="right" headers="Event Waits" class='awrclb'>39</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>35.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>35.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.57ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrnclb'>434</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>728.35us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.33ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>2,640</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>472.45us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>410.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>302.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>519.01us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>153.02us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,489</td><td align="right" headers="Event %Timeouts" class='awrnc'>84.55</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>800.08us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>788.61us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>105.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.97ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>52</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.51ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>638</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>223.26us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.18ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>2,621</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>427.94us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>397.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>335.76us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>460.11us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>87.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>47</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>23.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.03ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>885</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>883.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>423.24us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>19</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>52.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>45.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>86.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>57.89ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>484</td><td align="right" headers="Event %Timeouts" class='awrc'>29.13</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.89</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>690.69us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>2,424</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>351.91us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>334.97us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>276.65us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>393.29us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>82.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs remastering wait for read latch</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>50.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>50.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>46.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>55.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.82ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrnclb'>73,028</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.45us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.20us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>24</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.63ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.40ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" headers="Event Waits" class='awrnclb'>10</td><td align="right" headers="Event %Timeouts" class='awrnc'>60.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>55.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>55.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>48.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>62.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.70ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>201</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>47</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.44</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>431.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrclb'>14,717</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.48us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.39us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.14us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>90</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.25ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrclb'>12,576</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.89us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>26.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>33.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.36us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>447</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.37</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>817.88us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>793.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>760.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>827.34us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>47.44us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>797</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>431.62us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>392.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>336.99us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>448.39us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>78.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>124</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.04ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges message buffer allocation</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>299.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>299.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>299.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>299.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>1,032</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>237.57us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>237.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>224.71us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>250.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>18.37us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>66</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>527.63us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>os thread creation</td><td align="right" headers="Event Waits" class='awrnclb'>103</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>729.46us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>49</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.40ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Commit</td><td headers="Wait Event" class='awrnc'>log file sync</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>42.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>25.11ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrclb'>228</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>633.06us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>563.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>483.13us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>644.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>114.02us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>79</td><td align="right" headers="Event %Timeouts" class='awrnc'>59.49</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>259.44us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.89ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>510.55us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrnclb'>2,869</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>37.36us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>37.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>29.39us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.57us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.69ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>754.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.70ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrnclb'>27</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.86ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>423.43us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Administrative</td><td headers="Wait Event" class='awrc'>JS kgl get object wait</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>99.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>99.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>99.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>99.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>62</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>156.37us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>167</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>454.91us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>349.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>216.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>483.76us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>189.26us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>1,041</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>72.92us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>72.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>59.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>86.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.17us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>2,506</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.17us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>25.34us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>35.92us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.95ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.01ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrnclb'>42</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.51ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>405.54us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.38ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrnclb'>6,197</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.39us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.72us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.74us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.25ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.50ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" headers="Event Waits" class='awrclb'>115</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>335.52us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>340.20us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>308.58us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>371.82us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>44.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path read</td><td align="right" headers="Event Waits" class='awrnclb'>29</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>593.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>604.41us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>40</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>821.65us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>702.79us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>533.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>872.59us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>240.13us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.89ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>723.37us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TQ - TM contention</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.60ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrclb'>52</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>388.98us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>373.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>338.71us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>407.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>48.64us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: DW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.59ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.03ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrnclb'>10</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>882.53us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.36ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrnclb'>53</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>278.17us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>198.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>104.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>292.35us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>132.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.99ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>468.81us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrnclb'>48</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>285.04us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>304.49us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>226.70us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>382.28us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>110.01us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>18</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>655.94us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>457.38us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>234.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>680.76us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>315.91us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>57.14</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>1,764</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.87us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.39us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.15us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>51</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>200.82us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>197.02us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>189.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>204.21us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.16us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TX - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>235.86us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>235.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>235.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>235.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: PW - flush prewarm buffers</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>603.16us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrnclb'>169</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.80us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.09us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.69us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>19.48us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.21us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>224.38us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>251.84us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>212.18us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>291.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>56.09us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>947.33us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>901.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>763.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>195.52us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TD - KTF dump entries</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.38ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>752.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>894.49us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>584.33us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>584.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>584.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>585.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>read by other session</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrnclb'>160</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.26us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.27us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.58us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>446.65ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>129.82us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>116.95us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>69.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>164.14us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>66.75us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: kjci process context latch</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>121.25us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>121.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>121.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>121.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>142</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.06us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.05us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.35us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.84us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>131</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.26us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.89us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.61us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>510.05ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: SM -  contention</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>348.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>348.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>348.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>348.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ Background Master: slave start</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>219.67us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>201.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>146.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>256.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>78.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.26us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.20us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>271.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>271.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>271.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>271.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.61us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.61us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.32us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>409.38ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>233.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>233.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>233.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>233.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: active service list</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>207.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>207.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>207.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>207.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>75.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>75.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>75.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>75.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>23</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.39us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.78us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.43us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.87us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>102.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>102.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>471.40ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.67us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.33us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM background starting</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrnclb'>643</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>82,563.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>128.40 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>20.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>128.49 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>125.19 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>131.79 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4666.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrclb'>153,902</td><td align="right" headers="Event %Timeouts" class='awrc'>16.24</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>31,019.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>201.55ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>7.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>205.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>177.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>232.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>38.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>5,635</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>21,307.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3781.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>5.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3780.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3772.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3788.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.39ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>class slave wait</td><td align="right" headers="Event Waits" class='awrclb'>15,938</td><td align="right" headers="Event %Timeouts" class='awrc'>77.44</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14,739.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>924.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>3.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>924.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>820.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1029.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>147.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrnclb'>1,932</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.95</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,781.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1957.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1957.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1957.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1957.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.57us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrclb'>375,988</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,775.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>42.60us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrnclb'>132,700</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.64</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,734.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>444.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pmon timer</td><td align="right" headers="Event Waits" class='awrclb'>840</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,519.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.95ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>49.34us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>44,890</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,517.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>56.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>56.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>56.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>56.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>36.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrclb'>8,382</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,517.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>189.17us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>17,198</td><td align="right" headers="Event %Timeouts" class='awrnc'>80.06</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,514.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>146.20ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>146.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>145.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>147.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.25ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrclb'>5,551,432</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,476.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>446.14us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>451.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>410.76us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>492.08us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>57.50us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>59</td><td align="right" headers="Event %Timeouts" class='awrnc'>25.42</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,440.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>41.36 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>41.54 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>39.37 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>43.70 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3061.67ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>23</td><td align="right" headers="Event %Timeouts" class='awrc'>95.65</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,860.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>80.88 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>78.81 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>62.97 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>94.66 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>22.41 s</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrnclb'>33,659</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,681.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>49.95ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>52.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>37.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>67.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.86ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,320.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>78.68us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrnclb'>43</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,290.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>30.24us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrclb'>4,266</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.84</td><td align="right" headers="WaitTime AvgWait" class='awrc'>295.55ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>295.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>287.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>303.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.57ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PING</td><td align="right" headers="Event Waits" class='awrnclb'>1,170</td><td align="right" headers="Event %Timeouts" class='awrnc'>18.46</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1077.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1080.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1019.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1141.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>86.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrclb'>720</td><td align="right" headers="Event %Timeouts" class='awrc'>87.78</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1750.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1750.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1750.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1750.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>70.58us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrnclb'>1,260</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1000.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1000.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1000.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1000.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>50.77us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>OFS idle</td><td align="right" headers="Event Waits" class='awrclb'>420</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3000.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3000.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3000.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3000.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>54.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pman timer</td><td align="right" headers="Event Waits" class='awrnclb'>420</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,259.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2999.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>65.77us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>lreg timer</td><td align="right" headers="Event Waits" class='awrclb'>419</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,258.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3002.59ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3002.59ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3002.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3002.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>65.88us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,258.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>629.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>314.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>314.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>314.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrclb'>12,676</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,255.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>99.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>99.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>98.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>99.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>260.99us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>3,912</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,236.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>316.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>316.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>313.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>318.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.37ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrclb'>100</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,232.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.32 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.34 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.85 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.83 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>698.00ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrnclb'>20</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>389.33us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>smon timer</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>141.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Timer</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>614.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>jobq slave wait</td><td align="right" headers="Event Waits" class='awrclb'>563</td><td align="right" headers="Event %Timeouts" class='awrc'>97.87</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>279.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>495.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>495.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>495.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>496.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>587.71us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: load balancer idle</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>135.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.07 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.58 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>25.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.16 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3651.48ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrclb'>386</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.38ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrnclb'>1,418</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.05ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>19.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.19ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>132</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>692.24us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>703.66us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>326.99us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>532.69us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrclb'>1,363</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.68us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>20.68us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.48us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.12us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat monitor sleep</td><td align="right" headers="Event Waits" class='awrnclb'>45</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.84us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>134.69ns</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ Background Master: slave start</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ: RAC AQ Network</td><td align="right" class='awrnc'>12.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>88.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>212.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>64.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(59)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM background starting</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>5610</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>29.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>14.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>77.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>42</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>54</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>70.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>434</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>1734</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>47.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>1737</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>1059</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>80.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>94.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>3738</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>1043</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>36.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>2107</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>54.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS kgl get object wait</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>8012</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(2)</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>2166</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>189</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>48.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>10.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>224</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>7604</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>43.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>3429</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>52.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>612</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>38.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>614</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>41.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>1233</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.4</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>97.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>85.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(18)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(10)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX qref latch</td><td align="right" class='awrnc'>220</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>124</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>41.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>41.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>522</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>91.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>126</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>161</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>65.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>579</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>57.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>7417</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S wait on X</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>72.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.0(12)</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>93.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(36)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(16)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>407.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(25)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(53)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>227.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(55)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>199.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>48.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(10)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>4.4M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(154)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>61.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(205)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(197)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path read</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>32.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>152</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>41.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>45.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>55.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>663</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>481</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>124</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>69</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TQ - TM contention</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TX - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - index contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: XL - fault extent map</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>1232</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>60</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>41.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>53.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>621</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>44.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>55.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>134</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>31.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>499.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(52)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(29)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(65)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(191)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>30.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(21)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>975</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>59.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>633.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(26)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(15)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(30)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(81)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(129)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(28)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>1768</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>71.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>28.6</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>199</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>1020</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>51.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>32.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>2328</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>44.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>55.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>206.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(102)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>1.4M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(171)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(85)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(218)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(639)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(155)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>10.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>121K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(32)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(34)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(4)</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>9655</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>2151</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1805</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>96.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>124</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>699</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>88.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>85.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>115</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2835</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>6427</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: active service list</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>331</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>1404</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>53</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>3796</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>4468</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>54</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>259</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>481</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>52</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>6173</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>95.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>505</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>502</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>2326</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>76.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>40.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>25.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>876</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>87</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>44.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>38.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>101</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>78.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>101</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>66.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>325</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.6</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>48</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>39.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>9,392,804</td><td align="right" class='awrc'>9,128,427</td><td align="right" class='awrc'>1,360,387</td><td align="right" class='awrc'>1,022,205</td><td align="right" class='awrc'>2,624,198</td><td align="right" class='awrc'>4,732</td><td align="right" class='awrc'>123,265</td><td align="right" class='awrc'>7,028</td><td align="right" class='awrc'>382</td><td align="right" class='awrc'>16,006</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>15,361,934</td><td align="right" class='awrnc'>14,935,799</td><td align="right" class='awrnc'>2,245,882</td><td align="right" class='awrnc'>1,712,568</td><td align="right" class='awrnc'>4,426,009</td><td align="right" class='awrnc'>4,465</td><td align="right" class='awrnc'>192,657</td><td align="right" class='awrnc'>4,471</td><td align="right" class='awrnc'>359</td><td align="right" class='awrnc'>27,038</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>24,754,738</td><td align="right" class='awrct'>24,064,226</td><td align="right" class='awrct'>3,606,269</td><td align="right" class='awrct'>2,734,773</td><td align="right" class='awrct'>7,050,207</td><td align="right" class='awrct'>9,197</td><td align="right" class='awrct'>315,922</td><td align="right" class='awrct'>11,499</td><td align="right" class='awrct'>741</td><td align="right" class='awrct'>43,044</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>12,377,369</td><td align="right" class='awrnc'>12,032,113</td><td align="right" class='awrnc'>1,803,135</td><td align="right" class='awrnc'>1,367,386</td><td align="right" class='awrnc'>3,525,104</td><td align="right" class='awrnc'>4,599</td><td align="right" class='awrnc'>157,961</td><td align="right" class='awrnc'>5,750</td><td align="right" class='awrnc'>371</td><td align="right" class='awrnc'>21,522</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>4,220,812</td><td align="right" class='awrc'>4,106,432</td><td align="right" class='awrc'>626,140</td><td align="right" class='awrc'>488,160</td><td align="right" class='awrc'>1,274,073</td><td align="right" class='awrc'>189</td><td align="right" class='awrc'>49,068</td><td align="right" class='awrc'>1,808</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>7,801</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>14,761.71</td><td align="right" class='awrc'>14,346.22</td><td align="right" class='awrc'>2,137.98</td><td align="right" class='awrc'>1,606.50</td><td align="right" class='awrc'>4,124.18</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>193.72</td><td align="right" class='awrc'>11.05</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>25.15</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>24,183.83</td><td align="right" class='awrnc'>23,512.98</td><td align="right" class='awrnc'>3,535.62</td><td align="right" class='awrnc'>2,696.04</td><td align="right" class='awrnc'>6,967.73</td><td align="right" class='awrnc'>7.03</td><td align="right" class='awrnc'>303.29</td><td align="right" class='awrnc'>7.04</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>42.57</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>38,945.55</td><td align="right" class='awrct'>37,859.20</td><td align="right" class='awrct'>5,673.61</td><td align="right" class='awrct'>4,302.54</td><td align="right" class='awrct'>11,091.92</td><td align="right" class='awrct'>14.47</td><td align="right" class='awrct'>497.02</td><td align="right" class='awrct'>18.08</td><td align="right" class='awrct'>1.17</td><td align="right" class='awrct'>67.72</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>19,472.77</td><td align="right" class='awrnc'>18,929.60</td><td align="right" class='awrnc'>2,836.80</td><td align="right" class='awrnc'>2,151.27</td><td align="right" class='awrnc'>5,545.96</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>248.51</td><td align="right" class='awrnc'>9.04</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>33.86</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>6,662.45</td><td align="right" class='awrc'>6,481.88</td><td align="right" class='awrc'>988.28</td><td align="right" class='awrc'>770.43</td><td align="right" class='awrc'>2,010.69</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>77.48</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>12.31</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>586.83</td><td align="right" class='awrc'>570.31</td><td align="right" class='awrc'>84.99</td><td align="right" class='awrc'>63.86</td><td align="right" class='awrc'>163.95</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>7.70</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>568.16</td><td align="right" class='awrnc'>552.40</td><td align="right" class='awrnc'>83.06</td><td align="right" class='awrnc'>63.34</td><td align="right" class='awrnc'>163.70</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>7.13</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>577.50</td><td align="right" class='awrct'>561.36</td><td align="right" class='awrct'>84.03</td><td align="right" class='awrct'>63.60</td><td align="right" class='awrct'>163.82</td><td align="right" class='awrct'>0.23</td><td align="right" class='awrct'>7.41</td><td align="right" class='awrct'>0.30</td><td align="right" class='awrct'>0.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>976</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>1,313</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>1,037</td><td align="right" headers="BlocksServed GCCR" class='awrc'>1,267</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>20,177,495</td><td align="right" headers="Messages GESReceived" class='awrc'>8,644</td><td align="right" headers="Messages GCSSent" class='awrc'>16,680,267</td><td align="right" headers="Messages GESSent" class='awrc'>9,090</td><td align="right" headers="Messages SentDirect" class='awrc'>823,480</td><td align="right" headers="Messages SentIndir" class='awrc'>5,187,387</td><td align="right" headers="GCBlks Lost" class='awrclb'>63</td><td align="right" headers="GCCR Failure" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>974</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>1,228</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>956</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>1,305</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>16,465,325</td><td align="right" headers="Messages GESReceived" class='awrnc'>5,324</td><td align="right" headers="Messages GCSSent" class='awrnc'>20,032,632</td><td align="right" headers="Messages GESSent" class='awrnc'>11,935</td><td align="right" headers="Messages SentDirect" class='awrnc'>1,420,074</td><td align="right" headers="Messages SentIndir" class='awrnc'>8,654,413</td><td align="right" headers="GCBlks Lost" class='awrnclb'>2,943</td><td align="right" headers="GCCR Failure" class='awrncbb'>3</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>1,950</td><td align="right" class='awrct'>2,541</td><td align="right" class='awrclbt'>1,993</td><td align="right" class='awrct'>2,572</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>36,642,820</td><td align="right" class='awrct'>13,968</td><td align="right" class='awrct'>36,712,899</td><td align="right" class='awrct'>21,025</td><td align="right" class='awrct'>2,243,554</td><td align="right" class='awrct'>13,841,800</td><td align="right" class='awrclbt'>3,006</td><td align="right" class='awrcbbt'>3</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>975</td><td align="right" class='awrnc'>1,271</td><td align="right" class='awrnclb'>997</td><td align="right" class='awrnc'>1,286</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>18,321,410</td><td align="right" class='awrnc'>6,984</td><td align="right" class='awrnc'>18,356,450</td><td align="right" class='awrnc'>10,513</td><td align="right" class='awrnc'>1,121,777</td><td align="right" class='awrnc'>6,920,900</td><td align="right" class='awrnclb'>1,503</td><td align="right" class='awrncbb'>2</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1</td><td align="right" class='awrc'>60</td><td align="right" class='awrclb'>57</td><td align="right" class='awrc'>27</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>2,624,901</td><td align="right" class='awrc'>2,348</td><td align="right" class='awrc'>2,370,480</td><td align="right" class='awrc'>2,012</td><td align="right" class='awrc'>421,856</td><td align="right" class='awrc'>2,451,558</td><td align="right" class='awrclb'>2,036</td><td align="right" class='awrcbb'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>1.53</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>2.06</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>1.63</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>1.99</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>31,710.91</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>13.58</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>26,214.68</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>14.29</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>1,294.18</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>8,152.49</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>0</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>1.53</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>1.93</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>1.51</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>2.05</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>25,920.87</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>8.38</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>31,536.77</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>18.79</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>2,235.58</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>13,624.38</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>5</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>3.07</td><td align="right" class='awrct'>4.00</td><td align="right" class='awrclbt'>3.13</td><td align="right" class='awrct'>4.05</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>57,631.78</td><td align="right" class='awrct'>21.97</td><td align="right" class='awrct'>57,751.45</td><td align="right" class='awrct'>33.07</td><td align="right" class='awrct'>3,529.76</td><td align="right" class='awrct'>21,776.87</td><td align="right" class='awrclbt'>5</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>1.53</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnclb'>1.57</td><td align="right" class='awrnc'>2.02</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>28,815.89</td><td align="right" class='awrnc'>10.98</td><td align="right" class='awrnc'>28,875.72</td><td align="right" class='awrnc'>16.54</td><td align="right" class='awrnc'>1,764.88</td><td align="right" class='awrnc'>10,888.44</td><td align="right" class='awrnclb'>2</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.00</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrclb'>0.09</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>4,094.18</td><td align="right" class='awrc'>3.68</td><td align="right" class='awrc'>3,763.29</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>665.67</td><td align="right" class='awrc'>3,869.22</td><td align="right" class='awrclb'>3</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.06</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.08</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.06</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.08</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>1,260.62</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.54</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>1,042.13</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.57</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>51.45</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>324.09</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.00</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.04</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.05</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.04</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.05</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>608.97</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.20</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>740.91</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>0.44</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>52.52</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>320.08</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.11</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.05</td><td align="right" class='awrct'>0.06</td><td align="right" class='awrclbt'>0.05</td><td align="right" class='awrct'>0.06</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>934.80</td><td align="right" class='awrct'>0.37</td><td align="right" class='awrct'>891.52</td><td align="right" class='awrct'>0.50</td><td align="right" class='awrct'>51.98</td><td align="right" class='awrct'>322.09</td><td align="right" class='awrclbt'>0.06</td><td align="right" class='awrcbbt'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>2.77</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.02</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>97.21</td><td align="right" class='awrc'>54.13</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>2.76</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.01</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>97.23</td><td align="right" class='awrnc'>51.80</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>318</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>9779</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>0</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>18333</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>0.47</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>28883</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>15263</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>1.83</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1591</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>3200</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>0</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>19825</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>4.37</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>5021</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>20000</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>1.26</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>247</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>13269</td><td align="right" headers="QueueTime(us) Received" class='awrc'>27</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>17</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>30</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>13.63</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>85.89</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>0.48</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>516</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>5689</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>47</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>25</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>62</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>14.05</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>85.62</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>0.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>146</td><td align="right" headers="BlockRequests CU" class='awrc'>1,172</td><td align="right" headers="BlockRequests Data" class='awrc'>1,167</td><td align="right" headers="BlockRequests Undo" class='awrc'>0</td><td align="right" headers="BlockRequests TX" class='awrc'>19</td><td align="right" headers="Results Current" class='awrclb'>1,265</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>2</td><td align="right" headers="Results DskRd" class='awrc'>51</td><td align="right" headers="Results Fail" class='awrc'>0</td><td align="right" headers="Fairness DownConv" class='awrclb'>194</td><td align="right" headers="Light Works" class='awrclb'>0</td><td align="right" headers="Total Flushes" class='awrclb'>6</td><td align="right" headers="Total Builds" class='awrc'>146</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>27</td><td align="right" headers="BlockRequests CU" class='awrnc'>1,374</td><td align="right" headers="BlockRequests Data" class='awrnc'>201</td><td align="right" headers="BlockRequests Undo" class='awrnc'>0</td><td align="right" headers="BlockRequests TX" class='awrnc'>1,090</td><td align="right" headers="Results Current" class='awrnclb'>1,314</td><td align="right" headers="Results Private" class='awrnc'>0</td><td align="right" headers="Results Zero" class='awrnc'>0</td><td align="right" headers="Results DskRd" class='awrnc'>87</td><td align="right" headers="Results Fail" class='awrnc'>0</td><td align="right" headers="Fairness DownConv" class='awrnclb'>46</td><td align="right" headers="Light Works" class='awrnclb'>0</td><td align="right" headers="Total Flushes" class='awrnclb'>57</td><td align="right" headers="Total Builds" class='awrnc'>27</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>173</td><td align="right" class='awrct'>2,546</td><td align="right" class='awrct'>1,368</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>1,109</td><td align="right" class='awrclbt'>2,579</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>2</td><td align="right" class='awrct'>138</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>240</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrclbt'>63</td><td align="right" class='awrct'>173</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>87</td><td align="right" class='awrnc'>1,273</td><td align="right" class='awrnc'>684</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>555</td><td align="right" class='awrnclb'>1,290</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>120</td><td align="right" class='awrnclb'>0</td><td align="right" class='awrnclb'>32</td><td align="right" class='awrnc'>87</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>84</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>683</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>757</td><td align="right" class='awrclb'>35</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>105</td><td align="right" class='awrclb'>0</td><td align="right" class='awrclb'>36</td><td align="right" class='awrc'>84</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>47.37</td><td align="right" class='awrc'>52.63</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>83.33</td><td align="right" class='awrnc'>16.67</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>31</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>203</td><td align="right" headers="CRBlocks %Immed" class='awrc'>98.03</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.99</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.99</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>913</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>54.22</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>43.70</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>2.08</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>17069</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>17082</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>29744</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>3100</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>30667</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>30043</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>32714</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>3940</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>1,095</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>92.79</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>4.93</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>2.28</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>15</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>8606</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>8039</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>21446</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>3908</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>1676</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1676</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>23</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>56</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>16.07</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>82.14</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>1.79</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>1367</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1367</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>2130</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>1486</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>2199</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>4740</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclbt'>2</td><td align="right" headers="Instance# Src" class='awrnct'>1</td><td headers="Block Class" class='awrnclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrnclbt'>1,134</td><td align="right" headers="CRBlocks %Immed" class='awrnct'>98.77</td><td align="right" headers="CRBlocks %Busy" class='awrnct'>0.35</td><td align="right" headers="CRBlocks %Cngst" class='awrnct'>0.88</td><td align="right" headers="CurrentBlocks Received" class='awrnclbt'>834</td><td align="right" headers="CurrentBlocks %Immed" class='awrnct'>43.88</td><td align="right" headers="CurrentBlocks %Busy" class='awrnct'>54.32</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnct'>1.80</td><td align="right" headers="CRAvgTime(us) All" class='awrnclbt'>3382</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnct'>3322</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnct'>15506</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnct'>5310</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclbt'>5567</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnct'>4753</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnct'>6268</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrbt'>4280</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>73</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>106</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>12.26</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>85.85</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>1.89</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>1272</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1272</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>1802</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>1257</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1809</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>5028</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>15</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>86.67</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>6.67</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>6.67</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>14</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>3346</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>1418</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>26568</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>5193</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>4805</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>4805</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>1,016</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>8039</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>8039</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>199</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>495</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>17082</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>17082</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>30043</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>30043</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>23</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>9</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>1367</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>1367</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>1486</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>1486</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>1,120</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>366</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>3322</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>3322</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>4753</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>4753</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>73</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>13</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>1272</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>1272</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>1257</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>1257</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>13</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>1418</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>1418</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.31.173</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>545</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.19</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>63</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>533</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.17</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>1788</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>1.50</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>63</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>49841</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>376.33</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>1711</td><td align="right" headers="500bytes Std|Dev" class='awrct'>1.18</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>61</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>14283</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>67.80</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>57</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>516</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.45</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>62</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>465</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.32</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>4,015.33</td><td align="right" headers="Sent(MB) Cache" class='awrc'>26.31</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>7.28</td><td align="right" headers="Sent(MB) DLM" class='awrc'>3,959.84</td><td align="right" headers="Sent(MB) PNG" class='awrc'>1.06</td><td align="right" headers="Sent(MB) Misc" class='awrc'>20.84</td><td align="right" headers="Received(MB) Total" class='awrclb'>5,350.93</td><td align="right" headers="Received(MB) Cache" class='awrc'>9.67</td><td align="right" headers="Received(MB) IPQ" class='awrc'>14.91</td><td align="right" headers="Received(MB) DLM" class='awrc'>5,307.77</td><td align="right" headers="Received(MB) PNG" class='awrc'>1.06</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>17.52</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>5,293.17</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>9.60</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>14.84</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>5,250.18</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>1.04</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>17.51</td><td align="right" headers="Received(MB) Total" class='awrnclb'>3,957.95</td><td align="right" headers="Received(MB) Cache" class='awrnc'>25.41</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>7.20</td><td align="right" headers="Received(MB) DLM" class='awrnc'>3,903.77</td><td align="right" headers="Received(MB) PNG" class='awrnc'>1.04</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>20.53</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>9,308.50</td><td align="right" class='awrct'>35.91</td><td align="right" class='awrct'>22.13</td><td align="right" class='awrct'>9,210.01</td><td align="right" class='awrct'>2.10</td><td align="right" class='awrct'>38.35</td><td align="right" class='awrclbt'>9,308.88</td><td align="right" class='awrct'>35.08</td><td align="right" class='awrct'>22.11</td><td align="right" class='awrct'>9,211.53</td><td align="right" class='awrct'>2.10</td><td align="right" class='awrcrbt'>38.05</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>4,654.25</td><td align="right" class='awrnc'>17.95</td><td align="right" class='awrnc'>11.06</td><td align="right" class='awrnc'>4,605.01</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>19.17</td><td align="right" class='awrnclb'>4,654.44</td><td align="right" class='awrnc'>17.54</td><td align="right" class='awrnc'>11.05</td><td align="right" class='awrnc'>4,605.77</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrncrb'>19.03</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>903.57</td><td align="right" class='awrc'>11.81</td><td align="right" class='awrc'>5.34</td><td align="right" class='awrc'>912.41</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>2.36</td><td align="right" class='awrclb'>984.98</td><td align="right" class='awrc'>11.14</td><td align="right" class='awrc'>5.45</td><td align="right" class='awrc'>992.78</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrcrb'>2.13</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>6.31</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.04</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.01</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>6.22</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.03</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>8.41</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.02</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.02</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>8.34</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.03</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>8.33</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.02</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.02</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>8.27</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.03</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>6.23</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.04</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.01</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>6.15</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.03</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>14.64</td><td align="right" class='awrct'>0.06</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>14.49</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.06</td><td align="right" class='awrclbt'>14.64</td><td align="right" class='awrct'>0.06</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>14.49</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.06</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>7.32</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnclb'>7.32</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.03</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1.43</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>1.54</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>17,744.90</td><td align="right" headers="Sent Packets" class='awrc'>12,761,107</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>25,751.58</td><td align="right" headers="Received Packets" class='awrc'>12,435,892</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>5,732.69</td><td align="right" headers="Sent Packets" class='awrnc'>7,296,889</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>6,758.91</td><td align="right" headers="Received Packets" class='awrnc'>9,379,423</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>1.10</td><td align="right" headers="Sent Packets" class='awrnc'>2,670</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.00</td><td align="right" headers="Received Packets" class='awrnc'>2,386</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>4.13</td><td align="right" headers="Sent Packets" class='awrc'>4,063</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>3.13</td><td align="right" headers="Received Packets" class='awrc'>4,073</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>84.02</td><td align="right" headers="Sent Packets" class='awrnc'>1,604,798</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>84.02</td><td align="right" headers="Received Packets" class='awrnc'>1,604,798</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>25,906.92</td><td align="right" headers="Sent Packets" class='awrc'>12,764,193</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>17,558.43</td><td align="right" headers="Received Packets" class='awrc'>12,441,300</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>6,700.95</td><td align="right" headers="Sent Packets" class='awrnc'>6,589,350</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>5,771.01</td><td align="right" headers="Received Packets" class='awrnc'>9,450,621</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>1.00</td><td align="right" headers="Sent Packets" class='awrnc'>2,371</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.10</td><td align="right" headers="Received Packets" class='awrnc'>2,685</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>4.00</td><td align="right" headers="Sent Packets" class='awrnc'>3,985</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>3.26</td><td align="right" headers="Received Packets" class='awrnc'>4,107</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>151.71</td><td align="right" headers="Sent Packets" class='awrc'>2,579,902</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>151.71</td><td align="right" headers="Received Packets" class='awrc'>2,579,902</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>56,331.42</td><td align="right" class='awrnct'>43,609,328</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>56,084.16</td><td align="right" class='awrnct'>47,905,187</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>3,313.61</td><td align="right" class='awrc'>2,565,255</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>3,299.07</td><td align="right" class='awrc'>2,817,952</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>7,404.33</td><td align="right" class='awrnc'>4,470,716</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>7,354.57</td><td align="right" class='awrnc'>4,749,750</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>27.89</td><td align="right" headers="Sent Packets" class='awrc'>20,055</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>40.47</td><td align="right" headers="Received Packets" class='awrc'>19,544</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>9.01</td><td align="right" headers="Sent Packets" class='awrnc'>11,468</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>10.62</td><td align="right" headers="Received Packets" class='awrnc'>14,741</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>4</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>4</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.01</td><td align="right" headers="Sent Packets" class='awrc'>6</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>6</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.13</td><td align="right" headers="Sent Packets" class='awrnc'>2,522</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.13</td><td align="right" headers="Received Packets" class='awrnc'>2,522</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>40.78</td><td align="right" headers="Sent Packets" class='awrc'>20,094</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>27.64</td><td align="right" headers="Received Packets" class='awrc'>19,586</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>10.55</td><td align="right" headers="Sent Packets" class='awrnc'>10,373</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>9.09</td><td align="right" headers="Received Packets" class='awrnc'>14,878</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>4</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>4</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.01</td><td align="right" headers="Sent Packets" class='awrnc'>6</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.01</td><td align="right" headers="Received Packets" class='awrnc'>6</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.24</td><td align="right" headers="Sent Packets" class='awrc'>4,061</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.24</td><td align="right" headers="Received Packets" class='awrc'>4,061</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>88.62</td><td align="right" class='awrnct'>68,595</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>88.20</td><td align="right" class='awrnct'>75,353</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>5.21</td><td align="right" class='awrc'>4,035</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>5.19</td><td align="right" class='awrc'>4,433</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>11.65</td><td align="right" class='awrnc'>7,032</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>11.56</td><td align="right" class='awrnc'>7,471</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>3.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>0.53</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>0.01</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>0.09</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>0.00</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>0.14</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>0.27</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>1</td><td align="right" headers="AffinityObjects End" class='awrc'>1</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>7</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>7</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>10</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>3.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>0.35</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>0.01</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>0.10</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>0.00</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>0.19</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>0.02</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>1</td><td align="right" headers="AffinityObjects End" class='awrnc'>1</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>7</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>7</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>10</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>3.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>0.44</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.10</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.17</td><td align="right" class='awrct'>0.15</td><td align="right" class='awrclbt'>1</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>7</td><td align="right" class='awrct'>7</td><td align="right" class='awrcrbt'>10</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>0.53</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnclb'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnclb'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrncrb'>10</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   93.0% of Total DB Time (s):		73,429</li>
<li class="awr">Captured PL/SQL account for   63.1% of Total DB Time (s):	   73,429</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>38,747.92</td><td align="right" headers="Total CPU(s)" class='awrc'>1,675.76</td><td align="right" headers="Total IOWait(s)" class='awrc'>13,133.72</td><td align="right" headers="Total Gets" class='awrc'>3,718,866</td><td align="right" headers="Total Reads" class='awrc'>3,261,866</td><td align="right" headers="Total Rows" class='awrc'>3,264,517</td><td align="right" headers="Total Cluster(s)" class='awrc'>24,799.26</td><td align="right" headers="Total Execs" class='awrc'>41,323</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.94</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.32</td><td align="right" headers="PerExecution Gets" class='awrc'>90.00</td><td align="right" headers="PerExecution Reads" class='awrc'>78.94</td><td align="right" headers="PerExecution Rows" class='awrc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>52.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>41.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>15.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>13.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>51.46</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>13.08</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,003.45</td><td align="right" headers="Total IOWait(s)" class='awrnc'>8,571.68</td><td align="right" headers="Total Gets" class='awrnc'>19,105,083</td><td align="right" headers="Total Reads" class='awrnc'>18,365,466</td><td align="right" headers="Total Rows" class='awrnc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrnc'>20,233.08</td><td align="right" headers="Total Execs" class='awrnc'>232,484</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution Gets" class='awrnc'>82.18</td><td align="right" headers="PerExecution Reads" class='awrnc'>79.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>49.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.36</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>77.18</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>76.32</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>41.98</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>73.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>542.17</td><td align="right" headers="Total CPU(s)" class='awrc'>15.13</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.86</td><td align="right" headers="Total Gets" class='awrc'>121,555</td><td align="right" headers="Total Reads" class='awrc'>114,552</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>430.65</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>542.17</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>15.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.86</td><td align="right" headers="PerExecution Gets" class='awrc'>121,555.00</td><td align="right" headers="PerExecution Reads" class='awrc'>114,552.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>430.65</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.49</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.48</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.89</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>541.42</td><td align="right" headers="Total CPU(s)" class='awrnc'>16.91</td><td align="right" headers="Total IOWait(s)" class='awrnc'>122.05</td><td align="right" headers="Total Gets" class='awrnc'>137,376</td><td align="right" headers="Total Reads" class='awrnc'>130,170</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>413.34</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>541.42</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>16.91</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>122.05</td><td align="right" headers="PerExecution Gets" class='awrnc'>137,376.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>130,170.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>413.34</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.42</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>541.23</td><td align="right" headers="Total CPU(s)" class='awrc'>17.93</td><td align="right" headers="Total IOWait(s)" class='awrc'>131.21</td><td align="right" headers="Total Gets" class='awrc'>146,941</td><td align="right" headers="Total Reads" class='awrc'>139,264</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>404.45</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>541.23</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>17.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>131.21</td><td align="right" headers="PerExecution Gets" class='awrc'>146,941.00</td><td align="right" headers="PerExecution Reads" class='awrc'>139,264.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>404.45</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.45</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.59</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.58</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#6uftfsj7stway">6uftfsj7stway</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>541.15</td><td align="right" headers="Total CPU(s)" class='awrnc'>17.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>120.89</td><td align="right" headers="Total Gets" class='awrnc'>137,590</td><td align="right" headers="Total Reads" class='awrnc'>130,607</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>412.57</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>541.15</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>17.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>120.89</td><td align="right" headers="PerExecution Gets" class='awrnc'>137,590.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>130,607.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>412.57</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.56</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#181vungw6p8xd">181vungw6p8xd</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>541.00</td><td align="right" headers="Total CPU(s)" class='awrc'>15.39</td><td align="right" headers="Total IOWait(s)" class='awrc'>113.20</td><td align="right" headers="Total Gets" class='awrc'>120,001</td><td align="right" headers="Total Reads" class='awrc'>113,700</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>422.25</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>541.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>15.39</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>113.20</td><td align="right" headers="PerExecution Gets" class='awrc'>120,001.00</td><td align="right" headers="PerExecution Reads" class='awrc'>113,700.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>422.25</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.48</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2kagcss8t5vv4">2kagcss8t5vv4</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>540.98</td><td align="right" headers="Total CPU(s)" class='awrnc'>17.62</td><td align="right" headers="Total IOWait(s)" class='awrnc'>119.82</td><td align="right" headers="Total Gets" class='awrnc'>138,620</td><td align="right" headers="Total Reads" class='awrnc'>130,476</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>414.88</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>540.98</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>17.62</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>119.82</td><td align="right" headers="PerExecution Gets" class='awrnc'>138,620.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>130,476.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>414.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.44</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.56</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>540.93</td><td align="right" headers="Total CPU(s)" class='awrc'>16.30</td><td align="right" headers="Total IOWait(s)" class='awrc'>120.01</td><td align="right" headers="Total Gets" class='awrc'>137,989</td><td align="right" headers="Total Reads" class='awrc'>130,619</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>414.93</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>540.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>16.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>120.01</td><td align="right" headers="PerExecution Gets" class='awrc'>137,989.00</td><td align="right" headers="PerExecution Reads" class='awrc'>130,619.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>414.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.41</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.56</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3zfwa5fbzfumr">3zfwa5fbzfumr</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>540.92</td><td align="right" headers="Total CPU(s)" class='awrnc'>16.57</td><td align="right" headers="Total IOWait(s)" class='awrnc'>116.26</td><td align="right" headers="Total Gets" class='awrnc'>133,436</td><td align="right" headers="Total Reads" class='awrnc'>126,364</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>419.29</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>540.92</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>16.57</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>116.26</td><td align="right" headers="PerExecution Gets" class='awrnc'>133,436.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>126,364.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>419.29</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.41</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.53</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   92.3% of Total CPU Time (s): 	  4,013</li>
<li class="awr">Captured PL/SQL account for   63.5% of Total CPU Time (s):	     4,013</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>2,003.45</td><td align="right" headers="Total Elapsed(s)" class='awrc'>29,503.83</td><td align="right" headers="Total IOWait(s)" class='awrc'>8,571.68</td><td align="right" headers="Total Gets" class='awrc'>19,105,083</td><td align="right" headers="Total Reads" class='awrc'>18,365,466</td><td align="right" headers="Total Rows" class='awrc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrc'>20,233.08</td><td align="right" headers="Total Execs" class='awrc'>232,484</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution Gets" class='awrc'>82.18</td><td align="right" headers="PerExecution Reads" class='awrc'>79.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>49.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>40.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>35.97</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>77.18</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>76.32</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.98</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>73.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,675.76</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>38,747.92</td><td align="right" headers="Total IOWait(s)" class='awrnc'>13,133.72</td><td align="right" headers="Total Gets" class='awrnc'>3,718,866</td><td align="right" headers="Total Reads" class='awrnc'>3,261,866</td><td align="right" headers="Total Rows" class='awrnc'>3,264,517</td><td align="right" headers="Total Cluster(s)" class='awrnc'>24,799.26</td><td align="right" headers="Total Execs" class='awrnc'>41,323</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>0.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.32</td><td align="right" headers="PerExecution Gets" class='awrnc'>90.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.94</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.60</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>41.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>52.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.11</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>15.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>13.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>51.46</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>13.08</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fg2dv5vmw40x5">fg2dv5vmw40x5</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>45.19</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.73</td><td align="right" headers="Total IOWait(s)" class='awrc'>234.27</td><td align="right" headers="Total Gets" class='awrc'>241,542</td><td align="right" headers="Total Reads" class='awrc'>228,561</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>276.68</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>45.19</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.73</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>234.27</td><td align="right" headers="PerExecution Gets" class='awrc'>241,542.00</td><td align="right" headers="PerExecution Reads" class='awrc'>228,561.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>276.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.13</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#19x7x3wquabr5">19x7x3wquabr5</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>45.06</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="Total IOWait(s)" class='awrnc'>232.19</td><td align="right" headers="Total Gets" class='awrnc'>244,355</td><td align="right" headers="Total Reads" class='awrnc'>231,443</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>45.06</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>232.19</td><td align="right" headers="PerExecution Gets" class='awrnc'>244,355.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>231,443.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.12</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#718uskqq9cb7g">718uskqq9cb7g</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>44.42</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.55</td><td align="right" headers="Total IOWait(s)" class='awrc'>233.92</td><td align="right" headers="Total Gets" class='awrc'>247,325</td><td align="right" headers="Total Reads" class='awrc'>233,039</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>275.38</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>44.42</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.55</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>233.92</td><td align="right" headers="PerExecution Gets" class='awrc'>247,325.00</td><td align="right" headers="PerExecution Reads" class='awrc'>233,039.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>275.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2ygtzr5pfgqjx">2ygtzr5pfgqjx</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>44.41</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>535.65</td><td align="right" headers="Total IOWait(s)" class='awrnc'>245.05</td><td align="right" headers="Total Gets" class='awrnc'>250,187</td><td align="right" headers="Total Reads" class='awrnc'>236,083</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>263.77</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>44.41</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>535.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>245.05</td><td align="right" headers="PerExecution Gets" class='awrnc'>250,187.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>236,083.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>263.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.03</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2ayr68un3a6cv">2ayr68un3a6cv</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>44.38</td><td align="right" headers="Total Elapsed(s)" class='awrc'>537.08</td><td align="right" headers="Total IOWait(s)" class='awrc'>239.75</td><td align="right" headers="Total Gets" class='awrc'>251,263</td><td align="right" headers="Total Reads" class='awrc'>237,558</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>265.73</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>44.38</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>537.08</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>239.75</td><td align="right" headers="PerExecution Gets" class='awrc'>251,263.00</td><td align="right" headers="PerExecution Reads" class='awrc'>237,558.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>265.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>44.33</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.50</td><td align="right" headers="Total IOWait(s)" class='awrnc'>234.75</td><td align="right" headers="Total Gets" class='awrnc'>244,379</td><td align="right" headers="Total Reads" class='awrnc'>231,393</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>276.69</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>44.33</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>234.75</td><td align="right" headers="PerExecution Gets" class='awrnc'>244,379.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>231,393.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>276.69</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.10</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#c4t1p9t7x1x0h">c4t1p9t7x1x0h</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>43.99</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.81</td><td align="right" headers="Total IOWait(s)" class='awrc'>225.77</td><td align="right" headers="Total Gets" class='awrc'>226,744</td><td align="right" headers="Total Reads" class='awrc'>215,016</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>284.49</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>43.99</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>225.77</td><td align="right" headers="PerExecution Gets" class='awrc'>226,744.00</td><td align="right" headers="PerExecution Reads" class='awrc'>215,016.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>284.49</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.10</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.59</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>43.98</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.29</td><td align="right" headers="Total IOWait(s)" class='awrnc'>226.00</td><td align="right" headers="Total Gets" class='awrnc'>233,641</td><td align="right" headers="Total Reads" class='awrnc'>220,461</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>284.89</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>43.98</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.29</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>226.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>233,641.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>220,461.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>284.89</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.10</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.59</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   91.1% of Total User I/O Wait Time (s):	   23,833</li>
<li class="awr">Captured PL/SQL account for   62.2% of Total User I/O Wait Time (s):	      23,833</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>13,133.72</td><td align="right" headers="Total Elapsed(s)" class='awrc'>38,747.92</td><td align="right" headers="Total CPU(s)" class='awrc'>1,675.76</td><td align="right" headers="Total Gets" class='awrc'>3,718,866</td><td align="right" headers="Total Reads" class='awrc'>3,261,866</td><td align="right" headers="Total Rows" class='awrc'>3,264,517</td><td align="right" headers="Total Cluster(s)" class='awrc'>24,799.26</td><td align="right" headers="Total Execs" class='awrc'>41,323</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.32</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.94</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution Gets" class='awrc'>90.00</td><td align="right" headers="PerExecution Reads" class='awrc'>78.94</td><td align="right" headers="PerExecution Rows" class='awrc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>55.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>52.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>41.76</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>15.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>13.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>51.46</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>13.08</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>8,571.68</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,003.45</td><td align="right" headers="Total Gets" class='awrnc'>19,105,083</td><td align="right" headers="Total Reads" class='awrnc'>18,365,466</td><td align="right" headers="Total Rows" class='awrnc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrnc'>20,233.08</td><td align="right" headers="Total Execs" class='awrnc'>232,484</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>82.18</td><td align="right" headers="PerExecution Reads" class='awrnc'>79.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>35.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>49.93</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>77.18</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>76.32</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>41.98</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>73.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2ygtzr5pfgqjx">2ygtzr5pfgqjx</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>245.05</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.65</td><td align="right" headers="Total CPU(s)" class='awrc'>44.41</td><td align="right" headers="Total Gets" class='awrc'>250,187</td><td align="right" headers="Total Reads" class='awrc'>236,083</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>263.77</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>245.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.65</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.41</td><td align="right" headers="PerExecution Gets" class='awrc'>250,187.00</td><td align="right" headers="PerExecution Reads" class='awrc'>236,083.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>263.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>1.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.11</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2ayr68un3a6cv">2ayr68un3a6cv</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>239.75</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.38</td><td align="right" headers="Total Gets" class='awrnc'>251,263</td><td align="right" headers="Total Reads" class='awrnc'>237,558</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>265.73</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>239.75</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.38</td><td align="right" headers="PerExecution Gets" class='awrnc'>251,263.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>237,558.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>265.73</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>1.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.11</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>234.75</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.50</td><td align="right" headers="Total CPU(s)" class='awrc'>44.33</td><td align="right" headers="Total Gets" class='awrc'>244,379</td><td align="right" headers="Total Reads" class='awrc'>231,393</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>276.69</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>234.75</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.50</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.33</td><td align="right" headers="PerExecution Gets" class='awrc'>244,379.00</td><td align="right" headers="PerExecution Reads" class='awrc'>231,393.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>276.69</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.10</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.99</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fg2dv5vmw40x5">fg2dv5vmw40x5</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>234.27</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.73</td><td align="right" headers="Total CPU(s)" class='awrnc'>45.19</td><td align="right" headers="Total Gets" class='awrnc'>241,542</td><td align="right" headers="Total Reads" class='awrnc'>228,561</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>276.68</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>234.27</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.73</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>45.19</td><td align="right" headers="PerExecution Gets" class='awrnc'>241,542.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>228,561.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>276.68</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.13</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#718uskqq9cb7g">718uskqq9cb7g</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>233.92</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.55</td><td align="right" headers="Total CPU(s)" class='awrc'>44.42</td><td align="right" headers="Total Gets" class='awrc'>247,325</td><td align="right" headers="Total Reads" class='awrc'>233,039</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>275.38</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>233.92</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.55</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.42</td><td align="right" headers="PerExecution Gets" class='awrc'>247,325.00</td><td align="right" headers="PerExecution Reads" class='awrc'>233,039.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>275.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.11</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#19x7x3wquabr5">19x7x3wquabr5</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>232.19</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="Total CPU(s)" class='awrnc'>45.06</td><td align="right" headers="Total Gets" class='awrnc'>244,355</td><td align="right" headers="Total Reads" class='awrnc'>231,443</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>232.19</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>45.06</td><td align="right" headers="PerExecution Gets" class='awrnc'>244,355.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>231,443.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.12</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>226.00</td><td align="right" headers="Total Elapsed(s)" class='awrc'>537.29</td><td align="right" headers="Total CPU(s)" class='awrc'>43.98</td><td align="right" headers="Total Gets" class='awrc'>233,641</td><td align="right" headers="Total Reads" class='awrc'>220,461</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>284.89</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>226.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>537.29</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>43.98</td><td align="right" headers="PerExecution Gets" class='awrc'>233,641.00</td><td align="right" headers="PerExecution Reads" class='awrc'>220,461.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>284.89</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.10</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.94</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.59</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#c4t1p9t7x1x0h">c4t1p9t7x1x0h</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>225.77</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>535.81</td><td align="right" headers="Total CPU(s)" class='awrnc'>43.99</td><td align="right" headers="Total Gets" class='awrnc'>226,744</td><td align="right" headers="Total Reads" class='awrnc'>215,016</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>284.49</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>225.77</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>535.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>43.99</td><td align="right" headers="PerExecution Gets" class='awrnc'>226,744.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>215,016.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>284.49</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.10</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.59</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	24,754,738</li>
<li class="awr">Captured SQL account for   95.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>19,105,083</td><td align="right" headers="Total Reads" class='awrc'>18,365,466</td><td align="right" headers="Total Elapsed(s)" class='awrc'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrc'>2,003.45</td><td align="right" headers="Total IOWait(s)" class='awrc'>8,571.68</td><td align="right" headers="Total Rows" class='awrc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrc'>20,233.08</td><td align="right" headers="Total Execs" class='awrc'>232,484</td><td align="right" headers="PerExecution Gets" class='awrclb'>82.18</td><td align="right" headers="PerExecution Reads" class='awrc'>79.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>77.18</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>76.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>35.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.98</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>73.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrnclb'>3,718,866</td><td align="right" headers="Total Reads" class='awrnc'>3,261,866</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>38,747.92</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,675.76</td><td align="right" headers="Total IOWait(s)" class='awrnc'>13,133.72</td><td align="right" headers="Total Rows" class='awrnc'>3,264,517</td><td align="right" headers="Total Cluster(s)" class='awrnc'>24,799.26</td><td align="right" headers="Total Execs" class='awrnc'>41,323</td><td align="right" headers="PerExecution Gets" class='awrnclb'>90.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.94</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.94</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.32</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.60</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>15.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>13.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>52.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>41.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.11</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>51.46</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>13.08</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0gw0hh7k29jxb">0gw0hh7k29jxb</a></td><td align="right" headers="Total Gets" class='awrclb'>581,984</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.97</td><td align="right" headers="Total CPU(s)" class='awrc'>0.92</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Rows" class='awrc'>104</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>104</td><td align="right" headers="PerExecution Gets" class='awrclb'>5,596.00</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>2.35</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.03</td>
<td class='awrc'>select obj.obj#, obj.file#, ob...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2ayr68un3a6cv">2ayr68un3a6cv</a></td><td align="right" headers="Total Gets" class='awrnclb'>251,263</td><td align="right" headers="Total Reads" class='awrnc'>237,558</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.38</td><td align="right" headers="Total IOWait(s)" class='awrnc'>239.75</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>265.73</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>251,263.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>237,558.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.38</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>239.75</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>265.73</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.01</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2ygtzr5pfgqjx">2ygtzr5pfgqjx</a></td><td align="right" headers="Total Gets" class='awrclb'>250,187</td><td align="right" headers="Total Reads" class='awrc'>236,083</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.65</td><td align="right" headers="Total CPU(s)" class='awrc'>44.41</td><td align="right" headers="Total IOWait(s)" class='awrc'>245.05</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>263.77</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>250,187.00</td><td align="right" headers="PerExecution Reads" class='awrc'>236,083.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.65</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>245.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>263.77</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.03</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#718uskqq9cb7g">718uskqq9cb7g</a></td><td align="right" headers="Total Gets" class='awrnclb'>247,325</td><td align="right" headers="Total Reads" class='awrnc'>233,039</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>535.55</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.42</td><td align="right" headers="Total IOWait(s)" class='awrnc'>233.92</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>275.38</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>247,325.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>233,039.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>535.55</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.42</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>233.92</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>275.38</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td><td align="right" headers="Total Gets" class='awrclb'>244,379</td><td align="right" headers="Total Reads" class='awrc'>231,393</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.50</td><td align="right" headers="Total CPU(s)" class='awrc'>44.33</td><td align="right" headers="Total IOWait(s)" class='awrc'>234.75</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>276.69</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>244,379.00</td><td align="right" headers="PerExecution Reads" class='awrc'>231,393.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.50</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.33</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>234.75</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>276.69</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.99</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#19x7x3wquabr5">19x7x3wquabr5</a></td><td align="right" headers="Total Gets" class='awrnclb'>244,355</td><td align="right" headers="Total Reads" class='awrnc'>231,443</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="Total CPU(s)" class='awrnc'>45.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>232.19</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>244,355.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>231,443.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>45.06</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>232.19</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.99</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fg2dv5vmw40x5">fg2dv5vmw40x5</a></td><td align="right" headers="Total Gets" class='awrclb'>241,542</td><td align="right" headers="Total Reads" class='awrc'>228,561</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.73</td><td align="right" headers="Total CPU(s)" class='awrc'>45.19</td><td align="right" headers="Total IOWait(s)" class='awrc'>234.27</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>276.68</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>241,542.00</td><td align="right" headers="PerExecution Reads" class='awrc'>228,561.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.73</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>45.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>234.27</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>276.68</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.98</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1a042w3h7hz1n">1a042w3h7hz1n</a></td><td align="right" headers="Total Gets" class='awrnclb'>241,471</td><td align="right" headers="Total Reads" class='awrnc'>228,501</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>235.05</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>271.72</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>241,471.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>228,501.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.88</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>235.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>271.72</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.98</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.56</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      24,064,226</li>
<li class="awr">Captured SQL account for   89.9% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>18,365,466</td><td align="right" headers="Total Gets" class='awrc'>19,105,083</td><td align="right" headers="Total Elapsed(s)" class='awrc'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrc'>2,003.45</td><td align="right" headers="Total IOWait(s)" class='awrc'>8,571.68</td><td align="right" headers="Total Rows" class='awrc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrc'>20,233.08</td><td align="right" headers="Total Execs" class='awrc'>232,484</td><td align="right" headers="PerExecution Reads" class='awrclb'>79.00</td><td align="right" headers="PerExecution Gets" class='awrc'>82.18</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>76.32</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>77.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>35.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.98</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>73.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrnclb'>3,261,866</td><td align="right" headers="Total Gets" class='awrnc'>3,718,866</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>38,747.92</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,675.76</td><td align="right" headers="Total IOWait(s)" class='awrnc'>13,133.72</td><td align="right" headers="Total Rows" class='awrnc'>3,264,517</td><td align="right" headers="Total Cluster(s)" class='awrnc'>24,799.26</td><td align="right" headers="Total Execs" class='awrnc'>41,323</td><td align="right" headers="PerExecution Reads" class='awrnclb'>78.94</td><td align="right" headers="PerExecution Gets" class='awrnc'>90.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.94</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.32</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.60</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>13.55</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>15.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>52.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>41.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.11</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>51.46</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>13.08</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2ayr68un3a6cv">2ayr68un3a6cv</a></td><td align="right" headers="Total Reads" class='awrclb'>237,558</td><td align="right" headers="Total Gets" class='awrc'>251,263</td><td align="right" headers="Total Elapsed(s)" class='awrc'>537.08</td><td align="right" headers="Total CPU(s)" class='awrc'>44.38</td><td align="right" headers="Total IOWait(s)" class='awrc'>239.75</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>265.73</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>237,558.00</td><td align="right" headers="PerExecution Gets" class='awrc'>251,263.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>537.08</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.38</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>239.75</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>265.73</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.99</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2ygtzr5pfgqjx">2ygtzr5pfgqjx</a></td><td align="right" headers="Total Reads" class='awrnclb'>236,083</td><td align="right" headers="Total Gets" class='awrnc'>250,187</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>535.65</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.41</td><td align="right" headers="Total IOWait(s)" class='awrnc'>245.05</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>263.77</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>236,083.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>250,187.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>535.65</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>245.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>263.77</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.98</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.03</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#718uskqq9cb7g">718uskqq9cb7g</a></td><td align="right" headers="Total Reads" class='awrclb'>233,039</td><td align="right" headers="Total Gets" class='awrc'>247,325</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.55</td><td align="right" headers="Total CPU(s)" class='awrc'>44.42</td><td align="right" headers="Total IOWait(s)" class='awrc'>233.92</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>275.38</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>233,039.00</td><td align="right" headers="PerExecution Gets" class='awrc'>247,325.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.55</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.42</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>233.92</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>275.38</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.97</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#19x7x3wquabr5">19x7x3wquabr5</a></td><td align="right" headers="Total Reads" class='awrnclb'>231,443</td><td align="right" headers="Total Gets" class='awrnc'>244,355</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="Total CPU(s)" class='awrnc'>45.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>232.19</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>231,443.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>244,355.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>45.06</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>232.19</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>280.74</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td><td align="right" headers="Total Reads" class='awrclb'>231,393</td><td align="right" headers="Total Gets" class='awrc'>244,379</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.50</td><td align="right" headers="Total CPU(s)" class='awrc'>44.33</td><td align="right" headers="Total IOWait(s)" class='awrc'>234.75</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>276.69</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>231,393.00</td><td align="right" headers="PerExecution Gets" class='awrc'>244,379.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.50</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.33</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>234.75</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>276.69</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fg2dv5vmw40x5">fg2dv5vmw40x5</a></td><td align="right" headers="Total Reads" class='awrnclb'>228,561</td><td align="right" headers="Total Gets" class='awrnc'>241,542</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.73</td><td align="right" headers="Total CPU(s)" class='awrnc'>45.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>234.27</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>276.68</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>228,561.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>241,542.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.73</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>45.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>234.27</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>276.68</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1a042w3h7hz1n">1a042w3h7hz1n</a></td><td align="right" headers="Total Reads" class='awrclb'>228,501</td><td align="right" headers="Total Gets" class='awrc'>241,471</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.93</td><td align="right" headers="Total CPU(s)" class='awrc'>42.88</td><td align="right" headers="Total IOWait(s)" class='awrc'>235.05</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>271.72</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>228,501.00</td><td align="right" headers="PerExecution Gets" class='awrc'>241,471.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.88</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>235.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>271.72</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.56</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8vdk6ufyytjkc">8vdk6ufyytjkc</a></td><td align="right" headers="Total Reads" class='awrnclb'>227,993</td><td align="right" headers="Total Gets" class='awrnc'>240,756</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.54</td><td align="right" headers="Total CPU(s)" class='awrnc'>43.47</td><td align="right" headers="Total IOWait(s)" class='awrnc'>227.23</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>281.49</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>227,993.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>240,756.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.54</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>43.47</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>227.23</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>281.49</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   22,708,352</li>
<li class="awr">Captured SQL account for    1.5% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      22,708,352</li>
<li class="awr">Captured SQL account for    1.5% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>298,317</td><td align="right" headers="Total Requests" class='awrc'>298,317</td><td align="right" headers="Total Reads" class='awrc'>18,365,466</td><td align="right" headers="Total Elapsed(s)" class='awrc'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrc'>2,003.45</td><td align="right" headers="Total IOWait(s)" class='awrc'>8,571.68</td><td align="right" headers="Total Rows" class='awrc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrc'>20,233.08</td><td align="right" headers="Total Execs" class='awrc'>232,484</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>1.28</td><td align="right" headers="PerExecution Requests" class='awrc'>1.28</td><td align="right" headers="PerExecution Reads" class='awrc'>79.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.31</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>76.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>35.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.98</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>73.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2ayr68un3a6cv">2ayr68un3a6cv</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>237,558</td><td align="right" headers="Total Requests" class='awrnc'>237,558</td><td align="right" headers="Total Reads" class='awrnc'>237,558</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>537.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.38</td><td align="right" headers="Total IOWait(s)" class='awrnc'>239.75</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>265.73</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>237,558.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>237,558.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>237,558.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>537.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.38</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>239.75</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>265.73</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.05</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.05</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.01</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2ygtzr5pfgqjx">2ygtzr5pfgqjx</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>236,083</td><td align="right" headers="Total Requests" class='awrc'>236,083</td><td align="right" headers="Total Reads" class='awrc'>236,083</td><td align="right" headers="Total Elapsed(s)" class='awrc'>535.65</td><td align="right" headers="Total CPU(s)" class='awrc'>44.41</td><td align="right" headers="Total IOWait(s)" class='awrc'>245.05</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>263.77</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>236,083.00</td><td align="right" headers="PerExecution Requests" class='awrc'>236,083.00</td><td align="right" headers="PerExecution Reads" class='awrc'>236,083.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>535.65</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>44.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>245.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>263.77</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.04</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.04</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.03</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#718uskqq9cb7g">718uskqq9cb7g</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>233,039</td><td align="right" headers="Total Requests" class='awrnc'>233,039</td><td align="right" headers="Total Reads" class='awrnc'>233,039</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>535.55</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.42</td><td align="right" headers="Total IOWait(s)" class='awrnc'>233.92</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>275.38</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>233,039.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>233,039.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>233,039.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>535.55</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.42</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>233.92</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>275.38</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.03</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.03</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#19x7x3wquabr5">19x7x3wquabr5</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>231,443</td><td align="right" headers="Total Requests" class='awrc'>231,443</td><td align="right" headers="Total Reads" class='awrc'>231,443</td><td align="right" headers="Total Elapsed(s)" class='awrc'>537.22</td><td align="right" headers="Total CPU(s)" class='awrc'>45.06</td><td align="right" headers="Total IOWait(s)" class='awrc'>232.19</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>280.74</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>231,443.00</td><td align="right" headers="PerExecution Requests" class='awrc'>231,443.00</td><td align="right" headers="PerExecution Reads" class='awrc'>231,443.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>537.22</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>45.06</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>232.19</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>280.74</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.02</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>231,393</td><td align="right" headers="Total Requests" class='awrnc'>231,393</td><td align="right" headers="Total Reads" class='awrnc'>231,393</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.50</td><td align="right" headers="Total CPU(s)" class='awrnc'>44.33</td><td align="right" headers="Total IOWait(s)" class='awrnc'>234.75</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>276.69</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>231,393.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>231,393.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>231,393.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.50</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>44.33</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>234.75</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>276.69</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.02</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fg2dv5vmw40x5">fg2dv5vmw40x5</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>228,561</td><td align="right" headers="Total Requests" class='awrc'>228,561</td><td align="right" headers="Total Reads" class='awrc'>228,561</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.73</td><td align="right" headers="Total CPU(s)" class='awrc'>45.19</td><td align="right" headers="Total IOWait(s)" class='awrc'>234.27</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>276.68</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>228,561.00</td><td align="right" headers="PerExecution Requests" class='awrc'>228,561.00</td><td align="right" headers="PerExecution Reads" class='awrc'>228,561.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.73</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>45.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>234.27</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>276.68</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.01</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1a042w3h7hz1n">1a042w3h7hz1n</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>228,501</td><td align="right" headers="Total Requests" class='awrnc'>228,501</td><td align="right" headers="Total Reads" class='awrnc'>228,501</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>235.05</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>271.72</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>228,501.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>228,501.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>228,501.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.88</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>235.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>271.72</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.01</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.56</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8vdk6ufyytjkc">8vdk6ufyytjkc</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>227,993</td><td align="right" headers="Total Requests" class='awrc'>227,993</td><td align="right" headers="Total Reads" class='awrc'>227,993</td><td align="right" headers="Total Elapsed(s)" class='awrc'>536.54</td><td align="right" headers="Total CPU(s)" class='awrc'>43.47</td><td align="right" headers="Total IOWait(s)" class='awrc'>227.23</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>281.49</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>227,993.00</td><td align="right" headers="PerExecution Requests" class='awrc'>227,993.00</td><td align="right" headers="PerExecution Reads" class='awrc'>227,993.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>536.54</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>43.47</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>227.23</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>281.49</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.00</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#91pf1uf7kttt1">91pf1uf7kttt1</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>226,997</td><td align="right" headers="Total Requests" class='awrnc'>226,997</td><td align="right" headers="Total Reads" class='awrnc'>226,997</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>536.59</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.61</td><td align="right" headers="Total IOWait(s)" class='awrnc'>229.73</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>281.45</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>226,997.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>226,997.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>226,997.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>536.59</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.61</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>229.73</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>281.45</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.00</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:	  315,922</li>
<li class="awr">Captured SQL account for   90.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>232,484</td><td align="right" headers="Total Elapsed(s)" class='awrc'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrc'>2,003.45</td><td align="right" headers="Total IOWait(s)" class='awrc'>8,571.68</td><td align="right" headers="Total Gets" class='awrc'>19,105,083</td><td align="right" headers="Total Reads" class='awrc'>18,365,466</td><td align="right" headers="Total Rows" class='awrc'>232,537</td><td align="right" headers="Total Cluster(s)" class='awrc'>20,233.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution Gets" class='awrc'>82.18</td><td align="right" headers="PerExecution Reads" class='awrc'>79.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>73.59</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>35.97</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>77.18</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>76.32</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>41.98</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrnclb'>41,323</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>38,747.92</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,675.76</td><td align="right" headers="Total IOWait(s)" class='awrnc'>13,133.72</td><td align="right" headers="Total Gets" class='awrnc'>3,718,866</td><td align="right" headers="Total Reads" class='awrnc'>3,261,866</td><td align="right" headers="Total Rows" class='awrnc'>3,264,517</td><td align="right" headers="Total Cluster(s)" class='awrnc'>24,799.26</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.94</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.32</td><td align="right" headers="PerExecution Gets" class='awrnc'>90.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.94</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.60</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>13.08</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>52.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>41.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.11</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>15.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>13.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>51.46</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrclb'>3,277</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.15</td><td align="right" headers="Total CPU(s)" class='awrc'>0.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>6,652</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>98</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.03</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.03</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>1.04</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td><td align="right" headers="Total Execs" class='awrnclb'>1,733</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.26</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.04</td><td align="right" headers="Total Gets" class='awrnc'>5,912</td><td align="right" headers="Total Reads" class='awrnc'>40</td><td align="right" headers="Total Rows" class='awrnc'>1,733</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.69</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.41</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.02</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrclb'>1,565</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.13</td><td align="right" headers="Total CPU(s)" class='awrc'>0.12</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>4,681</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>1,496</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.99</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.96</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.50</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrnclb'>499</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.17</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="Total Gets" class='awrnc'>1,773</td><td align="right" headers="Total Reads" class='awrnc'>29</td><td align="right" headers="Total Rows" class='awrnc'>276</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.55</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.06</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.55</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.16</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td><td align="right" headers="Total Execs" class='awrclb'>374</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.13</td><td align="right" headers="Total CPU(s)" class='awrc'>0.12</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>2,263</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>374</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>6.05</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.12</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td><td align="right" headers="Total Execs" class='awrnclb'>355</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.01</td><td align="right" headers="Total Gets" class='awrnc'>1,953</td><td align="right" headers="Total Reads" class='awrnc'>5</td><td align="right" headers="Total Rows" class='awrnc'>355</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>5.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5u7g54s63p4ts">5u7g54s63p4ts</a></td><td align="right" headers="Total Execs" class='awrclb'>294</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.03</td><td align="right" headers="Total CPU(s)" class='awrc'>0.03</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>588</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>294</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.00</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.09</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select toid from type$ where p...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td><td align="right" headers="Total Execs" class='awrnclb'>287</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.02</td><td align="right" headers="Total Gets" class='awrnc'>586</td><td align="right" headers="Total Reads" class='awrnc'>27</td><td align="right" headers="Total Rows" class='awrnc'>287</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.04</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.09</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.09</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select text from view$ where r...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	      48,194</li>
<li class="awr">Captured SQL account for   93.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>24,799.26</td><td align="right" headers="Total Elapsed(s)" class='awrc'>38,747.92</td><td align="right" headers="Total CPU(s)" class='awrc'>1,675.76</td><td align="right" headers="Total IOWait(s)" class='awrc'>13,133.72</td><td align="right" headers="Total Gets" class='awrc'>3,718,866</td><td align="right" headers="Total Reads" class='awrc'>3,261,866</td><td align="right" headers="Total Rows" class='awrc'>3,264,517</td><td align="right" headers="Total Execs" class='awrc'>41,323</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>0.60</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.94</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.04</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.32</td><td align="right" headers="PerExecution Gets" class='awrc'>90.00</td><td align="right" headers="PerExecution Reads" class='awrc'>78.94</td><td align="right" headers="PerExecution Rows" class='awrc'>79.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>51.46</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>52.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>41.76</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>55.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>15.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>13.55</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>13.08</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>20,233.08</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>29,503.83</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,003.45</td><td align="right" headers="Total IOWait(s)" class='awrnc'>8,571.68</td><td align="right" headers="Total Gets" class='awrnc'>19,105,083</td><td align="right" headers="Total Reads" class='awrnc'>18,365,466</td><td align="right" headers="Total Rows" class='awrnc'>232,537</td><td align="right" headers="Total Execs" class='awrnc'>232,484</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>0.09</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution Gets" class='awrnc'>82.18</td><td align="right" headers="PerExecution Reads" class='awrnc'>79.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>41.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>40.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>49.93</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>35.97</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>77.18</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>76.32</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>73.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#azs4x4stk5azf">azs4x4stk5azf</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>434.97</td><td align="right" headers="Total Elapsed(s)" class='awrc'>540.19</td><td align="right" headers="Total CPU(s)" class='awrc'>15.30</td><td align="right" headers="Total IOWait(s)" class='awrc'>99.78</td><td align="right" headers="Total Gets" class='awrc'>113,914</td><td align="right" headers="Total Reads" class='awrc'>108,209</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>434.97</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>540.19</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>15.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>99.78</td><td align="right" headers="PerExecution Gets" class='awrc'>113,914.00</td><td align="right" headers="PerExecution Reads" class='awrc'>108,209.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.90</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.42</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.46</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.45</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1y2qx24pugffb">1y2qx24pugffb</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>431.46</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>540.50</td><td align="right" headers="Total CPU(s)" class='awrnc'>15.60</td><td align="right" headers="Total IOWait(s)" class='awrnc'>102.86</td><td align="right" headers="Total Gets" class='awrnc'>122,914</td><td align="right" headers="Total Reads" class='awrnc'>116,459</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>431.46</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>540.50</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>15.60</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>102.86</td><td align="right" headers="PerExecution Gets" class='awrnc'>122,914.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>116,459.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.90</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.39</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.50</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.48</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#cn5r6fnjj1b3d">cn5r6fnjj1b3d</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>430.69</td><td align="right" headers="Total Elapsed(s)" class='awrc'>540.76</td><td align="right" headers="Total CPU(s)" class='awrc'>15.12</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.26</td><td align="right" headers="Total Gets" class='awrc'>118,604</td><td align="right" headers="Total Reads" class='awrc'>112,446</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>430.69</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>540.76</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>15.12</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.26</td><td align="right" headers="PerExecution Gets" class='awrc'>118,604.00</td><td align="right" headers="PerExecution Reads" class='awrc'>112,446.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.44</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.48</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.47</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>430.65</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>542.17</td><td align="right" headers="Total CPU(s)" class='awrnc'>15.13</td><td align="right" headers="Total IOWait(s)" class='awrnc'>105.86</td><td align="right" headers="Total Gets" class='awrnc'>121,555</td><td align="right" headers="Total Reads" class='awrnc'>114,552</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>430.65</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>542.17</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>15.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>105.86</td><td align="right" headers="PerExecution Gets" class='awrnc'>121,555.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>114,552.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.44</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.49</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.48</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#gcfrxjr5zjhjy">gcfrxjr5zjhjy</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>427.13</td><td align="right" headers="Total Elapsed(s)" class='awrc'>540.05</td><td align="right" headers="Total CPU(s)" class='awrc'>16.03</td><td align="right" headers="Total IOWait(s)" class='awrc'>107.48</td><td align="right" headers="Total Gets" class='awrc'>127,299</td><td align="right" headers="Total Reads" class='awrc'>120,745</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>427.13</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>540.05</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>16.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>107.48</td><td align="right" headers="PerExecution Gets" class='awrc'>127,299.00</td><td align="right" headers="PerExecution Reads" class='awrc'>120,745.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.40</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.45</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.51</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>425.27</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>540.52</td><td align="right" headers="Total CPU(s)" class='awrnc'>15.48</td><td align="right" headers="Total IOWait(s)" class='awrnc'>109.18</td><td align="right" headers="Total Gets" class='awrnc'>125,541</td><td align="right" headers="Total Reads" class='awrnc'>119,196</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>425.27</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>540.52</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>15.48</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>109.18</td><td align="right" headers="PerExecution Gets" class='awrnc'>125,541.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>119,196.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.39</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.46</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.51</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>424.34</td><td align="right" headers="Total Elapsed(s)" class='awrc'>540.47</td><td align="right" headers="Total CPU(s)" class='awrc'>15.83</td><td align="right" headers="Total IOWait(s)" class='awrc'>110.66</td><td align="right" headers="Total Gets" class='awrc'>126,116</td><td align="right" headers="Total Reads" class='awrc'>119,290</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>424.34</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>540.47</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>15.83</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>110.66</td><td align="right" headers="PerExecution Gets" class='awrc'>126,116.00</td><td align="right" headers="PerExecution Reads" class='awrc'>119,290.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.39</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.46</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.51</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>422.63</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>540.07</td><td align="right" headers="Total CPU(s)" class='awrnc'>16.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>112.20</td><td align="right" headers="Total Gets" class='awrnc'>130,025</td><td align="right" headers="Total Reads" class='awrnc'>122,905</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>422.63</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>540.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>16.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>112.20</td><td align="right" headers="PerExecution Gets" class='awrnc'>130,025.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>122,905.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.40</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.47</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.53</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.51</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>955</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.72</td><td align="right" headers="perSecond Max" class='awrncrb'>0.78</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>280</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>722</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.57</td><td align="right" headers="perSecond Max" class='awrncrb'>0.57</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>677</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.53</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.53</td><td align="right" headers="perSecond Max" class='awrcrb'>0.54</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>490</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.38</td><td align="right" headers="perSecond Max" class='awrncrb'>0.39</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>471</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.37</td><td align="right" headers="perSecond Max" class='awrncrb'>0.37</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (full) vector count</td><td align="right" class='awrc'>526,254</td><td align="right" class='awrc'>828.01</td><td align="right" class='awrc'>12.23</td><td align="right" headers="perSecond Average" class='awrclb'>414.01</td><td align="right" headers="perSecond StdDev" class='awrc'>210.32</td><td align="right" headers="perSecond Min" class='awrc'>265.29</td><td align="right" headers="perSecond Max" class='awrcrb'>562.73</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO block miss count</td><td align="right" class='awrnc'>17,877,899</td><td align="right" class='awrnc'>28,126.75</td><td align="right" class='awrnc'>415.34</td><td align="right" headers="perSecond Average" class='awrnclb'>14,063.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,002.82</td><td align="right" headers="perSecond Min" class='awrnc'>10,525.84</td><td align="right" headers="perSecond Max" class='awrncrb'>17,600.90</td></tr>
<tr><td scope="row" class='awrc'>Batched IO buffer defrag count</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>250,800</td><td align="right" class='awrnc'>394.58</td><td align="right" class='awrnc'>5.83</td><td align="right" headers="perSecond Average" class='awrnclb'>197.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>73.15</td><td align="right" headers="perSecond Min" class='awrnc'>145.56</td><td align="right" headers="perSecond Max" class='awrncrb'>249.02</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>354,180</td><td align="right" class='awrc'>557.24</td><td align="right" class='awrc'>8.23</td><td align="right" headers="perSecond Average" class='awrclb'>278.62</td><td align="right" headers="perSecond StdDev" class='awrc'>115.90</td><td align="right" headers="perSecond Min" class='awrc'>196.67</td><td align="right" headers="perSecond Max" class='awrcrb'>360.58</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>18,052,079</td><td align="right" class='awrnc'>28,400.83</td><td align="right" class='awrnc'>419.39</td><td align="right" headers="perSecond Average" class='awrnclb'>14,200.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,097.95</td><td align="right" headers="perSecond Min" class='awrnc'>10,595.62</td><td align="right" headers="perSecond Max" class='awrncrb'>17,805.21</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>408,114</td><td align="right" class='awrc'>642.13</td><td align="right" class='awrc'>9.48</td><td align="right" headers="perSecond Average" class='awrclb'>321.06</td><td align="right" headers="perSecond StdDev" class='awrc'>160.04</td><td align="right" headers="perSecond Min" class='awrc'>207.90</td><td align="right" headers="perSecond Max" class='awrcrb'>434.23</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>621,251</td><td align="right" class='awrnc'>977.44</td><td align="right" class='awrnc'>14.43</td><td align="right" headers="perSecond Average" class='awrnclb'>488.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>209.50</td><td align="right" headers="perSecond Min" class='awrnc'>340.58</td><td align="right" headers="perSecond Max" class='awrncrb'>636.86</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>432,225</td><td align="right" class='awrc'>680.11</td><td align="right" class='awrc'>10.04</td><td align="right" headers="perSecond Average" class='awrclb'>340.05</td><td align="right" headers="perSecond StdDev" class='awrc'>207.19</td><td align="right" headers="perSecond Min" class='awrc'>193.55</td><td align="right" headers="perSecond Max" class='awrcrb'>486.56</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>18,695,142</td><td align="right" class='awrc'>29,412.91</td><td align="right" class='awrc'>434.33</td><td align="right" headers="perSecond Average" class='awrclb'>14,706.45</td><td align="right" headers="perSecond StdDev" class='awrc'>5,579.29</td><td align="right" headers="perSecond Min" class='awrc'>10,761.30</td><td align="right" headers="perSecond Max" class='awrcrb'>18,651.61</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>903</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.71</td><td align="right" headers="perSecond Max" class='awrncrb'>0.72</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>903</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.71</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.71</td><td align="right" headers="perSecond Max" class='awrcrb'>0.72</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>4,352,575</td><td align="right" class='awrnc'>6,840.75</td><td align="right" class='awrnc'>101.12</td><td align="right" headers="perSecond Average" class='awrnclb'>3,420.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,630.53</td><td align="right" headers="perSecond Min" class='awrnc'>146.09</td><td align="right" headers="perSecond Max" class='awrncrb'>6,694.65</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>1,290</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>1.01</td><td align="right" headers="perSecond Max" class='awrcrb'>1.02</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>190</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.26</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>736</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.24</td><td align="right" headers="perSecond Min" class='awrnc'>0.41</td><td align="right" headers="perSecond Max" class='awrncrb'>0.75</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>540,234</td><td align="right" class='awrc'>849.57</td><td align="right" class='awrc'>12.55</td><td align="right" headers="perSecond Average" class='awrclb'>424.78</td><td align="right" headers="perSecond StdDev" class='awrc'>154.43</td><td align="right" headers="perSecond Min" class='awrc'>315.59</td><td align="right" headers="perSecond Max" class='awrcrb'>533.98</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>703,345</td><td align="right" class='awrnc'>1,105.80</td><td align="right" class='awrnc'>16.34</td><td align="right" headers="perSecond Average" class='awrnclb'>552.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>427.14</td><td align="right" headers="perSecond Min" class='awrnc'>250.87</td><td align="right" headers="perSecond Max" class='awrncrb'>854.93</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>2,030,389</td><td align="right" class='awrc'>3,193.66</td><td align="right" class='awrc'>47.17</td><td align="right" headers="perSecond Average" class='awrclb'>1,596.83</td><td align="right" headers="perSecond StdDev" class='awrc'>2.98</td><td align="right" headers="perSecond Min" class='awrc'>1,594.73</td><td align="right" headers="perSecond Max" class='awrcrb'>1,598.94</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>787,756</td><td align="right" class='awrnc'>1,239.08</td><td align="right" class='awrnc'>18.30</td><td align="right" headers="perSecond Average" class='awrnclb'>619.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.87</td><td align="right" headers="perSecond Min" class='awrnc'>616.10</td><td align="right" headers="perSecond Max" class='awrncrb'>622.99</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>7,896,017</td><td align="right" class='awrnc'>12,419.91</td><td align="right" class='awrnc'>183.44</td><td align="right" headers="perSecond Average" class='awrnclb'>6,209.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.66</td><td align="right" headers="perSecond Min" class='awrnc'>6,208.07</td><td align="right" headers="perSecond Max" class='awrncrb'>6,211.84</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>37,830</td><td align="right" class='awrc'>59.52</td><td align="right" class='awrc'>0.88</td><td align="right" headers="perSecond Average" class='awrclb'>29.76</td><td align="right" headers="perSecond StdDev" class='awrc'>11.27</td><td align="right" headers="perSecond Min" class='awrc'>21.79</td><td align="right" headers="perSecond Max" class='awrcrb'>37.73</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>248</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.20</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>227</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>442</td><td align="right" class='awrc'>0.70</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.34</td><td align="right" headers="perSecond Max" class='awrcrb'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>152,077</td><td align="right" class='awrnc'>239.26</td><td align="right" class='awrnc'>3.53</td><td align="right" headers="perSecond Average" class='awrnclb'>119.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>41.59</td><td align="right" headers="perSecond Min" class='awrnc'>90.22</td><td align="right" headers="perSecond Max" class='awrncrb'>149.03</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>Effective IO time</td><td align="right" class='awrnc'>46,736</td><td align="right" class='awrnc'>73.47</td><td align="right" class='awrnc'>1.09</td><td align="right" headers="perSecond Average" class='awrnclb'>36.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>33.39</td><td align="right" headers="perSecond Min" class='awrnc'>13.13</td><td align="right" headers="perSecond Max" class='awrncrb'>60.34</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>3,384,628</td><td align="right" class='awrc'>5,324.96</td><td align="right" class='awrc'>78.63</td><td align="right" headers="perSecond Average" class='awrclb'>2,662.48</td><td align="right" headers="perSecond StdDev" class='awrc'>971.17</td><td align="right" headers="perSecond Min" class='awrc'>1,975.76</td><td align="right" headers="perSecond Max" class='awrcrb'>3,349.20</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.24</td><td align="right" headers="perSecond Max" class='awrncrb'>0.25</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>5,767,168</td><td align="right" class='awrc'>9,069.80</td><td align="right" class='awrc'>133.98</td><td align="right" headers="perSecond Average" class='awrclb'>4,534.90</td><td align="right" headers="perSecond StdDev" class='awrc'>1,306.59</td><td align="right" headers="perSecond Min" class='awrc'>3,611.00</td><td align="right" headers="perSecond Max" class='awrcrb'>5,458.80</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>34,109</td><td align="right" class='awrnc'>53.64</td><td align="right" class='awrnc'>0.79</td><td align="right" headers="perSecond Average" class='awrnclb'>26.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.89</td><td align="right" headers="perSecond Min" class='awrnc'>20.53</td><td align="right" headers="perSecond Max" class='awrncrb'>33.11</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>7,168</td><td align="right" class='awrc'>11.27</td><td align="right" class='awrc'>0.17</td><td align="right" headers="perSecond Average" class='awrclb'>5.64</td><td align="right" headers="perSecond StdDev" class='awrc'>0.48</td><td align="right" headers="perSecond Min" class='awrc'>5.30</td><td align="right" headers="perSecond Max" class='awrcrb'>5.97</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>7,294</td><td align="right" class='awrnc'>11.47</td><td align="right" class='awrnc'>0.17</td><td align="right" headers="perSecond Average" class='awrnclb'>5.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.47</td><td align="right" headers="perSecond Min" class='awrnc'>5.40</td><td align="right" headers="perSecond Max" class='awrncrb'>6.07</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>1,778</td><td align="right" class='awrc'>2.80</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>1.40</td><td align="right" headers="perSecond StdDev" class='awrc'>0.57</td><td align="right" headers="perSecond Min" class='awrc'>1.00</td><td align="right" headers="perSecond Max" class='awrcrb'>1.80</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>1,802</td><td align="right" class='awrnc'>2.84</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.55</td><td align="right" headers="perSecond Min" class='awrnc'>1.03</td><td align="right" headers="perSecond Max" class='awrncrb'>1.80</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>192</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>519</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.30</td><td align="right" headers="perSecond Max" class='awrncrb'>0.51</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>391</td><td align="right" class='awrc'>0.61</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.31</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>433</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.41</td></tr>
<tr><td scope="row" class='awrc'>application wait time</td><td align="right" class='awrc'>1,239</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.97</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.96</td><td align="right" headers="perSecond Max" class='awrcrb'>0.99</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>13,235</td><td align="right" class='awrnc'>20.82</td><td align="right" class='awrnc'>0.31</td><td align="right" headers="perSecond Average" class='awrnclb'>10.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>10.39</td><td align="right" headers="perSecond Max" class='awrncrb'>10.42</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>925,882</td><td align="right" class='awrc'>1,456.47</td><td align="right" class='awrc'>21.51</td><td align="right" headers="perSecond Average" class='awrclb'>728.23</td><td align="right" headers="perSecond StdDev" class='awrc'>96.10</td><td align="right" headers="perSecond Min" class='awrc'>660.28</td><td align="right" headers="perSecond Max" class='awrcrb'>796.19</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>55,494,365</td><td align="right" class='awrc'>87,307.58</td><td align="right" class='awrc'>1,289.25</td><td align="right" headers="perSecond Average" class='awrclb'>43,653.79</td><td align="right" headers="perSecond StdDev" class='awrc'>15,533.26</td><td align="right" headers="perSecond Min" class='awrc'>32,670.12</td><td align="right" headers="perSecond Max" class='awrcrb'>54,637.46</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>22,272,300</td><td align="right" class='awrnc'>35,040.41</td><td align="right" class='awrnc'>517.43</td><td align="right" headers="perSecond Average" class='awrnclb'>17,520.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,303.90</td><td align="right" headers="perSecond Min" class='awrnc'>13,062.67</td><td align="right" headers="perSecond Max" class='awrncrb'>21,977.73</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>520,055</td><td align="right" class='awrc'>817.49</td><td align="right" class='awrc'>12.08</td><td align="right" headers="perSecond Average" class='awrclb'>408.74</td><td align="right" headers="perSecond StdDev" class='awrc'>437.27</td><td align="right" headers="perSecond Min" class='awrc'>99.54</td><td align="right" headers="perSecond Max" class='awrcrb'>717.94</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>92,942</td><td align="right" class='awrnc'>146.16</td><td align="right" class='awrnc'>2.16</td><td align="right" headers="perSecond Average" class='awrnclb'>73.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>28.63</td><td align="right" headers="perSecond Min" class='awrnc'>52.83</td><td align="right" headers="perSecond Max" class='awrncrb'>93.32</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>400,923</td><td align="right" class='awrc'>630.74</td><td align="right" class='awrc'>9.31</td><td align="right" headers="perSecond Average" class='awrclb'>315.37</td><td align="right" headers="perSecond StdDev" class='awrc'>95.93</td><td align="right" headers="perSecond Min" class='awrc'>247.54</td><td align="right" headers="perSecond Max" class='awrcrb'>383.20</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>88,458</td><td align="right" class='awrnc'>139.17</td><td align="right" class='awrnc'>2.06</td><td align="right" headers="perSecond Average" class='awrnclb'>69.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.11</td><td align="right" headers="perSecond Min" class='awrnc'>53.24</td><td align="right" headers="perSecond Max" class='awrncrb'>85.93</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>13,385</td><td align="right" class='awrc'>21.05</td><td align="right" class='awrc'>0.31</td><td align="right" headers="perSecond Average" class='awrclb'>10.53</td><td align="right" headers="perSecond StdDev" class='awrc'>0.79</td><td align="right" headers="perSecond Min" class='awrc'>9.97</td><td align="right" headers="perSecond Max" class='awrcrb'>11.08</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>265,272,821,248</td><td align="right" class='awrnc'>417,341,495.71</td><td align="right" class='awrnc'>6,162,829.23</td><td align="right" headers="perSecond Average" class='awrnclb'>208,670,747.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>70,869,590.87</td><td align="right" headers="perSecond Min" class='awrnc'>158,558,379.57</td><td align="right" headers="perSecond Max" class='awrncrb'>258,783,116.14</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>7,258</td><td align="right" class='awrc'>11.42</td><td align="right" class='awrc'>0.17</td><td align="right" headers="perSecond Average" class='awrclb'>5.71</td><td align="right" headers="perSecond StdDev" class='awrc'>3.65</td><td align="right" headers="perSecond Min" class='awrc'>3.13</td><td align="right" headers="perSecond Max" class='awrcrb'>8.29</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>447</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.31</td><td align="right" headers="perSecond Max" class='awrncrb'>0.39</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>5,541</td><td align="right" class='awrc'>8.71</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>4.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.78</td><td align="right" headers="perSecond Min" class='awrc'>3.81</td><td align="right" headers="perSecond Max" class='awrcrb'>4.91</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>3,629</td><td align="right" class='awrnc'>5.71</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>2.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.61</td><td align="right" headers="perSecond Min" class='awrnc'>2.42</td><td align="right" headers="perSecond Max" class='awrncrb'>3.29</td></tr>
<tr><td scope="row" class='awrc'>cluster wait time</td><td align="right" class='awrc'>4,773,456</td><td align="right" class='awrc'>7,507.17</td><td align="right" class='awrc'>110.90</td><td align="right" headers="perSecond Average" class='awrclb'>3,753.59</td><td align="right" headers="perSecond StdDev" class='awrc'>962.42</td><td align="right" headers="perSecond Min" class='awrc'>3,073.05</td><td align="right" headers="perSecond Max" class='awrcrb'>4,434.12</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: cannot pin</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>3,388,388</td><td align="right" class='awrnc'>5,330.87</td><td align="right" class='awrnc'>78.72</td><td align="right" headers="perSecond Average" class='awrnclb'>2,665.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>971.60</td><td align="right" headers="perSecond Min" class='awrnc'>1,978.41</td><td align="right" headers="perSecond Max" class='awrncrb'>3,352.46</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>3,388,287</td><td align="right" class='awrc'>5,330.72</td><td align="right" class='awrc'>78.72</td><td align="right" headers="perSecond Average" class='awrclb'>2,665.36</td><td align="right" headers="perSecond StdDev" class='awrc'>971.62</td><td align="right" headers="perSecond Min" class='awrc'>1,978.32</td><td align="right" headers="perSecond Max" class='awrcrb'>3,352.39</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>259</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.22</td></tr>
<tr><td scope="row" class='awrc'>concurrency wait time</td><td align="right" class='awrc'>894</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.70</td><td align="right" headers="perSecond StdDev" class='awrc'>0.61</td><td align="right" headers="perSecond Min" class='awrc'>0.27</td><td align="right" headers="perSecond Max" class='awrcrb'>1.13</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>19,617</td><td align="right" class='awrnc'>30.86</td><td align="right" class='awrnc'>0.46</td><td align="right" headers="perSecond Average" class='awrnclb'>15.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.57</td><td align="right" headers="perSecond Min" class='awrnc'>12.90</td><td align="right" headers="perSecond Max" class='awrncrb'>17.96</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>20,905,504</td><td align="right" class='awrc'>32,889.66</td><td align="right" class='awrc'>485.68</td><td align="right" headers="perSecond Average" class='awrclb'>16,444.83</td><td align="right" headers="perSecond StdDev" class='awrc'>5,577.75</td><td align="right" headers="perSecond Min" class='awrc'>12,500.76</td><td align="right" headers="perSecond Max" class='awrcrb'>20,388.89</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>634,373</td><td align="right" class='awrnc'>998.01</td><td align="right" class='awrnc'>14.74</td><td align="right" headers="perSecond Average" class='awrnclb'>499.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>153.77</td><td align="right" headers="perSecond Min" class='awrnc'>390.28</td><td align="right" headers="perSecond Max" class='awrncrb'>607.73</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>633,586</td><td align="right" class='awrc'>996.77</td><td align="right" class='awrc'>14.72</td><td align="right" headers="perSecond Average" class='awrclb'>498.39</td><td align="right" headers="perSecond StdDev" class='awrc'>153.84</td><td align="right" headers="perSecond Min" class='awrc'>389.61</td><td align="right" headers="perSecond Max" class='awrcrb'>607.17</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>20,905,504</td><td align="right" class='awrnc'>32,889.66</td><td align="right" class='awrnc'>485.68</td><td align="right" headers="perSecond Average" class='awrnclb'>16,444.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,577.75</td><td align="right" headers="perSecond Min" class='awrnc'>12,500.76</td><td align="right" headers="perSecond Max" class='awrncrb'>20,388.89</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>20,271,131</td><td align="right" class='awrc'>31,891.65</td><td align="right" class='awrc'>470.94</td><td align="right" headers="perSecond Average" class='awrclb'>15,945.82</td><td align="right" headers="perSecond StdDev" class='awrc'>5,423.98</td><td align="right" headers="perSecond Min" class='awrc'>12,110.49</td><td align="right" headers="perSecond Max" class='awrcrb'>19,781.16</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>18,735,933</td><td align="right" class='awrnc'>29,476.29</td><td align="right" class='awrnc'>435.27</td><td align="right" headers="perSecond Average" class='awrnclb'>14,738.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,933.98</td><td align="right" headers="perSecond Min" class='awrnc'>11,249.30</td><td align="right" headers="perSecond Max" class='awrncrb'>18,227.00</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>430</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.29</td><td align="right" headers="perSecond Max" class='awrcrb'>0.39</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>7,050,207</td><td align="right" class='awrc'>11,091.92</td><td align="right" class='awrc'>163.79</td><td align="right" headers="perSecond Average" class='awrclb'>5,545.96</td><td align="right" headers="perSecond StdDev" class='awrc'>2,010.69</td><td align="right" headers="perSecond Min" class='awrc'>4,124.18</td><td align="right" headers="perSecond Max" class='awrcrb'>6,967.73</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>3,849,227</td><td align="right" class='awrnc'>6,055.88</td><td align="right" class='awrnc'>89.43</td><td align="right" headers="perSecond Average" class='awrnclb'>3,027.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,084.69</td><td align="right" headers="perSecond Min" class='awrnc'>2,260.95</td><td align="right" headers="perSecond Max" class='awrncrb'>3,794.93</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>2,845</td><td align="right" class='awrc'>4.47</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>2.24</td><td align="right" headers="perSecond StdDev" class='awrc'>1.79</td><td align="right" headers="perSecond Min" class='awrc'>0.97</td><td align="right" headers="perSecond Max" class='awrcrb'>3.50</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>3,846,382</td><td align="right" class='awrnc'>6,051.41</td><td align="right" class='awrnc'>89.36</td><td align="right" headers="perSecond Average" class='awrnclb'>3,025.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,086.48</td><td align="right" headers="perSecond Min" class='awrnc'>2,257.44</td><td align="right" headers="perSecond Max" class='awrncrb'>3,793.96</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>300,197</td><td align="right" class='awrc'>472.27</td><td align="right" class='awrc'>6.97</td><td align="right" headers="perSecond Average" class='awrclb'>236.14</td><td align="right" headers="perSecond StdDev" class='awrc'>70.57</td><td align="right" headers="perSecond Min" class='awrc'>186.23</td><td align="right" headers="perSecond Max" class='awrcrb'>286.04</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>931,204</td><td align="right" class='awrnc'>1,464.84</td><td align="right" class='awrnc'>21.63</td><td align="right" headers="perSecond Average" class='awrnclb'>732.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>97.13</td><td align="right" headers="perSecond Min" class='awrnc'>663.74</td><td align="right" headers="perSecond Max" class='awrncrb'>801.10</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>3,197,720</td><td align="right" class='awrc'>5,030.92</td><td align="right" class='awrc'>74.29</td><td align="right" headers="perSecond Average" class='awrclb'>2,515.46</td><td align="right" headers="perSecond StdDev" class='awrc'>934.62</td><td align="right" headers="perSecond Min" class='awrc'>1,854.58</td><td align="right" headers="perSecond Max" class='awrcrb'>3,176.34</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>3,408</td><td align="right" class='awrnc'>5.36</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>2.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>2.66</td><td align="right" headers="perSecond Max" class='awrncrb'>2.70</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>152,849</td><td align="right" class='awrc'>240.45</td><td align="right" class='awrc'>3.55</td><td align="right" headers="perSecond Average" class='awrclb'>120.23</td><td align="right" headers="perSecond StdDev" class='awrc'>24.56</td><td align="right" headers="perSecond Min" class='awrc'>102.86</td><td align="right" headers="perSecond Max" class='awrcrb'>137.59</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>152,626</td><td align="right" class='awrnc'>240.10</td><td align="right" class='awrnc'>3.55</td><td align="right" headers="perSecond Average" class='awrnclb'>120.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>24.67</td><td align="right" headers="perSecond Min" class='awrnc'>102.60</td><td align="right" headers="perSecond Max" class='awrncrb'>137.50</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>1,587</td><td align="right" class='awrnc'>2.50</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>1.11</td><td align="right" headers="perSecond Max" class='awrncrb'>1.38</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>315,922</td><td align="right" class='awrnc'>497.02</td><td align="right" class='awrnc'>7.34</td><td align="right" headers="perSecond Average" class='awrnclb'>248.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>77.48</td><td align="right" headers="perSecond Min" class='awrnc'>193.72</td><td align="right" headers="perSecond Max" class='awrncrb'>303.29</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>796,051,142</td><td align="right" class='awrc'>1,252,490.58</td><td align="right" class='awrc'>18,493.89</td><td align="right" headers="perSecond Average" class='awrclb'>626,245.29</td><td align="right" headers="perSecond StdDev" class='awrc'>295,949.75</td><td align="right" headers="perSecond Min" class='awrc'>416,977.22</td><td align="right" headers="perSecond Max" class='awrcrb'>835,513.36</td></tr>
<tr><td scope="row" class='awrnc'>file io wait time</td><td align="right" class='awrnc'>217,363,595,006</td><td align="right" class='awrnc'>341,944,557.71</td><td align="right" class='awrnc'>5,049,800.09</td><td align="right" headers="perSecond Average" class='awrnclb'>170,972,278.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>38,455,189.28</td><td align="right" headers="perSecond Min" class='awrnc'>143,780,353.74</td><td align="right" headers="perSecond Max" class='awrncrb'>198,164,203.97</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>24,345,711</td><td align="right" class='awrc'>38,302.08</td><td align="right" class='awrc'>565.60</td><td align="right" headers="perSecond Average" class='awrclb'>19,151.04</td><td align="right" headers="perSecond StdDev" class='awrc'>6,583.97</td><td align="right" headers="perSecond Min" class='awrc'>14,495.47</td><td align="right" headers="perSecond Max" class='awrcrb'>23,806.61</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>24,402,410</td><td align="right" class='awrnc'>38,390.95</td><td align="right" class='awrnc'>566.92</td><td align="right" headers="perSecond Average" class='awrnclb'>19,195.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,325.21</td><td align="right" headers="perSecond Min" class='awrnc'>14,722.88</td><td align="right" headers="perSecond Max" class='awrncrb'>23,668.07</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>4,057</td><td align="right" class='awrc'>6.38</td><td align="right" class='awrc'>0.09</td><td align="right" headers="perSecond Average" class='awrclb'>3.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.38</td><td align="right" headers="perSecond Min" class='awrc'>2.92</td><td align="right" headers="perSecond Max" class='awrcrb'>3.46</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>3,006</td><td align="right" class='awrnc'>4.73</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>2.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.21</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>4.63</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>225,044</td><td align="right" class='awrnc'>353.98</td><td align="right" class='awrnc'>5.23</td><td align="right" headers="perSecond Average" class='awrnclb'>176.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>176.98</td><td align="right" headers="perSecond Max" class='awrncrb'>177.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>667</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.52</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>1,677</td><td align="right" class='awrnc'>2.64</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.99</td><td align="right" headers="perSecond Min" class='awrnc'>0.62</td><td align="right" headers="perSecond Max" class='awrncrb'>2.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.06</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>2,541</td><td align="right" class='awrc'>4.00</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>2.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>1.93</td><td align="right" headers="perSecond Max" class='awrcrb'>2.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>2,572</td><td align="right" class='awrnc'>4.05</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>2.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>1.99</td><td align="right" headers="perSecond Max" class='awrncrb'>2.05</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grant time</td><td align="right" class='awrc'>18,033,967</td><td align="right" class='awrc'>28,358.58</td><td align="right" class='awrc'>418.97</td><td align="right" headers="perSecond Average" class='awrclb'>14,179.29</td><td align="right" headers="perSecond StdDev" class='awrc'>6,357.88</td><td align="right" headers="perSecond Min" class='awrc'>9,683.59</td><td align="right" headers="perSecond Max" class='awrcrb'>18,675.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grants received</td><td align="right" class='awrnc'>17,517,876</td><td align="right" class='awrnc'>27,560.78</td><td align="right" class='awrnc'>406.98</td><td align="right" headers="perSecond Average" class='awrnclb'>13,780.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,270.21</td><td align="right" headers="perSecond Min" class='awrnc'>10,053.78</td><td align="right" headers="perSecond Max" class='awrncrb'>17,506.99</td></tr>
<tr><td scope="row" class='awrc'>gc current block flush time</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>3,308</td><td align="right" class='awrnc'>5.20</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>2.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.59</td><td align="right" headers="perSecond Min" class='awrnc'>0.77</td><td align="right" headers="perSecond Max" class='awrncrb'>4.43</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>1,950</td><td align="right" class='awrnc'>3.07</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>1.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>1.53</td><td align="right" headers="perSecond Max" class='awrncrb'>1.53</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks served</td><td align="right" class='awrc'>1,993</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>1.57</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>1.51</td><td align="right" headers="perSecond Max" class='awrcrb'>1.63</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read cr</td><td align="right" class='awrnc'>376</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.24</td><td align="right" headers="perSecond Max" class='awrncrb'>0.35</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read current</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>18,572</td><td align="right" class='awrnc'>29.22</td><td align="right" class='awrnc'>0.43</td><td align="right" headers="perSecond Average" class='awrnclb'>14.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.08</td><td align="right" headers="perSecond Min" class='awrnc'>11.72</td><td align="right" headers="perSecond Max" class='awrncrb'>17.50</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>17,948</td><td align="right" class='awrc'>28.23</td><td align="right" class='awrc'>0.42</td><td align="right" headers="perSecond Average" class='awrclb'>14.11</td><td align="right" headers="perSecond StdDev" class='awrc'>4.43</td><td align="right" headers="perSecond Min" class='awrc'>10.98</td><td align="right" headers="perSecond Max" class='awrcrb'>17.25</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>12,869,951</td><td align="right" class='awrnc'>20,247.22</td><td align="right" class='awrnc'>299.00</td><td align="right" headers="perSecond Average" class='awrnclb'>10,123.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,038.16</td><td align="right" headers="perSecond Min" class='awrnc'>7,975.31</td><td align="right" headers="perSecond Max" class='awrncrb'>12,271.91</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>11,553,440</td><td align="right" class='awrc'>18,176.75</td><td align="right" class='awrc'>268.41</td><td align="right" headers="perSecond Average" class='awrclb'>9,088.37</td><td align="right" headers="perSecond StdDev" class='awrc'>3,296.34</td><td align="right" headers="perSecond Min" class='awrc'>6,757.51</td><td align="right" headers="perSecond Max" class='awrcrb'>11,419.24</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>163,714</td><td align="right" class='awrnc'>257.67</td><td align="right" class='awrnc'>3.80</td><td align="right" headers="perSecond Average" class='awrnclb'>128.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>132.23</td><td align="right" headers="perSecond Min" class='awrnc'>35.33</td><td align="right" headers="perSecond Max" class='awrncrb'>222.34</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>166,641</td><td align="right" class='awrc'>261.95</td><td align="right" class='awrc'>3.87</td><td align="right" headers="perSecond Average" class='awrclb'>130.98</td><td align="right" headers="perSecond StdDev" class='awrc'>135.05</td><td align="right" headers="perSecond Min" class='awrc'>35.48</td><td align="right" headers="perSecond Max" class='awrcrb'>226.47</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>148,268</td><td align="right" class='awrnc'>233.27</td><td align="right" class='awrnc'>3.44</td><td align="right" headers="perSecond Average" class='awrnclb'>116.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>42.25</td><td align="right" headers="perSecond Min" class='awrnc'>86.76</td><td align="right" headers="perSecond Max" class='awrncrb'>146.51</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>225,060</td><td align="right" class='awrc'>354.00</td><td align="right" class='awrc'>5.23</td><td align="right" headers="perSecond Average" class='awrclb'>177.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>176.99</td><td align="right" headers="perSecond Max" class='awrcrb'>177.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access record drops</td><td align="right" class='awrnc'>1,751</td><td align="right" class='awrnc'>2.75</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>2.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>2.75</td><td align="right" headers="perSecond Max" class='awrncrb'>2.75</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>22,711,014</td><td align="right" class='awrc'>35,730.30</td><td align="right" class='awrc'>527.62</td><td align="right" headers="perSecond Average" class='awrclb'>17,865.15</td><td align="right" headers="perSecond StdDev" class='awrc'>6,161.70</td><td align="right" headers="perSecond Min" class='awrc'>13,508.17</td><td align="right" headers="perSecond Max" class='awrcrb'>22,222.13</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>36,546,258</td><td align="right" class='awrnc'>57,489.50</td><td align="right" class='awrnc'>849.04</td><td align="right" headers="perSecond Average" class='awrnclb'>28,744.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,898.34</td><td align="right" headers="perSecond Min" class='awrnc'>25,988.21</td><td align="right" headers="perSecond Max" class='awrncrb'>31,501.29</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>228,248</td><td align="right" class='awrc'>359.00</td><td align="right" class='awrc'>5.30</td><td align="right" headers="perSecond Average" class='awrclb'>179.50</td><td align="right" headers="perSecond StdDev" class='awrc'>15.76</td><td align="right" headers="perSecond Min" class='awrc'>168.35</td><td align="right" headers="perSecond Max" class='awrcrb'>190.65</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>1,525,447</td><td align="right" class='awrnc'>2,399.01</td><td align="right" class='awrnc'>35.44</td><td align="right" headers="perSecond Average" class='awrnclb'>1,199.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>344.16</td><td align="right" headers="perSecond Min" class='awrnc'>956.15</td><td align="right" headers="perSecond Max" class='awrncrb'>1,442.86</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>21,025</td><td align="right" class='awrnc'>33.07</td><td align="right" class='awrnc'>0.49</td><td align="right" headers="perSecond Average" class='awrnclb'>16.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.18</td><td align="right" headers="perSecond Min" class='awrnc'>14.29</td><td align="right" headers="perSecond Max" class='awrncrb'>18.79</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>18,035</td><td align="right" class='awrc'>28.38</td><td align="right" class='awrc'>0.42</td><td align="right" headers="perSecond Average" class='awrclb'>14.19</td><td align="right" headers="perSecond StdDev" class='awrc'>13.77</td><td align="right" headers="perSecond Min" class='awrc'>4.46</td><td align="right" headers="perSecond Max" class='awrcrb'>23.93</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets sync</td><td align="right" class='awrnc'>184,733</td><td align="right" class='awrnc'>290.58</td><td align="right" class='awrnc'>4.29</td><td align="right" headers="perSecond Average" class='awrnclb'>145.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.23</td><td align="right" headers="perSecond Min" class='awrnc'>140.18</td><td align="right" headers="perSecond Max" class='awrncrb'>150.40</td></tr>
<tr><td scope="row" class='awrc'>global enqueue releases</td><td align="right" class='awrc'>184,438</td><td align="right" class='awrc'>290.12</td><td align="right" class='awrc'>4.28</td><td align="right" headers="perSecond Average" class='awrclb'>145.06</td><td align="right" headers="perSecond StdDev" class='awrc'>7.15</td><td align="right" headers="perSecond Min" class='awrc'>140.00</td><td align="right" headers="perSecond Max" class='awrcrb'>150.11</td></tr>
<tr><td scope="row" class='awrnc'>heap block compress</td><td align="right" class='awrnc'>14,589</td><td align="right" class='awrnc'>22.95</td><td align="right" class='awrnc'>0.34</td><td align="right" headers="perSecond Average" class='awrnclb'>11.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.61</td><td align="right" headers="perSecond Min" class='awrnc'>11.05</td><td align="right" headers="perSecond Max" class='awrncrb'>11.90</td></tr>
<tr><td scope="row" class='awrc'>hot buffers moved to head of LRU</td><td align="right" class='awrc'>268,335</td><td align="right" class='awrc'>422.14</td><td align="right" class='awrc'>6.23</td><td align="right" headers="perSecond Average" class='awrclb'>211.07</td><td align="right" headers="perSecond StdDev" class='awrc'>58.84</td><td align="right" headers="perSecond Min" class='awrc'>169.46</td><td align="right" headers="perSecond Max" class='awrcrb'>252.68</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CR) block cleanout applications</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrc'>554</td><td align="right" class='awrc'>0.87</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.44</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>0.34</td><td align="right" headers="perSecond Max" class='awrcrb'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>in call idle wait time</td><td align="right" class='awrnc'>12,291,755</td><td align="right" class='awrnc'>19,333.90</td><td align="right" class='awrnc'>285.56</td><td align="right" headers="perSecond Average" class='awrnclb'>9,666.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>175.82</td><td align="right" headers="perSecond Min" class='awrnc'>9,542.62</td><td align="right" headers="perSecond Max" class='awrncrb'>9,791.27</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.11</td><td align="right" headers="perSecond Max" class='awrcrb'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>20,482</td><td align="right" class='awrnc'>32.21</td><td align="right" class='awrnc'>0.48</td><td align="right" headers="perSecond Average" class='awrnclb'>16.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.84</td><td align="right" headers="perSecond Min" class='awrnc'>13.39</td><td align="right" headers="perSecond Max" class='awrncrb'>18.82</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>304,926</td><td align="right" class='awrc'>479.72</td><td align="right" class='awrc'>7.08</td><td align="right" headers="perSecond Average" class='awrclb'>239.86</td><td align="right" headers="perSecond StdDev" class='awrc'>79.84</td><td align="right" headers="perSecond Min" class='awrc'>183.41</td><td align="right" headers="perSecond Max" class='awrcrb'>296.32</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>1,840</td><td align="right" class='awrnc'>2.89</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.28</td><td align="right" headers="perSecond Min" class='awrnc'>1.25</td><td align="right" headers="perSecond Max" class='awrncrb'>1.65</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>12,704</td><td align="right" class='awrc'>19.99</td><td align="right" class='awrc'>0.30</td><td align="right" headers="perSecond Average" class='awrclb'>9.99</td><td align="right" headers="perSecond StdDev" class='awrc'>3.22</td><td align="right" headers="perSecond Min" class='awrc'>7.72</td><td align="right" headers="perSecond Max" class='awrcrb'>12.27</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>12,704</td><td align="right" class='awrnc'>19.99</td><td align="right" class='awrnc'>0.30</td><td align="right" headers="perSecond Average" class='awrnclb'>9.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.22</td><td align="right" headers="perSecond Min" class='awrnc'>7.72</td><td align="right" headers="perSecond Max" class='awrncrb'>12.27</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>202,767,441,920</td><td align="right" class='awrc'>319,005,172.66</td><td align="right" class='awrc'>4,710,701.65</td><td align="right" headers="perSecond Average" class='awrclb'>159,502,586.33</td><td align="right" headers="perSecond StdDev" class='awrc'>54,593,393.49</td><td align="right" headers="perSecond Min" class='awrc'>120,899,227.58</td><td align="right" headers="perSecond Max" class='awrcrb'>198,105,945.08</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>741</td><td align="right" class='awrnc'>1.17</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.57</td><td align="right" headers="perSecond Max" class='awrncrb'>0.60</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>701</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.28</td><td align="right" headers="perSecond Min" class='awrc'>0.35</td><td align="right" headers="perSecond Max" class='awrcrb'>0.75</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>312,881</td><td align="right" class='awrnc'>492.22</td><td align="right" class='awrnc'>7.27</td><td align="right" headers="perSecond Average" class='awrnclb'>246.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>70.01</td><td align="right" headers="perSecond Min" class='awrnc'>196.61</td><td align="right" headers="perSecond Max" class='awrncrb'>295.62</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>312,881</td><td align="right" class='awrc'>492.22</td><td align="right" class='awrc'>7.27</td><td align="right" headers="perSecond Average" class='awrclb'>246.11</td><td align="right" headers="perSecond StdDev" class='awrc'>70.01</td><td align="right" headers="perSecond Min" class='awrc'>196.61</td><td align="right" headers="perSecond Max" class='awrcrb'>295.62</td></tr>
<tr><td scope="row" class='awrnc'>min active SCN optimization applied on CR</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>20,231,745</td><td align="right" class='awrc'>31,829.68</td><td align="right" class='awrc'>470.02</td><td align="right" headers="perSecond Average" class='awrclb'>15,914.84</td><td align="right" headers="perSecond StdDev" class='awrc'>5,412.42</td><td align="right" headers="perSecond Min" class='awrc'>12,087.68</td><td align="right" headers="perSecond Max" class='awrcrb'>19,742.00</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>11,902,487</td><td align="right" class='awrnc'>18,725.79</td><td align="right" class='awrnc'>276.52</td><td align="right" headers="perSecond Average" class='awrnclb'>9,362.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,305.75</td><td align="right" headers="perSecond Min" class='awrnc'>7,025.37</td><td align="right" headers="perSecond Max" class='awrncrb'>11,700.41</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait time</td><td align="right" class='awrc'>7,407,134</td><td align="right" class='awrc'>11,650.83</td><td align="right" class='awrc'>172.08</td><td align="right" headers="perSecond Average" class='awrclb'>5,825.41</td><td align="right" headers="perSecond StdDev" class='awrc'>80.82</td><td align="right" headers="perSecond Min" class='awrc'>5,768.27</td><td align="right" headers="perSecond Max" class='awrcrb'>5,882.56</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>358,597</td><td align="right" class='awrnc'>564.16</td><td align="right" class='awrnc'>8.33</td><td align="right" headers="perSecond Average" class='awrnclb'>282.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>90.21</td><td align="right" headers="perSecond Min" class='awrnc'>218.29</td><td align="right" headers="perSecond Max" class='awrncrb'>345.86</td></tr>
<tr><td scope="row" class='awrc'>parse count (hard)</td><td align="right" class='awrc'>1,409</td><td align="right" class='awrc'>2.22</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>1.00</td><td align="right" headers="perSecond Max" class='awrcrb'>1.21</td></tr>
<tr><td scope="row" class='awrnc'>parse count (total)</td><td align="right" class='awrnc'>11,499</td><td align="right" class='awrnc'>18.08</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>9.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.83</td><td align="right" headers="perSecond Min" class='awrnc'>7.04</td><td align="right" headers="perSecond Max" class='awrncrb'>11.05</td></tr>
<tr><td scope="row" class='awrc'>parse time cpu</td><td align="right" class='awrc'>430</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.30</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>1,185</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.93</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.83</td><td align="right" headers="perSecond Max" class='awrncrb'>1.04</td></tr>
<tr><td scope="row" class='awrc'>physical read IO requests</td><td align="right" class='awrc'>22,708,352</td><td align="right" class='awrc'>35,726.41</td><td align="right" class='awrc'>527.56</td><td align="right" headers="perSecond Average" class='awrclb'>17,863.20</td><td align="right" headers="perSecond StdDev" class='awrc'>6,403.21</td><td align="right" headers="perSecond Min" class='awrc'>13,335.45</td><td align="right" headers="perSecond Max" class='awrcrb'>22,390.95</td></tr>
<tr><td scope="row" class='awrnc'>physical read bytes</td><td align="right" class='awrnc'>197,134,139,392</td><td align="right" class='awrnc'>310,142,570.99</td><td align="right" class='awrnc'>4,579,828.53</td><td align="right" headers="perSecond Average" class='awrnclb'>155,071,285.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>53,099,568.32</td><td align="right" headers="perSecond Min" class='awrnc'>117,524,220.66</td><td align="right" headers="perSecond Max" class='awrncrb'>192,618,350.33</td></tr>
<tr><td scope="row" class='awrc'>physical read total IO requests</td><td align="right" class='awrc'>22,721,394</td><td align="right" class='awrc'>35,746.92</td><td align="right" class='awrc'>527.86</td><td align="right" headers="perSecond Average" class='awrclb'>17,873.46</td><td align="right" headers="perSecond StdDev" class='awrc'>6,403.66</td><td align="right" headers="perSecond Min" class='awrc'>13,345.39</td><td align="right" headers="perSecond Max" class='awrcrb'>22,401.53</td></tr>
<tr><td scope="row" class='awrnc'>physical read total bytes</td><td align="right" class='awrnc'>200,306,788,864</td><td align="right" class='awrnc'>315,132,858.98</td><td align="right" class='awrnc'>4,653,535.66</td><td align="right" headers="perSecond Average" class='awrnclb'>157,566,429.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>53,035,494.78</td><td align="right" headers="perSecond Min" class='awrnc'>120,064,671.49</td><td align="right" headers="perSecond Max" class='awrncrb'>195,068,187.50</td></tr>
<tr><td scope="row" class='awrc'>physical read total multi block requests</td><td align="right" class='awrc'>2,850</td><td align="right" class='awrc'>4.48</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>2.24</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>2.17</td><td align="right" headers="perSecond Max" class='awrcrb'>2.31</td></tr>
<tr><td scope="row" class='awrnc'>physical reads</td><td align="right" class='awrnc'>24,064,226</td><td align="right" class='awrnc'>37,859.20</td><td align="right" class='awrnc'>559.06</td><td align="right" headers="perSecond Average" class='awrnclb'>18,929.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,481.88</td><td align="right" headers="perSecond Min" class='awrnc'>14,346.22</td><td align="right" headers="perSecond Max" class='awrncrb'>23,512.98</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache</td><td align="right" class='awrc'>24,064,190</td><td align="right" class='awrc'>37,859.14</td><td align="right" class='awrc'>559.06</td><td align="right" headers="perSecond Average" class='awrclb'>18,929.57</td><td align="right" headers="perSecond StdDev" class='awrc'>6,481.90</td><td align="right" headers="perSecond Min" class='awrc'>14,346.17</td><td align="right" headers="perSecond Max" class='awrcrb'>23,512.97</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache prefetch</td><td align="right" class='awrnc'>18,991,996</td><td align="right" class='awrnc'>29,879.16</td><td align="right" class='awrnc'>441.22</td><td align="right" headers="perSecond Average" class='awrnclb'>14,939.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,013.71</td><td align="right" headers="perSecond Min" class='awrnc'>11,394.35</td><td align="right" headers="perSecond Max" class='awrncrb'>18,484.81</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct (lob)</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>physical reads prefetch warmup</td><td align="right" class='awrc'>25,532</td><td align="right" class='awrc'>40.13</td><td align="right" class='awrc'>0.59</td><td align="right" headers="perSecond Average" class='awrclb'>40.13</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>40.13</td><td align="right" headers="perSecond Max" class='awrcrb'>40.13</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>3,451,378</td><td align="right" class='awrnc'>5,429.92</td><td align="right" class='awrnc'>80.18</td><td align="right" headers="perSecond Average" class='awrnclb'>2,714.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>947.36</td><td align="right" headers="perSecond Min" class='awrnc'>2,045.08</td><td align="right" headers="perSecond Max" class='awrncrb'>3,384.85</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>29,542,555,648</td><td align="right" class='awrc'>46,478,184.80</td><td align="right" class='awrc'>686,333.88</td><td align="right" headers="perSecond Average" class='awrclb'>23,239,092.40</td><td align="right" headers="perSecond StdDev" class='awrc'>8,096,015.07</td><td align="right" headers="perSecond Min" class='awrc'>17,514,345.24</td><td align="right" headers="perSecond Max" class='awrcrb'>28,963,839.56</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>3,526,672</td><td align="right" class='awrnc'>5,548.38</td><td align="right" class='awrnc'>81.93</td><td align="right" headers="perSecond Average" class='awrnclb'>2,774.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>969.81</td><td align="right" headers="perSecond Min" class='awrnc'>2,088.43</td><td align="right" headers="perSecond Max" class='awrncrb'>3,459.95</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>32,473,497,088</td><td align="right" class='awrc'>51,089,345.46</td><td align="right" class='awrc'>754,425.64</td><td align="right" headers="perSecond Average" class='awrclb'>25,544,672.73</td><td align="right" headers="perSecond StdDev" class='awrc'>8,917,057.28</td><td align="right" headers="perSecond Min" class='awrc'>19,239,361.06</td><td align="right" headers="perSecond Max" class='awrcrb'>31,849,984.40</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>10,735</td><td align="right" class='awrnc'>16.89</td><td align="right" class='awrnc'>0.25</td><td align="right" headers="perSecond Average" class='awrnclb'>8.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.88</td><td align="right" headers="perSecond Min" class='awrnc'>6.41</td><td align="right" headers="perSecond Max" class='awrncrb'>10.48</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>3,606,269</td><td align="right" class='awrc'>5,673.61</td><td align="right" class='awrc'>83.78</td><td align="right" headers="perSecond Average" class='awrclb'>2,836.80</td><td align="right" headers="perSecond StdDev" class='awrc'>988.28</td><td align="right" headers="perSecond Min" class='awrc'>2,137.98</td><td align="right" headers="perSecond Max" class='awrcrb'>3,535.62</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>2,909</td><td align="right" class='awrnc'>4.57</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>2.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.78</td><td align="right" headers="perSecond Min" class='awrnc'>1.03</td><td align="right" headers="perSecond Max" class='awrncrb'>3.54</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>2,429</td><td align="right" class='awrnc'>3.82</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>1.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.79</td><td align="right" headers="perSecond Min" class='awrnc'>0.64</td><td align="right" headers="perSecond Max" class='awrncrb'>3.18</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>3,603,360</td><td align="right" class='awrc'>5,669.03</td><td align="right" class='awrc'>83.71</td><td align="right" headers="perSecond Average" class='awrclb'>2,834.52</td><td align="right" headers="perSecond StdDev" class='awrc'>990.06</td><td align="right" headers="perSecond Min" class='awrc'>2,134.44</td><td align="right" headers="perSecond Max" class='awrcrb'>3,534.59</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>3,604,169</td><td align="right" class='awrnc'>5,670.30</td><td align="right" class='awrnc'>83.73</td><td align="right" headers="perSecond Average" class='awrnclb'>2,835.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>988.38</td><td align="right" headers="perSecond Min" class='awrnc'>2,136.26</td><td align="right" headers="perSecond Max" class='awrncrb'>3,534.04</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>482</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>0.28</td><td align="right" headers="perSecond Max" class='awrcrb'>0.48</td></tr>
<tr><td scope="row" class='awrnc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrnc'>198,612</td><td align="right" class='awrnc'>312.37</td><td align="right" class='awrnc'>4.61</td><td align="right" headers="perSecond Average" class='awrnclb'>156.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>29.54</td><td align="right" headers="perSecond Min" class='awrnc'>135.30</td><td align="right" headers="perSecond Max" class='awrncrb'>177.07</td></tr>
<tr><td scope="row" class='awrc'>prefetched blocks aged out before use</td><td align="right" class='awrc'>1,171,667</td><td align="right" class='awrc'>1,843.11</td><td align="right" class='awrc'>27.22</td><td align="right" headers="perSecond Average" class='awrclb'>921.56</td><td align="right" headers="perSecond StdDev" class='awrc'>133.32</td><td align="right" headers="perSecond Min" class='awrc'>827.29</td><td align="right" headers="perSecond Max" class='awrcrb'>1,015.83</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>1,250</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.98</td><td align="right" headers="perSecond Max" class='awrncrb'>0.99</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>484,075</td><td align="right" class='awrc'>761.51</td><td align="right" class='awrc'>11.25</td><td align="right" headers="perSecond Average" class='awrclb'>380.75</td><td align="right" headers="perSecond StdDev" class='awrc'>76.44</td><td align="right" headers="perSecond Min" class='awrc'>326.70</td><td align="right" headers="perSecond Max" class='awrcrb'>434.81</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>391,754</td><td align="right" class='awrnc'>616.43</td><td align="right" class='awrnc'>9.10</td><td align="right" headers="perSecond Average" class='awrnclb'>308.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>191.48</td><td align="right" headers="perSecond Min" class='awrnc'>172.82</td><td align="right" headers="perSecond Max" class='awrncrb'>443.61</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>1,691,648</td><td align="right" class='awrc'>2,660.85</td><td align="right" class='awrc'>39.30</td><td align="right" headers="perSecond Average" class='awrclb'>1,330.42</td><td align="right" headers="perSecond StdDev" class='awrc'>2.96</td><td align="right" headers="perSecond Min" class='awrc'>1,328.33</td><td align="right" headers="perSecond Max" class='awrcrb'>1,332.51</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>2,077,734</td><td align="right" class='awrnc'>3,268.83</td><td align="right" class='awrnc'>48.27</td><td align="right" headers="perSecond Average" class='awrnclb'>1,634.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>576.49</td><td align="right" headers="perSecond Min" class='awrnc'>1,226.77</td><td align="right" headers="perSecond Max" class='awrncrb'>2,042.06</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>5,686,072</td><td align="right" class='awrc'>8,945.74</td><td align="right" class='awrc'>132.10</td><td align="right" headers="perSecond Average" class='awrclb'>4,472.87</td><td align="right" headers="perSecond StdDev" class='awrc'>1,602.71</td><td align="right" headers="perSecond Min" class='awrc'>3,339.58</td><td align="right" headers="perSecond Max" class='awrcrb'>5,606.16</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>4,374,475</td><td align="right" class='awrnc'>6,881.91</td><td align="right" class='awrnc'>101.63</td><td align="right" headers="perSecond Average" class='awrnclb'>3,440.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>962.46</td><td align="right" headers="perSecond Min" class='awrnc'>2,760.40</td><td align="right" headers="perSecond Max" class='awrncrb'>4,121.52</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>1,311,597</td><td align="right" class='awrc'>2,063.82</td><td align="right" class='awrc'>30.47</td><td align="right" headers="perSecond Average" class='awrclb'>1,031.91</td><td align="right" headers="perSecond StdDev" class='awrc'>640.25</td><td align="right" headers="perSecond Min" class='awrc'>579.18</td><td align="right" headers="perSecond Max" class='awrcrb'>1,484.64</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>3,698,906</td><td align="right" class='awrnc'>5,819.38</td><td align="right" class='awrnc'>85.93</td><td align="right" headers="perSecond Average" class='awrnclb'>2,909.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,036.69</td><td align="right" headers="perSecond Min" class='awrnc'>2,176.64</td><td align="right" headers="perSecond Max" class='awrncrb'>3,642.74</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>2,800,407,516</td><td align="right" class='awrc'>4,405,800.97</td><td align="right" class='awrc'>65,059.18</td><td align="right" headers="perSecond Average" class='awrclb'>2,202,900.48</td><td align="right" headers="perSecond StdDev" class='awrc'>788,917.93</td><td align="right" headers="perSecond Min" class='awrc'>1,645,051.27</td><td align="right" headers="perSecond Max" class='awrcrb'>2,760,749.70</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>1,740</td><td align="right" class='awrnc'>2.74</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>1.32</td><td align="right" headers="perSecond Max" class='awrncrb'>1.41</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>470</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.36</td><td align="right" headers="perSecond Max" class='awrcrb'>0.38</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>126</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.09</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>1,100,993</td><td align="right" class='awrc'>1,731.64</td><td align="right" class='awrc'>25.58</td><td align="right" headers="perSecond Average" class='awrclb'>865.82</td><td align="right" headers="perSecond StdDev" class='awrc'>121.39</td><td align="right" headers="perSecond Min" class='awrc'>779.98</td><td align="right" headers="perSecond Max" class='awrcrb'>951.66</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>9,645</td><td align="right" class='awrnc'>15.17</td><td align="right" class='awrnc'>0.22</td><td align="right" headers="perSecond Average" class='awrnclb'>7.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.77</td><td align="right" headers="perSecond Min" class='awrnc'>6.34</td><td align="right" headers="perSecond Max" class='awrncrb'>8.84</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>18,020,116</td><td align="right" class='awrc'>28,351.02</td><td align="right" class='awrc'>418.64</td><td align="right" headers="perSecond Average" class='awrclb'>14,175.51</td><td align="right" headers="perSecond StdDev" class='awrc'>5,485.52</td><td align="right" headers="perSecond Min" class='awrc'>10,296.66</td><td align="right" headers="perSecond Max" class='awrcrb'>18,054.36</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>73,838</td><td align="right" class='awrnc'>116.17</td><td align="right" class='awrnc'>1.72</td><td align="right" headers="perSecond Average" class='awrnclb'>58.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>22.36</td><td align="right" headers="perSecond Min" class='awrnc'>42.27</td><td align="right" headers="perSecond Max" class='awrncrb'>73.90</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>4,820</td><td align="right" class='awrnc'>7.59</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>7.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>7.59</td><td align="right" headers="perSecond Max" class='awrncrb'>7.59</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>817,688,206</td><td align="right" class='awrc'>1,286,391.75</td><td align="right" class='awrc'>18,996.57</td><td align="right" headers="perSecond Average" class='awrclb'>643,195.88</td><td align="right" headers="perSecond StdDev" class='awrc'>185,658.37</td><td align="right" headers="perSecond Min" class='awrc'>511,915.58</td><td align="right" headers="perSecond Max" class='awrcrb'>774,476.17</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>40,841,675</td><td align="right" class='awrnc'>64,263.46</td><td align="right" class='awrnc'>948.84</td><td align="right" headers="perSecond Average" class='awrnclb'>32,131.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>18,520.20</td><td align="right" headers="perSecond Min" class='awrnc'>19,035.97</td><td align="right" headers="perSecond Max" class='awrncrb'>45,227.49</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>41,593,973</td><td align="right" class='awrnc'>65,447.19</td><td align="right" class='awrnc'>966.31</td><td align="right" headers="perSecond Average" class='awrnclb'>32,723.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>18,866.44</td><td align="right" headers="perSecond Min" class='awrnc'>19,383.01</td><td align="right" headers="perSecond Max" class='awrncrb'>46,064.19</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>1,224</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.96</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>0.85</td><td align="right" headers="perSecond Max" class='awrcrb'>1.07</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>1,709</td><td align="right" class='awrnc'>2.69</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>1.22</td><td align="right" headers="perSecond Max" class='awrncrb'>1.47</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>3,579</td><td align="right" class='awrc'>5.63</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>2.82</td><td align="right" headers="perSecond StdDev" class='awrc'>0.57</td><td align="right" headers="perSecond Min" class='awrc'>2.41</td><td align="right" headers="perSecond Max" class='awrcrb'>3.22</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>6,699</td><td align="right" class='awrnc'>10.54</td><td align="right" class='awrnc'>0.16</td><td align="right" headers="perSecond Average" class='awrnclb'>5.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.68</td><td align="right" headers="perSecond Min" class='awrnc'>4.08</td><td align="right" headers="perSecond Max" class='awrncrb'>6.46</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>21,330</td><td align="right" class='awrc'>33.56</td><td align="right" class='awrc'>0.50</td><td align="right" headers="perSecond Average" class='awrclb'>16.78</td><td align="right" headers="perSecond StdDev" class='awrc'>6.14</td><td align="right" headers="perSecond Min" class='awrc'>12.44</td><td align="right" headers="perSecond Max" class='awrcrb'>21.12</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>5,131</td><td align="right" class='awrnc'>8.07</td><td align="right" class='awrnc'>0.12</td><td align="right" headers="perSecond Average" class='awrnclb'>4.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.46</td><td align="right" headers="perSecond Min" class='awrnc'>3.00</td><td align="right" headers="perSecond Max" class='awrncrb'>5.07</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>693</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.44</td><td align="right" headers="perSecond Max" class='awrcrb'>0.65</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>81,970</td><td align="right" class='awrnc'>128.96</td><td align="right" class='awrnc'>1.90</td><td align="right" headers="perSecond Average" class='awrnclb'>64.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>18.65</td><td align="right" headers="perSecond Min" class='awrnc'>51.29</td><td align="right" headers="perSecond Max" class='awrncrb'>77.67</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>819,703,256</td><td align="right" class='awrc'>1,289,562.33</td><td align="right" class='awrc'>19,043.38</td><td align="right" headers="perSecond Average" class='awrclb'>644,781.16</td><td align="right" headers="perSecond StdDev" class='awrc'>186,520.47</td><td align="right" headers="perSecond Min" class='awrc'>512,891.27</td><td align="right" headers="perSecond Max" class='awrcrb'>776,671.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>868,577,448</td><td align="right" class='awrnc'>1,366,458.36</td><td align="right" class='awrnc'>20,178.83</td><td align="right" headers="perSecond Average" class='awrnclb'>683,229.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>203,344.77</td><td align="right" headers="perSecond Min" class='awrnc'>539,442.71</td><td align="right" headers="perSecond Max" class='awrncrb'>827,015.65</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>36,485,347</td><td align="right" class='awrc'>57,408.94</td><td align="right" class='awrc'>847.63</td><td align="right" headers="perSecond Average" class='awrclb'>28,704.47</td><td align="right" headers="perSecond StdDev" class='awrc'>16,599.25</td><td align="right" headers="perSecond Min" class='awrc'>16,967.03</td><td align="right" headers="perSecond Max" class='awrcrb'>40,441.92</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>40,451</td><td align="right" class='awrnc'>63.64</td><td align="right" class='awrnc'>0.94</td><td align="right" headers="perSecond Average" class='awrnclb'>31.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.37</td><td align="right" headers="perSecond Min" class='awrnc'>24.49</td><td align="right" headers="perSecond Max" class='awrncrb'>39.15</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>40,451</td><td align="right" class='awrc'>63.64</td><td align="right" class='awrc'>0.94</td><td align="right" headers="perSecond Average" class='awrclb'>31.82</td><td align="right" headers="perSecond StdDev" class='awrc'>10.37</td><td align="right" headers="perSecond Min" class='awrc'>24.49</td><td align="right" headers="perSecond Max" class='awrcrb'>39.15</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>24,919</td><td align="right" class='awrnc'>39.20</td><td align="right" class='awrnc'>0.58</td><td align="right" headers="perSecond Average" class='awrnclb'>19.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.94</td><td align="right" headers="perSecond Min" class='awrnc'>16.11</td><td align="right" headers="perSecond Max" class='awrncrb'>23.09</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>15,532</td><td align="right" class='awrc'>24.44</td><td align="right" class='awrc'>0.36</td><td align="right" headers="perSecond Average" class='awrclb'>12.22</td><td align="right" headers="perSecond StdDev" class='awrc'>5.43</td><td align="right" headers="perSecond Min" class='awrc'>8.38</td><td align="right" headers="perSecond Max" class='awrcrb'>16.06</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>40,451</td><td align="right" class='awrnc'>63.64</td><td align="right" class='awrnc'>0.94</td><td align="right" headers="perSecond Average" class='awrnclb'>31.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.37</td><td align="right" headers="perSecond Min" class='awrnc'>24.49</td><td align="right" headers="perSecond Max" class='awrncrb'>39.15</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>40,451</td><td align="right" class='awrc'>63.64</td><td align="right" class='awrc'>0.94</td><td align="right" headers="perSecond Average" class='awrclb'>31.82</td><td align="right" headers="perSecond StdDev" class='awrc'>10.37</td><td align="right" headers="perSecond Min" class='awrc'>24.49</td><td align="right" headers="perSecond Max" class='awrcrb'>39.15</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>10,645</td><td align="right" class='awrc'>16.74</td><td align="right" class='awrc'>0.25</td><td align="right" headers="perSecond Average" class='awrclb'>8.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.81</td><td align="right" headers="perSecond Min" class='awrc'>7.80</td><td align="right" headers="perSecond Max" class='awrcrb'>8.94</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>524,288</td><td align="right" class='awrnc'>824.85</td><td align="right" class='awrnc'>12.18</td><td align="right" headers="perSecond Average" class='awrnclb'>412.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>146.28</td><td align="right" headers="perSecond Min" class='awrnc'>308.99</td><td align="right" headers="perSecond Max" class='awrncrb'>515.86</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>453,736</td><td align="right" class='awrnc'>713.84</td><td align="right" class='awrnc'>10.54</td><td align="right" headers="perSecond Average" class='awrnclb'>356.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>117.18</td><td align="right" headers="perSecond Min" class='awrnc'>274.06</td><td align="right" headers="perSecond Max" class='awrncrb'>439.78</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>294,912</td><td align="right" class='awrc'>463.66</td><td align="right" class='awrc'>6.85</td><td align="right" headers="perSecond Average" class='awrclb'>231.83</td><td align="right" headers="perSecond StdDev" class='awrc'>181.95</td><td align="right" headers="perSecond Min" class='awrc'>103.17</td><td align="right" headers="perSecond Max" class='awrcrb'>360.49</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>524,288</td><td align="right" class='awrc'>824.85</td><td align="right" class='awrc'>12.18</td><td align="right" headers="perSecond Average" class='awrclb'>412.42</td><td align="right" headers="perSecond StdDev" class='awrc'>146.28</td><td align="right" headers="perSecond Min" class='awrc'>308.99</td><td align="right" headers="perSecond Max" class='awrcrb'>515.86</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>segment chunks allocation from dispenser</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser allocations</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load empty</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load tasks</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>6,475</td><td align="right" class='awrnc'>10.19</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>5.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.84</td><td align="right" headers="perSecond Max" class='awrncrb'>9.35</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>665</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.05</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.05</td><td align="right" headers="perSecond Max" class='awrcrb'>1.05</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>354,149</td><td align="right" class='awrnc'>557.16</td><td align="right" class='awrnc'>8.23</td><td align="right" headers="perSecond Average" class='awrnclb'>278.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>90.26</td><td align="right" headers="perSecond Min" class='awrnc'>214.76</td><td align="right" headers="perSecond Max" class='awrncrb'>342.40</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>24,754,738</td><td align="right" class='awrc'>38,945.55</td><td align="right" class='awrc'>575.10</td><td align="right" headers="perSecond Average" class='awrclb'>19,472.77</td><td align="right" headers="perSecond StdDev" class='awrc'>6,662.45</td><td align="right" headers="perSecond Min" class='awrc'>14,761.71</td><td align="right" headers="perSecond Max" class='awrcrb'>24,183.83</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>6,773,783</td><td align="right" class='awrnc'>10,657.02</td><td align="right" class='awrnc'>157.37</td><td align="right" headers="perSecond Average" class='awrnclb'>5,328.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,923.26</td><td align="right" headers="perSecond Min" class='awrnc'>3,968.56</td><td align="right" headers="perSecond Max" class='awrncrb'>6,688.46</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>4,457</td><td align="right" class='awrc'>7.01</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>3.51</td><td align="right" headers="perSecond StdDev" class='awrc'>0.36</td><td align="right" headers="perSecond Min" class='awrc'>3.25</td><td align="right" headers="perSecond Max" class='awrcrb'>3.76</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>2,947,925</td><td align="right" class='awrnc'>4,633.98</td><td align="right" class='awrnc'>68.49</td><td align="right" headers="perSecond Average" class='awrnclb'>2,316.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,423.65</td><td align="right" headers="perSecond Min" class='awrnc'>603.21</td><td align="right" headers="perSecond Max" class='awrncrb'>4,030.77</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.09</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>19,281,281</td><td align="right" class='awrc'>30,333.80</td><td align="right" class='awrc'>447.94</td><td align="right" headers="perSecond Average" class='awrclb'>15,166.90</td><td align="right" headers="perSecond StdDev" class='awrc'>4,694.94</td><td align="right" headers="perSecond Min" class='awrc'>11,847.08</td><td align="right" headers="perSecond Max" class='awrcrb'>18,486.72</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>418</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.44</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>429</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>0.22</td><td align="right" headers="perSecond Max" class='awrcrb'>0.46</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>37,029,602</td><td align="right" class='awrnc'>58,257.58</td><td align="right" class='awrnc'>860.27</td><td align="right" headers="perSecond Average" class='awrnclb'>29,128.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,405.72</td><td align="right" headers="perSecond Min" class='awrnc'>21,770.84</td><td align="right" headers="perSecond Max" class='awrncrb'>36,486.74</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>911</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.72</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.66</td><td align="right" headers="perSecond Max" class='awrcrb'>0.77</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>726,749</td><td align="right" class='awrnc'>1,143.02</td><td align="right" class='awrnc'>16.88</td><td align="right" headers="perSecond Average" class='awrnclb'>571.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>85.43</td><td align="right" headers="perSecond Min" class='awrnc'>511.11</td><td align="right" headers="perSecond Max" class='awrncrb'>631.92</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>1,884,018</td><td align="right" class='awrc'>2,962.70</td><td align="right" class='awrc'>43.77</td><td align="right" headers="perSecond Average" class='awrclb'>1,481.35</td><td align="right" headers="perSecond StdDev" class='awrc'>612.18</td><td align="right" headers="perSecond Min" class='awrc'>1,048.47</td><td align="right" headers="perSecond Max" class='awrcrb'>1,914.23</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>1,884,018</td><td align="right" class='awrnc'>2,962.70</td><td align="right" class='awrnc'>43.77</td><td align="right" headers="perSecond Average" class='awrnclb'>1,481.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>612.18</td><td align="right" headers="perSecond Min" class='awrnc'>1,048.47</td><td align="right" headers="perSecond Max" class='awrncrb'>1,914.23</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>2,766</td><td align="right" class='awrc'>4.35</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>2.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.24</td><td align="right" headers="perSecond Min" class='awrc'>2.01</td><td align="right" headers="perSecond Max" class='awrcrb'>2.34</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>5,242,880</td><td align="right" class='awrnc'>8,245.30</td><td align="right" class='awrnc'>121.80</td><td align="right" headers="perSecond Average" class='awrnclb'>4,122.65</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,161.31</td><td align="right" headers="perSecond Min" class='awrnc'>3,301.48</td><td align="right" headers="perSecond Max" class='awrncrb'>4,943.82</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>6,240</td><td align="right" class='awrc'>9.82</td><td align="right" class='awrc'>0.14</td><td align="right" headers="perSecond Average" class='awrclb'>4.91</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>4.82</td><td align="right" headers="perSecond Max" class='awrcrb'>4.99</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>478</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.36</td><td align="right" headers="perSecond Max" class='awrncrb'>0.39</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>1,160,400,428</td><td align="right" class='awrc'>1,825,629.40</td><td align="right" class='awrc'>26,958.47</td><td align="right" headers="perSecond Average" class='awrclb'>912,814.70</td><td align="right" headers="perSecond StdDev" class='awrc'>330,754.93</td><td align="right" headers="perSecond Min" class='awrc'>678,935.64</td><td align="right" headers="perSecond Max" class='awrcrb'>1,146,693.75</td></tr>
<tr><td scope="row" class='awrnc'>user I/O wait time</td><td align="right" class='awrnc'>2,359,691</td><td align="right" class='awrnc'>3,712.60</td><td align="right" class='awrnc'>54.82</td><td align="right" headers="perSecond Average" class='awrnclb'>1,856.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>803.34</td><td align="right" headers="perSecond Min" class='awrnc'>1,288.25</td><td align="right" headers="perSecond Max" class='awrncrb'>2,424.35</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>9,197</td><td align="right" class='awrc'>14.47</td><td align="right" class='awrc'>0.21</td><td align="right" headers="perSecond Average" class='awrclb'>7.23</td><td align="right" headers="perSecond StdDev" class='awrc'>0.29</td><td align="right" headers="perSecond Min" class='awrc'>7.03</td><td align="right" headers="perSecond Max" class='awrcrb'>7.44</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>43,044</td><td align="right" class='awrnc'>67.72</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>33.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.31</td><td align="right" headers="perSecond Min" class='awrnc'>25.15</td><td align="right" headers="perSecond Max" class='awrncrb'>42.57</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>129</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>3,599</td><td align="right" class='awrc'>5.66</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>2.83</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>2.72</td><td align="right" headers="perSecond Max" class='awrcrb'>2.94</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>123,682</td><td align="right" class='awrnc'>194.54</td><td align="right" class='awrnc'>2.87</td><td align="right" headers="perSecond Average" class='awrnclb'>97.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.59</td><td align="right" headers="perSecond Min" class='awrnc'>93.32</td><td align="right" headers="perSecond Max" class='awrncrb'>101.22</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>7,721</td><td align="right" class='awrnc'>12.14</td><td align="right" class='awrnc'>0.18</td><td align="right" headers="perSecond Average" class='awrnclb'>6.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>5.94</td><td align="right" headers="perSecond Max" class='awrncrb'>6.20</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>29,843</td><td align="right" class='awrc'>46.93</td><td align="right" class='awrc'>0.69</td><td align="right" headers="perSecond Average" class='awrclb'>23.47</td><td align="right" headers="perSecond StdDev" class='awrc'>5.19</td><td align="right" headers="perSecond Min" class='awrc'>19.79</td><td align="right" headers="perSecond Max" class='awrcrb'>27.14</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>29,849</td><td align="right" class='awrnc'>46.96</td><td align="right" class='awrnc'>0.69</td><td align="right" headers="perSecond Average" class='awrnclb'>23.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.00</td><td align="right" headers="perSecond Min" class='awrnc'>19.95</td><td align="right" headers="perSecond Max" class='awrncrb'>27.01</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>40,384</td><td align="right" class='awrc'>63.53</td><td align="right" class='awrc'>0.94</td><td align="right" headers="perSecond Average" class='awrclb'>31.77</td><td align="right" headers="perSecond StdDev" class='awrc'>10.34</td><td align="right" headers="perSecond Min" class='awrc'>24.46</td><td align="right" headers="perSecond Max" class='awrcrb'>39.08</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>21,512</td><td align="right" class='awrnc'>33.84</td><td align="right" class='awrnc'>0.50</td><td align="right" headers="perSecond Average" class='awrnclb'>16.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.91</td><td align="right" headers="perSecond Min" class='awrnc'>12.74</td><td align="right" headers="perSecond Max" class='awrncrb'>21.10</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>985</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.69</td><td align="right" headers="perSecond Max" class='awrcrb'>0.86</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>166,627</td><td align="right" class='awrnc'>261.93</td><td align="right" class='awrnc'>3.87</td><td align="right" headers="perSecond Average" class='awrnclb'>130.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>135.06</td><td align="right" headers="perSecond Min" class='awrnc'>35.47</td><td align="right" headers="perSecond Max" class='awrncrb'>226.47</td></tr>
<tr><td scope="row" class='awrc'>gcs ast xid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs bidless ast to lms</td><td align="right" class='awrnc'>1,295</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.91</td><td align="right" headers="perSecond Min" class='awrnc'>0.37</td><td align="right" headers="perSecond Max" class='awrncrb'>1.66</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked converts</td><td align="right" class='awrc'>219,353</td><td align="right" class='awrc'>345.03</td><td align="right" class='awrc'>5.10</td><td align="right" headers="perSecond Average" class='awrclb'>172.51</td><td align="right" headers="perSecond StdDev" class='awrc'>1.54</td><td align="right" headers="perSecond Min" class='awrc'>171.43</td><td align="right" headers="perSecond Max" class='awrcrb'>173.60</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked cr converts</td><td align="right" class='awrnc'>2,574</td><td align="right" class='awrnc'>4.05</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>2.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.01</td><td align="right" headers="perSecond Min" class='awrnc'>1.31</td><td align="right" headers="perSecond Max" class='awrncrb'>2.74</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible basts</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (global)</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (local)</td><td align="right" class='awrc'>878</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.66</td><td align="right" headers="perSecond Max" class='awrcrb'>0.72</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>1,721,095</td><td align="right" class='awrnc'>2,707.74</td><td align="right" class='awrnc'>39.98</td><td align="right" headers="perSecond Average" class='awrnclb'>1,353.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>476.07</td><td align="right" headers="perSecond Min" class='awrnc'>1,017.24</td><td align="right" headers="perSecond Max" class='awrncrb'>1,690.50</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>227</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>167,922</td><td align="right" class='awrnc'>263.97</td><td align="right" class='awrnc'>3.90</td><td align="right" headers="perSecond Average" class='awrnclb'>131.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>135.97</td><td align="right" headers="perSecond Min" class='awrnc'>35.84</td><td align="right" headers="perSecond Max" class='awrncrb'>228.13</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (compatible) converts</td><td align="right" class='awrc'>34,641</td><td align="right" class='awrc'>54.49</td><td align="right" class='awrc'>0.80</td><td align="right" headers="perSecond Average" class='awrclb'>27.24</td><td align="right" headers="perSecond StdDev" class='awrc'>0.43</td><td align="right" headers="perSecond Min" class='awrc'>26.94</td><td align="right" headers="perSecond Max" class='awrcrb'>27.55</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (null) converts</td><td align="right" class='awrnc'>3,233,370</td><td align="right" class='awrnc'>5,085.79</td><td align="right" class='awrnc'>75.12</td><td align="right" headers="perSecond Average" class='awrnclb'>2,542.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>71.57</td><td align="right" headers="perSecond Min" class='awrnc'>2,492.29</td><td align="right" headers="perSecond Max" class='awrncrb'>2,593.50</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrc'>39,791</td><td align="right" class='awrc'>62.60</td><td align="right" class='awrc'>0.92</td><td align="right" headers="perSecond Average" class='awrclb'>31.30</td><td align="right" headers="perSecond StdDev" class='awrc'>5.39</td><td align="right" headers="perSecond Min" class='awrc'>27.49</td><td align="right" headers="perSecond Max" class='awrcrb'>35.11</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (null) converts</td><td align="right" class='awrnc'>19,143,562</td><td align="right" class='awrnc'>30,111.51</td><td align="right" class='awrnc'>444.74</td><td align="right" headers="perSecond Average" class='awrnclb'>15,055.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.59</td><td align="right" headers="perSecond Min" class='awrnc'>15,039.07</td><td align="right" headers="perSecond Max" class='awrncrb'>15,072.44</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>175</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>751,328</td><td align="right" class='awrnc'>1,181.89</td><td align="right" class='awrnc'>17.45</td><td align="right" headers="perSecond Average" class='awrnclb'>590.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>80.86</td><td align="right" headers="perSecond Min" class='awrnc'>533.77</td><td align="right" headers="perSecond Max" class='awrncrb'>648.12</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>36,479,106</td><td align="right" class='awrc'>57,374.11</td><td align="right" class='awrc'>847.48</td><td align="right" headers="perSecond Average" class='awrclb'>28,687.06</td><td align="right" headers="perSecond StdDev" class='awrc'>4,226.41</td><td align="right" headers="perSecond Min" class='awrc'>25,698.53</td><td align="right" headers="perSecond Max" class='awrcrb'>31,675.58</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>356</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.56</td><td align="right" headers="perSecond Max" class='awrncrb'>0.56</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>548</td><td align="right" class='awrnc'>0.86</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>0.30</td><td align="right" headers="perSecond Max" class='awrncrb'>0.56</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to fg</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs retry convert request</td><td align="right" class='awrnc'>379</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.27</td><td align="right" headers="perSecond Max" class='awrncrb'>0.33</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs actual</td><td align="right" class='awrc'>2,514</td><td align="right" class='awrc'>3.96</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>1.98</td><td align="right" headers="perSecond StdDev" class='awrc'>0.97</td><td align="right" headers="perSecond Min" class='awrc'>1.29</td><td align="right" headers="perSecond Max" class='awrcrb'>2.67</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs logical</td><td align="right" class='awrnc'>171,160</td><td align="right" class='awrnc'>269.39</td><td align="right" class='awrnc'>3.98</td><td align="right" headers="perSecond Average" class='awrnclb'>134.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>135.37</td><td align="right" headers="perSecond Min" class='awrnc'>38.97</td><td align="right" headers="perSecond Max" class='awrncrb'>230.42</td></tr>
<tr><td scope="row" class='awrc'>gcs stale cr</td><td align="right" class='awrc'>376</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.19</td><td align="right" headers="perSecond Max" class='awrcrb'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>585</td><td align="right" class='awrnc'>0.92</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.40</td><td align="right" headers="perSecond Max" class='awrncrb'>0.52</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>13,968</td><td align="right" class='awrc'>21.97</td><td align="right" class='awrc'>0.32</td><td align="right" headers="perSecond Average" class='awrclb'>10.98</td><td align="right" headers="perSecond StdDev" class='awrc'>3.68</td><td align="right" headers="perSecond Min" class='awrc'>8.38</td><td align="right" headers="perSecond Max" class='awrcrb'>13.58</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>421</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.31</td><td align="right" headers="perSecond Max" class='awrncrb'>0.36</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages received</td><td align="right" class='awrc'>439,716</td><td align="right" class='awrc'>691.57</td><td align="right" class='awrc'>10.22</td><td align="right" headers="perSecond Average" class='awrclb'>345.79</td><td align="right" headers="perSecond StdDev" class='awrc'>59.75</td><td align="right" headers="perSecond Min" class='awrc'>303.54</td><td align="right" headers="perSecond Max" class='awrcrb'>388.04</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages sent</td><td align="right" class='awrnc'>441,820</td><td align="right" class='awrnc'>695.02</td><td align="right" class='awrnc'>10.26</td><td align="right" headers="perSecond Average" class='awrnclb'>347.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>57.16</td><td align="right" headers="perSecond Min" class='awrnc'>307.09</td><td align="right" headers="perSecond Max" class='awrncrb'>387.93</td></tr>
<tr><td scope="row" class='awrc'>messages flow controlled</td><td align="right" class='awrc'>62,079</td><td align="right" class='awrc'>97.65</td><td align="right" class='awrc'>1.44</td><td align="right" headers="perSecond Average" class='awrclb'>48.83</td><td align="right" headers="perSecond StdDev" class='awrc'>4.59</td><td align="right" headers="perSecond Min" class='awrc'>45.58</td><td align="right" headers="perSecond Max" class='awrcrb'>52.07</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent actual</td><td align="right" class='awrnc'>3,704,949</td><td align="right" class='awrnc'>5,826.98</td><td align="right" class='awrnc'>86.07</td><td align="right" headers="perSecond Average" class='awrnclb'>2,913.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>542.97</td><td align="right" headers="perSecond Min" class='awrnc'>2,529.55</td><td align="right" headers="perSecond Max" class='awrncrb'>3,297.43</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent logical</td><td align="right" class='awrc'>3,520,423</td><td align="right" class='awrc'>5,537.98</td><td align="right" class='awrc'>81.79</td><td align="right" headers="perSecond Average" class='awrclb'>2,768.99</td><td align="right" headers="perSecond StdDev" class='awrc'>490.72</td><td align="right" headers="perSecond Min" class='awrc'>2,422.00</td><td align="right" headers="perSecond Max" class='awrcrb'>3,115.98</td></tr>
<tr><td scope="row" class='awrnc'>messages received actual</td><td align="right" class='awrnc'>7,538,490</td><td align="right" class='awrnc'>11,856.71</td><td align="right" class='awrnc'>175.13</td><td align="right" headers="perSecond Average" class='awrnclb'>5,928.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>687.37</td><td align="right" headers="perSecond Min" class='awrnc'>5,442.31</td><td align="right" headers="perSecond Max" class='awrncrb'>6,414.40</td></tr>
<tr><td scope="row" class='awrc'>messages received logical</td><td align="right" class='awrc'>36,493,074</td><td align="right" class='awrc'>57,396.08</td><td align="right" class='awrc'>847.81</td><td align="right" headers="perSecond Average" class='awrclb'>28,698.04</td><td align="right" headers="perSecond StdDev" class='awrc'>4,230.09</td><td align="right" headers="perSecond Min" class='awrc'>25,706.91</td><td align="right" headers="perSecond Max" class='awrcrb'>31,689.16</td></tr>
<tr><td scope="row" class='awrnc'>messages sent directly</td><td align="right" class='awrnc'>2,243,554</td><td align="right" class='awrnc'>3,529.76</td><td align="right" class='awrnc'>52.12</td><td align="right" headers="perSecond Average" class='awrnclb'>1,764.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>665.67</td><td align="right" headers="perSecond Min" class='awrnc'>1,294.18</td><td align="right" headers="perSecond Max" class='awrncrb'>2,235.58</td></tr>
<tr><td scope="row" class='awrc'>messages sent indirectly</td><td align="right" class='awrc'>13,841,800</td><td align="right" class='awrc'>21,776.87</td><td align="right" class='awrc'>321.57</td><td align="right" headers="perSecond Average" class='awrclb'>10,888.44</td><td align="right" headers="perSecond StdDev" class='awrc'>3,869.22</td><td align="right" headers="perSecond Min" class='awrc'>8,152.49</td><td align="right" headers="perSecond Max" class='awrcrb'>13,624.38</td></tr>
<tr><td scope="row" class='awrnc'>messages sent not implicit batched</td><td align="right" class='awrnc'>298,314</td><td align="right" class='awrnc'>469.27</td><td align="right" class='awrnc'>6.93</td><td align="right" headers="perSecond Average" class='awrnclb'>234.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>35.97</td><td align="right" headers="perSecond Min" class='awrnc'>209.20</td><td align="right" headers="perSecond Max" class='awrncrb'>260.07</td></tr>
<tr><td scope="row" class='awrc'>messages sent pbatched</td><td align="right" class='awrc'>32,059,440</td><td align="right" class='awrc'>50,430.62</td><td align="right" class='awrc'>744.81</td><td align="right" headers="perSecond Average" class='awrclb'>25,215.31</td><td align="right" headers="perSecond StdDev" class='awrc'>2,718.74</td><td align="right" headers="perSecond Min" class='awrc'>23,292.87</td><td align="right" headers="perSecond Max" class='awrcrb'>27,137.75</td></tr>
<tr><td scope="row" class='awrnc'>msgs received kernel queue time (ns)</td><td align="right" class='awrnc'>3,873,944,292,357</td><td align="right" class='awrnc'>6,095,093,853.68</td><td align="right" class='awrnc'>89,999,635.08</td><td align="right" headers="perSecond Average" class='awrnclb'>3,047,546,926.84</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,364,585,917.83</td><td align="right" headers="perSecond Min" class='awrnc'>2,082,638,970.83</td><td align="right" headers="perSecond Max" class='awrncrb'>4,012,454,882.85</td></tr>
<tr><td scope="row" class='awrc'>msgs received queue time (ms)</td><td align="right" class='awrc'>1,317,104</td><td align="right" class='awrc'>2,072.03</td><td align="right" class='awrc'>30.60</td><td align="right" headers="perSecond Average" class='awrclb'>1,036.01</td><td align="right" headers="perSecond StdDev" class='awrc'>257.78</td><td align="right" headers="perSecond Min" class='awrc'>853.74</td><td align="right" headers="perSecond Max" class='awrcrb'>1,218.29</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queued</td><td align="right" class='awrnc'>36,493,074</td><td align="right" class='awrnc'>57,396.08</td><td align="right" class='awrnc'>847.81</td><td align="right" headers="perSecond Average" class='awrnclb'>28,698.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,230.09</td><td align="right" headers="perSecond Min" class='awrnc'>25,706.91</td><td align="right" headers="perSecond Max" class='awrncrb'>31,689.16</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time (ms)</td><td align="right" class='awrc'>1,987,131</td><td align="right" class='awrc'>3,126.51</td><td align="right" class='awrc'>46.17</td><td align="right" headers="perSecond Average" class='awrclb'>1,563.26</td><td align="right" headers="perSecond StdDev" class='awrc'>741.45</td><td align="right" headers="perSecond Min" class='awrc'>1,038.98</td><td align="right" headers="perSecond Max" class='awrcrb'>2,087.54</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrnc'>69,317,544</td><td align="right" class='awrnc'>109,000.96</td><td align="right" class='awrnc'>1,610.39</td><td align="right" headers="perSecond Average" class='awrnclb'>54,500.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>25,717.62</td><td align="right" headers="perSecond Min" class='awrnc'>36,315.38</td><td align="right" headers="perSecond Max" class='awrncrb'>72,685.58</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued</td><td align="right" class='awrc'>5,243,051</td><td align="right" class='awrc'>8,246.83</td><td align="right" class='awrc'>121.81</td><td align="right" headers="perSecond Average" class='awrclb'>4,123.41</td><td align="right" headers="perSecond StdDev" class='awrc'>115.18</td><td align="right" headers="perSecond Min" class='awrc'>4,041.97</td><td align="right" headers="perSecond Max" class='awrcrb'>4,204.86</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued on ksxp</td><td align="right" class='awrnc'>7,540,111</td><td align="right" class='awrnc'>11,860.86</td><td align="right" class='awrnc'>175.17</td><td align="right" headers="perSecond Average" class='awrnclb'>5,930.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>639.92</td><td align="right" headers="perSecond Min" class='awrnc'>5,477.94</td><td align="right" headers="perSecond Max" class='awrncrb'>6,382.92</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>4,333,680</td><td align="right" class='awrc'>6,816.66</td><td align="right" class='awrc'>100.68</td><td align="right" headers="perSecond Average" class='awrclb'>3,408.33</td><td align="right" headers="perSecond StdDev" class='awrc'>57.67</td><td align="right" headers="perSecond Min" class='awrc'>3,367.55</td><td align="right" headers="perSecond Max" class='awrcrb'>3,449.11</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>4,633,280</td><td align="right" class='awrnc'>7,287.73</td><td align="right" class='awrnc'>107.64</td><td align="right" headers="perSecond Average" class='awrnclb'>3,643.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>90.73</td><td align="right" headers="perSecond Min" class='awrnc'>3,579.71</td><td align="right" headers="perSecond Max" class='awrncrb'>3,708.02</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>1,813,322</td><td align="right" class='awrc'>2,852.25</td><td align="right" class='awrc'>42.13</td><td align="right" headers="perSecond Average" class='awrclb'>1,426.12</td><td align="right" headers="perSecond StdDev" class='awrc'>11.82</td><td align="right" headers="perSecond Min" class='awrc'>1,417.77</td><td align="right" headers="perSecond Max" class='awrcrb'>1,434.48</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>5,550,936</td><td align="right" class='awrnc'>8,730.29</td><td align="right" class='awrnc'>128.96</td><td align="right" headers="perSecond Average" class='awrnclb'>4,365.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>801.41</td><td align="right" headers="perSecond Min" class='awrnc'>3,798.46</td><td align="right" headers="perSecond Max" class='awrncrb'>4,931.83</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>170</td><td align="right" headers="Sessions End" class='awrc'>138</td><td align="right" headers="OpenCursors Begin" class='awrclb'>410</td><td align="right" headers="OpenCursors End" class='awrc'>102</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>3,715</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>4,357</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>167</td><td align="right" headers="Sessions End" class='awrnc'>134</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>378</td><td align="right" headers="OpenCursors End" class='awrnc'>64</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>3,043</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>3,360</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>337</td><td align="right" class='awrct'>272</td><td align="right" class='awrclbt'>788</td><td align="right" class='awrct'>166</td><td align="right" class='awrclbt'>6,758</td><td align="right" class='awrcrbt'>7,717</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>169</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnclb'>394</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnclb'>3,379</td><td align="right" class='awrncrb'>3,859</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrclb'>23</td><td align="right" class='awrc'>27</td><td align="right" class='awrclb'>475</td><td align="right" class='awrcrb'>705</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>41,250.24</td><td align="right" class='awrc'>35,707.89</td><td align="right" class='awrc'>5,542.35</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>41,111.42</td><td align="right" class='awrnc'>35,687.39</td><td align="right" class='awrnc'>5,424.03</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>63.57</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>63.57</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>348.88</td><td align="right" class='awrc'>300.21</td><td align="right" class='awrc'>48.67</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>339.73</td><td align="right" class='awrnc'>295.45</td><td align="right" class='awrnc'>44.28</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>4.20</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.20</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>43,485.67</td><td align="right" class='awrc'>37,818.22</td><td align="right" class='awrc'>5,667.45</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>43,481.04</td><td align="right" class='awrnc'>37,818.16</td><td align="right" class='awrnc'>5,662.87</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>4.63</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>4.57</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>25,830,907</td><td align="right" headers="Requests IOs/s" class='awrc'>40,594.66</td><td align="right" headers="Requests Reads/s" class='awrc'>35,182.81</td><td align="right" headers="Requests Writes/s" class='awrc'>5,411.85</td><td align="right" headers="MB Total" class='awrclb'>218,486</td><td align="right" headers="MB IOMB/s" class='awrc'>343.36</td><td align="right" headers="MB ReadMB/s" class='awrc'>295.83</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>47.54</td><td align="right" class='awrc'>5M</td><td align="right" class='awrc'>4.78ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>22,376,652</td><td align="right" headers="Requests IOs/s" class='awrnc'>35,166.11</td><td align="right" headers="Requests Reads/s" class='awrnc'>35,166.11</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>185,318</td><td align="right" headers="MB IOMB/s" class='awrnc'>291.24</td><td align="right" headers="MB ReadMB/s" class='awrnc'>291.24</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>5M</td><td align="right" class='awrnc'>4.67ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>3,369,532</td><td align="right" headers="Requests IOs/s" class='awrc'>5,295.40</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>5,295.40</td><td align="right" headers="MB Total" class='awrclb'>27,486</td><td align="right" headers="MB IOMB/s" class='awrc'>43.20</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>43.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>11,795</td><td align="right" headers="Requests IOs/s" class='awrnc'>18.54</td><td align="right" headers="Requests Reads/s" class='awrnc'>16.44</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.09</td><td align="right" headers="MB Total" class='awrnclb'>2,949</td><td align="right" headers="MB IOMB/s" class='awrnc'>4.63</td><td align="right" headers="MB ReadMB/s" class='awrnc'>4.59</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.05</td><td align="right" class='awrnc'>6510</td><td align="right" class='awrnc'>2.00ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>72,733</td><td align="right" headers="Requests IOs/s" class='awrc'>114.30</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>114.30</td><td align="right" headers="MB Total" class='awrclb'>2,721</td><td align="right" headers="MB IOMB/s" class='awrc'>4.28</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>4.28</td><td align="right" class='awrc'>39.7K</td><td align="right" class='awrc'>19.13ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>30</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.05</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.05</td><td align="right" headers="MB Total" class='awrnclb'>11</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Streams AQ</td><td align="right" headers="Requests Total" class='awrclb'>127</td><td align="right" headers="Requests IOs/s" class='awrc'>0.20</td><td align="right" headers="Requests Reads/s" class='awrc'>0.20</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>1</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>2.17ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrnclb'>38</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.06</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.06</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>9,708,908</td><td align="right" headers="Requests IOs/s" class='awrct'>15,258.07</td><td align="right" headers="Requests Reads/s" class='awrct'>13,225.02</td><td align="right" headers="Requests Writes/s" class='awrct'>2,033.05</td><td align="right" headers="MB Total" class='awrclbt'>83,573</td><td align="right" headers="MB IOMB/s" class='awrct'>131.34</td><td align="right" headers="MB ReadMB/s" class='awrct'>113.46</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>17.88</td><td align="right" class='awrct'>1.9M</td><td align="right" class='awrct'>4.50ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>8,409,655</td><td align="right" headers="Requests IOs/s" class='awrnc'>13,216.22</td><td align="right" headers="Requests Reads/s" class='awrnc'>13,216.22</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>70,683</td><td align="right" headers="MB IOMB/s" class='awrnc'>111.08</td><td align="right" headers="MB ReadMB/s" class='awrnc'>111.08</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>1.9M</td><td align="right" class='awrnc'>4.38ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>1,266,361</td><td align="right" headers="Requests IOs/s" class='awrc'>1,990.15</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>1,990.15</td><td align="right" headers="MB Total" class='awrclb'>10,328</td><td align="right" headers="MB IOMB/s" class='awrc'>16.23</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>16.23</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>6,107</td><td align="right" headers="Requests IOs/s" class='awrnc'>9.60</td><td align="right" headers="Requests Reads/s" class='awrnc'>8.55</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.05</td><td align="right" headers="MB Total" class='awrnclb'>1,529</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.40</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.38</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.03</td><td align="right" class='awrnc'>3398</td><td align="right" class='awrnc'>2.33ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>26,615</td><td align="right" headers="Requests IOs/s" class='awrc'>41.83</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>41.83</td><td align="right" headers="MB Total" class='awrclb'>1,022</td><td align="right" headers="MB IOMB/s" class='awrc'>1.61</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>1.61</td><td align="right" class='awrc'>15.4K</td><td align="right" class='awrc'>20.07ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>14</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.02</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.02</td><td align="right" headers="MB Total" class='awrnclb'>10</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Streams AQ</td><td align="right" headers="Requests Total" class='awrclb'>127</td><td align="right" headers="Requests IOs/s" class='awrc'>0.20</td><td align="right" headers="Requests Reads/s" class='awrc'>0.20</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>1</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>2.17ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrnclb'>29</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.05</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.04</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>16,121,999</td><td align="right" headers="Requests IOs/s" class='awrct'>25,336.59</td><td align="right" headers="Requests Reads/s" class='awrct'>21,957.79</td><td align="right" headers="Requests Writes/s" class='awrct'>3,378.80</td><td align="right" headers="MB Total" class='awrclbt'>134,913</td><td align="right" headers="MB IOMB/s" class='awrct'>212.02</td><td align="right" headers="MB ReadMB/s" class='awrct'>182.37</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>29.66</td><td align="right" class='awrct'>3.2M</td><td align="right" class='awrct'>4.94ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>13,966,997</td><td align="right" headers="Requests IOs/s" class='awrnc'>21,949.88</td><td align="right" headers="Requests Reads/s" class='awrnc'>21,949.88</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>114,635</td><td align="right" headers="MB IOMB/s" class='awrnc'>180.16</td><td align="right" headers="MB ReadMB/s" class='awrnc'>180.16</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>3.1M</td><td align="right" class='awrnc'>4.84ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>2,103,171</td><td align="right" headers="Requests IOs/s" class='awrc'>3,305.25</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>3,305.25</td><td align="right" headers="MB Total" class='awrclb'>17,158</td><td align="right" headers="MB IOMB/s" class='awrc'>26.96</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>26.96</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>46,118</td><td align="right" headers="Requests IOs/s" class='awrnc'>72.48</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>72.48</td><td align="right" headers="MB Total" class='awrnclb'>1,699</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.67</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>2.67</td><td align="right" class='awrnc'>24.4K</td><td align="right" class='awrnc'>18.54ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>5,688</td><td align="right" headers="Requests IOs/s" class='awrc'>8.94</td><td align="right" headers="Requests Reads/s" class='awrc'>7.89</td><td align="right" headers="Requests Writes/s" class='awrc'>1.05</td><td align="right" headers="MB Total" class='awrclb'>1,420</td><td align="right" headers="MB IOMB/s" class='awrc'>2.23</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.21</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>3112</td><td align="right" class='awrc'>1.64ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>16</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.03</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.03</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrclb'>9</td><td align="right" headers="Requests IOs/s" class='awrc'>0.01</td><td align="right" headers="Requests Reads/s" class='awrc'>0.01</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>0</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>25,806,067</td><td align="right" headers="Requests IOs/s" class='awrc'>40,555.62</td><td align="right" headers="Requests Reads/s" class='awrc'>35,153.14</td><td align="right" headers="Requests Writes/s" class='awrc'>5,402.47</td><td align="right" headers="MB Total" class='awrclb'>218,279</td><td align="right" headers="MB IOMB/s" class='awrc'>343.04</td><td align="right" headers="MB ReadMB/s" class='awrc'>295.57</td><td align="right" headers="MB WriteMB/s" class='awrc'>47.46</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>744.49us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1746.15ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>25,718,460</td><td align="right" headers="Requests IOs/s" class='awrnc'>40,417.94</td><td align="right" headers="Requests Reads/s" class='awrnc'>35,131.89</td><td align="right" headers="Requests Writes/s" class='awrnc'>5,286.04</td><td align="right" headers="MB Total" class='awrnclb'>212,501</td><td align="right" headers="MB IOMB/s" class='awrnc'>333.96</td><td align="right" headers="MB ReadMB/s" class='awrnc'>290.83</td><td align="right" headers="MB WriteMB/s" class='awrnc'>43.13</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>744.49us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>19.13ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>75,776</td><td align="right" headers="Requests IOs/s" class='awrc'>119.09</td><td align="right" headers="Requests Reads/s" class='awrc'>4.85</td><td align="right" headers="Requests Writes/s" class='awrc'>114.24</td><td align="right" headers="MB Total" class='awrclb'>5,516</td><td align="right" headers="MB IOMB/s" class='awrc'>8.67</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.39</td><td align="right" headers="MB WriteMB/s" class='awrc'>4.27</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>348.28us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1762.33ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>8,490</td><td align="right" headers="Requests IOs/s" class='awrnc'>13.34</td><td align="right" headers="Requests Reads/s" class='awrnc'>11.54</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.80</td><td align="right" headers="MB Total" class='awrnclb'>132</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.21</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.18</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>101.96us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Other</td><td align="right" headers="Requests Total" class='awrclb'>2,834</td><td align="right" headers="Requests IOs/s" class='awrc'>4.45</td><td align="right" headers="Requests Reads/s" class='awrc'>4.45</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>88</td><td align="right" headers="MB IOMB/s" class='awrc'>0.14</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.14</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>2.45ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>507</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.80</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.40</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.39</td><td align="right" headers="MB Total" class='awrnclb'>42</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.07</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.03</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>71.43us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>9,706,766</td><td align="right" headers="Requests IOs/s" class='awrct'>15,254.70</td><td align="right" headers="Requests Reads/s" class='awrct'>13,222.43</td><td align="right" headers="Requests Writes/s" class='awrct'>2,032.28</td><td align="right" headers="MB Total" class='awrclbt'>83,553</td><td align="right" headers="MB IOMB/s" class='awrct'>131.31</td><td align="right" headers="MB ReadMB/s" class='awrct'>113.43</td><td align="right" headers="MB WriteMB/s" class='awrct'>17.87</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>690.25us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1691.75ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>9,672,924</td><td align="right" headers="Requests IOs/s" class='awrnc'>15,201.52</td><td align="right" headers="Requests Reads/s" class='awrnc'>13,212.16</td><td align="right" headers="Requests Writes/s" class='awrnc'>1,989.36</td><td align="right" headers="MB Total" class='awrnclb'>80,947</td><td align="right" headers="MB IOMB/s" class='awrnc'>127.21</td><td align="right" headers="MB ReadMB/s" class='awrnc'>110.99</td><td align="right" headers="MB WriteMB/s" class='awrnc'>16.23</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>690.36us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>16.50ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>28,223</td><td align="right" headers="Requests IOs/s" class='awrc'>44.35</td><td align="right" headers="Requests Reads/s" class='awrc'>2.53</td><td align="right" headers="Requests Writes/s" class='awrc'>41.83</td><td align="right" headers="MB Total" class='awrclb'>2,474</td><td align="right" headers="MB IOMB/s" class='awrc'>3.89</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.28</td><td align="right" headers="MB WriteMB/s" class='awrc'>1.61</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>160.26us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1716.18ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,404</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.92</td><td align="right" headers="Requests Reads/s" class='awrnc'>6.01</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.91</td><td align="right" headers="MB Total" class='awrnclb'>68</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.11</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>24.83us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>233</td><td align="right" headers="Requests IOs/s" class='awrc'>0.37</td><td align="right" headers="Requests Reads/s" class='awrc'>0.19</td><td align="right" headers="Requests Writes/s" class='awrc'>0.18</td><td align="right" headers="MB Total" class='awrclb'>34</td><td align="right" headers="MB IOMB/s" class='awrc'>0.05</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.03</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>69.31us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Other</td><td align="right" headers="Requests Total" class='awrnclb'>982</td><td align="right" headers="Requests IOs/s" class='awrnc'>1.54</td><td align="right" headers="Requests Reads/s" class='awrnc'>1.54</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>30</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.05</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.05</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>2.45ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>16,099,301</td><td align="right" headers="Requests IOs/s" class='awrct'>25,300.91</td><td align="right" headers="Requests Reads/s" class='awrct'>21,930.72</td><td align="right" headers="Requests Writes/s" class='awrct'>3,370.20</td><td align="right" headers="MB Total" class='awrclbt'>134,726</td><td align="right" headers="MB IOMB/s" class='awrct'>211.73</td><td align="right" headers="MB ReadMB/s" class='awrct'>182.14</td><td align="right" headers="MB WriteMB/s" class='awrct'>29.59</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>777.19us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1805.54ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>16,045,536</td><td align="right" headers="Requests IOs/s" class='awrnc'>25,216.42</td><td align="right" headers="Requests Reads/s" class='awrnc'>21,919.74</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,296.68</td><td align="right" headers="MB Total" class='awrnclb'>131,554</td><td align="right" headers="MB IOMB/s" class='awrnc'>206.74</td><td align="right" headers="MB ReadMB/s" class='awrnc'>179.84</td><td align="right" headers="MB WriteMB/s" class='awrnc'>26.90</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>777.12us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>21.75ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>47,553</td><td align="right" headers="Requests IOs/s" class='awrc'>74.73</td><td align="right" headers="Requests Reads/s" class='awrc'>2.32</td><td align="right" headers="Requests Writes/s" class='awrc'>72.41</td><td align="right" headers="MB Total" class='awrclb'>3,042</td><td align="right" headers="MB IOMB/s" class='awrc'>4.78</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.11</td><td align="right" headers="MB WriteMB/s" class='awrc'>2.67</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>567.16us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1812.19ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,086</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.42</td><td align="right" headers="Requests Reads/s" class='awrnc'>5.53</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.89</td><td align="right" headers="MB Total" class='awrnclb'>64</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.10</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>185.80us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Other</td><td align="right" headers="Requests Total" class='awrclb'>1,852</td><td align="right" headers="Requests IOs/s" class='awrc'>2.91</td><td align="right" headers="Requests Reads/s" class='awrc'>2.91</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>58</td><td align="right" headers="MB IOMB/s" class='awrc'>0.09</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>2.45ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>274</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.43</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.22</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.21</td><td align="right" headers="MB Total" class='awrnclb'>8</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>72.99us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>.00ns</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	68.8% of Total Logical Reads:	   24,754,738</li>
<li class="awr">Captured Segments account for	70.0% of Total Physical Reads:	    24,064,226</li>
<li class="awr">Captured Segments account for	71.5% of Total Physical Read Requests:	    22,708,352</li>
<li class="awr">Captured Segments account for	71.5% of Total UnOptimized Read Requests:      22,708,352</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		   36</li>
<li class="awr">Captured Segments account for	68.6% of Total Physical Writes:       3,606,269</li>
<li class="awr">Captured Segments account for	71.5% of Total Physical Write Requests:       3,451,378</li>
<li class="awr">Captured Segments account for	14.3% of Total Direct Physical Writes:		 2,909</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  1</li>
<li class="awr">Captured Segments account for	 2.2% of Total CR Blocks Received:	     2,541</li>
<li class="awr">Captured Segments account for	58.7% of Total Current Blocks Received: 	  1,950</li>
<li class="awr">Captured Segments account for	 2.1% of Total CR Blocks Served:	   2,572</li>
<li class="awr">Captured Segments account for	57.4% of Total Current Blocks Served:		1,993</li>
<li class="awr">Captured Segments account for	69.8% of Total Global Cache Remote Grants:	11,553,440</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>USER93</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73751</td><td align="right" class='awrc'>73757</td><td align="right" class='awrc'>36,368</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.95</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER108</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73833</td><td align="right" class='awrnc'>73837</td><td align="right" class='awrnc'>36,336</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16.94</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER31</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73429</td><td align="right" class='awrc'>73424</td><td align="right" class='awrc'>35,552</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.57</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER88</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73729</td><td align="right" class='awrnc'>73733</td><td align="right" class='awrnc'>35,552</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16.57</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER124</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73913</td><td align="right" class='awrc'>73917</td><td align="right" class='awrc'>35,520</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.56</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER106</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73823</td><td align="right" class='awrnc'>73827</td><td align="right" class='awrnc'>35,184</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16.40</td></tr>
<tr><td class='awrc'>gc cr blocks received</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SQL_PLAN</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>30.91</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>74077</td><td align="right" class='awrnc'>74077</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>10.91</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_CON_SYSSTAT</td><td class='awrc'>WRH$_CON_SYSSTAT_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74159</td><td align="right" class='awrc'>74159</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>7.27</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_CON_SYSTEM_EVENT_PK</td><td class='awrnc'>WRH$_CON_SYSTEM_EVENT_3889879926_31</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>74165</td><td align="right" class='awrnc'>74165</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_CON_SYSTEM_EVENT</td><td class='awrc'>WRH$_CON_SYSTEM_EVENT_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74163</td><td align="right" class='awrc'>74163</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ROWCACHE_SUMMARY</td><td class='awrnc'>WRH$_ROWCACHE_SUMMARY_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74047</td><td align="right" class='awrnc'>74047</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SERVICE_STAT</td><td class='awrc'>WRH$_SERVICE_STAT_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74071</td><td align="right" class='awrc'>74071</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRP$_REPORTS</td><td class='awrnc'>SYS_P268</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74206</td><td align="right" class='awrnc'>74206</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRP$_REPORTS_DETAILS</td><td class='awrc'>SYS_P269</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74209</td><td align="right" class='awrc'>74209</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRP$_REPORTS_TIME_BANDS</td><td class='awrnc'>SYS_P272</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74214</td><td align="right" class='awrnc'>74214</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SYSMETRIC_SUMMARY_INDEX</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11351</td><td align="right" class='awrc'>11351</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_EVENT_HISTOGRAM_PK</td><td class='awrnc'>WRH$_EVENT_HISTOGRAM_3889879926_31</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>74105</td><td align="right" class='awrnc'>74105</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_PARAMETER_PK</td><td class='awrc'>WRH$_PARAMETER_3889879926_31</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>74061</td><td align="right" class='awrc'>74061</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SYSSTAT_PK</td><td class='awrnc'>WRH$_SYSSTAT_3889879926_31</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>74057</td><td align="right" class='awrnc'>74057</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_PARAMETER</td><td class='awrc'>WRH$_PARAMETER_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74059</td><td align="right" class='awrc'>74059</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SEG_STAT</td><td class='awrnc'>WRH$_SEG_STAT_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74063</td><td align="right" class='awrnc'>74063</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SYSTEM_EVENT</td><td class='awrc'>WRH$_SYSTEM_EVENT_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74027</td><td align="right" class='awrc'>74027</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'>gc cr blocks served</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SQL_PLAN</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>11147</td><td align="right" class='awrnc'>11147</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>30.91</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>74077</td><td align="right" class='awrc'>74077</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>10.91</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_CON_SYSSTAT</td><td class='awrnc'>WRH$_CON_SYSSTAT_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74159</td><td align="right" class='awrnc'>74159</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>7.27</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_CON_SYSTEM_EVENT_PK</td><td class='awrc'>WRH$_CON_SYSTEM_EVENT_3889879926_31</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>74165</td><td align="right" class='awrc'>74165</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_CON_SYSTEM_EVENT</td><td class='awrnc'>WRH$_CON_SYSTEM_EVENT_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74163</td><td align="right" class='awrnc'>74163</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ROWCACHE_SUMMARY</td><td class='awrc'>WRH$_ROWCACHE_SUMMARY_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74047</td><td align="right" class='awrc'>74047</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SERVICE_STAT</td><td class='awrnc'>WRH$_SERVICE_STAT_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74071</td><td align="right" class='awrnc'>74071</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRP$_REPORTS</td><td class='awrc'>SYS_P268</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74206</td><td align="right" class='awrc'>74206</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRP$_REPORTS_DETAILS</td><td class='awrnc'>SYS_P269</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74209</td><td align="right" class='awrnc'>74209</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRP$_REPORTS_TIME_BANDS</td><td class='awrc'>SYS_P272</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74214</td><td align="right" class='awrc'>74214</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>5.45</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SYSMETRIC_SUMMARY_INDEX</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11351</td><td align="right" class='awrnc'>11351</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_EVENT_HISTOGRAM_PK</td><td class='awrc'>WRH$_EVENT_HISTOGRAM_3889879926_31</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>74105</td><td align="right" class='awrc'>74105</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_PARAMETER_PK</td><td class='awrnc'>WRH$_PARAMETER_3889879926_31</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>74061</td><td align="right" class='awrnc'>74061</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SYSSTAT_PK</td><td class='awrc'>WRH$_SYSSTAT_3889879926_31</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>74057</td><td align="right" class='awrc'>74057</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_PARAMETER</td><td class='awrnc'>WRH$_PARAMETER_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74059</td><td align="right" class='awrnc'>74059</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SEG_STAT</td><td class='awrc'>WRH$_SEG_STAT_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74063</td><td align="right" class='awrc'>74063</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SYSTEM_EVENT</td><td class='awrnc'>WRH$_SYSTEM_EVENT_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74027</td><td align="right" class='awrnc'>74027</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'>gc cu blocks received</td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>174</td><td align="right" class='awrc'>8.92</td><td align="right" class='awrc'>23.17</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>171</td><td align="right" class='awrnc'>8.77</td><td align="right" class='awrnc'>22.77</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER64</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>8.41</td><td align="right" class='awrc'>21.84</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>7.64</td><td align="right" class='awrnc'>19.84</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER21</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73379</td><td align="right" class='awrc'>73374</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>4.77</td><td align="right" class='awrc'>12.38</td></tr>
<tr><td class='awrnc'>gc cu blocks served</td><td class='awrnc'>USER12</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73335</td><td align="right" class='awrnc'>73342</td><td align="right" class='awrnc'>174</td><td align="right" class='awrnc'>8.73</td><td align="right" class='awrnc'>23.17</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER35</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>171</td><td align="right" class='awrc'>8.58</td><td align="right" class='awrc'>22.77</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnc'>8.23</td><td align="right" class='awrnc'>21.84</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER43</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73490</td><td align="right" class='awrc'>73493</td><td align="right" class='awrc'>149</td><td align="right" class='awrc'>7.48</td><td align="right" class='awrc'>19.84</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER21</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73379</td><td align="right" class='awrnc'>73374</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>4.67</td><td align="right" class='awrnc'>12.38</td></tr>
<tr><td class='awrc'>gc remote grants</td><td class='awrc'>USER21</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73379</td><td align="right" class='awrc'>73374</td><td align="right" class='awrc'>157,840</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>23.51</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>155,330</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>23.14</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER91</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73743</td><td align="right" class='awrc'>73740</td><td align="right" class='awrc'>120,761</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>17.99</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER111</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73844</td><td align="right" class='awrnc'>73847</td><td align="right" class='awrnc'>119,812</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>17.85</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER126</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73922</td><td align="right" class='awrc'>73926</td><td align="right" class='awrc'>117,503</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>17.51</td></tr>
<tr><td class='awrnc'>logical reads</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>IND$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>654,688</td><td align="right" class='awrnc'>2.64</td><td align="right" class='awrnc'>40.88</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER108</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73833</td><td align="right" class='awrc'>73837</td><td align="right" class='awrc'>239,216</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>14.94</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER93</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73751</td><td align="right" class='awrnc'>73757</td><td align="right" class='awrnc'>238,288</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>14.88</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER124</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73913</td><td align="right" class='awrc'>73917</td><td align="right" class='awrc'>235,232</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>14.69</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER50</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73540</td><td align="right" class='awrnc'>73535</td><td align="right" class='awrnc'>233,888</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>14.61</td></tr>
<tr><td class='awrc'>physical reads</td><td class='awrc'>USER64</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>370,383</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>24.49</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>314,087</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>20.77</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>298,779</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>19.76</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER21</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73379</td><td align="right" class='awrnc'>73374</td><td align="right" class='awrnc'>277,707</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>18.36</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER3</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>251,341</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>16.62</td></tr>
<tr><td class='awrnc'>physical read requests</td><td class='awrnc'>USER108</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73833</td><td align="right" class='awrnc'>73837</td><td align="right" class='awrnc'>236,034</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>20.28</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER93</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73751</td><td align="right" class='awrc'>73757</td><td align="right" class='awrc'>234,684</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>20.17</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER124</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73913</td><td align="right" class='awrnc'>73917</td><td align="right" class='awrnc'>231,325</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>19.88</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>230,965</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>19.85</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER88</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73729</td><td align="right" class='awrnc'>73733</td><td align="right" class='awrnc'>230,772</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>19.83</td></tr>
<tr><td class='awrc'>physical writes</td><td class='awrc'>USER108</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73833</td><td align="right" class='awrc'>73837</td><td align="right" class='awrc'>36,655</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.43</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER93</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73751</td><td align="right" class='awrnc'>73757</td><td align="right" class='awrnc'>36,214</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.19</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER88</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73729</td><td align="right" class='awrc'>73733</td><td align="right" class='awrc'>35,568</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.83</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER31</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73429</td><td align="right" class='awrnc'>73424</td><td align="right" class='awrnc'>35,541</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.81</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER124</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73913</td><td align="right" class='awrc'>73917</td><td align="right" class='awrc'>35,423</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.75</td></tr>
<tr><td class='awrnc'>physical writes direct</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74075</td><td align="right" class='awrnc'>74075</td><td align="right" class='awrnc'>416</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>100.00</td></tr>
<tr><td class='awrc'>physical write requests</td><td class='awrc'>USER108</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73833</td><td align="right" class='awrc'>73837</td><td align="right" class='awrc'>36,516</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>20.42</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER93</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73751</td><td align="right" class='awrnc'>73757</td><td align="right" class='awrnc'>36,105</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>20.19</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER88</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73729</td><td align="right" class='awrc'>73733</td><td align="right" class='awrc'>35,440</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>19.82</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER31</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73429</td><td align="right" class='awrnc'>73424</td><td align="right" class='awrnc'>35,435</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>19.82</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER124</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73913</td><td align="right" class='awrc'>73917</td><td align="right" class='awrc'>35,303</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>19.74</td></tr>
<tr><td class='awrnc'>row lock waits</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>745</td><td align="right" class='awrc'>7.52</td><td align="right" class='awrc'>1,848</td><td align="right" class='awrc'>3.52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>812</td><td align="right" class='awrc'>1,768</td><td align="right" class='awrc'>1,768</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>2.02</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>2.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>17.54</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>17.54</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>69.51</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>69.51</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>16.24</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>16.24</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>2,096</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>6,552</td><td align="right" class='awrnc'>43.61</td><td align="right" class='awrnc'>331,589</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>120</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>1,168</td><td align="right" class='awrc'>77.65</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>1,166</td><td align="right" class='awrnc'>99.66</td><td align="right" class='awrnc'>1,166</td><td align="right" class='awrnc'>99.66</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>8,528</td><td align="right" class='awrc'>12.35</td><td align="right" class='awrc'>31,250</td><td align="right" class='awrc'>8.63</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15,021</td><td align="right" class='awrc'>21,840</td><td align="right" class='awrc'>21,840</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>1,708.22</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,920.79</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>1,548.12</td><td align="right" headers="PGAMemAlloc End" class='awrc'>1,309.52</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>321.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>1,706.89</td><td align="right" headers="AutoPGATarget End" class='awrnc'>1,936.25</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>1,508.94</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>1,288.84</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>321.49</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>121.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>2.66</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>94</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>865.27</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.64</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>238</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>31.57</td><td align="right" class='awrc'>30.87</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>171</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>18.04</td><td align="right" class='awrnc'>10.29</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>89</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1036.38</td><td align="right" class='awrc'>41.16</td><td align="right" class='awrc'>5.30</td><td align="right" class='awrc'>6.40</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>592</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>153.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.15</td><td align="right" class='awrnc'>8.70</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>636.72</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.11</td><td align="right" class='awrc'>4.55</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>205</td><td align="right" class='awrc'>205</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>3.43</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>139</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.50</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>28</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>797.58</td><td align="right" class='awrnc'>5.21</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>13.56</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>415</td><td align="right" class='awrnc'>409</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>97.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>2.73</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>92</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>847.92</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.62</td><td align="right" class='awrnc'>3.38</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>234</td><td align="right" class='awrnc'>234</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>32.45</td><td align="right" class='awrc'>31.75</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>168</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>21.35</td><td align="right" class='awrnc'>14.80</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>86</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>999.22</td><td align="right" class='awrc'>46.55</td><td align="right" class='awrc'>5.11</td><td align="right" class='awrc'>6.74</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>585</td><td align="right" class='awrc'>580</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>136.63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.69</td><td align="right" class='awrnc'>8.67</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>634.91</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.16</td><td align="right" class='awrc'>5.16</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>201</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>3.01</td><td align="right" class='awrnc'>2.41</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>135</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>2.36</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>24</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>776.91</td><td align="right" class='awrnc'>3.41</td><td align="right" class='awrnc'>6.95</td><td align="right" class='awrnc'>14.11</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>406</td><td align="right" class='awrnc'>397</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P60S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p60sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>137438953472</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>3371171840</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>640</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>*</td><td class='awrc'>10133438464</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">thread</div></td><td class='awrc'>2</td><td class='awrc'>2</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>1</td><td class='awrnc'>UNDOTBS1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">undo_tablespace</div></td><td class='awrc'>2</td><td class='awrc'>UNDOTBS2</td><td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gw0hh7k29jxb"></a>0gw0hh7k29jxb</td><td class='awrc'><pre_sqltext class="awr">select obj.obj#,  obj.file#,  obj.block# from ((select obj#,  file#,  block# from sys.tab$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.tabpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.clu$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.ind$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.indpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.tabsubpart$ t where t.ts# = :1 AND t.dataobj# = :2) union (select obj#,  file#,  block# from sys.indsubpart$ t where t.ts# = :1 AND t.dataobj# = :2)) obj</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0raxwcmc41phu"></a>0raxwcmc41phu</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '92';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="181vungw6p8xd"></a>181vungw6p8xd</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '38';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="19x7x3wquabr5"></a>19x7x3wquabr5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '88';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1a042w3h7hz1n"></a>1a042w3h7hz1n</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '106';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1y2qx24pugffb"></a>1y2qx24pugffb</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2ayr68un3a6cv"></a>2ayr68un3a6cv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '108';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2kagcss8t5vv4"></a>2kagcss8t5vv4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '76';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2p9fv35c7zxtg"></a>2p9fv35c7zxtg</td><td class='awrnc'><pre_sqltext class="awr">select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */	     nvl(m.inserts,  0) ins,  nvl(m.updates,  0) upd,  nvl(m.deletes,  0) del,		 nvl(m.drop_segments,  0) dropseg,  nvl(m.flags,  0) flags,			   nvl(rowcnt,	0) rowcnt,  o.pobjn pobjn					   from 									 (select :objn objn,  0 pobjn,	rowcnt						  from tab$ t									where t.obj# = :objn							      union all 								    select :objn objn,	tp.bo# pobjn,  rowcnt					    from tabpart$ tp
	  where tp.obj# = :objn 							union all								      select :objn objn,  tcp.bo# pobjn,  rowcnt				      from tabcompart$ tcp							    where tcp.obj# = :objn							  union all									select :objn objn,  tsp.pobj# pobjn,  rowcnt					from tabsubpart$ tsp							      where tsp.obj# = :objn) o,  sys.mon_mods_all$ m				    where o.objn = m.obj#(+) and rownum &lt; 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2ygtzr5pfgqjx"></a>2ygtzr5pfgqjx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '93';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m			using dual								   on (m.obj# = :objn and							  (:pobjn = 0 or							      m.obj# = :pobjn or							 m.obj# in (select obj# 							       from tabpart$								  where bo# = :pobjn and obj# = :objn					     union all									select obj#								   from tabcompart$							      where bo# = :pobjn and obj
# = :objn					 union all								    select tsp.obj#							       from tabsubpart$ tsp,  tabcompart$ tcp					   where tsp.pobj# = tcp.obj#							and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				   and tsp.obj# = :objn)))				    when matched then								 update 								    set inserts = decode(:reset,  1,  0,  inserts) + :ins,			       updates = decode(:reset,  1,  0,  updates) + :upd,			      deletes = decode(:reset,	1,  0,	deletes) + :del,			     flags =  decode(:reset,  1,  0,  flags - bitand(flags,  :flag)) + :flag,	     drop_segments = decode(:reset,  1,  0,  dro
p_segments) + :dropseg, 	    timestamp = :time							 when NOT matched then							      insert (obj#,  inserts,  updates,  deletes,					     timestamp,  flags,  drop_segments) 				  values (:objn,  :ins,  :upd,	:del,  :time,  :flag,  :dropseg)		   where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3q9qpxjx8mtpr"></a>3q9qpxjx8mtpr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3scs6w7r6f9xa"></a>3scs6w7r6f9xa</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '34';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3zfwa5fbzfumr"></a>3zfwa5fbzfumr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '47';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5u7g54s63p4ts"></a>5u7g54s63p4ts</td><td class='awrc'><pre_sqltext class="awr">select toid from type$ where package_obj#=:1 and typ_name=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6kvyh9k0yg876"></a>6kvyh9k0yg876</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '95';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6uftfsj7stway"></a>6uftfsj7stway</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '66';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="718uskqq9cb7g"></a>718uskqq9cb7g</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '124';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8vdk6ufyytjkc"></a>8vdk6ufyytjkc</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '90';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="91pf1uf7kttt1"></a>91pf1uf7kttt1</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '119';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="azs4x4stk5azf"></a>azs4x4stk5azf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '84';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bbp00h54hyg9h"></a>bbp00h54hyg9h</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '53';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bk0nwr6ducbsw"></a>bk0nwr6ducbsw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '31';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="btxhvgkudmtmh"></a>btxhvgkudmtmh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="c4t1p9t7x1x0h"></a>c4t1p9t7x1x0h</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '19';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cn5r6fnjj1b3d"></a>cn5r6fnjj1b3d</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '63';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cpwuynd81c18b"></a>cpwuynd81c18b</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '56';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="czcqz0vzf0sbx"></a>czcqz0vzf0sbx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '98';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fg2dv5vmw40x5"></a>fg2dv5vmw40x5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '50';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gcfrxjr5zjhjy"></a>gcfrxjr5zjhjy</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '99';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>4185</td><td align="right" class='awrc'>53.12</td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>24.65</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>24.65</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">4185</div></td><td align="right" class='awrnc'><div class="hidden">53.11749083090932085493866194511192614139</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>19.02</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>18.89</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">4185</div></td><td align="right" class='awrc'><div class="hidden">53.11749083090932085493866194511192614139</div></td>
<td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>3.25</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>3.25</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>3049</td><td align="right" class='awrnc'>38.56</td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>17.66</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>17.64</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">3049</div></td><td align="right" class='awrc'><div class="hidden">38.56076893891488554445428101682053876312</div></td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>7.79</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>5.62</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">3049</div></td><td align="right" class='awrnc'><div class="hidden">38.56076893891488554445428101682053876312</div></td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>6.49</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>6.49</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>4185</td><td align="right" class='awrc'>53.12</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>52.28</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>24.65</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>3049</td><td align="right" class='awrnc'>38.56</td>
<td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>35.41</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>17.64</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">3049</div></td><td align="right" class='awrc'><div class="hidden">38.56076893891488554445428101682053876312</div></td>
<td class='awrc'>INDEX - RANGE SCAN</td><td align="right" class='awrc'>3.10</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>2.18</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>53.70</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>53.70</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>24.66</td><td align="right" class='awrc'>30.71</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>23.74</td><td align="right" class='awrnc'>29.56</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>18.86</td><td align="right" class='awrc'>23.48</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>8.26</td><td align="right" class='awrnc'>10.28</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>6.49</td><td align="right" class='awrc'>8.08</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>23.76</td><td align="right" class='awrc'>&quot;1&quot;,&quot;41338&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>18.86</td><td align="right" class='awrnc'>&quot;8&quot;,&quot;33937&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.01</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>class#</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>6.49</td><td align="right" class='awrc'>&quot;1&quot;,&quot;77&quot;,&quot;77&quot;</td><td align="right" class='awrc'>4.68</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1.35</td><td align="right" class='awrnc'>&quot;9&quot;,&quot;16340048&quot;,&quot;16777230&quot;</td><td align="right" class='awrnc'>0.01</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>id#</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1.33</td><td align="right" class='awrc'>&quot;1&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrc'>0.53</td>
<td class='awrc'>requests</td><td class='awrc'>interrupt</td><td class='awrc'>timeout</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>
<ul>
<li class="awr"> Top DB Objects by DB Time with respect to Application, Cluster,     User I/O,	buffer busy waits and In-Memory DB events only. </li>
<li class="awr"> Tablespace name is not available for reports generated from the root PDB     of a consolidated database. </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available.</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the Top DB Objects"><tr><th class="awrbg" scope="col">Object ID</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Object Name (Type)</th><th class="awrbg" scope="col">Tablespace</th></tr>
<tr><td align="right" scope="row" class='awrc'>73335</td><td align="right" class='awrc'>1.04</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.28</td>
<td class='awrc'>USER12.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73609</td><td align="right" class='awrnc'>1.02</td><td class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>0.23</td>
<td class='awrnc'>USER64.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>12:13:25   (1.6 min)</td><td align="right" class='awrc'>1,402</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>349</td><td align="right" class='awrc'>4.41</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">12:13:25   (1.6 min)</div></td><td align="right" class='awrnc'><div class="hidden">1402</div></td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>336</td><td align="right" class='awrnc'>4.25</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">12:13:25   (1.6 min)</div></td><td align="right" class='awrc'><div class="hidden">1402</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>240</td><td align="right" class='awrc'>3.04</td></tr>
<tr><td align="right" class='awrnc'>12:15:00   (5.0 min)</td><td align="right" class='awrnc'>4,137</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>1,121</td><td align="right" class='awrnc'>14.18</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">12:15:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">4137</div></td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>960</td><td align="right" class='awrc'>12.14</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">12:15:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">4137</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>829</td><td align="right" class='awrnc'>10.48</td></tr>
<tr><td align="right" class='awrc'>12:20:00   (4.0 min)</td><td align="right" class='awrc'>2,368</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>570</td><td align="right" class='awrc'>7.21</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">12:20:00   (4.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">2368</div></td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>493</td><td align="right" class='awrnc'>6.23</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">12:20:00   (4.0 min)</div></td><td align="right" class='awrc'><div class="hidden">2368</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>422</td><td align="right" class='awrc'>5.34</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:3889879926_54</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_54&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 53 to 54.
Time period starts at 12-FEB-20 12.13.24 PM
Time period ends at 12-FEB-20 12.24.01 PM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 73429 seconds.
The average number of active sessions was 115.27.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       115.27 | 100	   1
2  Top SQL Statements	      111.47 | 96.7	   2
3  Global Cache Messaging     74.36 | 64.51	   1
4  Buffer Busy - Hot Objects  42.88 | 37.2	   0
5  &quot;User I/O&quot; wait Class	37.36 | 32.41	     0
6  Global Cache Lost Blocks   2.5 | 2.17	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 115.64 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 120086 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 10026 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.22	     ADDM:3889879926_1_54
    2	    p60sdb2  49.78	     ADDM:3889879926_2_54

   Recommendation 1: Host Configuration
   Estimated benefit is 115.27 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 74.36 active sessions, 64.51% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 75.56 active sessions, 65.55% of total activity.


Finding 2: Top SQL Statements
Impact is 111.83 active sessions, 96.7% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.3	     ADDM:3889879926_1_54
    2	    p60sdb2  49.7	     ADDM:3889879926_2_54

   Recommendation 1: SQL Tuning
   Estimated benefit is 64.37 active sessions, 55.84% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 41323 times and
      had an average elapsed time of 0.93 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 46.87 active sessions, 40.66% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 232484 times and
      had an average elapsed time of 0.12 seconds.


Finding 3: Global Cache Messaging
Impact is 74.6 active sessions, 64.51% of total activity.
---------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  60.03	     ADDM:3889879926_1_54
    2	    p60sdb2  39.97	     ADDM:3889879926_2_54

   Recommendation 1: Application Analysis
   Estimated benefit is 74.36 active sessions, 64.51% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 54% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 75.56 active sessions, 65.55% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 43.02 active sessions, 37.2% of total activity.
---------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  100	     ADDM:3889879926_1_54

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 42.88 active sessions, 37.2% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 74.36 active sessions, 64.51% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 75.56 active sessions, 65.55% of total activity.


Finding 5: &quot;User I/O&quot; wait Class
Impact is 37.47 active sessions, 32.41% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  65.33	     ADDM:3889879926_2_54
    1	    p60sdb1  34.67	     ADDM:3889879926_1_54

   No recommendations are available.


Finding 6: Global Cache Lost Blocks
Impact is 2.51 active sessions, 2.17% of total activity.
--------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The database was consuming 120086 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 10026 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  97.84	     ADDM:3889879926_2_54

   Recommendation 1: Host Configuration
   Estimated benefit is 2.5 active sessions, 2.17% of total activity.
   ------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 74.36 active sessions, 64.51% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 75.56 active sessions, 65.55% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  57.98	     50.22
    2	    p60sdb2  mcracpoc2.example.com  57.56	     49.78

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.12-12:24:37 : Compressing file: "awr.html".
NOTIFY  : 2020.02.12-12:24:37 : Compressing file: "awr_rac.html".
