
































































































































































































































































































































































































































































































































PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 15:12:02 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 15:12:02 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Wed Feb 12 2020 15:11:52 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Wed Feb 12 2020 15:11:52 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		2 p60sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		2 p60sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: text


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: html


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using	       2 for instance number
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using	       2 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb2      P60SDB		 48  12 Feb 2020 09:57	  1
				 49  12 Feb 2020 09:59	  1
				 50  12 Feb 2020 10:10	  1
				 51  12 Feb 2020 10:14	  1
				 52  12 Feb 2020 10:24	  1
				 53  12 Feb 2020 12:13	  1
				 54  12 Feb 2020 12:24	  1
				 55  12 Feb 2020 12:34	  1
				 56  12 Feb 2020 12:44	  1
				 57  12 Feb 2020 12:46	  1
				 58  12 Feb 2020 12:50	  1
				 59  12 Feb 2020 12:56	  1
				 60  12 Feb 2020 13:09	  1
				 61  12 Feb 2020 13:51	  1
				 62  12 Feb 2020 14:03	  1
				 63  12 Feb 2020 14:12	  1
				 64  12 Feb 2020 14:31	  1
				 65  12 Feb 2020 14:42	  1
				 66  12 Feb 2020 14:56	  1
				 67  12 Feb 2020 15:11	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 66

End   Snapshot Id specified: 67

Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb2      P60SDB		 48  12 Feb 2020 09:57	  1
				 49  12 Feb 2020 09:59	  1
				 50  12 Feb 2020 10:10	  1
				 51  12 Feb 2020 10:14	  1
				 52  12 Feb 2020 10:24	  1
				 53  12 Feb 2020 12:13	  1
				 54  12 Feb 2020 12:24	  1
				 55  12 Feb 2020 12:34	  1
				 56  12 Feb 2020 12:44	  1
				 57  12 Feb 2020 12:46	  1
				 58  12 Feb 2020 12:50	  1
				 59  12 Feb 2020 12:56	  1
				 60  12 Feb 2020 13:09	  1
				 61  12 Feb 2020 13:51	  1
				 62  12 Feb 2020 14:03	  1
				 63  12 Feb 2020 14:12	  1
				 64  12 Feb 2020 14:31	  1
				 65  12 Feb 2020 14:42	  1
				 66  12 Feb 2020 14:56	  1
				 67  12 Feb 2020 15:11	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 66

End   Snapshot Id specified: 67




Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_66_67.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_66_67.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.html

Using the report name awr.txt

<html lang="en"><head><title>AWR Report for DB: P60SDB, Inst: p60sdb2, Snaps: 66-67</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P60SDB</td><td align="right" class='awrnc'>3889879926</td><td class='awrnc'>p60sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p60sdb2</td><td align="right" class='awrnc'>2</td><td class='awrnc'>12-Feb-20 14:29</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>  16</td><td align="right" class='awrnc'>	1</td><td align="right" class='awrnc'>	251.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>66</td><td align="center" class='awrnc'>12-Feb-20 14:56:36</td><td align="right" class='awrnc'>373</td><td align="right" class='awrnc'>      2.8</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>67</td><td align="center" class='awrc'>12-Feb-20 15:11:52</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>	 .6</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		   15.28 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	     2,332.16 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>152.76</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_2_67</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>152.76</td><td align="right" class='awrnc'>99.66</td><td scope="row" class='awrnc'>ADDM:3889879926_2_67</td><td class='awrnc'>12-Feb-20 14:56</td><td class='awrnc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>152.76</td><td align="right" class='awrc'>76.22</td><td scope="row" class='awrc'>ADDM:3889879926_2_67</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>152.76</td><td align="right" class='awrnc'>41.68</td><td scope="row" class='awrnc'>ADDM:3889879926_2_67</td><td class='awrnc'>12-Feb-20 14:56</td><td class='awrnc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrc'>Global Cache Busy</td><td align="right" class='awrc'>152.76</td><td align="right" class='awrc'>11.78</td><td scope="row" class='awrc'>ADDM:3889879926_2_67</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	     152.7</td><td align="right" class='awrc'>		     5.1</td><td align="right" class='awrc'>	  0.74</td><td align="right" class='awrc'>     81.73</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		3.8</td><td align="right" class='awrnc'>	       0.1</td><td align="right" class='awrnc'>      0.02</td><td align="right" class='awrnc'>	    2.02</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      1.7</td><td align="right" class='awrc'>		    0.1</td><td align="right" class='awrc'>	 0.01</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	3,193,379.1</td><td align="right" class='awrnc'>	 106,164.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	     26,890.5</td><td align="right" class='awrc'>	      894.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		7,860.9</td><td align="right" class='awrnc'>		 261.3</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      24,381.1</td><td align="right" class='awrc'>	       810.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  4,148.7</td><td align="right" class='awrnc'>		   137.9</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		24,307.1</td><td align="right" class='awrc'>		 808.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    3,913.4</td><td align="right" class='awrnc'>	     130.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       190.5</td><td align="right" class='awrc'>	       6.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   32.4</td><td align="right" class='awrnc'>		   1.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		28.7</td><td align="right" class='awrc'>	       1.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		17.9</td><td align="right" class='awrnc'>		0.6</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       1.9</td><td align="right" class='awrc'>		     0.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		   3.6</td><td align="right" class='awrnc'>		  0.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      0.1</td><td align="right" class='awrc'>		    0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.5</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.0</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>		 206.8</td><td align="right" class='awrc'>		 6.9</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>		30.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		100.00</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	    9.33</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 99.81</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 96.50</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      98.28</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.98</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     15.87</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.99</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>790,028</td><td align="right" class='awrc'>41.3K</td><td align="right" class='awrc'>52.31ms</td><td align="right" class='awrc'>29.5</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>101,284</td><td align="right" class='awrnc'>22.3K</td><td align="right" class='awrnc'>220.04ms</td><td align="right" class='awrnc'>15.9</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>170,202</td><td align="right" class='awrc'>19K</td><td align="right" class='awrc'>111.65ms</td><td align="right" class='awrc'>13.6</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>178,894</td><td align="right" class='awrnc'>16.9K</td><td align="right" class='awrnc'>94.47ms</td><td align="right" class='awrnc'>12.1</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>174,625</td><td align="right" class='awrc'>14.5K</td><td align="right" class='awrc'>82.89ms</td><td align="right" class='awrc'>10.3</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>3,923,373</td><td align="right" class='awrnc'>11.5K</td><td align="right" class='awrnc'>2.94ms</td><td align="right" class='awrnc'>8.2</td><td class='awrnc'>User I/O</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>21,021</td><td align="right" class='awrc'>4709.3</td><td align="right" class='awrc'>224.03ms</td><td align="right" class='awrc'>3.4</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>279,233</td><td align="right" class='awrnc'>3808.4</td><td align="right" class='awrnc'>13.64ms</td><td align="right" class='awrnc'>2.7</td><td class='awrnc'>User I/O</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3457.3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.5</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>364,344</td><td align="right" class='awrnc'>3408</td><td align="right" class='awrnc'>9.35ms</td><td align="right" class='awrnc'>2.4</td><td class='awrnc'>Configuration</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,458,980</td><td align="right" class='awrc'>121,308</td><td align="right" class='awrc'>83.15ms</td><td align="right" class='awrc'>86.7</td><td align="right" class='awrc'>132.4</td></tr>
<tr><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>4,283,242</td><td align="right" class='awrnc'>15,386</td><td align="right" class='awrnc'>3.59ms</td><td align="right" class='awrnc'>11.0</td><td align="right" class='awrnc'>16.8</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>364,596</td><td align="right" class='awrc'>3,539</td><td align="right" class='awrc'>9.71ms</td><td align="right" class='awrc'>2.5</td><td align="right" class='awrc'>3.9</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3,457</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.5</td><td align="right" class='awrnc'>3.8</td></tr>
<tr><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>285,926</td><td align="right" class='awrc'>1,387</td><td align="right" class='awrc'>4.85ms</td><td align="right" class='awrc'>1.0</td><td align="right" class='awrc'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>182,951</td><td align="right" class='awrnc'>786</td><td align="right" class='awrnc'>4.29ms</td><td align="right" class='awrnc'>.6</td><td align="right" class='awrnc'>0.9</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>234.24ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>231</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>67.84ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>5,148</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>3.03ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>1,493</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>41.84us</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>   16</td><td align="right" class='awrc'>	 1</td><td align="right" class='awrc'>	21.01</td><td align="right" class='awrc'>   2.35</td><td align="right" class='awrc'>   6.6</td><td align="right" class='awrc'>	11.2</td><td align="right" class='awrc'>  15.1</td><td align="right" class='awrc'>  74.7</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 18.5</td><td align="right" class='awrc'>      73.2</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      28,280.5</td><td align="right" class='awrc'>	    24,314.9</td><td align="right" class='awrc'>	   3,965.6</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   28,220.5</td><td align="right" class='awrnc'>	  24,307.1</td><td align="right" class='awrnc'> 	  3,913.4</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		   37.3</td><td align="right" class='awrnc'>		   2.6</td><td align="right" class='awrnc'>		 34.7</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     228.7</td><td align="right" class='awrc'>		   193.0</td><td align="right" class='awrc'>		  35.7</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  222.9</td><td align="right" class='awrnc'>		 190.5</td><td align="right" class='awrnc'>		 32.4</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		5.4</td><td align="right" class='awrnc'>	       2.4</td><td align="right" class='awrnc'> 	      3.0</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 28,529.8</td><td align="right" class='awrc'>	       24,381.1</td><td align="right" class='awrc'>	      4,148.7</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   28,528.6</td><td align="right" class='awrnc'>	  24,381.1</td><td align="right" class='awrnc'> 	  4,147.5</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    1.2</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		1.2</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'>   257,947.8</td><td align="right" class='awrc'>   257,947.8</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	 9,664.0</td><td align="right" class='awrnc'>	  9,664.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     3,389.3</td><td align="right" class='awrc'>     1,942.8</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    5.06</td><td align="right" class='awrc'>	 4.50</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	 7,712M</td><td align="right" class='awrnc'>	 7,712M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   1,203M</td><td align="right" class='awrc'>	  1,209M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	 20,612K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		85.40</td><td align="right" class='awrc'>	     78.47</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      84.07</td><td align="right" class='awrnc'>	    85.09</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      85.51</td><td align="right" class='awrc'> 	   83.93</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>139,909.82</td><td align="right" class='awrc'>99.99</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>3,457.25</td><td align="right" class='awrnc'>2.47</td><td align="right" class='awrnc'>69.06</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>13.10</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>5.89</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse elapsed time</td><td align="right" class='awrc'>5.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrnc'>4.35</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence load elapsed time</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>connection management call elapsed time</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>repeated bind elapsed time</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB time</td><td align="right" class='awrc'>139,929.64</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background elapsed time</td><td align="right" class='awrnc'>4,501.72</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background cpu time</td><td align="right" class='awrc'>1,548.86</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>30.94</td></tr>
<tr><td scope="row" class='awrnc'>total CPU time</td><td align="right" class='awrnc'>5,006.11</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>125,499,043,840</td><td align="right" class='awrc'>127,360,282,624</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,930,252,288</td><td align="right" class='awrnc'>1,851,064,320</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>683,607</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>2,019,586</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>407,413</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SYS_TIME</td><td align="right" class='awrnc'>303,375</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>USER_TIME</td><td align="right" class='awrc'>178,491</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LOAD</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrc'>270,477,914,112</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPUS</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_CORES</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_SOCKETS</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrc'>87,380</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>6,291,456</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrnc'>16,384</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 14:56:36</td><td align="right" class='awrc'>21.01</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>12-Feb 15:11:52</td><td align="right" class='awrnc'>2.35</td><td align="right" class='awrnc'>25.29</td><td align="right" class='awrnc'>6.60</td><td align="right" class='awrnc'>11.22</td><td align="right" class='awrnc'>74.71</td><td align="right" class='awrnc'>15.07</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  102.8%  of Total DB time     139,929.64 (s)</li>
<li class="awr">Total FG Wait Time:	      140,416.97 (s)  DB CPU time:	 3,457.25 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,451,867</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>121,134</td><td align="right" class='awrc'>83.43ms</td><td align="right" class='awrc'>86.57</td></tr>
<tr><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>4,204,634</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15,340</td><td align="right" class='awrnc'>3.65ms</td><td align="right" class='awrnc'>10.96</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>364,419</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,537</td><td align="right" class='awrc'>9.71ms</td><td align="right" class='awrc'>2.53</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3,457</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.47</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>11,627</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>345</td><td align="right" class='awrc'>29.69ms</td><td align="right" class='awrc'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>4912.37ms</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>230</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>68.11ms</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>915</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5.38ms</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>799.35us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>512</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11.00us</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>790,028</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>41,328</td><td align="right" class='awrc'>52.31ms</td><td align="right" class='awrc'>28.66</td><td align="right" class='awrc'>29.53</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>101,284</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>22,287</td><td align="right" class='awrnc'>220.04ms</td><td align="right" class='awrnc'>3.67</td><td align="right" class='awrnc'>15.93</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>170,202</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19,004</td><td align="right" class='awrc'>111.65ms</td><td align="right" class='awrc'>6.17</td><td align="right" class='awrc'>13.58</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>178,894</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16,900</td><td align="right" class='awrnc'>94.47ms</td><td align="right" class='awrnc'>6.49</td><td align="right" class='awrnc'>12.08</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>174,625</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>14,474</td><td align="right" class='awrc'>82.89ms</td><td align="right" class='awrc'>6.33</td><td align="right" class='awrc'>10.34</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>3,923,373</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>11,525</td><td align="right" class='awrnc'>2.94ms</td><td align="right" class='awrnc'>142.32</td><td align="right" class='awrnc'>8.24</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>21,021</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4,709</td><td align="right" class='awrc'>224.03ms</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>3.37</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>279,233</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3,808</td><td align="right" class='awrnc'>13.64ms</td><td align="right" class='awrnc'>10.13</td><td align="right" class='awrnc'>2.72</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>364,344</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3,408</td><td align="right" class='awrc'>9.35ms</td><td align="right" class='awrc'>13.22</td><td align="right" class='awrc'>2.44</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>2,401</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,459</td><td align="right" class='awrnc'>607.46ms</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>1.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>1,324</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>556</td><td align="right" class='awrc'>419.94ms</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.40</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>1,538</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>325</td><td align="right" class='awrnc'>211.06ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>392</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>256</td><td align="right" class='awrc'>652.63ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>129</td><td align="right" class='awrnc'>1771.76ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>6,219</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>9.07ms</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - row lock contention</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>4912.37ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>3,063</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>9.67ms</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>1,173</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>19.52ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>240.72ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>230</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>68.11ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>304.95ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ges message buffer allocation</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>249.77ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>293</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>17.50ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>1,796</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>2.70ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>271</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>13.86ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>368.62ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>1,531</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.59ms</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>315</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>7.41ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>40.10ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1,617</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.00ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>1,607</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>800.15us</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>48.58ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>15.59ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>29.73ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>142.49ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>827</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.19ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>162</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>5.48ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.81ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.57ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>255</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.08ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>461</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>502.49us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.94ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40.35ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>341</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>540.86us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>2,385</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>62.92us</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>799.35us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15.86ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>495.90us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.45ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>573</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>56.58us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>884</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>35.19us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.89ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.51ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.26ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>599.70us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.76ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.48ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.64ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.67ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>510.82us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>508</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.99us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>883.50us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.53ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>378.31us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>742.17us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>289.75us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.24ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>98.05us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.62ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1,510</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4,530</td><td align="right" class='awrc'>3000.06ms</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>291</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>22.79ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>33.96ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>40.38ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>509</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.21ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>17,141</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>689</td><td align="right" class='awrc'>40.17ms</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>15.30</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>143,847</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>671</td><td align="right" class='awrnc'>4.66ms</td><td align="right" class='awrnc'>5.22</td><td align="right" class='awrnc'>14.90</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>7,377</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>232</td><td align="right" class='awrc'>31.42ms</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>5.15</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>3,772</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>17.20ms</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>1.44</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>786</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>63.45ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>1,206</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>27.74ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.74</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>655.44ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.74</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>307</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>102.99ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.70</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>1,284</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>21.94ms</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.63</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>3,927</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>6.88ms</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.60</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>2,712</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>9.34ms</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.56</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>469</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>44.67ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.47</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>47,170</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>433.36us</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>134.80ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>254</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>64.20ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>113.91ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.25</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>32.73ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.21</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>924.23ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.21</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>13,397</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>571.89us</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>351</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>19.19ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.15</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>925</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>5.49ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>74,427</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>66.22us</td><td align="right" class='awrnc'>2.70</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>5,333</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>752.53us</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,087</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.80ms</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>4,203</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>850.97us</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1,704</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>2.05ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>48.20ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>40.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>25.79ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>45.75ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>792</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3.17ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>34.43ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>6.01ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>60,348</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>29.65us</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>49.19ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>9.67ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>694</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.98ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>456.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9.39ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>1,361</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>701.39us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>13.10ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>118,328</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7.14us</td><td align="right" class='awrnc'>4.29</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>1,425</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>565.85us</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>143.30ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>1,698</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>402.68us</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>52.41ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>1,160</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>545.55us</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.96ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>34.14ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>933</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>450.56us</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16.10ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>703</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>533.41us</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>251</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.32ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ges message buffer allocation</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>102.57ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>9,017</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>30.65us</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>9,054</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28.36us</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.04ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.77ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33.71ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>200</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>.96ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>92.80ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>44.16ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>87.85ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.15ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>777.12us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.58ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.49ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>929.91us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.60ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.39ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.25ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>727</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>74.88us</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>938</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>54.05us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>1,287</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>31.46us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.65ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.10ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.63ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>347.29us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3,222</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.68us</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lock escalate retry</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10.23ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.84ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>334.48us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>358.55us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.03ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.40ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>723.50us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.81ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>838.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>304.92us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.59ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>352.25us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.37ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>218.29us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.95ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.64ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.78ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.21ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>111.46us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: kjci process context latch</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>434.14us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.45ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>922.33us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>645.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>272</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.00us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>254</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.44us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.16ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.16ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: active service list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>58,891</td><td align="right" class='awrc'>1591.66 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>7,645</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>32,436</td><td align="right" class='awrnc'>4242.82ms</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>59,511</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>22,439</td><td align="right" class='awrc'>377.05ms</td><td align="right" class='awrc'>2.16</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>11,410</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>6,603</td><td align="right" class='awrnc'>578.72ms</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>1,387</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>2,715</td><td align="right" class='awrc'>1957.44ms</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>268,852</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,709</td><td align="right" class='awrnc'>10.08ms</td><td align="right" class='awrnc'>9.75</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>93,241</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>2,696</td><td align="right" class='awrc'>28.91ms</td><td align="right" class='awrc'>3.38</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>1,692,970</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,037</td><td align="right" class='awrnc'>1.20ms</td><td align="right" class='awrnc'>61.41</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>603</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,809</td><td align="right" class='awrc'>2999.96ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>29,850</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,807</td><td align="right" class='awrnc'>60.54ms</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>6,011</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,806</td><td align="right" class='awrc'>300.43ms</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>13,596</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>1,802</td><td align="right" class='awrnc'>132.52ms</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Timer</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,200</td><td align="right" class='awrc'>600.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>12,806</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,049</td><td align="right" class='awrnc'>81.95ms</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>302</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>906</td><td align="right" class='awrc'>3000.06ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pman timer</td><td align="right" class='awrnc'>302</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>906</td><td align="right" class='awrnc'>2999.75ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>3,199</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>904</td><td align="right" class='awrc'>282.66ms</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>904</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>904</td><td align="right" class='awrnc'>1000.21ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>904</td><td align="right" class='awrc'>60.28 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>301</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>904</td><td align="right" class='awrnc'>3002.65ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>516</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>903</td><td align="right" class='awrc'>1750.47ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>767</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>900</td><td align="right" class='awrnc'>1173.94ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher timer</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>900</td><td align="right" class='awrc'>60.01 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>900</td><td align="right" class='awrnc'>30.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>9,123</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>900</td><td align="right" class='awrc'>98.65ms</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>900</td><td align="right" class='awrnc'>60.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>900</td><td align="right" class='awrc'>300.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>896</td><td align="right" class='awrnc'>13.79 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>896</td><td align="right" class='awrc'>27.15 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27.10ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>254</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.61ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>130</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.77ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.57ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>977</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22.89us</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>8917</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>74.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>62.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>1.6</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>4143</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>27.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>12.3</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>8956</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>92.9</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>792</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>43.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>55.7</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>1306</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.7</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>1219</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>826</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>14.6</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>85.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>82.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>2687</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>33.2</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>725</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>987</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>81.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>6.1</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>47.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.9</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1681</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>30.1</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>310</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>7174</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>96.8</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>190</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>49.5</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>3672</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>84.3</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>1503</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>20.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>1.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>3.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>23.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>27.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>60.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>88.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>763</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>86.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>108</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>44.4</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>274</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>72.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>465</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>5377</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>32.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>21.5</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>118K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>94.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>276.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.4</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>143.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.0</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>1848</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>88.1</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>3.8M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>31.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>67.0</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>69</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>67</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>71</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.8</td></tr>
<tr><td scope="row" class='awrnc'>enq: DR - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>70.0</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.5</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>114</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>79.8</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>96</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - row lock contention</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>364.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>5077</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>30.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>68.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>242</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>127</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>441</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>29.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>71.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>566</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>26.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>73.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>3073</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.5</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>177.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.8</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>162</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>100.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>1316</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.7</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>1450</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>62.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>36.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>6330</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.9</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>276</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>2402</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>165.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>752.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>20.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>169.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>12.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>29.6</td></tr>
<tr><td scope="row" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>58</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.3</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>47</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>83.0</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>81.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>887</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>27.2</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>1272</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>82.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>3265</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>25.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>20.0</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>25.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>80</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>57.5</td></tr>
<tr><td scope="row" class='awrc'>latch: active service list</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>950</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>42.9</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>1805</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>28.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>23.1</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>77</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>20.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>57.1</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>1728</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>62.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>2955</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>30.5</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>164</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>25.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: kjci process context latch</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>42.9</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>14.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>302</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>55.3</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>454</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>26.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>61.1</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>27.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>38.5</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3219</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>95.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>361</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.5</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>352</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.2</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>2388</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>71.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>1.7</td></tr>
<tr><td scope="row" class='awrc'>lock escalate retry</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>16.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>684</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>26.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.4</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>232</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>47</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>56</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>33.3</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>73</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM background timer</td><td align="right" class='awrnc'>3152</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>80.4</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>510</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>13.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.5</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>5947</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>12.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>73.0</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>266.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>298</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>758</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>48.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>200</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>42.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>42.5</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.9</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>105</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>83.8</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>291</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>62.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>67.9</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>35</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>968</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>41.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>50.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>9025</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>763</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.6</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>7573</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.3</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>65</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>35.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>52.3</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>33</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.0</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>11.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>89.0</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>1.7M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>31.5</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>92.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.5</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>29.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>93.5</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat monitor sleep</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>95.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>4.3</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>895</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>298</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>298</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>597</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>58.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>79.4</td></tr>
<tr><td scope="row" class='awrnc'>smon timer</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>1371</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>watchdog main loop</td><td align="right" class='awrnc'>1490</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>8441</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>5.3</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>58.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>62.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>20.6</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>3022</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>27.1</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>8533</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.7</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>97.8</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>320</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>61.3</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group query</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>85.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>3.6</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group update</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>82.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>706</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>73.7</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>408</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>31.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>43.7</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>848</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>81.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>14.1</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>25.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>45.1</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>638</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>62.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.7</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>88.9</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>173</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>95.3</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>1217</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>19.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>46.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>57.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.4</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>752</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>86.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>1.4</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>48</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>55.6</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>271</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>72.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>1.1</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>45.8</td></tr>
<tr><td scope="row" class='awrnc'>buffer deadlock</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>1149</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>78.6</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>117.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>94.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.8</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1846</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>98.7</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>8293</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>97.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>60</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>2397</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>80.6</td></tr>
<tr><td scope="row" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges message buffer allocation</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>85.1</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>81.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>299</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>66.3</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1197</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>82.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>5.9</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>416</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>87.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.8</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>91.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>142</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>85.1</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>435</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>69.2</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>81.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>99</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>94.3</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>577</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>80.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>74.4</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>85.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>74.1</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>93.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>75</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.5</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>90.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>84.6</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3179</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.2</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>42.9</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>2028</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>71.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>15.1</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>195</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>26.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>71.5</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>1151</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>499</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>64.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>437</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>44.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>1231</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>1002</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>17.8</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>119</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>85.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>731</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>66.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>6.0</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>58</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>93.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>4372</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>89.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>498</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>69.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>91</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>70.6</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>5538</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>19.6</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>94</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>2759</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>15.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>9.2</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>98.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>39.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>96.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>73.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>161</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>55.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>25.9</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>12.5</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>358</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>53.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>23.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>1154</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>78.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>51</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>242.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>11.7</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>130.5K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>8.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>49.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>1619</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>11.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2.5M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>33.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>54</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>26.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>21.7</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>63</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>59.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>6.0</td></tr>
<tr><td scope="row" class='awrc'>enq: AF - task serialization</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>61</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>9.9</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>30.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>10.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>39</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>6.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>88</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.6</td></tr>
<tr><td scope="row" class='awrc'>enq: SM -  contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>80</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>15.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>353.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>91.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>70.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>60.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>3387</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>31.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.7</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>90</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>62.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>123</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>44.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>29.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>19.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>411</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>27.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>2944</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>98.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>44.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>162</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>49.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>14.9K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>85.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>420</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>67.8</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>511</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>64.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>5844</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.6</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>272</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>42.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>40.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>93.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>43.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>512.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>31.7</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>6386</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>69.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>95.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>43.7</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>33.3</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>3651</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>70.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>57</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>56.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>17.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>80.9</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>241</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>72.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>821</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>74.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>42.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: active service list</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>407</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>57.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>509</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>71.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>76.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>79.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>42.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>1084</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>37.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>900</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>69.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>41</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>57.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>85.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>167</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>44.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>121</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>73.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>38.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>72.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>61.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>341</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.0</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>336</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.7</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>41</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>98.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock escalate retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>11.8K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>29.6</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>343</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>49.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>85</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>63.4</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>57.1</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>85.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>45</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.3</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>54</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.6</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>50</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>51.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.8</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>217</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>82.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>161</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>754</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>219</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>29.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>1405</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>80.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>338</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>90.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>74.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>87.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>107</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>77.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>32.4K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>88.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1459</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>19.3K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>78.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>90.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>90.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>93.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>84.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - row lock contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>62.5</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>35</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>30.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>2.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>40.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>87</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>152</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>37.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>441</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>77.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>80.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>78.7K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>55.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>85K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>14.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>879</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>32.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>1.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>103</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>2398</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>73.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>70.7K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>57.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>238.5K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>68.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>14.1K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>31.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>73.6K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>56.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>19.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>80.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>4974</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>70.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>147</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>36.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>42.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>43.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>37.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - row lock contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>37.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>98.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>338</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>737</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>327</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>399</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>314</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>63.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>34.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td><td align="right" class='awrc'>138,143</td><td align="right" class='awrc'>3,394</td><td align="right" class='awrc'>21,972</td><td align="right" class='awrc'>24,158</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>82</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>p60sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td>
<td align="right" class='awrc'>4027613</td><td align="right" class='awrc'>14697</td><td align="right" class='awrc'>886</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>509</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>78543</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>4092</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>720</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.13ms</td></tr>
<tr><td scope="row" class='awrnc'>GEN0 ksbxic channel</td>
<td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.19ms</td></tr>
<tr><td scope="row" class='awrc'>obj broadcast channel</td>
<td align="right" class='awrc'>22</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63.86ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>118,312.35</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>14,875.60</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>3,544.15</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>669.02</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>322.10</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>254.98</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>168.92</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>168.26</td></tr>
<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>167.24</td></tr>
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>166.65</td></tr>
<tr><td scope="row" class='awrc'>MMON</td><td scope="row" class='awrc'>Manageability Monitor Process</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>75.09</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>69.16</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>62.97</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>39.30</td></tr>
<tr><td scope="row" class='awrc'>MZ</td><td scope="row" class='awrc'>MMON slave class 2</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>31.27</td></tr>
<tr><td scope="row" class='awrnc'>LMON</td><td scope="row" class='awrnc'>global enqueue service monitor</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>25.22</td></tr>
<tr><td scope="row" class='awrc'>IMR</td><td scope="row" class='awrc'>CGS IMR Slave</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>24.12</td></tr>
<tr><td scope="row" class='awrnc'>CKPT</td><td scope="row" class='awrnc'>checkpoint</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>19.17</td></tr>
<tr><td scope="row" class='awrc'>MZ</td><td scope="row" class='awrc'>MMON slave class 2</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>17.31</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>16.19</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>3,407.81</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>1,052.85</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td align="right" class='awrc'>84.19</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td align="right" class='awrnc'>83.96</td></tr>
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td align="right" class='awrc'>83.78</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td align="right" class='awrnc'>83.76</td></tr>
<tr><td scope="row" class='awrc'>VKTM</td><td scope="row" class='awrc'>Virtual Keeper of TiMe process</td><td align="right" class='awrc'>80.37</td></tr>
<tr><td scope="row" class='awrnc'>RS*</td><td scope="row" class='awrnc'>GCS RM Slave</td><td align="right" class='awrnc'>22.03</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td align="right" class='awrc'>21.27</td></tr>
<tr><td scope="row" class='awrnc'>CR*</td><td scope="row" class='awrnc'>GCS CR Slave</td><td align="right" class='awrnc'>20.07</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td align="right" class='awrc'>16.70</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td align="right" class='awrnc'>11.91</td></tr>
<tr><td scope="row" class='awrc'>GCR</td><td scope="row" class='awrc'>GCR Slaves (LMHB)</td><td align="right" class='awrc'>8.49</td></tr>
<tr><td scope="row" class='awrnc'>DIA0</td><td scope="row" class='awrnc'>diagnosibility process 0</td><td align="right" class='awrnc'>7.01</td></tr>
<tr><td scope="row" class='awrc'>IPC0</td><td scope="row" class='awrc'>IPC Service 0</td><td align="right" class='awrc'>6.71</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td scope="row" class='awrc'>SCM</td><td scope="row" class='awrc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrc'>4.78</td></tr>
<tr><td scope="row" class='awrnc'>RMS0</td><td scope="row" class='awrnc'>rac management server</td><td align="right" class='awrnc'>4.31</td></tr>
<tr><td scope="row" class='awrc'>LMD0</td><td scope="row" class='awrc'>global enqueue service daemon 0</td><td align="right" class='awrc'>3.58</td></tr>
<tr><td scope="row" class='awrnc'>CJQ0</td><td scope="row" class='awrnc'>Job Queue Coordinator</td><td align="right" class='awrnc'>3.47</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   96.0% of Total DB Time (s):	       139,930</li>
<li class="awr">Captured PL/SQL account for   60.4% of Total DB Time (s):	  139,930</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>85,138.03</td><td align="right" class='awrc'>25,721</td><td align="right" class='awrc'>3.31</td><td align="right" class='awrc'>60.84</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>10.29</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>49,065.03</td><td align="right" class='awrnc'>151,320</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>35.06</td><td align="right" class='awrnc'>3.42</td><td align="right" class='awrnc'>11.26</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>2,132.49</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>533.12</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>6.08</td><td scope="row" class='awrc'><a class="awr" href="#6a32815hkfxqf">6a32815hkfxqf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,132.23</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>533.06</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>6.15</td><td scope="row" class='awrnc'><a class="awr" href="#fd4xkca0yhc14">fd4xkca0yhc14</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,131.14</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>532.78</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.94</td><td scope="row" class='awrc'><a class="awr" href="#fm39d7d1vc1q3">fm39d7d1vc1q3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,130.78</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>532.70</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5.93</td><td scope="row" class='awrnc'><a class="awr" href="#279tufy9n4jkw">279tufy9n4jkw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,129.87</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>532.47</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>6.28</td><td scope="row" class='awrc'><a class="awr" href="#3s33p2a5kvj29">3s33p2a5kvj29</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,129.12</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>532.28</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>7.89</td><td scope="row" class='awrnc'><a class="awr" href="#7uf35z2xnpp67">7uf35z2xnpp67</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,128.99</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>532.25</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>7.85</td><td scope="row" class='awrc'><a class="awr" href="#8xsf93arbvbm5">8xsf93arbvbm5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,128.61</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>532.15</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>6.17</td><td scope="row" class='awrnc'><a class="awr" href="#g2r0fu8hz8rv8">g2r0fu8hz8rv8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,128.42</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>532.10</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>7.16</td><td scope="row" class='awrc'><a class="awr" href="#1x4ta4a2yjbhw">1x4ta4a2yjbhw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,128.31</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>532.08</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>6.08</td><td scope="row" class='awrnc'><a class="awr" href="#g1p4d7mfawjcs">g1p4d7mfawjcs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,128.26</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>532.06</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5.89</td><td scope="row" class='awrc'><a class="awr" href="#9t7r85fxpxsnj">9t7r85fxpxsnj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,128.12</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>532.03</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>7.25</td><td scope="row" class='awrnc'><a class="awr" href="#czkhyr80ymm1z">czkhyr80ymm1z</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,128.09</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>532.02</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>5.41</td><td scope="row" class='awrc'><a class="awr" href="#868wdptu2wdsf">868wdptu2wdsf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,127.99</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>532.00</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>7.93</td><td scope="row" class='awrnc'><a class="awr" href="#d8qmpacb3zab2">d8qmpacb3zab2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,127.92</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.98</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>7.90</td><td scope="row" class='awrc'><a class="awr" href="#42dfwspbnmyhn">42dfwspbnmyhn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,127.80</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.95</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>7.78</td><td scope="row" class='awrnc'><a class="awr" href="#787vyc7kcz0pd">787vyc7kcz0pd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,127.67</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.92</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>7.25</td><td scope="row" class='awrc'><a class="awr" href="#ds72ddrkju833">ds72ddrkju833</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,127.65</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.91</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.38</td><td scope="row" class='awrnc'><a class="awr" href="#0zzrz3xpx0yws">0zzrz3xpx0yws</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,127.52</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.88</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>7.27</td><td scope="row" class='awrc'><a class="awr" href="#9cw3txprjx7ky">9cw3txprjx7ky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,127.44</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.86</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>5.49</td><td scope="row" class='awrnc'><a class="awr" href="#9jnaa1bq11a61">9jnaa1bq11a61</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,127.26</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.82</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.44</td><td scope="row" class='awrc'><a class="awr" href="#235c49djpygrk">235c49djpygrk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,127.12</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.78</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.69</td><td scope="row" class='awrnc'><a class="awr" href="#6x6suu2w4rznw">6x6suu2w4rznw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,126.95</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.74</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>7.64</td><td scope="row" class='awrc'><a class="awr" href="#4y7jh3c72wfyc">4y7jh3c72wfyc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,126.84</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.71</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.63</td><td scope="row" class='awrnc'><a class="awr" href="#fjb8yj8xjzk39">fjb8yj8xjzk39</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,126.74</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.68</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.65</td><td scope="row" class='awrc'><a class="awr" href="#0h8337uv1gm0g">0h8337uv1gm0g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,126.70</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.68</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.50</td><td scope="row" class='awrnc'><a class="awr" href="#awt1bwgs30hx1">awt1bwgs30hx1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,126.62</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.65</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>8.11</td><td scope="row" class='awrc'><a class="awr" href="#2h5cgxr56bjm9">2h5cgxr56bjm9</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,126.51</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.63</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>5.43</td><td scope="row" class='awrnc'><a class="awr" href="#gx2wbjnsndywg">gx2wbjnsndywg</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,126.34</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.59</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.72</td><td scope="row" class='awrc'><a class="awr" href="#0wn4rp6qcr6js">0wn4rp6qcr6js</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,125.85</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.46</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>6.64</td><td scope="row" class='awrnc'><a class="awr" href="#fqsx798y4df7a">fqsx798y4df7a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,125.77</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.44</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.41</td><td scope="row" class='awrc'><a class="awr" href="#cyhr3uaphj8u4">cyhr3uaphj8u4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,125.19</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.30</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>5.39</td><td scope="row" class='awrnc'><a class="awr" href="#59c9hcdmc2sp8">59c9hcdmc2sp8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,124.76</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>531.19</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>5.73</td><td scope="row" class='awrc'><a class="awr" href="#34znj9v2fzxst">34znj9v2fzxst</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,124.65</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>531.16</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>5.57</td><td scope="row" class='awrnc'><a class="awr" href="#05dgz376x2uah">05dgz376x2uah</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,591.78</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>530.59</td><td align="right" class='awrc'>1.14</td><td align="right" class='awrc'>17.18</td><td align="right" class='awrc'>51.37</td><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,591.27</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>530.42</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>11.31</td><td align="right" class='awrnc'>54.24</td><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,591.08</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>530.36</td><td align="right" class='awrc'>1.14</td><td align="right" class='awrc'>11.57</td><td align="right" class='awrc'>49.90</td><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,590.40</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>530.13</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>11.67</td><td align="right" class='awrnc'>53.20</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   93.4% of Total CPU Time (s): 	  3,457</li>
<li class="awr">Captured PL/SQL account for   75.4% of Total CPU Time (s):	     3,457</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,676.80</td><td align="right" class='awrc'>151,320</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>48.50</td><td align="right" class='awrc'>49,065.03</td><td align="right" class='awrc'>3.42</td><td align="right" class='awrc'>11.26</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,540.35</td><td align="right" class='awrnc'>25,721</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>44.55</td><td align="right" class='awrnc'>85,138.03</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>10.29</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>273.49</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>91.16</td><td align="right" class='awrc'>7.91</td><td align="right" class='awrc'>1,591.78</td><td align="right" class='awrc'>17.18</td><td align="right" class='awrc'>51.37</td><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>185.58</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>61.86</td><td align="right" class='awrnc'>5.37</td><td align="right" class='awrnc'>1,590.40</td><td align="right" class='awrnc'>11.67</td><td align="right" class='awrnc'>53.20</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>184.07</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>61.36</td><td align="right" class='awrc'>5.32</td><td align="right" class='awrc'>1,591.08</td><td align="right" class='awrc'>11.57</td><td align="right" class='awrc'>49.90</td><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>179.98</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>59.99</td><td align="right" class='awrnc'>5.21</td><td align="right" class='awrnc'>1,591.27</td><td align="right" class='awrnc'>11.31</td><td align="right" class='awrnc'>54.24</td><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127.87</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>63.93</td><td align="right" class='awrc'>3.70</td><td align="right" class='awrc'>1,061.79</td><td align="right" class='awrc'>12.04</td><td align="right" class='awrc'>42.37</td><td scope="row" class='awrc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>119.73</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>59.87</td><td align="right" class='awrnc'>3.46</td><td align="right" class='awrnc'>1,060.19</td><td align="right" class='awrnc'>11.29</td><td align="right" class='awrnc'>43.02</td><td scope="row" class='awrnc'><a class="awr" href="#3cbmkwjys3g0s">3cbmkwjys3g0s</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>101.98</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>50.99</td><td align="right" class='awrc'>2.95</td><td align="right" class='awrc'>1,061.68</td><td align="right" class='awrc'>9.61</td><td align="right" class='awrc'>50.78</td><td scope="row" class='awrc'><a class="awr" href="#5yx3rhnrwptpu">5yx3rhnrwptpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>101.20</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>50.60</td><td align="right" class='awrnc'>2.93</td><td align="right" class='awrnc'>1,060.45</td><td align="right" class='awrnc'>9.54</td><td align="right" class='awrnc'>51.15</td><td scope="row" class='awrnc'><a class="awr" href="#9yzrfgvuxws9b">9yzrfgvuxws9b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>50.88</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>50.88</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>530.49</td><td align="right" class='awrc'>9.59</td><td align="right" class='awrc'>46.14</td><td scope="row" class='awrc'><a class="awr" href="#8y9r8y4hxsjxb">8y9r8y4hxsjxb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>49.95</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>49.95</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>529.66</td><td align="right" class='awrnc'>9.43</td><td align="right" class='awrnc'>40.80</td><td scope="row" class='awrnc'><a class="awr" href="#34h3w6hykhk8g">34h3w6hykhk8g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>48.48</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>48.48</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>530.64</td><td align="right" class='awrc'>9.14</td><td align="right" class='awrc'>50.49</td><td scope="row" class='awrc'><a class="awr" href="#9a7c8svm56haw">9a7c8svm56haw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.94</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.73</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>2,127.44</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>5.49</td><td scope="row" class='awrnc'><a class="awr" href="#9jnaa1bq11a61">9jnaa1bq11a61</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.53</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.63</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>2,128.61</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>6.17</td><td scope="row" class='awrc'><a class="awr" href="#g2r0fu8hz8rv8">g2r0fu8hz8rv8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.18</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.55</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>2,124.65</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>5.57</td><td scope="row" class='awrnc'><a class="awr" href="#05dgz376x2uah">05dgz376x2uah</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.18</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.55</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>2,126.95</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>7.64</td><td scope="row" class='awrc'><a class="awr" href="#4y7jh3c72wfyc">4y7jh3c72wfyc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.16</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.54</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>2,126.51</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>5.43</td><td scope="row" class='awrnc'><a class="awr" href="#gx2wbjnsndywg">gx2wbjnsndywg</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.15</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.54</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>2,127.80</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>7.78</td><td scope="row" class='awrc'><a class="awr" href="#787vyc7kcz0pd">787vyc7kcz0pd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.12</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.53</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>2,128.99</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>7.85</td><td scope="row" class='awrnc'><a class="awr" href="#8xsf93arbvbm5">8xsf93arbvbm5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.00</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.50</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>2,124.76</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>5.73</td><td scope="row" class='awrc'><a class="awr" href="#34znj9v2fzxst">34znj9v2fzxst</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.50</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>2,127.99</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>7.93</td><td scope="row" class='awrnc'><a class="awr" href="#d8qmpacb3zab2">d8qmpacb3zab2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.85</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.46</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,127.12</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>7.69</td><td scope="row" class='awrc'><a class="awr" href="#6x6suu2w4rznw">6x6suu2w4rznw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.83</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.46</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>2,125.19</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>5.39</td><td scope="row" class='awrnc'><a class="awr" href="#59c9hcdmc2sp8">59c9hcdmc2sp8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.82</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.45</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,127.92</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>7.90</td><td scope="row" class='awrc'><a class="awr" href="#42dfwspbnmyhn">42dfwspbnmyhn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.81</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.45</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>2,126.70</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.50</td><td scope="row" class='awrnc'><a class="awr" href="#awt1bwgs30hx1">awt1bwgs30hx1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.74</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.44</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,126.34</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.72</td><td scope="row" class='awrc'><a class="awr" href="#0wn4rp6qcr6js">0wn4rp6qcr6js</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.72</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.43</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>2,125.85</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>6.64</td><td scope="row" class='awrnc'><a class="awr" href="#fqsx798y4df7a">fqsx798y4df7a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.72</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.43</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,126.84</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.63</td><td scope="row" class='awrc'><a class="awr" href="#fjb8yj8xjzk39">fjb8yj8xjzk39</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.68</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.42</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>2,125.77</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.41</td><td scope="row" class='awrnc'><a class="awr" href="#cyhr3uaphj8u4">cyhr3uaphj8u4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.55</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.39</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,127.65</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.38</td><td scope="row" class='awrc'><a class="awr" href="#0zzrz3xpx0yws">0zzrz3xpx0yws</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.53</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.38</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>2,128.09</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>5.41</td><td scope="row" class='awrnc'><a class="awr" href="#868wdptu2wdsf">868wdptu2wdsf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.50</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.38</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>2,128.42</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>7.16</td><td scope="row" class='awrc'><a class="awr" href="#1x4ta4a2yjbhw">1x4ta4a2yjbhw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.49</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.37</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>2,127.52</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>7.27</td><td scope="row" class='awrnc'><a class="awr" href="#9cw3txprjx7ky">9cw3txprjx7ky</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.26</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.31</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>2,129.12</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>7.89</td><td scope="row" class='awrc'><a class="awr" href="#7uf35z2xnpp67">7uf35z2xnpp67</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.16</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.29</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>2,127.67</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>7.25</td><td scope="row" class='awrnc'><a class="awr" href="#ds72ddrkju833">ds72ddrkju833</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.15</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.29</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>2,128.12</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>7.25</td><td scope="row" class='awrc'><a class="awr" href="#czkhyr80ymm1z">czkhyr80ymm1z</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.11</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.28</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>2,131.14</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>7.94</td><td scope="row" class='awrnc'><a class="awr" href="#fm39d7d1vc1q3">fm39d7d1vc1q3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.11</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.28</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>2,126.74</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.65</td><td scope="row" class='awrc'><a class="awr" href="#0h8337uv1gm0g">0h8337uv1gm0g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.10</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>9.28</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>2,126.62</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>8.11</td><td scope="row" class='awrnc'><a class="awr" href="#2h5cgxr56bjm9">2h5cgxr56bjm9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.04</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>9.26</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>2,127.26</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.44</td><td scope="row" class='awrc'><a class="awr" href="#235c49djpygrk">235c49djpygrk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   92.9% of Total User I/O Wait Time (s):	   15,386</li>
<li class="awr">Captured PL/SQL account for   71.7% of Total User I/O Wait Time (s):	      15,386</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>8,758.62</td><td align="right" class='awrc'>25,721</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>56.93</td><td align="right" class='awrc'>85,138.03</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>10.29</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>5,524.88</td><td align="right" class='awrnc'>151,320</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>35.91</td><td align="right" class='awrnc'>49,065.03</td><td align="right" class='awrnc'>3.42</td><td align="right" class='awrnc'>11.26</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>863.11</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>287.70</td><td align="right" class='awrc'>5.61</td><td align="right" class='awrc'>1,591.27</td><td align="right" class='awrc'>11.31</td><td align="right" class='awrc'>54.24</td><td scope="row" class='awrc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>846.02</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>282.01</td><td align="right" class='awrnc'>5.50</td><td align="right" class='awrnc'>1,590.40</td><td align="right" class='awrnc'>11.67</td><td align="right" class='awrnc'>53.20</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>817.64</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>272.55</td><td align="right" class='awrc'>5.31</td><td align="right" class='awrc'>1,591.78</td><td align="right" class='awrc'>17.18</td><td align="right" class='awrc'>51.37</td><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>793.97</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>264.66</td><td align="right" class='awrnc'>5.16</td><td align="right" class='awrnc'>1,591.08</td><td align="right" class='awrnc'>11.57</td><td align="right" class='awrnc'>49.90</td><td scope="row" class='awrnc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>542.43</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>271.22</td><td align="right" class='awrc'>3.53</td><td align="right" class='awrc'>1,060.45</td><td align="right" class='awrc'>9.54</td><td align="right" class='awrc'>51.15</td><td scope="row" class='awrc'><a class="awr" href="#9yzrfgvuxws9b">9yzrfgvuxws9b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>539.11</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>269.55</td><td align="right" class='awrnc'>3.50</td><td align="right" class='awrnc'>1,061.68</td><td align="right" class='awrnc'>9.61</td><td align="right" class='awrnc'>50.78</td><td scope="row" class='awrnc'><a class="awr" href="#5yx3rhnrwptpu">5yx3rhnrwptpu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>456.15</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>228.07</td><td align="right" class='awrc'>2.96</td><td align="right" class='awrc'>1,060.19</td><td align="right" class='awrc'>11.29</td><td align="right" class='awrc'>43.02</td><td scope="row" class='awrc'><a class="awr" href="#3cbmkwjys3g0s">3cbmkwjys3g0s</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>449.86</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>224.93</td><td align="right" class='awrnc'>2.92</td><td align="right" class='awrnc'>1,061.79</td><td align="right" class='awrnc'>12.04</td><td align="right" class='awrnc'>42.37</td><td scope="row" class='awrnc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>267.93</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>267.93</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>530.64</td><td align="right" class='awrc'>9.14</td><td align="right" class='awrc'>50.49</td><td scope="row" class='awrc'><a class="awr" href="#9a7c8svm56haw">9a7c8svm56haw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>244.79</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>244.79</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>530.49</td><td align="right" class='awrnc'>9.59</td><td align="right" class='awrnc'>46.14</td><td scope="row" class='awrnc'><a class="awr" href="#8y9r8y4hxsjxb">8y9r8y4hxsjxb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>216.09</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>216.09</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>529.66</td><td align="right" class='awrc'>9.43</td><td align="right" class='awrc'>40.80</td><td scope="row" class='awrc'><a class="awr" href="#34h3w6hykhk8g">34h3w6hykhk8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>172.56</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>43.14</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>2,126.62</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>8.11</td><td scope="row" class='awrnc'><a class="awr" href="#2h5cgxr56bjm9">2h5cgxr56bjm9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>169.14</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>42.29</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>2,131.14</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.94</td><td scope="row" class='awrc'><a class="awr" href="#fm39d7d1vc1q3">fm39d7d1vc1q3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>168.70</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>42.18</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>2,127.99</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>7.93</td><td scope="row" class='awrnc'><a class="awr" href="#d8qmpacb3zab2">d8qmpacb3zab2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>168.20</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>42.05</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,127.92</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>7.90</td><td scope="row" class='awrc'><a class="awr" href="#42dfwspbnmyhn">42dfwspbnmyhn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>167.88</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>41.97</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>2,129.12</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>7.89</td><td scope="row" class='awrnc'><a class="awr" href="#7uf35z2xnpp67">7uf35z2xnpp67</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>167.20</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>41.80</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>2,128.99</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>7.85</td><td scope="row" class='awrc'><a class="awr" href="#8xsf93arbvbm5">8xsf93arbvbm5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>165.60</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>41.40</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>2,127.80</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>7.78</td><td scope="row" class='awrnc'><a class="awr" href="#787vyc7kcz0pd">787vyc7kcz0pd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>164.20</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>41.05</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>2,126.34</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.72</td><td scope="row" class='awrc'><a class="awr" href="#0wn4rp6qcr6js">0wn4rp6qcr6js</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>163.51</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>40.88</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>2,127.12</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.69</td><td scope="row" class='awrnc'><a class="awr" href="#6x6suu2w4rznw">6x6suu2w4rznw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>162.77</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>40.69</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>2,126.74</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.65</td><td scope="row" class='awrc'><a class="awr" href="#0h8337uv1gm0g">0h8337uv1gm0g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>162.57</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>40.64</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>2,126.95</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>7.64</td><td scope="row" class='awrnc'><a class="awr" href="#4y7jh3c72wfyc">4y7jh3c72wfyc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>162.24</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>40.56</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>2,126.84</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.63</td><td scope="row" class='awrc'><a class="awr" href="#fjb8yj8xjzk39">fjb8yj8xjzk39</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>159.54</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>39.89</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>2,126.70</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.50</td><td scope="row" class='awrnc'><a class="awr" href="#awt1bwgs30hx1">awt1bwgs30hx1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>158.24</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>39.56</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>2,127.26</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.44</td><td scope="row" class='awrc'><a class="awr" href="#235c49djpygrk">235c49djpygrk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>157.57</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>39.39</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>2,125.77</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.41</td><td scope="row" class='awrnc'><a class="awr" href="#cyhr3uaphj8u4">cyhr3uaphj8u4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>157.11</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>39.28</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>2,127.65</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.38</td><td scope="row" class='awrc'><a class="awr" href="#0zzrz3xpx0yws">0zzrz3xpx0yws</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>154.77</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>38.69</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>2,127.52</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>7.27</td><td scope="row" class='awrnc'><a class="awr" href="#9cw3txprjx7ky">9cw3txprjx7ky</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>154.33</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>38.58</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,127.67</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>7.25</td><td scope="row" class='awrc'><a class="awr" href="#ds72ddrkju833">ds72ddrkju833</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>154.19</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>38.55</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,128.12</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>7.25</td><td scope="row" class='awrnc'><a class="awr" href="#czkhyr80ymm1z">czkhyr80ymm1z</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:	24,645,118</li>
<li class="awr">Captured SQL account for   95.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>19,743,481</td><td align="right" class='awrc'>151,320</td><td align="right" class='awrc'>130.48</td><td align="right" class='awrc'>80.11</td><td align="right" class='awrc'>49,065.03</td><td class='awrc'>3.4</td><td class='awrc'>11.3</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>3,660,570</td><td align="right" class='awrnc'>25,721</td><td align="right" class='awrnc'>142.32</td><td align="right" class='awrnc'>14.85</td><td align="right" class='awrnc'>85,138.03</td><td class='awrnc'>1.8</td><td class='awrnc'>10.3</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>3,505,669</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1,168,556.33</td><td align="right" class='awrc'>14.22</td><td align="right" class='awrc'>1,591.78</td><td class='awrc'>17.2</td><td class='awrc'>51.4</td><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2,027,314</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>675,771.33</td><td align="right" class='awrnc'>8.23</td><td align="right" class='awrnc'>1,590.40</td><td class='awrnc'>11.7</td><td class='awrnc'>53.2</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2,014,757</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>671,585.67</td><td align="right" class='awrc'>8.18</td><td align="right" class='awrc'>1,591.08</td><td class='awrc'>11.6</td><td class='awrc'>49.9</td><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,951,007</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>650,335.67</td><td align="right" class='awrnc'>7.92</td><td align="right" class='awrnc'>1,591.27</td><td class='awrnc'>11.3</td><td class='awrnc'>54.2</td><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,385,986</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>692,993.00</td><td align="right" class='awrc'>5.62</td><td align="right" class='awrc'>1,061.79</td><td class='awrc'>12</td><td class='awrc'>42.4</td><td scope="row" class='awrc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,279,446</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>639,723.00</td><td align="right" class='awrnc'>5.19</td><td align="right" class='awrnc'>1,060.19</td><td class='awrnc'>11.3</td><td class='awrnc'>43</td><td scope="row" class='awrnc'><a class="awr" href="#3cbmkwjys3g0s">3cbmkwjys3g0s</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,033,043</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>516,521.50</td><td align="right" class='awrc'>4.19</td><td align="right" class='awrc'>1,061.68</td><td class='awrc'>9.6</td><td class='awrc'>50.8</td><td scope="row" class='awrc'><a class="awr" href="#5yx3rhnrwptpu">5yx3rhnrwptpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,018,963</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>509,481.50</td><td align="right" class='awrnc'>4.13</td><td align="right" class='awrnc'>1,060.45</td><td class='awrnc'>9.5</td><td class='awrnc'>51.2</td><td scope="row" class='awrnc'><a class="awr" href="#9yzrfgvuxws9b">9yzrfgvuxws9b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>502,839</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>502,839.00</td><td align="right" class='awrc'>2.04</td><td align="right" class='awrc'>530.49</td><td class='awrc'>9.6</td><td class='awrc'>46.1</td><td scope="row" class='awrc'><a class="awr" href="#8y9r8y4hxsjxb">8y9r8y4hxsjxb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>491,676</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>491,676.00</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>529.66</td><td class='awrnc'>9.4</td><td class='awrnc'>40.8</td><td scope="row" class='awrnc'><a class="awr" href="#34h3w6hykhk8g">34h3w6hykhk8g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>476,472</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>476,472.00</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>530.64</td><td class='awrc'>9.1</td><td class='awrc'>50.5</td><td scope="row" class='awrc'><a class="awr" href="#9a7c8svm56haw">9a7c8svm56haw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:      22,345,229</li>
<li class="awr">Captured SQL account for   95.7% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>18,280,881</td><td align="right" class='awrc'>151,320</td><td align="right" class='awrc'>120.81</td><td align="right" class='awrc'>81.81</td><td align="right" class='awrc'>49,065.03</td><td align="right" class='awrc'>3.42</td><td align="right" class='awrc'>11.26</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>3,092,980</td><td align="right" class='awrnc'>25,721</td><td align="right" class='awrnc'>120.25</td><td align="right" class='awrnc'>13.84</td><td align="right" class='awrnc'>85,138.03</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>10.29</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>2,831,723</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>943,907.67</td><td align="right" class='awrc'>12.67</td><td align="right" class='awrc'>1,591.78</td><td align="right" class='awrc'>17.18</td><td align="right" class='awrc'>51.37</td><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,806,386</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>602,128.67</td><td align="right" class='awrnc'>8.08</td><td align="right" class='awrnc'>1,590.40</td><td align="right" class='awrnc'>11.67</td><td align="right" class='awrnc'>53.20</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,796,019</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>598,673.00</td><td align="right" class='awrc'>8.04</td><td align="right" class='awrc'>1,591.08</td><td align="right" class='awrc'>11.57</td><td align="right" class='awrc'>49.90</td><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,739,632</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>579,877.33</td><td align="right" class='awrnc'>7.79</td><td align="right" class='awrnc'>1,591.27</td><td align="right" class='awrnc'>11.31</td><td align="right" class='awrnc'>54.24</td><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,261,388</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>630,694.00</td><td align="right" class='awrc'>5.64</td><td align="right" class='awrc'>1,061.79</td><td align="right" class='awrc'>12.04</td><td align="right" class='awrc'>42.37</td><td scope="row" class='awrc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,169,408</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>584,704.00</td><td align="right" class='awrnc'>5.23</td><td align="right" class='awrnc'>1,060.19</td><td align="right" class='awrnc'>11.29</td><td align="right" class='awrnc'>43.02</td><td scope="row" class='awrnc'><a class="awr" href="#3cbmkwjys3g0s">3cbmkwjys3g0s</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>963,457</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>481,728.50</td><td align="right" class='awrc'>4.31</td><td align="right" class='awrc'>1,061.68</td><td align="right" class='awrc'>9.61</td><td align="right" class='awrc'>50.78</td><td scope="row" class='awrc'><a class="awr" href="#5yx3rhnrwptpu">5yx3rhnrwptpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>952,906</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>476,453.00</td><td align="right" class='awrnc'>4.26</td><td align="right" class='awrnc'>1,060.45</td><td align="right" class='awrnc'>9.54</td><td align="right" class='awrnc'>51.15</td><td scope="row" class='awrnc'><a class="awr" href="#9yzrfgvuxws9b">9yzrfgvuxws9b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>478,547</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>478,547.00</td><td align="right" class='awrc'>2.14</td><td align="right" class='awrc'>530.49</td><td align="right" class='awrc'>9.59</td><td align="right" class='awrc'>46.14</td><td scope="row" class='awrc'><a class="awr" href="#8y9r8y4hxsjxb">8y9r8y4hxsjxb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>468,770</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>468,770.00</td><td align="right" class='awrnc'>2.10</td><td align="right" class='awrnc'>529.66</td><td align="right" class='awrnc'>9.43</td><td align="right" class='awrnc'>40.80</td><td scope="row" class='awrnc'><a class="awr" href="#34h3w6hykhk8g">34h3w6hykhk8g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>453,923</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>453,923.00</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>530.64</td><td align="right" class='awrc'>9.14</td><td align="right" class='awrc'>50.49</td><td scope="row" class='awrc'><a class="awr" href="#9a7c8svm56haw">9a7c8svm56haw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	   22,277,415</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      22,277,415</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>2,831,723</td><td align="right" class='awrc'>2,831,723</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>943,907.67</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>12.71</td><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,806,386</td><td align="right" class='awrnc'>1,806,386</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>602,128.67</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>8.11</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,796,019</td><td align="right" class='awrc'>1,796,019</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>598,673.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>8.06</td><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,739,632</td><td align="right" class='awrnc'>1,739,632</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>579,877.33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>7.81</td><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,261,388</td><td align="right" class='awrc'>1,261,388</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>630,694.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>5.66</td><td scope="row" class='awrc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,169,408</td><td align="right" class='awrnc'>1,169,408</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>584,704.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.25</td><td scope="row" class='awrnc'><a class="awr" href="#3cbmkwjys3g0s">3cbmkwjys3g0s</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>963,457</td><td align="right" class='awrc'>963,457</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>481,728.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4.32</td><td scope="row" class='awrc'><a class="awr" href="#5yx3rhnrwptpu">5yx3rhnrwptpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>952,906</td><td align="right" class='awrnc'>952,906</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>476,453.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.28</td><td scope="row" class='awrnc'><a class="awr" href="#9yzrfgvuxws9b">9yzrfgvuxws9b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>478,547</td><td align="right" class='awrc'>478,547</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>478,547.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.15</td><td scope="row" class='awrc'><a class="awr" href="#8y9r8y4hxsjxb">8y9r8y4hxsjxb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>468,770</td><td align="right" class='awrnc'>468,770</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>468,770.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.10</td><td scope="row" class='awrnc'><a class="awr" href="#34h3w6hykhk8g">34h3w6hykhk8g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>453,923</td><td align="right" class='awrc'>453,923</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>453,923.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.04</td><td scope="row" class='awrc'><a class="awr" href="#9a7c8svm56haw">9a7c8svm56haw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:	  189,562</li>
<li class="awr">Captured SQL account for   94.7% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>151,320</td><td align="right" class='awrc'>151,361</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>49,065.03</td><td class='awrc'>3.4</td><td class='awrc'>11.3</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>25,721</td><td align="right" class='awrnc'>3,266,567</td><td align="right" class='awrnc'>127.00</td><td align="right" class='awrnc'>85,138.03</td><td class='awrnc'>1.8</td><td class='awrnc'>10.3</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>497</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td><td class='awrc'>95.4</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrnc'>253</td><td align="right" class='awrnc'>253</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.16</td><td class='awrnc'>81</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrc'>211</td><td align="right" class='awrc'>211</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2.37</td><td class='awrc'>4.2</td><td class='awrc'>.4</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>1.28</td><td class='awrnc'>3.9</td><td class='awrnc'>1.3</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>156</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.74</td><td class='awrc'>7.6</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>4.41</td><td class='awrnc'>1</td><td class='awrnc'>.3</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>111</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td class='awrc'>86.3</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.02</td><td class='awrnc'>69</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#d96u6hzrz93x5">d96u6hzrz93x5</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select con_id from v$container...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	     3,259</li>
<li class="awr">Captured SQL account for   52.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>253</td><td align="right" class='awrc'>253</td><td align="right" class='awrc'>7.76</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>6.47</td><td scope="row" class='awrnc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>179</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>5.49</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>4.79</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrc'>99</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>3.04</td><td scope="row" class='awrc'><a class="awr" href="#d96u6hzrz93x5">d96u6hzrz93x5</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select con_id from v$container...</td></tr>
<tr><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>3.01</td><td scope="row" class='awrnc'><a class="awr" href="#aktbxfjwnzgmu">aktbxfjwnzgmu</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update WRM$_DATABASE_INSTANCE ...</td></tr>
<tr><td align="right" class='awrc'>96</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>2.95</td><td scope="row" class='awrc'><a class="awr" href="#8fgdzmkchnn1a">8fgdzmkchnn1a</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT /*+ APPEND LEADING(@&quot;SE...</td></tr>
<tr><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>2.85</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>82</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>2.52</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>2.30</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>57</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>1.75</td><td scope="row" class='awrc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>1.50</td><td scope="row" class='awrnc'><a class="awr" href="#bxpcry2tpc217">bxpcry2tpc217</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ opt_param('parallel...</td></tr>
<tr><td align="right" class='awrc'>48</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>1.47</td><td scope="row" class='awrc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>1.41</td><td scope="row" class='awrnc'><a class="awr" href="#42mkua34ay6bc">42mkua34ay6bc</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_addm_fdg ...</td></tr>
<tr><td align="right" class='awrc'>38</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>1.17</td><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>1.14</td><td scope="row" class='awrnc'><a class="awr" href="#1rpgk59t8pvs6">1rpgk59t8pvs6</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'> begin dbms_output.get_line(:l...</td></tr>
<tr><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>1.01</td><td scope="row" class='awrc'><a class="awr" href="#94qn6y14kw01g">94qn6y14kw01g</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT NVL(TO_NUMBER(EXTRACT(X...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,231,793</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>1.04</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>4,176,852</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.33</td><td scope="row" class='awrnc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrc'>4,102,120</td><td align="right" class='awrc'>25,721</td><td align="right" class='awrc'>0.32</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>3,603,183</td><td align="right" class='awrnc'>151,320</td><td align="right" class='awrnc'>0.28</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>123</td><td align="right" class='awrc'>25,721</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>151,320</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	     121,308</li>
<li class="awr">Captured SQL account for   94.9% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>74,268.27</td><td align="right" class='awrc'>25,721</td><td align="right" class='awrc'>61.22</td><td align="right" class='awrc'>85,138.03</td><td align="right" class='awrc'>87.23</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>10.29</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>40,836.66</td><td align="right" class='awrnc'>151,320</td><td align="right" class='awrnc'>33.66</td><td align="right" class='awrnc'>49,065.03</td><td align="right" class='awrnc'>83.23</td><td align="right" class='awrnc'>3.42</td><td align="right" class='awrnc'>11.26</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>1,956.90</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>2,128.09</td><td align="right" class='awrc'>91.96</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>5.41</td><td scope="row" class='awrc'><a class="awr" href="#868wdptu2wdsf">868wdptu2wdsf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,956.18</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>2,125.19</td><td align="right" class='awrnc'>92.05</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>5.39</td><td scope="row" class='awrnc'><a class="awr" href="#59c9hcdmc2sp8">59c9hcdmc2sp8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,954.93</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>2,132.49</td><td align="right" class='awrc'>91.67</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>6.08</td><td scope="row" class='awrc'><a class="awr" href="#6a32815hkfxqf">6a32815hkfxqf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,952.60</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>2,127.44</td><td align="right" class='awrnc'>91.78</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>5.49</td><td scope="row" class='awrnc'><a class="awr" href="#9jnaa1bq11a61">9jnaa1bq11a61</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,951.44</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>2,124.65</td><td align="right" class='awrc'>91.85</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>5.57</td><td scope="row" class='awrc'><a class="awr" href="#05dgz376x2uah">05dgz376x2uah</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,949.83</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>2,130.78</td><td align="right" class='awrnc'>91.51</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5.93</td><td scope="row" class='awrnc'><a class="awr" href="#279tufy9n4jkw">279tufy9n4jkw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,948.85</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>2,126.51</td><td align="right" class='awrc'>91.65</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>5.43</td><td scope="row" class='awrc'><a class="awr" href="#gx2wbjnsndywg">gx2wbjnsndywg</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,948.42</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>2,132.23</td><td align="right" class='awrnc'>91.38</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>6.15</td><td scope="row" class='awrnc'><a class="awr" href="#fd4xkca0yhc14">fd4xkca0yhc14</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,947.20</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>2,128.26</td><td align="right" class='awrc'>91.49</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5.89</td><td scope="row" class='awrc'><a class="awr" href="#9t7r85fxpxsnj">9t7r85fxpxsnj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,946.12</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>2,124.76</td><td align="right" class='awrnc'>91.59</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>5.73</td><td scope="row" class='awrnc'><a class="awr" href="#34znj9v2fzxst">34znj9v2fzxst</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,944.93</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.60</td><td align="right" class='awrc'>2,128.61</td><td align="right" class='awrc'>91.37</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>6.17</td><td scope="row" class='awrc'><a class="awr" href="#g2r0fu8hz8rv8">g2r0fu8hz8rv8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,940.81</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>2,128.31</td><td align="right" class='awrnc'>91.19</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>6.08</td><td scope="row" class='awrnc'><a class="awr" href="#g1p4d7mfawjcs">g1p4d7mfawjcs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,937.67</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.60</td><td align="right" class='awrc'>2,129.87</td><td align="right" class='awrc'>90.98</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>6.28</td><td scope="row" class='awrc'><a class="awr" href="#3s33p2a5kvj29">3s33p2a5kvj29</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,934.41</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>2,125.85</td><td align="right" class='awrnc'>90.99</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>6.64</td><td scope="row" class='awrnc'><a class="awr" href="#fqsx798y4df7a">fqsx798y4df7a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,933.02</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>2,127.67</td><td align="right" class='awrc'>90.85</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>7.25</td><td scope="row" class='awrc'><a class="awr" href="#ds72ddrkju833">ds72ddrkju833</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,927.80</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>2,128.42</td><td align="right" class='awrnc'>90.57</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>7.16</td><td scope="row" class='awrnc'><a class="awr" href="#1x4ta4a2yjbhw">1x4ta4a2yjbhw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,926.55</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>2,127.65</td><td align="right" class='awrc'>90.55</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7.38</td><td scope="row" class='awrc'><a class="awr" href="#0zzrz3xpx0yws">0zzrz3xpx0yws</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,923.33</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>2,127.26</td><td align="right" class='awrnc'>90.41</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>7.44</td><td scope="row" class='awrnc'><a class="awr" href="#235c49djpygrk">235c49djpygrk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,921.49</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,126.70</td><td align="right" class='awrc'>90.35</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>7.50</td><td scope="row" class='awrc'><a class="awr" href="#awt1bwgs30hx1">awt1bwgs30hx1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,921.03</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,127.92</td><td align="right" class='awrnc'>90.28</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.90</td><td scope="row" class='awrnc'><a class="awr" href="#42dfwspbnmyhn">42dfwspbnmyhn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,920.92</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,127.52</td><td align="right" class='awrc'>90.29</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>7.27</td><td scope="row" class='awrc'><a class="awr" href="#9cw3txprjx7ky">9cw3txprjx7ky</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,918.40</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,126.74</td><td align="right" class='awrnc'>90.20</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>7.65</td><td scope="row" class='awrnc'><a class="awr" href="#0h8337uv1gm0g">0h8337uv1gm0g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,918.30</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,126.95</td><td align="right" class='awrc'>90.19</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>7.64</td><td scope="row" class='awrc'><a class="awr" href="#4y7jh3c72wfyc">4y7jh3c72wfyc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,917.45</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,128.12</td><td align="right" class='awrnc'>90.10</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>7.25</td><td scope="row" class='awrnc'><a class="awr" href="#czkhyr80ymm1z">czkhyr80ymm1z</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,917.31</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,128.99</td><td align="right" class='awrc'>90.06</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>7.85</td><td scope="row" class='awrc'><a class="awr" href="#8xsf93arbvbm5">8xsf93arbvbm5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,916.39</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,126.34</td><td align="right" class='awrnc'>90.13</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.72</td><td scope="row" class='awrnc'><a class="awr" href="#0wn4rp6qcr6js">0wn4rp6qcr6js</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,916.00</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,127.80</td><td align="right" class='awrc'>90.05</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>7.78</td><td scope="row" class='awrc'><a class="awr" href="#787vyc7kcz0pd">787vyc7kcz0pd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,915.75</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,125.77</td><td align="right" class='awrnc'>90.12</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.41</td><td scope="row" class='awrnc'><a class="awr" href="#cyhr3uaphj8u4">cyhr3uaphj8u4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,915.50</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,131.14</td><td align="right" class='awrc'>89.88</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.94</td><td scope="row" class='awrc'><a class="awr" href="#fm39d7d1vc1q3">fm39d7d1vc1q3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,915.49</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,126.84</td><td align="right" class='awrnc'>90.06</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>7.63</td><td scope="row" class='awrnc'><a class="awr" href="#fjb8yj8xjzk39">fjb8yj8xjzk39</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,915.04</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>2,129.12</td><td align="right" class='awrc'>89.95</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>7.89</td><td scope="row" class='awrc'><a class="awr" href="#7uf35z2xnpp67">7uf35z2xnpp67</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,913.55</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>2,127.12</td><td align="right" class='awrnc'>89.96</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>7.69</td><td scope="row" class='awrnc'><a class="awr" href="#6x6suu2w4rznw">6x6suu2w4rznw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,909.83</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.57</td><td align="right" class='awrc'>2,127.99</td><td align="right" class='awrc'>89.75</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>7.93</td><td scope="row" class='awrc'><a class="awr" href="#d8qmpacb3zab2">d8qmpacb3zab2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,904.60</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>2,126.62</td><td align="right" class='awrnc'>89.56</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>8.11</td><td scope="row" class='awrnc'><a class="awr" href="#2h5cgxr56bjm9">2h5cgxr56bjm9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>497.87</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>1,591.08</td><td align="right" class='awrc'>31.29</td><td align="right" class='awrc'>11.57</td><td align="right" class='awrc'>49.90</td><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>462.75</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>1,590.40</td><td align="right" class='awrnc'>29.10</td><td align="right" class='awrnc'>11.67</td><td align="right" class='awrnc'>53.20</td><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>453.60</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>1,591.27</td><td align="right" class='awrc'>28.51</td><td align="right" class='awrc'>11.31</td><td align="right" class='awrc'>54.24</td><td scope="row" class='awrc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>409.82</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>1,061.79</td><td align="right" class='awrnc'>38.60</td><td align="right" class='awrnc'>12.04</td><td align="right" class='awrnc'>42.37</td><td scope="row" class='awrnc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>405.97</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>1,060.19</td><td align="right" class='awrc'>38.29</td><td align="right" class='awrc'>11.29</td><td align="right" class='awrc'>43.02</td><td scope="row" class='awrc'><a class="awr" href="#3cbmkwjys3g0s">3cbmkwjys3g0s</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>397.69</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>1,591.78</td><td align="right" class='awrnc'>24.98</td><td align="right" class='awrnc'>17.18</td><td align="right" class='awrnc'>51.37</td><td scope="row" class='awrnc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>349.30</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>1,061.68</td><td align="right" class='awrc'>32.90</td><td align="right" class='awrc'>9.61</td><td align="right" class='awrc'>50.78</td><td scope="row" class='awrc'><a class="awr" href="#5yx3rhnrwptpu">5yx3rhnrwptpu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>346.26</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>1,060.45</td><td align="right" class='awrnc'>32.65</td><td align="right" class='awrnc'>9.54</td><td align="right" class='awrnc'>51.15</td><td scope="row" class='awrnc'><a class="awr" href="#9yzrfgvuxws9b">9yzrfgvuxws9b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>227.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>529.66</td><td align="right" class='awrc'>42.88</td><td align="right" class='awrc'>9.43</td><td align="right" class='awrc'>40.80</td><td scope="row" class='awrc'><a class="awr" href="#34h3w6hykhk8g">34h3w6hykhk8g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>202.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>530.49</td><td align="right" class='awrnc'>38.16</td><td align="right" class='awrnc'>9.59</td><td align="right" class='awrnc'>46.14</td><td scope="row" class='awrnc'><a class="awr" href="#8y9r8y4hxsjxb">8y9r8y4hxsjxb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>182.64</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>530.64</td><td align="right" class='awrc'>34.42</td><td align="right" class='awrc'>9.14</td><td align="right" class='awrc'>50.49</td><td scope="row" class='awrc'><a class="awr" href="#9a7c8svm56haw">9a7c8svm56haw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>25.83</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>41.37</td><td align="right" class='awrnc'>62.44</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>6.29</td><td scope="row" class='awrnc'><a class="awr" href="#8fgdzmkchnn1a">8fgdzmkchnn1a</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT /*+ APPEND LEADING(@&quot;SE...</td></tr>
<tr><td align="right" class='awrc'>4.36</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4.41</td><td align="right" class='awrc'>98.92</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>0.31</td><td scope="row" class='awrc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrnc'>2.27</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.37</td><td align="right" class='awrnc'>95.77</td><td align="right" class='awrnc'>4.17</td><td align="right" class='awrnc'>0.37</td><td scope="row" class='awrnc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>87.07</td><td align="right" class='awrc'>2.04</td><td align="right" class='awrc'>9.60</td><td scope="row" class='awrc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>90.11</td><td align="right" class='awrnc'>3.95</td><td align="right" class='awrnc'>1.30</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>97.23</td><td align="right" class='awrc'>3.08</td><td align="right" class='awrc'>0.57</td><td scope="row" class='awrc'><a class="awr" href="#1myuz4d7pbg2j">1myuz4d7pbg2j</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_recommend...</td></tr>
<tr><td align="right" class='awrnc'>0.62</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>84.69</td><td align="right" class='awrnc'>7.60</td><td align="right" class='awrnc'>0.00</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>94.61</td><td align="right" class='awrc'>6.27</td><td align="right" class='awrc'>1.36</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>95.73</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>2.25</td><td scope="row" class='awrnc'><a class="awr" href="#a4n4ayr88dbhy">a4n4ayr88dbhy</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select grantee#, privilege#, n...</td></tr>
<tr><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>94.56</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>3.96</td><td scope="row" class='awrc'><a class="awr" href="#fh5ufah919kun">fh5ufah919kun</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_sb4$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>23.82</td><td align="right" class='awrnc'>3.90</td><td align="right" class='awrnc'>1.73</td><td scope="row" class='awrnc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>88.13</td><td align="right" class='awrc'>5.63</td><td align="right" class='awrc'>3.53</td><td scope="row" class='awrc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>75.92</td><td align="right" class='awrnc'>11.80</td><td align="right" class='awrnc'>0.24</td><td scope="row" class='awrnc'><a class="awr" href="#aktbxfjwnzgmu">aktbxfjwnzgmu</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update WRM$_DATABASE_INSTANCE ...</td></tr>
<tr><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>71.95</td><td align="right" class='awrc'>5.20</td><td align="right" class='awrc'>6.29</td><td scope="row" class='awrc'><a class="awr" href="#4nc9zwu3h1k7z">4nc9zwu3h1k7z</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_actions (...</td></tr>
<tr><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>78.35</td><td align="right" class='awrnc'>6.46</td><td align="right" class='awrnc'>17.12</td><td scope="row" class='awrnc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>82.91</td><td align="right" class='awrc'>11.35</td><td align="right" class='awrc'>9.62</td><td scope="row" class='awrc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>99.07</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>0.24</td><td scope="row" class='awrnc'><a class="awr" href="#cn6hhn36a4rrs">cn6hhn36a4rrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select con#, obj#, rcon#, enab...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="05dgz376x2uah"></a>05dgz376x2uah</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '26';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0h8337uv1gm0g"></a>0h8337uv1gm0g</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0wn4rp6qcr6js"></a>0wn4rp6qcr6js</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '108';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0zzrz3xpx0yws"></a>0zzrz3xpx0yws</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '31';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1myuz4d7pbg2j"></a>1myuz4d7pbg2j</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_recommendations (id,	task_id,  finding_id,  rank,  benefit_msg_id,  benefit_val,  type, flags,  rec_type_id,  exec_name) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1rpgk59t8pvs6"></a>1rpgk59t8pvs6</td><td class='awrnc'><pre_sqltext class="awr">      begin
	 dbms_output.get_line(:line,  :status);
      end;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1x4ta4a2yjbhw"></a>1x4ta4a2yjbhw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '74';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="235c49djpygrk"></a>235c49djpygrk</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '34';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="279tufy9n4jkw"></a>279tufy9n4jkw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '27';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2h5cgxr56bjm9"></a>2h5cgxr56bjm9</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '85';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2p9fv35c7zxtg"></a>2p9fv35c7zxtg</td><td class='awrc'><pre_sqltext class="awr">select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ 	   nvl(m.inserts,  0) ins,  nvl(m.updates,  0) upd,  nvl(m.deletes,  0) del,	       nvl(m.drop_segments,  0) dropseg,  nvl(m.flags,	0) flags,			 nvl(rowcnt,  0) rowcnt,  o.pobjn pobjn 					 from									       (select :objn objn,  0 pobjn,  rowcnt						from tab$ t								      where t.obj# = :objn							    union all									  select :objn objn,  tp.bo# pobjn,  rowcnt					  from tabpart$ tp								where tp.obj# = :objn							      union all 								    select :objn objn,	tcp.bo# pobjn,	rowcnt					    from tabcompart$ tcp							  where tcp.obj# = :objn							union all								      select :objn objn,  tsp.pobj# pobjn,  rowcnt				      from tabsubpart$ tsp							    where tsp.obj# = :objn) o,	sys.mon_mods_all$ m				  where o.objn = m.obj#(+) and rownum &lt; 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="34h3w6hykhk8g"></a>34h3w6hykhk8g</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '41';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="34znj9v2fzxst"></a>34znj9v2fzxst</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '30';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3cbmkwjys3g0s"></a>3cbmkwjys3g0s</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '37';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrnc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m 		  using dual								     on (m.obj# = :objn and							    (:pobjn = 0 or								m.obj# = :pobjn or							   m.obj# in (select obj#								 from tabpart$								    where bo# = :pobjn and obj# = :objn 				       union all								  select obj#								     from tabcompart$								where bo# = :pobjn and obj# = :objn					   union all								      select tsp.obj#								 from tabsubpart$ tsp,	tabcompart$ tcp 				     where tsp.pobj# = tcp.obj# 						  and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				     and tsp.obj# = :objn)))				      when matched then 							   update								      set inserts = decode(:reset,  1,	0,  inserts) + :ins,				 updates = decode(:reset,  1,  0,  updates) + :upd,				deletes = decode(:reset,  1,  0,  deletes) + :del,			       flags =	decode(:reset,	1,  0,	flags - bitand(flags,  :flag)) + :flag,        drop_segments = decode(:reset,  1,  0,  drop_segments) + :dropseg,	      timestamp = :time 						   when NOT matched then							insert (obj#,  inserts,  updates,  deletes,					       timestamp,  flags,  drop_segments)				    values (:objn,  :ins,  :upd,  :del,  :time,  :flag,  :dropseg)		     where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3s33p2a5kvj29"></a>3s33p2a5kvj29</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '53';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrnc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,  obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="42dfwspbnmyhn"></a>42dfwspbnmyhn</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '128';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="42mkua34ay6bc"></a>42mkua34ay6bc</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_addm_fdg ( TASK_ID,  FINDING_ID,  RULE_ID,	ADDM_FDG_ID,  ADDM_SEQ,    DATABASE_TIME,  ACTIVE_SESSIONS,  PERC_ACTIVE_SESS,	  IS_AGGREGATE,  METER_LEVEL,	 QUERY_TYPE,  QUERY_IS_APPROX,	QUERY_ARGS) VALUES ( :tid,  :kea_id,  :rid,  :fdg_id,  :keh_id,  :dbt,		 round(:dbt / (1000000 * :sint) ,  2),		 round(((:dbt * 100) / :total_dbt) ,  2),	    'N',  NULL, 	  :aqt,  decode(:aqa,  0,  'N',  'Y'),		 decode(:aqargs,  ' ',	NULL,  :aqargs)) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4nc9zwu3h1k7z"></a>4nc9zwu3h1k7z</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_actions (id,	task_id,  obj_id,  command,  msg_id,  flags,  attr1,  attr2,  attr3, attr4,  attr5,  attr6, num_attr1, num_attr2, num_attr3, num_attr4, num_attr5,  exec_name) VALUES (:1, :2,	:3, :4, :5, :6, :7, :8, :9, :10, ' ', ' ', :11, :12, :13, :14, :15,  :16) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4y7jh3c72wfyc"></a>4y7jh3c72wfyc</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '103';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="59c9hcdmc2sp8"></a>59c9hcdmc2sp8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '101';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.bucket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned					    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,						  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5hg6sgckh1tnx"></a>5hg6sgckh1tnx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '42';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5yx3rhnrwptpu"></a>5yx3rhnrwptpu</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '45';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6a32815hkfxqf"></a>6a32815hkfxqf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '55';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6wvzvgvg6qsyb"></a>6wvzvgvg6qsyb</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_findings (id,  task_id,  type,  parent,  obj_id,  impact_msg_id,  impact_val,  msg_id,  more_info_id,  name_msg_code,  flags,  exec_name) VALUES (:1,  :2,	:3,  :4,  :5,  :6,  :7, :8,  :9,  :10,	:11,  :12) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6x6suu2w4rznw"></a>6x6suu2w4rznw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '109';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7601qqtdhust2"></a>7601qqtdhust2</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '44';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="787vyc7kcz0pd"></a>787vyc7kcz0pd</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '110';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7uf35z2xnpp67"></a>7uf35z2xnpp67</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '106';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="868wdptu2wdsf"></a>868wdptu2wdsf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '100';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;


WORKLOAD REPOSITORY report for
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
P60SDB	      3889879926 p60sdb      PRIMARY	      EE      19.0.0.0.0 YES NO

Instance     Inst Num Startup Time
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
------------ -------- ---------------
p60sdb2 	    2 12-Feb-20 14:29

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
			v_sharing_schema := TRUE ;
---------------- -------------------------------- ---- ----- ------- ----------
mcracpoc2.exampl Linux x86 64-bit		    32	  16	   1	 251.90

		ELSE
	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
Begin Snap:	   66 12-Feb-20 14:56:36       373	 2.8	     2
			IF ( v_sharing_schema = TRUE ) THEN
  End Snap:	   67 12-Feb-20 15:11:52       118	  .6	     2
   Elapsed:		  15.28 (mins)
   DB Time:	       2,332.16 (mins)
				EXECUTE IMMEDIATE v_home_schema_str;

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
				v_sharing_schema := FALSE;
---------------------------------------- ------- ------ ------------------------
Interconnect Latency			  152.76 1.E+02 ADDM:3889879926_2_67
Top SQL Statements			  152.76  99.66 ADDM:3889879926_2_67
			END IF;
Global Cache Messaging			  152.76  76.22 ADDM:3889879926_2_67
Buffer Busy - Hot Objects		  152.76  41.68 ADDM:3889879926_2_67
Global Cache Busy			  152.76  11.78 ADDM:3889879926_2_67
		END IF;
Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
	END IF;
	     DB Time(s):	     152.7		 5.1	  0.74	   81.73
	      DB CPU(s):	       3.8		 0.1	  0.02	    2.02
      Background CPU(s):	       1.7		 0.1	  0.01	    0.00

      Redo size (bytes):       3,193,379.1	   106,164.1
  Logical read (blocks):	  26,890.5	       894.0
	  Block changes:	   7,860.9	       261.3
	-- Choose the random block. The v_do_hotspot handler that follows can override.
 Physical read (blocks):	  24,381.1	       810.6
Physical write (blocks):	   4,148.7	       137.9
       Read IO requests:	  24,307.1	       808.1
      Write IO requests:	   3,913.4	       130.1
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
	   Read IO (MB):	     190.5		 6.3
	  Write IO (MB):	      32.4		 1.1
	   IM scan rows:	       0.0		 0.0

Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	      28.7		 1.0
   RAC GC blocks served:	      17.9		 0.6
	     User calls:	       1.9		 0.1
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
	   Parses (SQL):	       3.6		 0.1
      Hard parses (SQL):	       0.1		 0.0
     SQL Work Area (MB):	       0.5		 0.0
		 Logons:	       0.0		 0.0
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
	    User logons:	       0.0		 0.0
	 Executes (SQL):	     206.8		 6.9
	      Rollbacks:	       0.0		 0.0
	   Transactions:	      30.1
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;

Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    Buffer Nowait %:  100.00	   Redo NoWait %:  100.00
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	    Buffer  Hit   %:	9.33	In-memory Sort %:  100.00
	    Library Hit   %:   99.81	    Soft Parse %:   96.50
	 Execute to Parse %:   98.28	     Latch Hit %:   99.98
	END IF;
Parse CPU to Parse Elapsd %:   15.87	 % Non-Parse CPU:   99.99
	  Flash Cache Hit %:	0.00


Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
Event				     Waits Time (sec)	   Wait   time Class
----------------------------------------------------------------------------------------------------------------------
------------------------------ ----------- ---------- --------- ------ --------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
gc current grant busy		   790,028	41.3K	52.31ms   29.5 Cluster
gc cr multi block grant 	   101,284	22.3K  220.04ms   15.9 Cluster
gc current grant 2-way		   170,202	  19K  111.65ms   13.6 Cluster
gc cr grant busy		   178,894	16.9K	94.47ms   12.1 Cluster
----------------------------------------------------------------------------------------------------------------------
gc current grant read-mostly i	   174,625	14.5K	82.89ms   10.3 Cluster
db file sequential read 	 3,923,373	11.5K	 2.94ms    8.2 User I/O

gc current grant congested	    21,021     4709.3  224.03ms    3.4 Cluster
db file parallel read		   279,233     3808.4	13.64ms    2.7 User I/O
DB CPU					       3457.3		   2.5
	IF  ( v_select_only_workload = TRUE ) THEN
free buffer waits		   364,344	 3408	 9.35ms    2.4 Configur

Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		-- handle case where user specified zero pct updates (a SELECT-only workload)
							  Avg		  Avg
					Total Wait	 Wait	% DB   Active
Wait Class		    Waits	Time (sec)	 Time	time Sessions
		v_do_update := FALSE;
---------------- ---------------- ---------------- ---------- ------ --------
Cluster 		1,458,980	   121,308    83.15ms	86.7	132.4
User I/O		4,283,242	    15,386     3.59ms	11.0	 16.8
		v_update_quota := TRUE ;
Configuration		  364,596	     3,539     9.71ms	 2.5	  3.9
DB CPU					     3,457		 2.5	  3.8
System I/O		  285,926	     1,387     4.85ms	 1.0	  1.5
	ELSE
Other			  182,951	       786     4.29ms	  .6	  0.9
Application		      220		52   234.24ms	  .0	  0.1
Commit			      231		16    67.84ms	  .0	  0.0
Concurrency		    5,148		16     3.03ms	  .0	  0.0
		IF ( v_update_only_workload = TRUE ) THEN
Network 		    1,493		 0    41.84us	  .0	  0.0

Host CPU
~~~~~~~~		  Load Average
			-- handle case where user specified 100% updates
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
----- ----- ------- --------- --------- --------- --------- --------- ---------
   32	 16	  1	21.01	   2.35       6.6      11.2	 15.1	   74.7
			v_do_update := TRUE;

Instance CPU
~~~~~~~~~~~~
	      % of total CPU for Instance:	18.5
			v_update_quota := FALSE;
	      % of busy  CPU for Instance:	73.2
  %DB time waiting for CPU - Resource Mgr:	 0.0

		ELSE
IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
~~~~~~~~~~		    ----------------- --------------- ---------------
	    Total Requests:	     28,280.5	     24,314.9	      3,965.6
	 Database Requests:	     28,220.5	     24,307.1	      3,913.4
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		 37.3		  2.6		 34.7
		Total (MB):		228.7		193.0		 35.7
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
	     Database (MB):		222.9		190.5		 32.4
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  5.4		  2.4		  3.0
	 Database (blocks):	     28,529.8	     24,381.1	      4,148.7
			IF ( v_update_quota = FALSE ) THEN
 Via Buffer Cache (blocks):	     28,528.6	     24,381.1	      4,147.5
	   Direct (blocks):		  1.2		  0.0		  1.2

Memory Statistics
				-- Handle case where user has set UPDATE_PCT to a valid value
~~~~~~~~~~~~~~~~~			Begin	       End
				 ------------ ------------
		  Host Mem (MB):    257,947.8	 257,947.8
				--
		   SGA use (MB):      9,664.0	   9,664.0
		   PGA use (MB):      3,389.3	   1,942.8
    % Host Mem used for SGA+PGA:	 5.06	      4.50

				-- We are doing updates during this run and quota has not been met yet
Cache Sizes			  Begin        End
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	 7,712M     7,712M  Std Block Size:	    8K
				-- We still vacillate until update quota has been met
	   Shared Pool Size:	 1,203M     1,209M	Log Buffer:    20,612K

	     In-Memory Area:	     0M 	0M

 Shared Pool Statistics        Begin	End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
				IF ( MOD(v_random_block,  2) = 0 ) THEN
	     Memory Usage %:   85.40   78.47
    % SQL with executions>1:   84.07   85.09
  % Memory for SQL w/exec>1:   85.51   83.93
					v_do_update := TRUE;


Time Model Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> DB Time represents total time in user calls
				ELSE
-> DB CPU represents CPU time of foreground processes
-> Total CPU Time represents foreground and background processes
-> Statistics including the word "background" measure background process
					v_do_update := FALSE;
   time, therefore do not contribute to the DB time statistic
-> Ordered by % of DB time in descending order, followed by Statistic Name

				END IF;
								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time
------------------------------------------ ------------------ ------- ----------
			ELSE
sql execute elapsed time			    139,909.8	100.0
DB CPU						      3,457.3	  2.5	    69.1
PL/SQL execution elapsed time				 13.1	   .0
parse time elapsed					  5.9	   .0
				-- UPDATE quota has been filled,  force drain some SELECTs
hard parse elapsed time 				  5.4	   .0
hard parse (sharing criteria) elapsed time		  4.3	   .0
sequence load elapsed time				  0.7	   .0
				v_do_update := FALSE;
hard parse (bind mismatch) elapsed time 		  0.4	   .0
connection management call elapsed time 		  0.0	   .0
repeated bind elapsed time				  0.0	   .0
			END IF;
DB time 					    139,929.6
background elapsed time 			      4,501.7
background cpu time				      1,548.9		    30.9
total CPU time					      5,006.1
		END IF;
			  ------------------------------------------------------

Operating System Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
	END IF;
-> *TIME statistic values are diffed.
   All others display actual values.  End Value is displayed if different
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name


Statistic				   Value	End Value
------------------------- ---------------------- ----------------
FREE_MEMORY_BYTES		 125,499,043,840  127,360,282,624
----------------------------------------------------------------------------------------------------------------------
INACTIVE_MEMORY_BYTES		   1,930,252,288    1,851,064,320
BUSY_TIME				 683,607
IDLE_TIME			       2,019,586
IOWAIT_TIME				 407,413
-- The type of SQL is now determined...execute it in the following section
SYS_TIME				 303,375
USER_TIME				 178,491
LOAD					      21		2
PHYSICAL_MEMORY_BYTES		 270,477,914,112
NUM_CPUS				      32
----------------------------------------------------------------------------------------------------------------------
NUM_CPU_CORES				      16
NUM_CPU_SOCKETS 			       1
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304

GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
TCP_RECEIVE_SIZE_MAX		       6,291,456
TCP_RECEIVE_SIZE_MIN			   4,096
	IF ( v_do_update != TRUE ) THEN
TCP_SEND_SIZE_DEFAULT			  16,384
TCP_SEND_SIZE_MAX		       4,194,304
TCP_SEND_SIZE_MIN			   4,096
			  ------------------------------------------------------
		--

Operating System Statistics - Detail	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
		-- Do a SELECT statement
--------------- -------- -------- -------- -------- -------- --------
12-Feb 14:56:36     21.0      N/A      N/A	N/A	 N/A	  N/A
12-Feb 15:11:52      2.3     25.3      6.6     11.2	74.7	 15.1
		-- Work out scan or random
			  ------------------------------------------------------

Foreground Wait Class			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
		IF  ( v_random_workload_only = TRUE ) THEN
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> ordered by wait time desc, waits desc
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
-> Captured Time accounts for	     102.8%  of Total DB time	  139,929.64 (s)
-> Total FG Wait Time:		 140,416.97 (s)  DB CPU time:	    3,457.25 (s)

				     %Time	Total Wait
			v_do_scan_query := FALSE;
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
-------------------- --------------- ----- --------------- ---------- ---------
Cluster 		   1,451,867	 0	   121,134    83.43ms	   86.6
			v_scan_query_quota := TRUE ;
User I/O		   4,204,634	 0	    15,340     3.65ms	   11.0
Configuration		     364,419	 0	     3,537     9.71ms	    2.5
DB CPU						     3,457		    2.5
Other			      11,627	28	       345    29.69ms	    0.2
		ELSE
Application			   8	 0		39  4912.37ms	    0.0
Commit				 230	 0		16    68.11ms	    0.0
Concurrency			 915	 2		 5     5.38ms	    0.0
System I/O			 100	 0		 0   799.35us	    0.0
			IF ( v_scan_workload_only = TRUE ) THEN
Network 			 512	 0		 0    11.00us	    0.0
			  ------------------------------------------------------


				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
Foreground Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
				v_do_scan_query := TRUE;
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				v_scan_query_quota := FALSE;
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
			ELSE
gc current grant busy	       790,028	       41,328	52.31ms     28.7   29.5
gc cr multi block grant        101,284	       22,287  220.04ms      3.7   15.9
gc current grant 2-way	       170,202	       19,004  111.65ms      6.2   13.6
				IF ( v_scan_query_quota = FALSE ) THEN
gc cr grant busy	       178,894	       16,900	94.47ms      6.5   12.1
gc current grant read-most     174,625	       14,474	82.89ms      6.3   10.3
db file sequential read      3,923,373	       11,525	 2.94ms    142.3    8.2
gc current grant congested	21,021		4,709  224.03ms      0.8    3.4
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
db file parallel read	       279,233		3,808	13.64ms     10.1    2.7
free buffer waits	       364,344		3,408	 9.35ms     13.2    2.4
gc current block lost		 2,401		1,459  607.46ms      0.1    1.0
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
gc cr multi block mixed 	 1,324		  556  419.94ms      0.0     .4
KJC: Wait for msg sends to	 1,538		  325  211.06ms      0.1     .2
gc cr block lost		   392		  256  652.63ms      0.0     .2
write complete waits		    73		  129 1771.76ms      0.0     .1
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
gc current block busy		 6,219		   56	 9.07ms      0.2     .0
enq: TX - row lock content	     8		   39 4912.37ms      0.0     .0
gc cr grant 2-way		 3,063		   30	 9.67ms      0.1     .0
						v_do_scan_query := TRUE;
gc cr block 2-way		 1,173		   23	19.52ms      0.0     .0
gc cr block busy		    95		   23  240.72ms      0.0     .0
log file sync			   230		   16	68.11ms      0.0     .0
gc buffer busy acquire		    49		   15  304.95ms      0.0     .0
					ELSE
ges message buffer allocat	    48		   12  249.77ms      0.0     .0
gc current block 2-way		   293		    5	17.50ms      0.0     .0
db file scattered read		 1,796		    5	 2.70ms      0.1     .0
						v_do_scan_query := FALSE;
gc current block congested	   271		    4	13.86ms      0.0     .0
library cache lock		    10		    4  368.62ms      0.0     .0
					END IF;
latch: gc element		 1,531		    2	 1.59ms      0.1     .0
gc cr failure			   315		    2	 7.41ms      0.0     .0
gc cr block congested		    44		    2	40.10ms      0.0     .0
latch free			 1,617		    2	 1.00ms      0.1     .0
				ELSE
latch: gcs resource hash	 1,607		    1  800.15us      0.1     .0
Disk file Mirror Read		    25		    1	48.58ms      0.0     .0
IPC send completion sync	    72		    1	15.59ms      0.0     .0
					-- Scan quota has been filled,	force drain some random access SELECTS
PX Deq: Slave Session Stat	    35		    1	29.73ms      0.0     .0
gc buffer busy release		     7		    1  142.49ms      0.0     .0
latch: cache buffers chain	   827		    1	 1.19ms      0.0     .0
gc cr grant congested		   162		    1	 5.48ms      0.0     .0
					v_do_scan_query := FALSE;
read by other session		    47		    0	 8.81ms      0.0     .0
Disk file operations I/O	   131		    0	 2.57ms      0.0     .0
latch: object queue header	   255		    0	 1.08ms      0.0     .0
				END IF;
latch: cache buffers lru c	   461		    0  502.49us      0.0     .0
row cache lock			    22	  95	    0	 9.94ms      0.0     .0
direct path write		     5		    0	40.35ms      0.0     .0
latch: redo allocation		   341		    0  540.86us      0.0     .0
			END IF;
lock deadlock retry		 2,385	 100	    0	62.92us      0.1     .0
control file sequential re	   100		    0  799.35us      0.0     .0
gc current multi block req	     5		    0	15.86ms      0.0     .0
		END IF;
latch: ges resource hash l	   152		    0  495.90us      0.0     .0
enq: PS - contention		    23	   4	    0	 2.45ms      0.0     .0
PGA memory operation		   573		    0	56.58us      0.0     .0

PX Deq: reap credit		   884	 100	    0	35.19us      0.0     .0
enq: WF - contention		    12		    0	 1.89ms      0.0     .0
library cache pin		     9		    0	 2.51ms      0.0     .0
CSS initialization		     2		    0	 8.26ms      0.0     .0

DLM cross inst call comple	    23		    0  599.70us      0.0     .0
enq: WT - contention		     4		    0	 2.76ms      0.0     .0
enq: TO - contention		     3		    0	 2.48ms      0.0     .0
		IF ( v_do_scan_query != TRUE ) THEN
CSS operation: action		     2		    0	 3.64ms      0.0     .0
enq: FB - contention		     4		    0	 1.67ms      0.0     .0
latch: shared pool		    11		    0  510.82us      0.0     .0

			SELECT COUNT(c2) INTO v_rowcnt
Foreground Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
			FROM cf1
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % DB
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
SQL*Net message to client	   508		    0	10.99us      0.0     .0

latch: enqueue hash chains	     6		    0  883.50us      0.0     .0
name-service call wait		     2		    0	 2.53ms      0.0     .0
latch: undo global data 	    13		    0  378.31us      0.0     .0
CSS operation: query		     6		    0  742.17us      0.0     .0
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
cursor: pin S			     3		    0	 1.17ms      0.0     .0
latch: call allocation		    12		    0  289.75us      0.0     .0
enq: HW - contention		     2		    0	 1.24ms      0.0     .0
		ELSE
buffer busy waits		    21		    0	98.05us      0.0     .0
enq: AF - task serializati	     1		    0	 1.62ms      0.0     .0
watchdog main loop		 1,510		4,530 3000.06ms      0.1
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
PX Deq: Msg Fragment		   291		    7	22.79ms      0.0
PX Deq: Execution Msg		   105		    4	33.96ms      0.0
PX Deq Credit: send blkd	    70		    3	40.38ms      0.0
SQL*Net message from clien	   509		    1	 2.21ms      0.0

			  ------------------------------------------------------


Background Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
log file parallel write 	17,141	   0	  689	40.17ms      0.6   15.3
db file parallel write	       143,847	   0	  671	 4.66ms      5.2   14.9
LGWR any worker group		 7,377	   0	  232	31.42ms      0.3    5.1
LGWR worker group ordering	 3,772	   0	   65	17.20ms      0.1    1.4
gc cr grant busy		   786	   0	   50	63.45ms      0.0    1.1
Disk file Mirror Read		 1,206	   0	   33	27.74ms      0.0     .7
gc cr block lost		    51	   0	   33  655.44ms      0.0     .7
LGWR all worker groups		   307	   0	   32  102.99ms      0.0     .7
DLM cross inst call comple	 1,284	   0	   28	21.94ms      0.0     .6
gc cr block 2-way		 3,927	   0	   27	 6.88ms      0.1     .6
IMR slave acknowledgement	 2,712	   0	   25	 9.34ms      0.1     .6
control file parallel writ	   469	   0	   21	44.67ms      0.0     .5
KJC: Wait for msg sends to	47,170	  99	   20  433.36us      1.7     .5
gc cr block busy		   149	   0	   20  134.80ms      0.0     .4
gc current grant busy		   254	   0	   16	64.20ms      0.0     .4
enq: TM - contention		    98	   0	   11  113.91ms      0.0     .2
gc current block busy		   289	   0	    9	32.73ms      0.0     .2
gc current block lost		    10	   0	    9  924.23ms      0.0     .2
gcs log flush sync		13,397	   0	    8  571.89us      0.5     .2
library cache lock		   351	   0	    7	19.19ms      0.0     .1
IPC send completion sync	   925	  98	    5	 5.49ms      0.0     .1
ASM IO for non-blocking po	74,427	   0	    5	66.22us      2.7     .1
control file sequential re	 5,333	   0	    4  752.53us      0.2     .1
db file sequential read 	 2,087	   0	    4	 1.80ms      0.1     .1
ASM file metadata operatio	 4,203	   0	    4  850.97us      0.2     .1
KSV master wait 		 1,704	  46	    3	 2.05ms      0.1     .1
gc current grant 2-way		    71	   0	    3	48.20ms      0.0     .1
enq: CF - contention		    71	  54	    3	40.17ms      0.0     .1
Sync ASM rebalance		   108	   0	    3	25.79ms      0.0     .1
reliable message		    56	   0	    3	45.75ms      0.0     .1
DFS lock handle 		   792	 100	    3	 3.17ms      0.0     .1
direct path write		    65	   0	    2	34.43ms      0.0     .0
library cache pin		   343	   0	    2	 6.01ms      0.0     .0
PX Deq: reap credit		60,348	 100	    2	29.65us      2.2     .0
gc cr disk read 		    31	   0	    2	49.19ms      0.0     .0
free buffer waits		   157	   0	    2	 9.67ms      0.0     .0
log file sequential read	   694	   0	    1	 1.98ms      0.0     .0
buffer busy waits		     3	   0	    1  456.17ms      0.0     .0
enq: RO - fast object reus	   114	   0	    1	 9.39ms      0.0     .0
latch: cache buffers lru c	 1,361	   0	    1  701.39us      0.0     .0
direct path write temp		    67	   0	    1	13.10ms      0.0     .0
db file async I/O submit       118,328	   0	    1	 7.14us      4.3     .0
latch: gcs resource hash	 1,425	   0	    1  565.85us      0.1     .0
gc current multi block req	     5	   0	    1  143.30ms      0.0     .0
latch free			 1,698	   0	    1  402.68us      0.1     .0
gc cr multi block mixed 	    13	   0	    1	52.41ms      0.0     .0
gc current block 2-way		 1,160	   0	    1  545.55us      0.0     .0
gc cr block congested		    83	   0	    0	 5.96ms      0.0     .0
gc current grant congested	    13	   0	    0	34.14ms      0.0     .0
kjctssqmg: quick message s	   933	 100	    0  450.56us      0.0     .0
enq: PS - contention		    25	  36	    0	16.10ms      0.0     .0
Disk file operations I/O	   703	   0	    0  533.41us      0.0     .0
gc cr failure			   251	   0	    0	 1.32ms      0.0     .0
ges message buffer allocat	     3	   0	    0  102.57ms      0.0     .0
AQ: RAC AQ Network		 9,017	 100	    0	30.65us      0.3     .0
CGS wait for IPC msg		 9,054	 100	    0	28.36us      0.3     .0
latch: gc element		   234	   0	    0	 1.04ms      0.0     .0
row cache lock			    31	  97	    0	 7.77ms      0.0     .0
oracle thread bootstrap 	     7	   0	    0	33.71ms      0.0     .0
LGWR wait for redo copy 	   200	   0	    0	  .96ms      0.0     .0

Background Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
gc buffer busy release		     2	   0	    0	92.80ms      0.0     .0
enq: FB - contention		     4	   0	    0	44.16ms      0.0     .0
enq: TD - KTF dump entries	     2	   0	    0	87.85ms      0.0     .0
latch: cache buffers chain	   138	   0	    0	 1.15ms      0.0     .0
latch: redo allocation		   145	   0	    0  777.12us      0.0     .0
ges inquiry response		    58	   0	    0	 1.58ms      0.0     .0
latch: object queue header	    52	   0	    0	 1.49ms      0.0     .0
latch: MGA shared context	    80	   0	    0  929.91us      0.0     .0
latch: redo writing		    19	   0	    0	 3.60ms      0.0     .0
PX Deq: Join ACK		    28	   0	    0	 2.39ms      0.0     .0
CSS operation: data query	    28	   0	    0	 2.25ms      0.0     .0
IPC group service call		   727	   0	    0	74.88us      0.0     .0
PGA memory operation		   938	   0	    0	54.05us      0.0     .0
ksxr poll remote instances	 1,287	 100	    0	31.46us      0.0     .0
gc current block congested	     7	   0	    0	 5.65ms      0.0     .0
CSS operation: data update	    31	   0	    0	 1.10ms      0.0     .0
enq: DW - contention		     6	 100	    0	 5.63ms      0.0     .0
latch: checkpoint queue la	    77	   0	    0  347.29us      0.0     .0
libcache interrupt action	 3,222	   0	    0	 7.68us      0.1     .0
lock escalate retry		     2	 100	    0	10.23ms      0.0     .0
os thread creation		     7	   0	    0	 2.84ms      0.0     .0
db file scattered read		    52	   0	    0  334.48us      0.0     .0
latch: MGA shared context	    44	   0	    0  358.55us      0.0     .0
gc cr grant 2-way		    10	   0	    0	 1.03ms      0.0     .0
row cache mutex 		     1	   0	    0	 9.40ms      0.0     .0
enq: TT - contention		     2	 100	    0	 4.66ms      0.0     .0
latch: ges resource hash l	    12	   0	    0  723.50us      0.0     .0
gc buffer busy acquire		     1	   0	    0	 7.81ms      0.0     .0
gc cr multi block grant 	     9	   0	    0  838.00us      0.0     .0
latch: messages 		    24	   0	    0  304.92us      0.0     .0
name-service call wait		     2	   0	    0	 3.59ms      0.0     .0
latch: MGA heap latch		    20	   0	    0  352.25us      0.0     .0
enq: TO - contention		     2	   0	    0	 3.37ms      0.0     .0
PX Deq: Slave Session Stat	    28	   0	    0  218.29us      0.0     .0
enq: DR - contention		     1	   0	    0	 5.95ms      0.0     .0
enq: SM -  contention		     3	   0	    0	 1.64ms      0.0     .0
log file sync			     1	   0	    0	 4.78ms      0.0     .0
enq: TA - contention		     3	   0	    0	 1.21ms      0.0     .0
PX Deq: Signal ACK EXT		    28	   0	    0  111.46us      0.0     .0
latch: kjci process contex	     7	   0	    0  434.14us      0.0     .0
CSS operation: action		     2	   0	    0	 1.45ms      0.0     .0
enq: WF - contention		     3	   0	    0  922.33us      0.0     .0
db file parallel read		     4	   0	    0  645.00us      0.0     .0
asynch descriptor resize	   272	 100	    0	 9.00us      0.0     .0
SQL*Net message to client	   254	   0	    0	 9.44us      0.0     .0
wait list latch free		     2	   0	    0	 1.16ms      0.0     .0
enq: HW - contention		     1	   0	    0	 2.16ms      0.0     .0
latch: active service list	     1	   0	    0	 1.66ms      0.0     .0
PX Idle Wait			    37	   0   58,891 1591.66 s      0.0
Space Manager: slave idle	 7,645	   0   32,436 4242.82ms      0.3
rdbms ipc message		59,511	  35   22,439  377.05ms      2.2
class slave wait		11,410	  76	6,603  578.72ms      0.4
wait for unread message on	 1,387	 100	2,715 1957.44ms      0.1
LMS CR slave timer	       268,852	   0	2,709	10.08ms      9.8
gcs yield cpu			93,241	 100	2,696	28.91ms      3.4
gcs remote message	     1,692,970	   0	2,037	 1.20ms     61.4
pmon timer			   603	 100	1,809 2999.96ms      0.0
ges remote message		29,850	   0	1,807	60.54ms      1.1
GCR sleep			 6,011	   0	1,806  300.43ms      0.2
DIAG idle wait			13,596	  74	1,802  132.52ms      0.5

Background Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
						Total
		v_scan_query_quota := FALSE;
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
		v_scan_queries_cnt := 0;
-------------------------- ----------- ----- -------- --------- -------- ------
		v_random_access_queries_cnt := 0;
Data Guard: Timer		     2	   0	1,200  600.00 s      0.0
LGWR worker group idle		12,806	   0	1,049	81.95ms      0.5
	END IF;
OFS idle			   302	 100	  906 3000.06ms      0.0
pman timer			   302	 100	  906 2999.75ms      0.0

ASM background timer		 3,199	   0	  904  282.66ms      0.1
heartbeat redo informer 	   904	   0	  904 1000.21ms      0.0
	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();
REPL Capture/Apply: RAC AQ	    15	 100	  904	60.28 s      0.0

lreg timer			   301	 100	  904 3002.65ms      0.0
ASM cluster membership cha	   516	  87	  903 1750.47ms      0.0
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
PING				   767	  19	  900 1173.94ms      0.0
dispatcher timer		    15	 100	  900	60.01 s      0.0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
AQPC idle			    30	 100	  900	30.00 s      0.0
SCM slave idle			 9,123	   0	  900	98.65ms      0.3
		-- iterations then set exit flag
Data Guard: Gap Manager 	    15	   0	  900	60.00 s      0.0
smon timer			     3	 100	  900  300.00 s      0.0
		v_stop_immediate := TRUE ;
Streams AQ: qmn coordinato	    65	   0	  896	13.79 s      0.0
	END IF;
Streams AQ: qmn slave idle	    33	   0	  896	27.15 s      0.0
PX Deq: Execute Reply		    28	   0	    1	27.10ms      0.0
END LOOP;
SQL*Net message from clien	   254	   0	    0	 1.61ms      0.0
PX Deq Credit: send blkd	   130	   0	    0	 1.77ms      0.0

PX Deq: Parse Reply		    28	   0	    0	 1.57ms      0.0
RMA: IPC0 completion sync	   977	   0	    0	22.89us      0.0
v_end_time := v_now ;
			  ------------------------------------------------------

v_now := DBMS_UTILITY.GET_TIME();

Wait Event Histogram			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000

-> Units for % of Total Waits:
v_total_time := v_end_time - v_begin_time ;
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
   value of null is truly 0
-> Ordered by Event (idle events last)
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;

						 % of Total Waits
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
				 -----------------------------------------------
			   Total

Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
END;</pre_sqltext></td></tr>
AQ: RAC AQ Network	    8917	  .0  87.8   6.8   3.4	 1.2	.4    .3
ASM IO for non-blocking p  74.2K    .0	62.1  13.2   4.1   5.0	 9.8   4.2   1.6
<tr><td scope="row" class='awrnc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrnc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
ASM file metadata operati   4143  27.2	 1.7  27.0  17.1   4.8	 6.5   3.5  12.3
AWR Flush		       6 100.0
CGS wait for IPC msg	    8956	 5.5  83.3   6.5   3.1	 1.1	.3    .2
CSS initialization	       2	      50.0			    50.0
CSS operation: action	       4	      25.0			    75.0
CSS operation: data query     28				       7.1  92.9
CSS operation: data updat     31					   100.0
CSS operation: query	       6  66.7	16.7				    16.7
DFS lock handle 	     792		.1		  .3  43.9  55.7
DLM cross inst call compl   1306	       1.9    .3    .2	  .6   1.2  95.7
<tr><td scope="row" class='awrc'><a class="awr" name="8fgdzmkchnn1a"></a>8fgdzmkchnn1a</td><td class='awrc'><pre_sqltext class="awr">INSERT /*+ APPEND	LEADING(@&quot;SEL$F5BB74E1&quot; &quot;H&quot;@&quot;SEL$2&quot; &quot;A&quot;@&quot;SEL$1&quot;)  USE_NL(@&quot;SEL$F5BB74E1&quot; &quot;A&quot;@&quot;SEL$1&quot;)	      */ INTO  WRH$_ACTIVE_SESSION_HISTORY  ( snap_id,	dbid,  instance_number ,  sample_id,  sample_time, sample_time_utc,  usecs_per_row ,  session_id,  session_serial#,  session_type ,  flags ,  user_id ,  sql_id,  sql_child_number,  sql_opcode,  force_matching_signature ,  top_level_sql_id,  top_level_sql_opcode ,  sql_plan_hash_value,  sql_full_plan_hash_value ,  sql_adaptive_plan_resolved ,  sql_plan_line_id ,  sql_plan_operation#,  sql_plan_options# ,	sql_exec_id,  sql_exec_start ,	plsql_entry_object_id,	plsql_entry_subprogram_id ,  plsql_object_id,	     plsql_subprogram_id ,  qc_instance_id,  qc_session_id,  qc_session_serial#,  px_flags ,  event_id,  seq#,	p1,  p2,  p3 ,	wait_time,  time_waited ,  blocking_session,  blocking_session_serial#,  blocking_inst_id ,  current_obj#,  current_file#,  current_block#,  current_row# ,  top_level_call#,  consumer_group_id,  xid,  remote_instance#,  time_model ,  service_hash,  program,  module,  action,  client_id,  machine,  port,    ecid ,  dbreplay_file_id,  dbreplay_call_counter ,	con_dbid,  per_pdb ,  tm_delta_time,  tm_delta_cpu_time,  tm_delta_db_time,  delta_time,  delta_read_io_requests,  delta_write_io_requests,  delta_read_io_bytes,  delta_write_io_bytes,  delta_interconnect_io_bytes,	pga_allocated,	temp_space_allocated ,	dbop_name,  dbop_exec_id  )  (SELECT /*+ PARAM('_module_action_old_length', 0) */:snap_id,  :dbid,  :instance_number ,	a.sample_id,  a.sample_time, a.sample_time_utc ,  a.usecs_per_row * :disk_filter_ratio ,  a.session_id,  a.session_serial#,  a.session_type ,  decode(a.flags,	0,  to_number(NULL),  a.flags) ,  a.user_id ,  a.sql_id,  a.sql_child_number,  a.sql_opcode,  a.force_matching_signature ,  a.top_level_sql_id,  a.top_level_sql_opcode ,  a.sql_plan_hash_value,  a.sql_full_plan_hash_value ,  a.sql_adaptive_plan_resolved ,  a.sql_plan_line_id ,  a.sql_plan_operation#,  a.sql_plan_options# ,  a.sql_exec_id,  a.sql_exec_start ,  a.plsql_entry_object_id,  a.plsql_entry_subprogram_id ,  a.plsql_object_id,	     a.plsql_subprogram_id ,  a.qc_instance_id,  a.qc_session_id,  a.qc_session_serial#,  a.px_flags ,	a.event_id,  a.seq#,  a.p1,  a.p2,  a.p3 ,  a.wait_time,  a.time_waited ,  a.blocking_session,	a.blocking_session_serial#,  a.blocking_inst_id ,  a.current_obj#,  a.current_file#,  a.current_block#,  a.current_row# ,  a.top_level_call#,  a.consumer_group_id,  a.xid,  a.remote_instance# ,  a.time_model ,  a.service_hash ,  substrb(a.program,  1,  64) ,  a.module,  a.action,  a.client_id,	a.machine,  a.port,  a.ecid ,  a.dbreplay_file_id,  a.dbreplay_call_counter ,  a.con_dbid,  a.con_id ,	decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_cpu_time),	decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_db_time),  decode(a.delta_time,  0,  to_number(null), 	  a.delta_time),  decode(a.delta_time,	0,  to_number(null),	       decode(a.delta_read_io_requests,  0,  to_number(null),		       a.delta_read_io_requests)),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_write_io_requests,  0,	to_number(null),		  a.delta_write_io_requests)),	decode(a.delta_time,  0,  to_number(null),	     decode(a.delta_read_io_bytes,  0,	to_number(null),		  a.delta_read_io_bytes)),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_write_io_bytes,  0,  to_number(null),		       a.delta_write_io_bytes)),  decode(a.delta_time,	0,  to_number(null),	       decode(a.delta_interconnect_io_bytes,  0,  to_number(null),		    a.delta_interconnect_io_bytes)),  decode(a.pga_allocated,  0,  to_number(null),  a.pga_allocated),	decode(a.pga_allocated,  0,  to_number(null),		decode(a.temp_space_allocated,	0,  to_number(null),		      a.temp_space_allocated)) ,  a.dbop_name,	a.dbop_Disk file Mirror Read	    1219					   100.0
Disk file operations I/O     826    .5	14.5  11.0  12.7   6.1	30.3  10.3  14.6
GCR CSS group query	      28	85.7  10.7	   3.6
GCR CSS group update	      28	82.1   7.1  10.7
IMR slave acknowledgement   2687	10.7  11.7   3.8  15.8	16.8   7.9  33.2
exec_id FROM	 x$ash a,	    (SELECT h.sample_addr,  h.sample_id 	  FROM	 x$kewash h	     WHERE		    ( (h.sample_id &gt;= :begin_flushing) and			(h.sample_id &lt;  :latest_sample_id) ) 	    and (nlssort(h.is_awr_sample, 'nls_sort=BINARY') =			nlssort('Y',  'nls_sort=BINARY'))	    ) shdr  WHERE (1 = 1)     and shdr.sample_addr     = a.sample_addr	   and shdr.sample_id	    = a.sample_id     and nlssort(a.need_awr_sample,  'nls_sort=BINARY') =	   nlssort('Y',  'nls_sort=BINARY')) </pre_sqltext></td></tr>
IPC group service call	     725   1.9	 3.9  19.3  31.2  34.6	 7.0   1.1   1.0
IPC send completion sync     987	      81.7   4.3   2.7	 3.1   2.1   6.1
<tr><td scope="row" class='awrnc'><a class="awr" name="8xsf93arbvbm5"></a>8xsf93arbvbm5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
KJC: Wait for msg sends t  47.1K	18.1  25.6  11.2  15.1	10.0   9.2  10.9
KSV master wait 	    1681	10.8  22.0   5.2   7.8	18.1   6.1  30.1
v_default_schema_number PLS_INTEGER := '107';
LGWR all worker groups	     310					   100.0
LGWR any worker group	    7174	  .2	.0    .1    .4	  .9   1.5  96.8
v_update_pct PLS_INTEGER := '15';
LGWR wait for redo copy      190   3.2	 4.2	.5   3.2   9.5	14.2  15.8  49.5
LGWR worker group orderin   3672    .9	  .8	.8   2.2   4.7	 3.3   2.9  84.3
v_max_loop_iterations PLS_INTEGER := '0';
PGA memory operation	    1503  20.3	28.7  19.6  12.4   7.7	 7.5   2.7   1.2
PX Deq: Join ACK	      28					   100.0
v_seconds_to_run PLS_INTEGER := '600';
PX Deq: Signal ACK EXT	      28	      42.9  10.7   3.6	35.7   3.6   3.6
v_scale PLS_INTEGER := '1048576';
PX Deq: Slave Session Sta     63	 3.2  11.1   4.8  23.8	19.0  11.1  27.0
v_work_unit PLS_INTEGER := '128' ;
PX Deq: reap credit	   60.6K	 1.3  88.3   6.0   2.8	 1.1	.3    .3
SQL*Net message to client    763  86.0	 9.3   1.4   1.8    .8	  .1	.3    .3
v_redo_stress  VARCHAR2(12) := 'LITE';
Sync ASM rebalance	     108   2.8	38.0   2.8    .9	 2.8   8.3  44.4
asynch descriptor resize     274  72.3	23.4   1.5   1.8    .7	  .4
v_hot_schema_modulus PLS_INTEGER := '0';
buffer busy waits	      24	12.5  29.2  12.5  12.5	12.5   4.2  16.7
buffer deadlock 	       2	     100.0
v_do_hotspot   VARCHAR(7) := 'FALSE';
control file parallel wri    465					   100.0
control file sequential r   5377	 6.2  14.0   1.1   1.8	32.9  22.5  21.5
v_hotspot_mb  NUMBER := '8';
cursor: pin S		       3					   100.0
db file async I/O submit    118K  94.2	 3.3	.6   1.1    .5	  .2	.1    .0
v_hotspot_offset_mb NUMBER := '16';
db file parallel read	  276.6K				  .0	.6  99.4
db file parallel write	  143.5K	  .0	.1   1.2   1.6	 2.1   3.1  92.0
v_hotspot_modulus  PLS_INTEGER := '3';
db file scattered read	    1848				 1.8  10.1  88.1
db file sequential read     3.8M			    .0	 1.6  31.4  67.0

direct path write	      69					   100.0
direct path write temp	      67					   100.0
v_sleep_modulus PLS_INTEGER := '0';
enq: AF - task serializat      1					   100.0
enq: CF - contention	      71				       4.2  95.8
v_sleep_min NUMBER := '.1';
enq: DR - contention	       1					   100.0
enq: DW - contention	       6					   100.0
v_sleep_max NUMBER := '.5';
enq: FB - contention	      10				      30.0  70.0
enq: HW - contention	       3					   100.0
v_scan_query_pct PLS_INTEGER := '0';
enq: PS - contention	      48			   2.1	      10.4  87.5
enq: RO - fast object reu    114				      20.2  79.8
v_obfuscate VARCHAR(5)	:= 'FALSE';
enq: SM -  contention	       3					   100.0
enq: TA - contention	       3					   100.0

enq: TD - KTF dump entrie      2				      50.0  50.0
enq: TM - contention	      96				       1.0  99.0

enq: TO - contention	       5					   100.0
enq: TT - contention	       2					   100.0
enq: TX - row lock conten      8					   100.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;

Wait Event Histogram			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:

   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
v_num_tmp NUMBER := 0;
   value of null is truly 0
-> Ordered by Event (idle events last)


						 % of Total Waits
v_loop_cnt PLS_INTEGER := 0;
				 -----------------------------------------------
			   Total
v_rowcnt PLS_INTEGER := 0;
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_updates_cnt PLS_INTEGER := 0;
enq: WF - contention	      15					   100.0
enq: WT - contention	       4					   100.0
v_selects_cnt PLS_INTEGER := 0;
free buffer waits	  364.5K	 1.2	.9    .2    .2	  .2	.3  97.0
gc buffer busy acquire	      50					   100.0

gc buffer busy release	      10					   100.0
gc cr block 2-way	    5077		      .1    .2	 1.1  30.3  68.4
v_random_access_queries_cnt PLS_INTEGER := 0;
gc cr block busy	     242					   100.0
gc cr block congested	     127					   100.0
gc cr block lost	     441					   100.0
v_scan_queries_cnt PLS_INTEGER := 0;
gc cr disk read 	      31				      29.0  71.0
gc cr failure		     566				  .2  26.9  73.0

gc cr grant 2-way	    3073		      .0    .4	  .2   2.9  96.5
v_do_scan_query BOOLEAN :=FALSE;
gc cr grant busy	  177.5K	  .0	.0    .0    .0	  .0	.2  99.8
gc cr grant congested	     162					   100.0
v_scan_query_quota  BOOLEAN := FALSE;
gc cr multi block grant   100.7K					.0 100.0
gc cr multi block mixed     1316					.3  99.7
v_scan_workload_only BOOLEAN := FALSE;
gc current block 2-way	    1450			    .1	 1.4  62.5  36.0
gc current block busy	    6330		      .0    .1	  .2   5.7  93.9
v_random_workload_only BOOLEAN := FALSE;
gc current block congeste    276					   100.0
gc current block lost	    2402					   100.0

gc current grant 2-way	  165.3K		      .0    .1	  .1	.6  99.3
gc current grant busy	  752.8K	  .0	.0    .0    .0	  .0	.1  99.8

gc current grant congeste  20.6K					.0 100.0
gc current grant read-mos 169.2K		.0		  .0	.0 100.0
v_random_block PLS_INTEGER := 1;
gc current multi block re     12					   100.0
gcs log flush sync	   12.4K	 3.8   5.1  10.5  17.0	16.7  17.3  29.6
v_tmp PLS_INTEGER;
gcs resource directory to      1 100.0
ges inquiry response	      58				       1.7  98.3
v_now PLS_INTEGER;
ges message buffer alloca     47	 8.5   4.3   2.1	       2.1  83.0
ges resource directory to     11  81.8	 9.1	     9.1
v_brick_wall PLS_INTEGER;
kjctssqmg: quick message     887	 7.0  24.0   2.7  10.1	11.0  17.9  27.2
ksxr poll remote instance   1272	      82.2  11.9   3.6	 1.9	.2    .2

v_begin_time PLS_INTEGER;
latch free		    3265	 8.5   1.7   2.5  12.4	26.6  23.2  25.1
v_end_time PLS_INTEGER;
latch: MGA heap latch	      20	10.0	    10.0  15.0	20.0  25.0  20.0
latch: MGA shared context     44	11.4   2.3   4.5  15.9	20.5  20.5  25.0
v_total_time PLS_INTEGER;
latch: MGA shared context     80	 6.3   2.5	   7.5	11.3  15.0  57.5
latch: active service lis      2			  50.0		    50.0
v_begin_cpu_tm PLS_INTEGER;
latch: cache buffers chai    950	10.2   1.4   3.4  10.4	15.5  16.2  42.9
latch: cache buffers lru    1805	17.0   2.6   4.5  14.7	18.8  14.1  28.2
v_end_cpu_tm PLS_INTEGER;
latch: call allocation	      13	23.1   7.7	  15.4	 7.7  23.1  23.1
latch: checkpoint queue l     77	11.7   1.3   5.2  23.4	19.5  18.2  20.8
v_total_cpu_tm PLS_INTEGER;
latch: enqueue hash chain      7			  14.3	14.3  14.3  57.1
latch: gc element	    1728	 2.9	.5   2.3   6.0	10.5  15.0  62.7

latch: gcs resource hash    2955	12.8   2.5   4.2  15.2	18.9  15.9  30.5
latch: ges resource hash     164	16.5   5.5   3.7  11.6	19.5  18.3  25.0
v_do_sleeps BOOLEAN := FALSE;
latch: kjci process conte      7	14.3			28.6  14.3  42.9
latch: messages 	      27	11.1   3.7  11.1  11.1	22.2  25.9  14.8
v_loop_control BOOLEAN := FALSE;
latch: object queue heade    302	 3.6   1.0   1.7   7.6	13.9  16.9  55.3
v_update_quota BOOLEAN := FALSE;
latch: redo allocation	     454	12.1	.9   3.5  15.6	24.0  17.2  26.7
latch: redo writing	      18			  27.8	 5.6   5.6  61.1
v_select_only_workload BOOLEAN := FALSE;
latch: shared pool	      11	 9.1		  18.2	27.3  18.2  27.3
latch: undo global data       13	       7.7   7.7  23.1	15.4   7.7  38.5
v_update_only_workload BOOLEAN := FALSE;
libcache interrupt action   3219  95.2	 1.3	.8   1.4    .7	  .4	.1    .1
library cache lock	     361			    .3	  .3   1.9  97.5
v_do_update BOOLEAN := FALSE;
library cache pin	     352				       2.8  97.2
library cache: bucket mut      3	66.7	    33.3
v_do_hot_schema BOOLEAN := FALSE;
library cache: mutex X	       7	14.3  28.6  14.3  28.6	      14.3
lock deadlock retry	    2388	 4.8  71.8   8.3   7.5	 3.8   2.1   1.7
v_stop_immediate BOOLEAN := FALSE;
lock escalate retry	       2					   100.0
log file parallel write    16.8K					   100.0

v_sharing_schema BOOLEAN := FALSE;
Wait Event Histogram			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_seed VARCHAR2(128);
-> Units for % of Total Waits:
   us is microseconds
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;
-> % of Total Waits: value of .0 indicates value was <.05%;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);
   value of null is truly 0

-> Ordered by Event (idle events last)

BEGIN
						 % of Total Waits
				 -----------------------------------------------

			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
log file sequential read     684	       2.3  26.2   2.9	14.8   3.4  50.4
EXECUTE IMMEDIATE v_home_schema_str;
log file sync		     232					   100.0
name-service call wait	       4					   100.0

oracle thread bootstrap        7					   100.0
os thread creation	       7					   100.0

read by other session	      47					   100.0
reliable message	      56					   100.0
row cache lock		      52					   100.0
IF ( v_hot_schema_modulus != 0 ) THEN
row cache mutex 	       3	33.3			      33.3  33.3
undo_retention publish re      3 100.0
	v_do_hot_schema := TRUE;
wait list latch free	       2					   100.0
write complete waits	      73					   100.0
AQPC idle		      30					   100.0
END IF;
ASM background timer	    3152				12.4   7.2  80.4
ASM cluster membership ch    510					   100.0

DIAG idle wait		   13.5K		      .1   1.0	  .6   1.7  96.5
Data Guard: Gap Manager       15					   100.0
IF ( v_sleep_modulus != 0 )	  THEN
Data Guard: Timer	       2					   100.0
	v_do_sleeps := TRUE;
END IF;

GCR sleep		    5947					   100.0
IF ( v_max_loop_iterations &gt; 0 )  THEN
LGWR worker group idle	   12.6K   2.3	 2.1	.8   3.4   8.1	 6.3   3.9  73.0
LMS CR slave timer	  266.1K					   100.0
	v_loop_control := TRUE ;
OFS idle		     298					   100.0
PING			     758		.5  17.7  15.8	 8.2   9.8  48.0
END IF;
PX Deq Credit: send blkd     200	       8.0   5.0    .5	 1.5  42.5  42.5
PX Deq: Execute Reply	      28				       7.1  92.9

PX Deq: Execution Msg	     105	       1.0   1.0	 1.0  13.3  83.8
PX Deq: Msg Fragment	     291   4.1		     7.6   3.4	 3.1  19.2  62.5
IF ( v_update_pct = 0 ) 	  THEN
PX Deq: Parse Reply	      28	 3.6			 7.1  21.4  67.9
PX Idle Wait		      35					   100.0
REPL Capture/Apply: RAC A     15					   100.0
	v_select_only_workload := TRUE;
RMA: IPC0 completion sync    968	41.9  50.2   4.5   2.1	  .9	.2    .1
SCM slave idle		    9025	  .0	      .0    .0	  .0	.1  99.8
END IF;
SQL*Net message from clie    763				       2.4  97.6
Space Manager: slave idle   7573	  .5	.1    .3   1.3	 1.1	.3  96.3

Streams AQ: qmn coordinat     65   1.5				35.4  10.8  52.3
Streams AQ: qmn slave idl     33   3.0					    97.0
IF ( v_update_pct = 100 )	  THEN
class slave wait	   11.3K	 3.2	.3   1.7   3.2	 1.8	.6  89.0
dispatcher timer	      15					   100.0
	v_update_only_workload := TRUE;
gcs remote message	    1.7M	 3.8   5.2  10.1  15.8	16.3  17.3  31.5
gcs yield cpu		   92.3K	 3.1	.2    .1    .1	  .0	.0  96.5
END IF;
ges remote message	   29.6K	  .6	.5    .2    .7	 1.7   2.8  93.5
heartbeat monitor sleep       23  95.7					     4.3

heartbeat redo informer      895					   100.0
lreg timer		     298					   100.0
IF ( v_scan_query_pct = 0 ) 	THEN
pman timer		     298					   100.0
pmon timer		     597					   100.0
	v_random_workload_only := TRUE;
rdbms ipc message	   58.7K    .0	10.8   1.0   1.5   2.8	 2.3   2.1  79.4
smon timer		       3					   100.0
END IF;
wait for unread message o   1371					   100.0
watchdog main loop	    1490					   100.0

			  ------------------------------------------------------


IF ( v_scan_query_pct = 100 ) 	THEN
Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
	v_scan_workload_only := TRUE;
-> Units for % of Total Waits:
   us is microseconds
END IF;
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;

   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

v_seconds_to_run := v_seconds_to_run * 100 ;
						 % of Total Waits
				 -----------------------------------------------

			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    8441			    .0	87.8   6.8   5.3

ASM IO for non-blocking p  58.9K		      .0  62.1	13.2   4.1  20.6
ASM file metadata operati   3022		.1  27.1   1.7	27.0  17.1  27.1
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
AWR Flush		       6		   100.0
CGS wait for IPC msg	    8533			   5.5	83.3   6.5   4.7
-- DBMS_RANDOM.seed (val =&gt; v_seed);

CSS initialization	       1				50.0	    50.0
CSS operation: action	       1				25.0	    75.0
v_begin_time := DBMS_UTILITY.GET_TIME();
CSS operation: query	       5		    66.7  16.7		    16.7
DFS lock handle 	       1				  .1	    99.9
v_now := v_begin_time ;
DLM cross inst call compl     29				 1.9	.3  97.8
Disk file operations I/O     320		      .5  14.5	11.0  12.7  61.3
v_brick_wall := v_now + v_seconds_to_run ;
GCR CSS group query	      27			  85.7	10.7	     3.6
GCR CSS group update	      28			  82.1	 7.1  10.7
IMR slave acknowledgement    706			  10.7	11.7   3.8  73.7
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
IPC group service call	     408		     1.9   3.9	19.3  31.2  43.7
IPC send completion sync     848				81.7   4.3  14.1

KJC: Wait for msg sends t  25.9K			  18.1	25.6  11.2  45.1
KSV master wait 	     638			  10.8	22.0   5.2  62.0
----------------------------------------------------------------------------------------------------------------------
LGWR any worker group	      23			    .2	  .0	.1  99.7
LGWR wait for redo copy       21		     3.2   4.2	  .5   3.2  88.9
-- The following WHILE loop is the master work loop control
LGWR worker group orderin    173		      .9    .8	  .8   2.2  95.3
PGA memory operation	    1217		    20.3  28.7	19.6  12.4  19.0
PX Deq: Signal ACK EXT	      15				42.9  10.7  46.4
----------------------------------------------------------------------------------------------------------------------
PX Deq: Slave Session Sta     12			   3.2	11.1   4.8  81.0
PX Deq: reap credit	   57.9K			   1.3	88.3   6.0   4.4
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
SQL*Net message to client    752		    86.0   9.3	 1.4   1.8   1.4
Sync ASM rebalance	      48		     2.8  38.0	 2.8	.9  55.6

asynch descriptor resize     271		    72.3  23.4	 1.5   1.8   1.1
buffer busy waits	      13			  12.5	29.2  12.5  45.8
buffer deadlock 	       2			       100.0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
control file sequential r   1149			   6.2	14.0   1.1  78.6
db file async I/O submit  117.1K		.1  94.1   3.3	  .6   1.1    .8
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
db file parallel write	    1846			    .0	  .1   1.2  98.7
free buffer waits	    8293			   1.2	  .9	.2  97.7
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
gc cr block 2-way	       3					.1  99.9
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
gc cr grant 2-way	       1					.0 100.0
gc cr grant busy	       7			    .0	  .0	.0 100.0
gc current block busy	       1					.0 100.0
			DBMS_LOCK.SLEEP(v_num_tmp);
gc current grant 2-way	      33					.0 100.0
gc current grant busy	      60			    .0	  .0	.0 100.0
		END IF;
gc current grant read-mos      2				  .0	   100.0
gcs log flush sync	    2397			   3.8	 5.1  10.5  80.6
	END IF;
gcs resource directory to      1		   100.0
ges message buffer alloca      7			   8.5	 4.3   2.1  85.1

ges resource directory to     11		    81.8   9.1	       9.1
kjctssqmg: quick message     299			   7.0	24.0   2.7  66.3
ksxr poll remote instance   1197				82.2  11.9   5.9
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
latch free		     416			   8.5	 1.7   2.5  87.3
latch: MGA heap latch	       4			  10.0	      10.0  80.0
latch: MGA shared context      8			  11.4	 2.3   4.5  81.8
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
latch: MGA shared context      7			   6.3	 2.5	    91.3
latch: cache buffers chai    142			  10.2	 1.4   3.4  85.1
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
latch: cache buffers lru     435			  17.0	 2.6   4.5  75.9
latch: call allocation	       4			  23.1	 7.7	    69.2
			v_sharing_schema := TRUE ;
latch: checkpoint queue l     14			  11.7	 1.3   5.2  81.8
latch: gc element	      99			   2.9	  .5   2.3  94.3
		ELSE
latch: gcs resource hash     577			  12.8	 2.5   4.2  80.5
latch: ges resource hash      42			  16.5	 5.5   3.7  74.4
			IF ( v_sharing_schema = TRUE ) THEN
latch: kjci process conte      1			  14.3		    85.7
latch: messages 	       7			  11.1	 3.7  11.1  74.1

				EXECUTE IMMEDIATE v_home_schema_str;
Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
				v_sharing_schema := FALSE;
-> Units for % of Total Waits:
   us is microseconds
			END IF;
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
		END IF;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

	END IF;
						 % of Total Waits
				 -----------------------------------------------

			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
	-- Choose the random block. The v_do_hotspot handler that follows can override.
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
latch: object queue heade     19			   3.6	 1.0   1.7  93.7
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
latch: redo allocation	      75			  12.1	  .9   3.5  83.5
latch: shared pool	       1			   9.1		    90.9
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
latch: undo global data        2				 7.7   7.7  84.6
libcache interrupt action   3179		.6  94.6   1.3	  .8   1.4   1.2
library cache: bucket mut      3			  66.7	      33.3
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
library cache: mutex X	       4			  14.3	28.6  14.3  42.9
lock deadlock retry	    2028			   4.8	71.8   8.3  15.1
log file sequential read     195				 2.3  26.2  71.5
	END IF;
row cache mutex 	       1			  33.3		    66.7
undo_retention publish re      3		   100.0

			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
----------------------------------------------------------------------------------------------------------------------
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle

-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
	IF  ( v_select_only_workload = TRUE ) THEN
-> Ordered by Event (only non-idle events are displayed)

		-- handle case where user specified zero pct updates (a SELECT-only workload)
						 % of Total Waits
				 -----------------------------------------------
		v_do_update := FALSE;
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
		v_update_quota := TRUE ;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	      26  99.7	  .2	.1    .0
	ELSE
ASM IO for non-blocking p   1151  98.4	 1.1	.3    .1    .0	  .0	.0
ASM file metadata operati    499  87.7	 1.1   1.6   2.9   4.2	 1.9	.4    .3
		IF ( v_update_only_workload = TRUE ) THEN
CGS wait for IPC msg	      15  99.8	  .1	.1    .0
CSS initialization	       1  50.0				      50.0
			-- handle case where user specified 100% updates
CSS operation: action	       3  25.0		    75.0
CSS operation: data query     26   7.1	28.6  28.6  21.4  14.3
			v_do_update := TRUE;
CSS operation: data updat     31	64.5  29.0   6.5
CSS operation: query	       1  83.3			  16.7
			v_update_quota := FALSE;
DFS lock handle 	     437  44.3	34.6  14.3   5.2   1.0	  .1	      .5
DLM cross inst call compl   1231   4.3	16.5  30.3  34.6  10.5	 2.3	.1   1.5
		ELSE
Disk file Mirror Read	    1002	12.1  28.1   5.1   9.8	13.6  13.5  17.8
Disk file operations I/O     119  85.4	 2.8   5.0   5.4    .7	  .5	      .2
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
IMR slave acknowledgement    731  66.8	 3.9  11.4   1.6   2.3	 3.7   4.4   6.0
IPC group service call	       7  99.0	  .8	.1
IPC send completion sync      58  93.9	 1.7   1.6   1.3   1.1	  .1	      .2
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
KJC: Wait for msg sends t   4372  89.1	 5.7   2.1   1.0    .3	  .1	.0   1.6
KSV master wait 	     498  69.9	 1.4   2.9   7.6  11.8	 5.2	.8    .5
			IF ( v_update_quota = FALSE ) THEN
LGWR all worker groups	      91		      .6   1.9	 6.1  20.6  70.6
LGWR any worker group	    5538   3.2	 2.7   5.8  12.2  18.4	21.4  16.7  19.6
				-- Handle case where user has set UPDATE_PCT to a valid value
LGWR wait for redo copy       94  50.5	20.5  14.7  11.6   2.1	  .5
LGWR worker group orderin   2759  15.7	 3.1   5.9  20.0  24.7	13.2   8.2   9.2
				--
PGA memory operation	      18  98.8	  .9	.3
PX Deq: Join ACK	      28	39.3  14.3  32.1  10.7	 3.6
				-- We are doing updates during this run and quota has not been met yet
PX Deq: Signal ACK EXT	       1  96.4	 3.6
PX Deq: Slave Session Sta     16  73.0	11.1   7.9   3.2   1.6	 1.6	     1.6
				-- We still vacillate until update quota has been met
PX Deq: reap credit	     161  99.7	  .1	.1    .0    .0	  .0
SQL*Net message to client      2  99.7	  .3

Sync ASM rebalance	      20  55.6	 7.4   3.7		 5.6   1.9  25.9
buffer busy waits	       1  83.3	 4.2				    12.5
				IF ( MOD(v_random_block,  2) = 0 ) THEN
control file parallel wri    358		     3.2  53.3	11.8   8.6  23.0
control file sequential r   1154  78.5	10.3   4.8   3.0   1.6	 1.2	.6    .0
					v_do_update := TRUE;
cursor: pin S		       3	     100.0
db file async I/O submit      51 100.0	  .0	.0    .0    .0
				ELSE
db file parallel read	  242.6K    .6	 1.8   6.8  11.1  38.0	17.4  12.5  11.7
db file parallel write	  130.5K   8.0	 8.0   8.3  49.5  19.8	 3.8   1.5   1.0
					v_do_update := FALSE;
db file scattered read	    1619  11.9	40.1  24.2  11.2   5.6	 3.4   3.1    .5
db file sequential read     2.5M  33.0	16.0   8.2  25.0  11.8	 3.3   2.3    .5
				END IF;
direct path write	      54	 1.4	    13.0   8.7	29.0  26.1  21.7
direct path write temp	      63		    31.3  59.7	 3.0	     6.0
			ELSE
enq: AF - task serializat      1	     100.0
enq: CF - contention	      61   4.2	32.4  16.9  26.8   8.5	       1.4   9.9
				-- UPDATE quota has been filled,  force drain some SELECTs
enq: DR - contention	       1			 100.0
enq: DW - contention	       6		    33.3  50.0	16.7
				v_do_update := FALSE;
enq: FB - contention	       6  30.0	10.0  30.0  10.0  10.0		    10.0
enq: HW - contention	       3	      66.7  33.3
			END IF;
enq: PS - contention	      39  12.5	45.8  12.5  12.5   6.3	 4.2	     6.3
enq: RO - fast object reu     88  20.2	44.7  13.2  13.2   4.4	 1.8	     2.6
		END IF;
enq: SM -  contention	       3	33.3  33.3  33.3
enq: TA - contention	       3	33.3  66.7
	END IF;
enq: TM - contention	      80   1.0	15.6  26.0  26.0   9.4	 5.2   1.0  15.6

enq: TO - contention	       5	      20.0  80.0
enq: TT - contention	       2	50.0			50.0
enq: WF - contention	      15	26.7  33.3  40.0
----------------------------------------------------------------------------------------------------------------------
enq: WT - contention	       4	      50.0	  50.0
free buffer waits	  353.6K   3.0	  .5	.9   1.5   2.7	91.4	.1    .0
-- The type of SQL is now determined...execute it in the following section
gc buffer busy acquire	      15	       2.0	   4.0	 4.0  20.0  70.0
gc buffer busy release	       4			  10.0	10.0  20.0  60.0
gc cr block 2-way	    3387  31.6	14.6  22.6  21.6   7.0	  .8	.2   1.7
----------------------------------------------------------------------------------------------------------------------
gc cr block busy	      90		.8   1.2   3.3	13.6  18.2  62.8


Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
	IF ( v_do_update != TRUE ) THEN
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
		--
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
		-- Do a SELECT statement
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

		-- Work out scan or random
						 % of Total Waits
				 -----------------------------------------------
			   Waits
		IF  ( v_random_workload_only = TRUE ) THEN
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
gc cr block congested	     123	       2.4  44.9  33.1	11.8   4.7   3.1
			v_do_scan_query := FALSE;
gc cr disk read 	      16  29.0	35.5	     6.5   3.2	 3.2   3.2  19.4
gc cr failure		     411  27.0	18.9  24.7  19.4   7.4	 1.6	.5    .4
			v_scan_query_quota := TRUE ;
gc cr grant 2-way	    2944   3.5	13.8  33.0  34.3  11.7	 2.9	.2    .7
gc cr grant busy	   98.1K    .2	 1.7   5.7  11.8  13.7	12.0  10.4  44.5
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
gc cr grant congested	     162	       3.7  32.1  49.4	14.8
		-- so reset flags and counters before continuing
gc cr multi block grant    14.9K    .0	  .0	.1    .7   1.9	 4.2   7.8  85.2
gc cr multi block mixed      420    .3	 1.2   4.7  11.2   6.9	 3.5   4.3  67.8
gc current block 2-way	     511  64.0	14.2   7.9   9.5   2.8	  .5	.3    .8
		--
gc current block busy	    5844   6.1	18.5  30.7  30.1  10.7	 1.9	.4   1.6
gc current block congeste    272	  .4   2.5  42.8  40.6	 9.4   2.9   1.4
gc current grant 2-way	   93.1K    .7	 2.7   6.9  10.8  13.1	12.2  10.6  43.0
		v_update_quota := FALSE;
gc current grant busy	  512.6K    .2	 2.1   8.1  15.6  16.1	14.0  12.1  31.7
gc current grant congeste   6386    .0	  .0	.2   1.9   6.1	11.0  11.8  69.0
gc current grant read-mos  95.2K    .0	  .9   5.1  11.7  13.9	13.0  11.7  43.7
		v_updates_cnt := 0;
gc current multi block re      8	41.7	     8.3	 8.3   8.3  33.3
gcs log flush sync	    3651  70.4	14.9   8.9   3.9   1.3	  .5	.1
ges inquiry response	      57   1.7	56.9  20.7  12.1   8.6
		v_selects_cnt := 0;
ges message buffer alloca      1  17.0			   2.1		    80.9
kjctssqmg: quick message     241  72.8	15.7   8.0   2.7    .6	  .1	.1
ksxr poll remote instance      2  99.8	  .1	.1
	END IF;
latch free		     821  74.9	11.8   7.1   3.2   1.8	  .8	.4
latch: MGA heap latch	       4  80.0	10.0  10.0
latch: MGA shared context     11  75.0	18.2   6.8

latch: MGA shared context     46  42.5	18.8  28.8  10.0
latch: active service lis      1  50.0	      50.0
latch: cache buffers chai    407  57.1	15.7  12.3   9.3   3.9	 1.4	.3    .1
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
latch: cache buffers lru     509  71.8	12.2   7.8   5.3   2.2	  .6	.1
latch: call allocation	       3  76.9	23.1
latch: checkpoint queue l     16  79.2	13.0   5.2   2.6
latch: enqueue hash chain      4  42.9	42.9	    14.3
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
latch: gc element	    1084  37.3	21.9  18.5  13.4   7.3	 1.4	.2
latch: gcs resource hash     900  69.5	12.7   9.3   5.4   2.4	  .6	.0
latch: ges resource hash      41  75.0	 7.9  11.0   5.5    .6
		-- so reset flags and counters
latch: kjci process conte      3  57.1	28.6  14.3
latch: messages 	       4  85.2	11.1   3.7
latch: object queue heade    167  44.7	20.2  20.5  10.3   3.0	 1.3
		v_scan_query_quota := FALSE;
latch: redo allocation	     121  73.3	11.0   9.9   3.3   1.8	  .7
		v_scan_queries_cnt := 0;
latch: redo writing	      11  38.9	      16.7  22.2   5.6	16.7
latch: shared pool	       3  72.7	 9.1  18.2
latch: undo global data        5  61.5	30.8   7.7
libcache interrupt action      3  99.9	  .1
		v_random_access_queries_cnt := 0;
library cache lock	     341   2.5	20.5  34.9  28.8   9.1	 1.1	     3.0
library cache pin	     336   2.8	22.4  29.8  31.3  10.8	  .9	.3   1.7
	END IF;
lock deadlock retry	      41  98.3	  .9	.6    .2    .0
lock escalate retry	       2			       100.0
log file parallel write    11.8K		      .4   4.5	37.0  28.4  29.6

log file sequential read     343  49.6	14.9   8.2  15.2   7.0	 2.9   1.9    .3
log file sync		      85			   4.7	13.4  18.5  63.4
name-service call wait	       4	      25.0  50.0  25.0
	v_loop_cnt := v_loop_cnt + 1 ;
oracle thread bootstrap        3				      42.9  57.1
os thread creation	       7	      14.3  85.7
read by other session	      45	14.9  12.8  17.0  27.7	12.8  10.6   4.3
	v_now := DBMS_UTILITY.GET_TIME();
reliable message	      54	17.9  19.6  37.5  12.5	 5.4   3.6   3.6
row cache lock		      50	 3.8  51.9  25.0  13.5	 1.9	     3.8
row cache mutex 	       1  66.7				33.3

wait list latch free	       2	     100.0
			  ------------------------------------------------------


	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
Wait Event Histogram (up to 2 sec)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   ms is milliseconds
		-- If this is a fixed-iteration count test cycle and we've hit the number of
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
		-- iterations then set exit flag
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
		v_stop_immediate := TRUE ;
				 -----------------------------------------------
			   Waits
			   64ms
	END IF;
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
ASM file metadata operati     11  99.7	  .2	.1
END LOOP;
DFS lock handle 	       4  99.5		      .3    .1	  .1
DLM cross inst call compl     13  98.5		.2    .3    .2	  .2	.2    .5
Disk file Mirror Read	     217  82.2	 7.9   4.3   4.3   1.1	  .3

Disk file operations I/O       2  99.8		.1    .1
IMR slave acknowledgement    161  94.0	 2.7   1.6   1.2    .4	  .1
IPC send completion sync       1  99.8				  .1	      .1
v_end_time := v_now ;
KJC: Wait for msg sends t    754  98.4		.0	   1.3	  .3	.0    .0
KSV master wait 	       8  99.5	  .3	.2
LGWR all worker groups	     219  29.4	33.9  16.1  11.6   7.1	 1.6	.3
v_now := DBMS_UTILITY.GET_TIME();
LGWR any worker group	    1405  80.4	 9.9   2.4   6.2    .8	  .2	.0
LGWR worker group orderin    338  90.8	 4.5   1.2   2.9    .5	  .1
PX Deq: Slave Session Sta      1  98.4				 1.6
Sync ASM rebalance	      28  74.1	 7.4  14.8   3.7
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
buffer busy waits	       3  87.5	 4.2			 8.3
control file parallel wri    107  77.0	 7.7   4.5   8.4   1.3	  .9	.2
control file sequential r      2 100.0	  .0

db file parallel read	   32.4K  88.3	10.0   1.5    .2    .0
db file parallel write	    1459  99.0	  .5	.2    .3    .0	  .0
db file scattered read	       9  99.5	  .4	.1
v_total_time := v_end_time - v_begin_time ;
db file sequential read    19.3K  99.5	  .5	.0    .0
direct path write	      15  78.3	 7.2   7.2   5.8   1.4
direct path write temp	       4  94.0	 3.0	     1.5   1.5
enq: CF - contention	       7  90.1	 1.4   1.4   2.8   1.4	 2.8
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
enq: FB - contention	       1  90.0		    10.0
enq: PS - contention	       3  93.8	       4.2   2.1
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
enq: RO - fast object reu      3  97.4		.9    .9	  .9
enq: TD - KTF dump entrie      1  50.0		    50.0
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
enq: TM - contention	      15  84.4	 1.0	     2.1   6.3	 3.1   3.1
enq: TX - row lock conten      3		    25.0  12.5		    62.5

free buffer waits	      35 100.0	  .0	.0    .0    .0	  .0
gc buffer busy acquire	      34  30.0	12.0  16.0  14.0   8.0	14.0   4.0   2.0
gc buffer busy release	       6  40.0	20.0	    30.0  10.0
END;</pre_sqltext></td></tr>
gc cr block 2-way	      87  98.3	  .3	.3    .4    .3	  .4	.1
gc cr block busy	     152  37.2	14.9  10.3  12.8  16.5	 6.6   1.7
gc cr block congested	       4  96.9	  .8	.8		 1.6
gc cr block lost	     441			  20.2	77.6   2.3
<tr><td scope="row" class='awrc'><a class="awr" name="8y9r8y4hxsjxb"></a>8y9r8y4hxsjxb</td><td class='awrc'><pre_sqltext class="awr">DECLARE
gc cr disk read 	       6  80.6	 6.5   6.5		 6.5
gc cr failure		       2  99.6				  .4
gc cr grant 2-way	      20  99.3		      .1	  .4	.1
v_default_schema_number PLS_INTEGER := '43';
gc cr grant busy	   78.7K  55.5	10.5  14.5  11.4   5.1	 2.1	.7    .2
gc cr multi block grant      85K  14.8	13.1  21.9  28.3  14.0	 4.4   2.7    .7
gc cr multi block mixed      879  32.2	 5.5   7.1   7.5   7.3	33.8   5.5   1.0
v_update_pct PLS_INTEGER := '15';
gc current block 2-way	      11  99.2	  .2	.1    .2    .1	  .2
gc current block busy	     103  98.4	  .4	.2    .3    .2	  .6	.0
gc current block congeste      4  98.6	  .4	      .4	  .7
gc current block lost	    2398			  25.9	73.4	.6    .2
v_max_loop_iterations PLS_INTEGER := '0';
gc current grant 2-way	   70.7K  57.0	 9.0  10.5  12.0   6.8	 3.7	.9    .2
gc current grant busy	  238.5K  68.3	10.8  11.2   6.6   1.8	  .9	.3    .1
gc current grant congeste  14.1K  31.0	10.7  14.1  18.0  14.2	 9.1   2.3    .6
v_seconds_to_run PLS_INTEGER := '600';
gc current grant read-mos  73.6K  56.3	11.3  14.1  10.9   5.1	 2.0	.1    .2
gc current multi block re      4  66.7	16.7	     8.3   8.3
ges message buffer alloca     38  19.1			  80.9
v_scale PLS_INTEGER := '1048576';
latch: cache buffers chai      1  99.9		.1
library cache lock	       9  97.0		     1.7    .8		      .6
library cache pin	       6  98.3		.3   1.1    .3
log file parallel write     4974  70.4	19.2   4.0   4.9   1.3	  .2	.0
v_work_unit PLS_INTEGER := '128' ;
log file sequential read       2  99.7	  .3
log file sync		     147  36.6	30.2  16.4  15.9    .9
oracle thread bootstrap        4  42.9	57.1
v_redo_stress  VARCHAR2(12) := 'LITE';

Wait Event Histogram (up to 2 sec)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
v_hot_schema_modulus PLS_INTEGER := '0';
   ms is milliseconds
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
v_do_hotspot   VARCHAR(7) := 'FALSE';
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

v_hotspot_mb  NUMBER := '8';
						 % of Total Waits
				 -----------------------------------------------
			   Waits
			   64ms
v_hotspot_offset_mb NUMBER := '16';
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
read by other session	       2  95.7	 4.3
v_hotspot_modulus  PLS_INTEGER := '3';
reliable message	       2  96.4				 1.8   1.8
row cache lock		       2  96.2		     3.8
write complete waits	      46			   6.8	12.3  43.8  37.0
			  ------------------------------------------------------



Wait Event Histogram (up to 2 min)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_sleep_modulus PLS_INTEGER := '0';
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
v_sleep_min NUMBER := '.1';
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
v_sleep_max NUMBER := '.5';

						 % of Total Waits
				 -----------------------------------------------
v_scan_query_pct PLS_INTEGER := '0';
			   Waits
			    4s
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_obfuscate VARCHAR(5)	:= 'FALSE';
DLM cross inst call compl      6  99.5	  .5
IPC send completion sync       1  99.9		.1
KJC: Wait for msg sends t     10 100.0	  .0	.0

enq: TX - row lock conten      5  37.5	12.5  12.5  37.5
gc buffer busy acquire	       1  98.0	 2.0
gc cr grant busy	     338  99.8	  .2	.0    .0
gc cr multi block grant      737  99.3	  .7	.1

gc cr multi block mixed       13  99.0	  .8	.2
gc current block lost	       4  99.8	  .2
gc current grant 2-way	     327  99.8	  .2	.0
gc current grant busy	     399  99.9	  .0	.0    .0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
gc current grant congeste    125  99.4	  .6	.0
gc current grant read-mos    314  99.8	  .2
library cache lock	       2  99.4	  .3	.3
write complete waits	      27  63.0	34.2   2.7
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
			  ------------------------------------------------------


Wait Event Histogram (up to 1 hr)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67


		  No data exists for this section of the report.
			  ------------------------------------------------------

v_num_tmp NUMBER := 0;

Service Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by DB Time


							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
---------------------------- ------------ ------------ ------------ ------------
p60sdb.example.com		  138,143	 3,394	     21,972	  24,158
v_loop_cnt PLS_INTEGER := 0;
SYS$BACKGROUND				9	     2		  3	      82
SYS$USERS				0	     0		  0	       0
p60sdbXDB				0	     0		  0	       0
			  ------------------------------------------------------
v_rowcnt PLS_INTEGER := 0;

Service Wait Class Stats		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
v_updates_cnt PLS_INTEGER := 0;
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds

Service Name
v_selects_cnt PLS_INTEGER := 0;
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time

--------- --------- --------- --------- --------- --------- --------- ---------
p60sdb.example.com
  4027613     14697	  886	      2 	0	  0	  509	      0
SYS$BACKGROUND
v_random_access_queries_cnt PLS_INTEGER := 0;
    78543	 46	 4092	     14 	0	  0	  720	      0
SYS$USERS
	0	  0	    0	      0 	0	  0	    0	      0
			  ------------------------------------------------------
v_scan_queries_cnt PLS_INTEGER := 0;

Top 10 Channel Waits			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Top 10 Channel Waits by wait time


Channel
----------------------------------------------------------------
	       Total
		Wait
v_do_scan_query BOOLEAN :=FALSE;
      Waits Time (s)  Avg Wait
----------- -------- ---------
kxfp control signal channel
	 14	   0	1.13ms
GEN0 ksbxic channel
v_scan_query_quota  BOOLEAN := FALSE;
	 15	   0	3.19ms
obj broadcast channel
	 22	   1   63.86ms
			  ------------------------------------------------------
v_scan_workload_only BOOLEAN := FALSE;


Top Process Types by Wait Class 	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> This table displays top process types ordered by wait class
v_random_workload_only BOOLEAN := FALSE;

Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi Cluster		   118,312.3

      Others (foregrounds + unclassi User I/O		    14,875.6
      Others (foregrounds + unclassi Configuration	     3,544.2

LG    Log Writer Slave		     System I/O 	       669.0
      Others (foregrounds + unclassi Other		       322.1
LGWR  Redo etc. 		     Other		       255.0
DBW0  db writer process 0	     System I/O 	       168.9
v_random_block PLS_INTEGER := 1;
DBW2  db writer process 2	     System I/O 	       168.3
DBW3  db writer process 3	     System I/O 	       167.2
DBW1  db writer process 1	     System I/O 	       166.6
v_tmp PLS_INTEGER;
MMON  Manageability Monitor Process  Cluster			75.1
M     MMON slave class 1	     Cluster			69.2
LG    Log Writer Slave		     Other			63.0
      Others (foregrounds + unclassi Application		39.3
v_now PLS_INTEGER;
MZ    MMON slave class 2	     Other			31.3
LMON  global enqueue service monitor Other			25.2
IMR   CGS IMR Slave		     User I/O			24.1
CKPT  checkpoint		     System I/O 		19.2
v_brick_wall PLS_INTEGER;
MZ    MMON slave class 2	     Cluster			17.3
LM    global cache service process   Other			16.2
			  ------------------------------------------------------



Top Process Types by CPU Used		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> This table displays top process types ordered by CPU time

v_begin_time PLS_INTEGER;
Proces Description		      CPU Time (sec)
------ ------------------------------ --------------
       Others (foregrounds + unclassi	     3,407.8
LM     global cache service process	     1,052.9
v_end_time PLS_INTEGER;
DBW0   db writer process 0			84.2
DBW3   db writer process 3			84.0
DBW1   db writer process 1			83.8
DBW2   db writer process 2			83.8
v_total_time PLS_INTEGER;
VKTM   Virtual Keeper of TiMe process		80.4
RS*    GCS RM Slave				22.0
M      MMON slave class 1			21.3
CR*    GCS CR Slave				20.1
v_begin_cpu_tm PLS_INTEGER;
LG     Log Writer Slave 			16.7
P      Parallel query slave			11.9
GCR    GCR Slaves (LMHB)			 8.5
DIA0   diagnosibility process 0 		 7.0
v_end_cpu_tm PLS_INTEGER;
IPC0   IPC Service 0				 6.7
LGWR   Redo etc.				 6.2
SCM    DLM Statistics Collection and		 4.8
RMS0   rac management server			 4.3
v_total_cpu_tm PLS_INTEGER;
LMD0   global enqueue service daemon		 3.6
CJQ0   Job Queue Coordinator			 3.5
			  ------------------------------------------------------



SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_do_sleeps BOOLEAN := FALSE;
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_loop_control BOOLEAN := FALSE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   96.0% of Total DB Time (s):	  139,930
-> Captured PL/SQL account for	 60.4% of Total DB Time (s):	     139,930

v_update_quota BOOLEAN := FALSE;
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	85,138.0	 25,721 	 3.31	60.8	1.8   10.3 35dumc2tpr9dv
v_select_only_workload BOOLEAN := FALSE;
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

v_update_only_workload BOOLEAN := FALSE;
	49,065.0	151,320 	 0.32	35.1	3.4   11.3 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

v_do_update BOOLEAN := FALSE;
	 2,132.5	      4        533.12	 1.5	1.0    6.1 6a32815hkfxqf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
v_do_hot_schema BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_stop_immediate BOOLEAN := FALSE;
	 2,132.2	      4        533.06	 1.5	1.0    6.1 fd4xkca0yhc14
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '54'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_sharing_schema BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,131.1	      4        532.78	 1.5	1.7    7.9 fm39d7d1vc1q3
v_seed VARCHAR2(128);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_home_schema_str VARCHAR2(80);
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,130.8	      4        532.70	 1.5	1.0    5.9 279tufy9n4jkw
Module: SQL*Plus
v_scratch VARCHAR2(200) ;
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,129.9	      4        532.47	 1.5	1.0    6.3 3s33p2a5kvj29
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
v_cpu_pct NUMBER(6, 3);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_my_serial NUMBER(16);
	 2,129.1	      4        532.28	 1.5	1.8    7.9 7uf35z2xnpp67
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	 2,129.0	      4        532.25	 1.5	1.8    7.9 8xsf93arbvbm5
BEGIN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	 2,128.6	      4        532.15	 1.5	1.8    6.2 g2r0fu8hz8rv8
Module: SQL*Plus
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
EXECUTE IMMEDIATE v_home_schema_str;
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   96.0% of Total DB Time (s):	  139,930
-> Captured PL/SQL account for	 60.4% of Total DB Time (s):	     139,930


	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
IF ( v_hot_schema_modulus != 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	v_do_hot_schema := TRUE;
	 2,128.4	      4        532.10	 1.5	1.8    7.2 1x4ta4a2yjbhw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


	 2,128.3	      4        532.08	 1.5	1.0    6.1 g1p4d7mfawjcs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
IF ( v_sleep_modulus != 0 )	  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	v_do_sleeps := TRUE;
	 2,128.3	      4        532.06	 1.5	1.0    5.9 9t7r85fxpxsnj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,128.1	      4        532.03	 1.5	1.7    7.2 czkhyr80ymm1z

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
IF ( v_max_loop_iterations &gt; 0 )  THEN
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,128.1	      4        532.02	 1.5	1.8    5.4 868wdptu2wdsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
	v_loop_control := TRUE ;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

END IF;
	 2,128.0	      4        532.00	 1.5	1.8    7.9 d8qmpacb3zab2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,127.9	      4        531.98	 1.5	1.8    7.9 42dfwspbnmyhn
IF ( v_update_pct = 0 ) 	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
	v_select_only_workload := TRUE;
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	 2,127.8	      4        531.95	 1.5	1.8    7.8 787vyc7kcz0pd
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_


SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
IF ( v_update_pct = 100 )	  THEN
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	v_update_only_workload := TRUE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   96.0% of Total DB Time (s):	  139,930
-> Captured PL/SQL account for	 60.4% of Total DB Time (s):	     139,930

	Elapsed 		 Elapsed Time
END IF;
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------


	 2,127.7	      4        531.92	 1.5	1.7    7.3 ds72ddrkju833
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
IF ( v_scan_query_pct = 0 ) 	THEN
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,127.6	      4        531.91	 1.5	1.8    7.4 0zzrz3xpx0yws
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
	v_random_workload_only := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

END IF;
	 2,127.5	      4        531.88	 1.5	1.8    7.3 9cw3txprjx7ky
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,127.4	      4        531.86	 1.5	1.8    5.5 9jnaa1bq11a61
Module: SQL*Plus
IF ( v_scan_query_pct = 100 ) 	THEN
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
	v_scan_workload_only := TRUE;

	 2,127.3	      4        531.82	 1.5	1.7    7.4 235c49djpygrk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


	 2,127.1	      4        531.78	 1.5	1.8    7.7 6x6suu2w4rznw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '109'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_seconds_to_run := v_seconds_to_run * 100 ;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	 2,126.9	      4        531.74	 1.5	1.8    7.6 4y7jh3c72wfyc
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '103'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
	 2,126.8	      4        531.71	 1.5	1.8    7.6 fjb8yj8xjzk39
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '83'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,126.7	      4        531.68	 1.5	1.7    7.7 0h8337uv1gm0g
Module: SQL*Plus
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
				ELSE

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
					v_do_update := FALSE;
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
				END IF;
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			ELSE
-> Captured SQL account for   96.0% of Total DB Time (s):	  139,930
				-- UPDATE quota has been filled,  force drain some SELECTs
-> Captured PL/SQL account for	 60.4% of Total DB Time (s):	     139,930

	Elapsed 		 Elapsed Time
				v_do_update := FALSE;
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

		END IF;
	 2,126.7	      4        531.68	 1.5	1.8    7.5 awt1bwgs30hx1
Module: SQL*Plus
	END IF;

DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
----------------------------------------------------------------------------------------------------------------------
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,126.6	      4        531.65	 1.5	1.7    8.1 2h5cgxr56bjm9
-- The type of SQL is now determined...execute it in the following section
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
----------------------------------------------------------------------------------------------------------------------
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,126.5	      4        531.63	 1.5	1.8    5.4 gx2wbjnsndywg

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	IF ( v_do_update != TRUE ) THEN
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

		--
	 2,126.3	      4        531.59	 1.5	1.8    7.7 0wn4rp6qcr6js
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
		-- Do a SELECT statement
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

		-- Work out scan or random
	 2,125.8	      4        531.46	 1.5	1.8    6.6 fqsx798y4df7a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF  ( v_random_workload_only = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 2,125.8	      4        531.44	 1.5	1.8    7.4 cyhr3uaphj8u4
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_do_scan_query := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			v_scan_query_quota := TRUE ;
	 2,125.2	      4        531.30	 1.5	1.8    5.4 59c9hcdmc2sp8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
		ELSE
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

			IF ( v_scan_workload_only = TRUE ) THEN
	 2,124.8	      4        531.19	 1.5	1.8    5.7 34znj9v2fzxst
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

				v_do_scan_query := TRUE;

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
				v_scan_query_quota := FALSE;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
			ELSE
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
				IF ( v_scan_query_quota = FALSE ) THEN
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   96.0% of Total DB Time (s):	  139,930
-> Captured PL/SQL account for	 60.4% of Total DB Time (s):	     139,930
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
	 2,124.7	      4        531.16	 1.5	1.8    5.6 05dgz376x2uah
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
						v_do_scan_query := TRUE;

	 1,591.8	      3        530.59	 1.1   17.2   51.4 dnhxxnnyzpq8g
Module: SQL*Plus
					ELSE
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
						v_do_scan_query := FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 1,591.3	      3        530.42	 1.1   11.3   54.2 7601qqtdhust2
Module: SQL*Plus
					END IF;
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
				ELSE
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 1,591.1	      3        530.36	 1.1   11.6   49.9 5hg6sgckh1tnx
Module: SQL*Plus
					-- Scan quota has been filled,	force drain some random access SELECTS
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
					v_do_scan_query := FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 1,590.4	      3        530.13	 1.1   11.7   53.2 dyyddzrz52ydb
				END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  ------------------------------------------------------
		END IF;


SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU

-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.4% of Total CPU Time (s):	     3,457
		IF ( v_do_scan_query != TRUE ) THEN
-> Captured PL/SQL account for	 75.4% of Total CPU Time (s):		3,457

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
			SELECT COUNT(c2) INTO v_rowcnt
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   1,676.8	151,320       0.01   48.5   49,065.0	3.4   11.3 bhdvtsvjhgvrh
Module: SQL*Plus
			FROM cf1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

   1,540.4	 25,721       0.06   44.6   85,138.0	1.8   10.3 35dumc2tpr9dv
Module: SQL*Plus
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


     273.5	      3      91.16    7.9    1,591.8   17.2   51.4 dnhxxnnyzpq8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
		ELSE

     185.6	      3      61.86    5.4    1,590.4   11.7   53.2 dyyddzrz52ydb
Module: SQL*Plus
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     184.1	      3      61.36    5.3    1,591.1   11.6   49.9 5hg6sgckh1tnx
Module: SQL*Plus
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     180.0	      3      59.99    5.2    1,591.3   11.3   54.2 7601qqtdhust2
Module: SQL*Plus
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
				v_scan_query_quota := TRUE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     127.9	      2      63.93    3.7    1,061.8   12.0   42.4 cmt7ct5kk8chb
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
		END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     119.7	      2      59.87    3.5    1,060.2   11.3   43.0 3cbmkwjys3g0s

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     102.0	      2      50.99    2.9    1,061.7	9.6   50.8 5yx3rhnrwptpu
	ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     101.2	      2      50.60    2.9    1,060.4	9.5   51.2 9yzrfgvuxws9b
		-- Do an UPDATE statement
Module: SQL*Plus

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
		--
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.4% of Total CPU Time (s):	     3,457
-> Captured PL/SQL account for	 75.4% of Total CPU Time (s):		3,457
		v_my_serial := v_my_serial + v_loop_cnt ;

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id

---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      50.9	      1      50.88    1.5      530.5	9.6   46.1 8y9r8y4hxsjxb
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Increment count of UPDATES and set UPDATE quota flag if needed
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

		--
      50.0	      1      49.95    1.4      529.7	9.4   40.8 34h3w6hykhk8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_updates_cnt := v_updates_cnt + 1;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      48.5	      1      48.48    1.4      530.6	9.1   50.5 9a7c8svm56haw

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.9	      4       9.73    1.1    2,127.4	1.8    5.5 9jnaa1bq11a61
			v_update_quota := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.5	      4       9.63    1.1    2,128.6	1.8    6.2 g2r0fu8hz8rv8
	END IF ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
----------------------------------------------------------------------------------------------------------------------
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.2	      4       9.55    1.1    2,124.7	1.8    5.6 05dgz376x2uah
Module: SQL*Plus
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
----------------------------------------------------------------------------------------------------------------------

      38.2	      4       9.55    1.1    2,126.9	1.8    7.6 4y7jh3c72wfyc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '103'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
      38.2	      4       9.54    1.1    2,126.5	1.8    5.4 gx2wbjnsndywg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
		--
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
		-- so reset flags and counters before continuing
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.4% of Total CPU Time (s):	     3,457
		--
-> Captured PL/SQL account for	 75.4% of Total CPU Time (s):		3,457

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		v_update_quota := FALSE;
---------- ------------ ---------- ------ ---------- ------ ------ -------------

      38.1	      4       9.54    1.1    2,127.8	1.8    7.8 787vyc7kcz0pd
		v_updates_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		v_selects_cnt := 0;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

      38.1	      4       9.53    1.1    2,129.0	1.8    7.9 8xsf93arbvbm5
	END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

      38.0	      4       9.50    1.1    2,124.8	1.8    5.7 34znj9v2fzxst
Module: SQL*Plus
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.0	      4       9.50    1.1    2,128.0	1.8    7.9 d8qmpacb3zab2
Module: SQL*Plus
		-- so reset flags and counters
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
		v_scan_query_quota := FALSE;

      37.8	      4       9.46    1.1    2,127.1	1.8    7.7 6x6suu2w4rznw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '109'; v_update_pct PLS_INTEGER :
		v_scan_queries_cnt := 0;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

		v_random_access_queries_cnt := 0;
      37.8	      4       9.46    1.1    2,125.2	1.8    5.4 59c9hcdmc2sp8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
	END IF;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_


      37.8	      4       9.45    1.1    2,127.9	1.8    7.9 42dfwspbnmyhn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	v_loop_cnt := v_loop_cnt + 1 ;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

      37.8	      4       9.45    1.1    2,126.7	1.8    7.5 awt1bwgs30hx1
	v_now := DBMS_UTILITY.GET_TIME();
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.7	      4       9.44    1.1    2,126.3	1.8    7.7 0wn4rp6qcr6js
Module: SQL*Plus
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
		-- If this is a fixed-iteration count test cycle and we've hit the number of
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		-- iterations then set exit flag
-> Captured SQL account for   93.4% of Total CPU Time (s):	     3,457
-> Captured PL/SQL account for	 75.4% of Total CPU Time (s):		3,457

    CPU 		  CPU per	    Elapsed
		v_stop_immediate := TRUE ;
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
	END IF;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

END LOOP;
      37.7	      4       9.43    1.1    2,125.8	1.8    6.6 fqsx798y4df7a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.7	      4       9.43    1.1    2,126.8	1.8    7.6 fjb8yj8xjzk39
v_end_time := v_now ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '83'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_now := DBMS_UTILITY.GET_TIME();
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.7	      4       9.42    1.1    2,125.8	1.8    7.4 cyhr3uaphj8u4
Module: SQL*Plus
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.6	      4       9.39    1.1    2,127.6	1.8    7.4 0zzrz3xpx0yws
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
v_total_time := v_end_time - v_begin_time ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
      37.5	      4       9.38    1.1    2,128.1	1.8    5.4 868wdptu2wdsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

      37.5	      4       9.38    1.1    2,128.4	1.8    7.2 1x4ta4a2yjbhw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
END;</pre_sqltext></td></tr>
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.5	      4       9.37    1.1    2,127.5	1.8    7.3 9cw3txprjx7ky
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
<tr><td scope="row" class='awrnc'><a class="awr" name="94qn6y14kw01g"></a>94qn6y14kw01g</td><td class='awrnc'><pre_sqltext class="awr">SELECT NVL(TO_NUMBER(EXTRACT(XMLTYPE(:B2 ),  :B1 )),  0) FROM DUAL</pre_sqltext></td></tr>
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

<tr><td scope="row" class='awrc'><a class="awr" name="9a7c8svm56haw"></a>9a7c8svm56haw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
      37.3	      4       9.31    1.1    2,129.1	1.8    7.9 7uf35z2xnpp67
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_


SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.4% of Total CPU Time (s):	     3,457
-> Captured PL/SQL account for	 75.4% of Total CPU Time (s):		3,457

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
      37.2	      4       9.29    1.1    2,127.7	1.7    7.3 ds72ddrkju833
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_default_schema_number PLS_INTEGER := '38';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.2	      4       9.29    1.1    2,128.1	1.7    7.2 czkhyr80ymm1z
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_update_pct PLS_INTEGER := '15';
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.1	      4       9.28    1.1    2,131.1	1.7    7.9 fm39d7d1vc1q3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
v_max_loop_iterations PLS_INTEGER := '0';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.1	      4       9.28    1.1    2,126.7	1.7    7.7 0h8337uv1gm0g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
v_seconds_to_run PLS_INTEGER := '600';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.1	      4       9.28    1.1    2,126.6	1.7    8.1 2h5cgxr56bjm9
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      37.0	      4       9.26    1.1    2,127.3	1.7    7.4 235c49djpygrk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
v_scale PLS_INTEGER := '1048576';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_work_unit PLS_INTEGER := '128' ;
			  ------------------------------------------------------


SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
v_redo_stress  VARCHAR2(12) := 'LITE';
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_hot_schema_modulus PLS_INTEGER := '0';
-> Captured SQL account for   92.9% of Total User I/O Wait Time (s):	      15
-> Captured PL/SQL account for	 71.7% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
v_do_hotspot   VARCHAR(7) := 'FALSE';
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   8,758.6	 25,721       0.34   56.9   85,138.0	1.8   10.3 35dumc2tpr9dv
Module: SQL*Plus
v_hotspot_mb  NUMBER := '8';
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

   5,524.9	151,320       0.04   35.9   49,065.0	3.4   11.3 bhdvtsvjhgvrh
Module: SQL*Plus
v_hotspot_offset_mb NUMBER := '16';
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     863.1	      3     287.70    5.6    1,591.3   11.3   54.2 7601qqtdhust2
v_hotspot_modulus  PLS_INTEGER := '3';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     846.0	      3     282.01    5.5    1,590.4   11.7   53.2 dyyddzrz52ydb
Module: SQL*Plus
v_sleep_modulus PLS_INTEGER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_sleep_min NUMBER := '.1';

     817.6	      3     272.55    5.3    1,591.8   17.2   51.4 dnhxxnnyzpq8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
v_sleep_max NUMBER := '.5';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_scan_query_pct PLS_INTEGER := '0';
     794.0	      3     264.66    5.2    1,591.1   11.6   49.9 5hg6sgckh1tnx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_obfuscate VARCHAR(5)	:= 'FALSE';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     542.4	      2     271.22    3.5    1,060.4	9.5   51.2 9yzrfgvuxws9b

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     539.1	      2     269.55    3.5    1,061.7	9.6   50.8 5yx3rhnrwptpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
     456.1	      2     228.07    3.0    1,060.2   11.3   43.0 3cbmkwjys3g0s
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     449.9	      2     224.93    2.9    1,061.8   12.0   42.4 cmt7ct5kk8chb
Module: SQL*Plus
v_num_tmp NUMBER := 0;

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.9% of Total User I/O Wait Time (s):	      15
v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
-> Captured PL/SQL account for	 71.7% of Total User I/O Wait Time (s):
	v_random_workload_only := TRUE;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
END IF;
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
IF ( v_scan_query_pct = 100 ) 	THEN
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     267.9	      1     267.93    1.7      530.6	9.1   50.5 9a7c8svm56haw
	v_scan_workload_only := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


     244.8	      1     244.79    1.6      530.5	9.6   46.1 8y9r8y4hxsjxb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
v_seconds_to_run := v_seconds_to_run * 100 ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


     216.1	      1     216.09    1.4      529.7	9.4   40.8 34h3w6hykhk8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     172.6	      4      43.14    1.1    2,126.6	1.7    8.1 2h5cgxr56bjm9
Module: SQL*Plus
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
-- DBMS_RANDOM.seed (val =&gt; v_seed);
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     169.1	      4      42.29    1.1    2,131.1	1.7    7.9 fm39d7d1vc1q3

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_begin_time := DBMS_UTILITY.GET_TIME();
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_now := v_begin_time ;
     168.7	      4      42.18    1.1    2,128.0	1.8    7.9 d8qmpacb3zab2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
v_brick_wall := v_now + v_seconds_to_run ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
     168.2	      4      42.05    1.1    2,127.9	1.8    7.9 42dfwspbnmyhn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_
----------------------------------------------------------------------------------------------------------------------

     167.9	      4      41.97    1.1    2,129.1	1.8    7.9 7uf35z2xnpp67
Module: SQL*Plus
-- The following WHILE loop is the master work loop control
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
----------------------------------------------------------------------------------------------------------------------
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.9% of Total User I/O Wait Time (s):	      15
-> Captured PL/SQL account for	 71.7% of Total User I/O Wait Time (s):
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
---------- ------------ ---------- ------ ---------- ------ ------ -------------

     167.2	      4      41.80    1.1    2,129.0	1.8    7.9 8xsf93arbvbm5
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

     165.6	      4      41.40    1.1    2,127.8	1.8    7.8 787vyc7kcz0pd
			DBMS_LOCK.SLEEP(v_num_tmp);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		END IF;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	END IF;
     164.2	      4      41.05    1.1    2,126.3	1.8    7.7 0wn4rp6qcr6js
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

     163.5	      4      40.88    1.1    2,127.1	1.8    7.7 6x6suu2w4rznw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '109'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

     162.8	      4      40.69    1.1    2,126.7	1.7    7.7 0h8337uv1gm0g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     162.6	      4      40.64    1.1    2,126.9	1.8    7.6 4y7jh3c72wfyc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '103'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

     162.2	      4      40.56    1.1    2,126.8	1.8    7.6 fjb8yj8xjzk39
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '83'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     159.5	      4      39.89    1.0    2,126.7	1.8    7.5 awt1bwgs30hx1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     158.2	      4      39.56    1.0    2,127.3	1.7    7.4 235c49djpygrk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.9% of Total User I/O Wait Time (s):	      15
-> Captured PL/SQL account for	 71.7% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     157.6	      4      39.39    1.0    2,125.8	1.8    7.4 cyhr3uaphj8u4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     157.1	      4      39.28    1.0    2,127.6	1.8    7.4 0zzrz3xpx0yws
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     154.8	      4      38.69    1.0    2,127.5	1.8    7.3 9cw3txprjx7ky
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     154.3	      4      38.58    1.0    2,127.7	1.7    7.3 ds72ddrkju833
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     154.2	      4      38.55    1.0    2,128.1	1.7    7.2 czkhyr80ymm1z
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  ------------------------------------------------------


SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   24,645,118
-> Captured SQL account for   95.1% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
 19,743,481	151,320        130.5   80.1   49,065.0	 3.4  11.3 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  3,660,570	 25,721        142.3   14.9   85,138.0	 1.8  10.3 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

  3,505,669	      3  1,168,556.3   14.2    1,591.8	17.2  51.4 dnhxxnnyzpq8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  2,027,314	      3    675,771.3	8.2    1,590.4	11.7  53.2 dyyddzrz52ydb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  2,014,757	      3    671,585.7	8.2    1,591.1	11.6  49.9 5hg6sgckh1tnx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,951,007	      3    650,335.7	7.9    1,591.3	11.3  54.2 7601qqtdhust2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,385,986	      2    692,993.0	5.6    1,061.8	  12  42.4 cmt7ct5kk8chb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,279,446	      2    639,723.0	5.2    1,060.2	11.3	43 3cbmkwjys3g0s
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,033,043	      2    516,521.5	4.2    1,061.7	 9.6  50.8 5yx3rhnrwptpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,018,963	      2    509,481.5	4.1    1,060.4	 9.5  51.2 9yzrfgvuxws9b
Module: SQL*Plus

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   24,645,118
-> Captured SQL account for   95.1% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    502,839	      1    502,839.0	2.0	 530.5	 9.6  46.1 8y9r8y4hxsjxb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    491,676	      1    491,676.0	2.0	 529.7	 9.4  40.8 34h3w6hykhk8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    476,472	      1    476,472.0	1.9	 530.6	 9.1  50.5 9a7c8svm56haw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  ------------------------------------------------------


SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  22,345,229
-> Captured SQL account for   95.7% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
 18,280,881	151,320      120.8   81.8   49,065.0	3.4   11.3 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  3,092,980	 25,721      120.3   13.8   85,138.0	1.8   10.3 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

  2,831,723	      3  943,907.7   12.7    1,591.8   17.2   51.4 dnhxxnnyzpq8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,806,386	      3  602,128.7    8.1    1,590.4   11.7   53.2 dyyddzrz52ydb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,796,019	      3  598,673.0    8.0    1,591.1   11.6   49.9 5hg6sgckh1tnx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,739,632	      3  579,877.3    7.8    1,591.3   11.3   54.2 7601qqtdhust2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,261,388	      2  630,694.0    5.6    1,061.8   12.0   42.4 cmt7ct5kk8chb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,169,408	      2  584,704.0    5.2    1,060.2   11.3   43.0 3cbmkwjys3g0s
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    963,457	      2  481,728.5    4.3    1,061.7	9.6   50.8 5yx3rhnrwptpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    952,906	      2  476,453.0    4.3    1,060.4	9.5   51.2 9yzrfgvuxws9b
Module: SQL*Plus

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  22,345,229
-> Captured SQL account for   95.7% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    478,547	      1  478,547.0    2.1      530.5	9.6   46.1 8y9r8y4hxsjxb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    468,770	      1  468,770.0    2.1      529.7	9.4   40.8 34h3w6hykhk8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    453,923	      1  453,923.0    2.0      530.6	9.1   50.5 9a7c8svm56haw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  ------------------------------------------------------


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb2  Snaps: 66-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      22,277,415
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 22,277,415
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
  2,831,723   2,831,723 	 3    943,907.7    0.0	 12.7 dnhxxnnyzpq8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,806,386   1,806,386 	 3    602,128.7    0.0	  8.1 dyyddzrz52ydb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,796,019   1,796,019 	 3    598,673.0    0.0	  8.1 5hg6sgckh1tnx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,739,632   1,739,632 	 3    579,877.3    0.0	  7.8 7601qqtdhust2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,261,388   1,261,388 	 2    630,694.0    0.0	  5.7 cmt7ct5kk8chb
Module: SQL*Plus
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

  1,169,408   1,169,408 	 2    584,704.0    0.0	  5.2 3cbmkwjys3g0s
Module: SQL*Plus
			v_sharing_schema := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

		ELSE
    963,457	963,457 	 2    481,728.5    0.0	  4.3 5yx3rhnrwptpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_sharing_schema = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    952,906	952,906 	 2    476,453.0    0.0	  4.3 9yzrfgvuxws9b
Module: SQL*Plus
				EXECUTE IMMEDIATE v_home_schema_str;
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
				v_sharing_schema := FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    478,547	478,547 	 1    478,547.0    0.0	  2.1 8y9r8y4hxsjxb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
			END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb2  Snaps: 66-
-> UnOptimized Read Reqs = Physical Read Reqs -
		END IF;
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      22,277,415
	END IF;
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 22,277,415
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total


UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
	-- Choose the random block. The v_do_hotspot handler that follows can override.
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    468,770	468,770 	 1    468,770.0    0.0	  2.1 34h3w6hykhk8g
Module: SQL*Plus
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


    453,923	453,923 	 1    453,923.0    0.0	  2.0 9a7c8svm56haw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  ------------------------------------------------------


		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
SQL ordered by Executions		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	     189,562
-> Captured SQL account for   94.7% of Total

		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
     151,320	     151,361		1.0   49,065.0	 3.4  11.3 bhdvtsvjhgvrh
Module: SQL*Plus
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

      25,721	   3,266,567	      127.0   85,138.0	 1.8  10.3 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
	END IF;
< :B1 )

	 497		   8		0.0	   0.0	95.4	 0 87gaftwrm2h68
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1


	 253		 253		1.0	   0.2	  81	 0 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

	 211		 211		1.0	   2.4	 4.2	.4 3dbzmtf9ahvzt
----------------------------------------------------------------------------------------------------------------------
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

	 179		 179		1.0	   1.3	 3.9   1.3 fn5s5p6hr6702
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	 156		 156		1.0	   0.7	 7.6	 0 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual
----------------------------------------------------------------------------------------------------------------------

	 124		 124		1.0	   4.4	   1	.3 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ

ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	 111		   0		0.0	   0.0	86.3	 0 0gx3b09qrx9f5
select obj#,index# from oid$ where user#=:1 and oid$=:2

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
	  99		  99		1.0	   0.0	  69	 0 d96u6hzrz93x5

select con_id from v$containers where open_mode in ('READ WRITE', 'READ ONLY
')

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
			  ------------------------------------------------------


SQL ordered by Parse Calls		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
				v_scan_query_quota := TRUE;
-> Total Parse Calls:		3,259
-> Captured SQL account for   52.0% of Total

			END IF;
			    % Total
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
		END IF;
	 253	      253      7.76 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;


	 211	      211      6.47 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

	ELSE
	 179	      179      5.49 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)
		--

	 156	      156      4.79 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

		-- Do an UPDATE statement
	  99	       99      3.04 d96u6hzrz93x5
select con_id from v$containers where open_mode in ('READ WRITE', 'READ ONLY
')

		--
	  98	       98      3.01 aktbxfjwnzgmu
update WRM$_DATABASE_INSTANCE set last_ash_sample_id = :last_ash_sample_id wh
ere instance_number = :instance_number and dbid = :dbid a

nd startup_time = (select max(startup_time) from WRM$_
DATABASE_INSTANCE where instance_number = :instance_numb

		v_my_serial := v_my_serial + v_loop_cnt ;
	  96	       96      2.95 8fgdzmkchnn1a
INSERT /*+ APPEND LEADING(@"SEL$F5BB74E1" "H"@"SEL$2" "A"@"SEL$1") USE_NL(@"SE
L$F5BB74E1" "A"@"SEL$1") */ INTO WRH$_ACTIVE_SESSION_HISTORY ( snap_id

, dbid, instance_number , sample_id, sample_time,sample_time_utc, usecs_per_row
, session_id, session_serial#, session_type , flags , user_id , sql_id, sql_chil

	  93	       93      2.85 f7xnvp44nukp7
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)
		--

	  82	       82      2.52 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us
ing dual on (
		-- Increment count of UPDATES and set UPDATE quota flag if needed
iu.obj# = :objn) when mat
ched then update

	  75	      124      2.30 f3ww8rgva3hrs
		--
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
		v_updates_cnt := v_updates_cnt + 1;
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	  57	       57      1.75 2p9fv35c7zxtg

select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
wcnt, 0) rowcnt, o.pobjn pobjn from
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN

	  49	       49      1.50 bxpcry2tpc217
select /*+ opt_param('parallel_execution_enabled',
			v_update_quota := TRUE;
 'false') EXEC_FROM_DBMS_XPLAN */ * from gv$all_sql_plan where 1=0


SQL ordered by Parse Calls		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
		END IF;
-> Total Parse Calls:		3,259
-> Captured SQL account for   52.0% of Total

			    % Total
	END IF ;
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
	  48	       48      1.47 6wvzvgvg6qsyb
INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
----------------------------------------------------------------------------------------------------------------------
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)

	  46	       46      1.41 42mkua34ay6bc
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
INSERT INTO wri$_adv_addm_fdg ( TASK_ID, FINDING_ID, RULE_ID, ADDM_FDG_ID, ADDM_
SEQ, DATABASE_TIME, ACTIVE_SESSIONS, PERC_ACTIVE_SESS, IS_AGGREGATE, METER_L
EVEL, QUERY_TYPE, QUERY_IS_APPROX, QUERY_ARGS) VALUES ( :tid, :kea_id, :rid, :
----------------------------------------------------------------------------------------------------------------------
fdg_id, :keh_id, :dbt, round(:dbt / (1000000 * :sint) , 2), ro

	  38	      111      1.17 0gx3b09qrx9f5

select obj#,index# from oid$ where user#=:1 and oid$=:2

	  37	       37      1.14 1rpgk59t8pvs6
 begin dbms_output.get_line(:line, :status); end;

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
	  33	       33      1.01 94qn6y14kw01g
SELECT NVL(TO_NUMBER(EXTRACT(XMLTYPE(:B2 ), :B1 )), 0) FROM DUAL

		--
			  ------------------------------------------------------


SQL ordered by Sharable Memory		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
-> Only Statements with Sharable Memory greater than 1048576 are displayed

Sharable Mem (b)  Executions   % Total	  SQL Id
---------------- ------------ -------- -------------
		-- so reset flags and counters before continuing
      13,231,793	   11	  1.04 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
		--
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

		v_update_quota := FALSE;
       4,176,852	   11	  0.33 atwuyuvqkf27w
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
		v_updates_cnt := 0;
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

		v_selects_cnt := 0;
       4,102,120       25,721	  0.32 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
	END IF;

       3,603,183      151,320	  0.28 bhdvtsvjhgvrh
Module: SQL*Plus

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  ------------------------------------------------------


	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
SQL ordered by Version Count		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Only Statements with Version Count greater than 20 are displayed

 Version
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
  Count   Executions	 SQL Id
-------- ------------ -------------
     123       25,721 35dumc2tpr9dv
Module: SQL*Plus
		-- so reset flags and counters
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

     123      151,320 bhdvtsvjhgvrh
		v_scan_query_quota := FALSE;
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

		v_scan_queries_cnt := 0;
			  ------------------------------------------------------


SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
		v_random_access_queries_cnt := 0;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	END IF;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308
-> Captured SQL account for   94.9% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
	v_loop_cnt := v_loop_cnt + 1 ;
-------------- ------------ ------ ---------- ------ ------ ------ -------------
      74,268.3	     25,721   61.2   85,138.0	87.2	1.8   10.3 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
	v_now := DBMS_UTILITY.GET_TIME();
< :B1 )

      40,836.7	    151,320   33.7   49,065.0	83.2	3.4   11.3 bhdvtsvjhgvrh
Module: SQL*Plus

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
       1,956.9		  4    1.6    2,128.1	92.0	1.8    5.4 868wdptu2wdsf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- If this is a fixed-iteration count test cycle and we've hit the number of
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

		-- iterations then set exit flag
       1,956.2		  4    1.6    2,125.2	92.0	1.8    5.4 59c9hcdmc2sp8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		v_stop_immediate := TRUE ;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

	END IF;
       1,954.9		  4    1.6    2,132.5	91.7	1.0    6.1 6a32815hkfxqf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
END LOOP;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


       1,952.6		  4    1.6    2,127.4	91.8	1.8    5.5 9jnaa1bq11a61
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
v_end_time := v_now ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_now := DBMS_UTILITY.GET_TIME();
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,951.4		  4    1.6    2,124.7	91.8	1.8    5.6 05dgz376x2uah
Module: SQL*Plus
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,949.8		  4    1.6    2,130.8	91.5	1.0    5.9 279tufy9n4jkw
Module: SQL*Plus
v_total_time := v_end_time - v_begin_time ;
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;

       1,948.9		  4    1.6    2,126.5	91.6	1.8    5.4 gx2wbjnsndywg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
       1,948.4		  4    1.6    2,132.2	91.4	1.0    6.1 fd4xkca0yhc14
Module: SQL*Plus


SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
END;</pre_sqltext></td></tr>
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308
-> Captured SQL account for   94.9% of Total
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
<tr><td scope="row" class='awrc'><a class="awr" name="9cw3txprjx7ky"></a>9cw3txprjx7ky</td><td class='awrc'><pre_sqltext class="awr">DECLARE
DECLARE v_default_schema_number PLS_INTEGER := '54'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_default_schema_number PLS_INTEGER := '78';
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,947.2		  4    1.6    2,128.3	91.5	1.0    5.9 9t7r85fxpxsnj
Module: SQL*Plus
v_update_pct PLS_INTEGER := '15';
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_max_loop_iterations PLS_INTEGER := '0';

       1,946.1		  4    1.6    2,124.8	91.6	1.8    5.7 34znj9v2fzxst
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
v_seconds_to_run PLS_INTEGER := '600';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_scale PLS_INTEGER := '1048576';

       1,944.9		  4    1.6    2,128.6	91.4	1.8    6.2 g2r0fu8hz8rv8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
v_work_unit PLS_INTEGER := '128' ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_redo_stress  VARCHAR2(12) := 'LITE';
       1,940.8		  4    1.6    2,128.3	91.2	1.0    6.1 g1p4d7mfawjcs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
v_hot_schema_modulus PLS_INTEGER := '0';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_do_hotspot   VARCHAR(7) := 'FALSE';

       1,937.7		  4    1.6    2,129.9	91.0	1.0    6.3 3s33p2a5kvj29
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
v_hotspot_mb  NUMBER := '8';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_hotspot_offset_mb NUMBER := '16';
       1,934.4		  4    1.6    2,125.8	91.0	1.8    6.6 fqsx798y4df7a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_modulus  PLS_INTEGER := '3';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


       1,933.0		  4    1.6    2,127.7	90.9	1.7    7.3 ds72ddrkju833
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_sleep_modulus PLS_INTEGER := '0';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_sleep_min NUMBER := '.1';
       1,927.8		  4    1.6    2,128.4	90.6	1.8    7.2 1x4ta4a2yjbhw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_sleep_max NUMBER := '.5';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_scan_query_pct PLS_INTEGER := '0';
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_obfuscate VARCHAR(5)	:= 'FALSE';
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308
-> Captured SQL account for   94.9% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------


       1,926.5		  4    1.6    2,127.6	90.5	1.8    7.4 0zzrz3xpx0yws
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
       1,923.3		  4    1.6    2,127.3	90.4	1.7    7.4 235c49djpygrk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,921.5		  4    1.6    2,126.7	90.4	1.8    7.5 awt1bwgs30hx1
v_num_tmp NUMBER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,921.0		  4    1.6    2,127.9	90.3	1.8    7.9 42dfwspbnmyhn
v_loop_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_rowcnt PLS_INTEGER := 0;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

       1,920.9		  4    1.6    2,127.5	90.3	1.8    7.3 9cw3txprjx7ky
v_updates_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_selects_cnt PLS_INTEGER := 0;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,918.4		  4    1.6    2,126.7	90.2	1.7    7.7 0h8337uv1gm0g
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_random_access_queries_cnt PLS_INTEGER := 0;

       1,918.3		  4    1.6    2,126.9	90.2	1.8    7.6 4y7jh3c72wfyc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '103'; v_update_pct PLS_INTEGER :
v_scan_queries_cnt PLS_INTEGER := 0;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_


       1,917.5		  4    1.6    2,128.1	90.1	1.7    7.2 czkhyr80ymm1z
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_do_scan_query BOOLEAN :=FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,917.3		  4    1.6    2,129.0	90.1	1.8    7.9 8xsf93arbvbm5
v_scan_query_quota  BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_scan_workload_only BOOLEAN := FALSE;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_random_workload_only BOOLEAN := FALSE;
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308
-> Captured SQL account for   94.9% of Total

       Cluster			      Elapsed

 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

       1,916.4		  4    1.6    2,126.3	90.1	1.8    7.7 0wn4rp6qcr6js
v_random_block PLS_INTEGER := 1;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
v_tmp PLS_INTEGER;
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

       1,916.0		  4    1.6    2,127.8	90.0	1.8    7.8 787vyc7kcz0pd
Module: SQL*Plus
v_now PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_
v_brick_wall PLS_INTEGER;

       1,915.8		  4    1.6    2,125.8	90.1	1.8    7.4 cyhr3uaphj8u4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_begin_time PLS_INTEGER;

       1,915.5		  4    1.6    2,131.1	89.9	1.7    7.9 fm39d7d1vc1q3
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
v_end_time PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,915.5		  4    1.6    2,126.8	90.1	1.8    7.6 fjb8yj8xjzk39
Module: SQL*Plus
v_total_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '83'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_begin_cpu_tm PLS_INTEGER;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

       1,915.0		  4    1.6    2,129.1	89.9	1.8    7.9 7uf35z2xnpp67
Module: SQL*Plus
v_end_cpu_tm PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_
v_total_cpu_tm PLS_INTEGER;

       1,913.6		  4    1.6    2,127.1	90.0	1.8    7.7 6x6suu2w4rznw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '109'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

v_do_sleeps BOOLEAN := FALSE;
       1,909.8		  4    1.6    2,128.0	89.7	1.8    7.9 d8qmpacb3zab2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_loop_control BOOLEAN := FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_update_quota BOOLEAN := FALSE;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_select_only_workload BOOLEAN := FALSE;
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308
-> Captured SQL account for   94.9% of Total

       Cluster			      Elapsed
v_update_only_workload BOOLEAN := FALSE;
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
       1,904.6		  4    1.6    2,126.6	89.6	1.7    8.1 2h5cgxr56bjm9
Module: SQL*Plus
v_do_update BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_do_hot_schema BOOLEAN := FALSE;

	 497.9		  3    0.4    1,591.1	31.3   11.6   49.9 5hg6sgckh1tnx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
v_stop_immediate BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 462.7		  3    0.4    1,590.4	29.1   11.7   53.2 dyyddzrz52ydb
v_sharing_schema BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_seed VARCHAR2(128);
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 453.6		  3    0.4    1,591.3	28.5   11.3   54.2 7601qqtdhust2
v_home_schema_str VARCHAR2(80);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
v_scratch VARCHAR2(200) ;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 409.8		  2    0.3    1,061.8	38.6   12.0   42.4 cmt7ct5kk8chb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_cpu_pct NUMBER(6, 3);
	 406.0		  2    0.3    1,060.2	38.3   11.3   43.0 3cbmkwjys3g0s
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_my_serial NUMBER(16);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 397.7		  3    0.3    1,591.8	25.0   17.2   51.4 dnhxxnnyzpq8g
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
BEGIN
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 349.3		  2    0.3    1,061.7	32.9	9.6   50.8 5yx3rhnrwptpu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 346.3		  2    0.3    1,060.4	32.7	9.5   51.2 9yzrfgvuxws9b
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
EXECUTE IMMEDIATE v_home_schema_str;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308
-> Captured SQL account for   94.9% of Total

       Cluster			      Elapsed

 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

IF ( v_hot_schema_modulus != 0 ) THEN
	 227.1		  1    0.2	529.7	42.9	9.4   40.8 34h3w6hykhk8g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_do_hot_schema := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 202.4		  1    0.2	530.5	38.2	9.6   46.1 8y9r8y4hxsjxb
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 182.6		  1    0.2	530.6	34.4	9.1   50.5 9a7c8svm56haw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
IF ( v_sleep_modulus != 0 )	  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
	v_do_sleeps := TRUE;

	  25.8		 96    0.0	 41.4	62.4	1.7    6.3 8fgdzmkchnn1a
INSERT /*+ APPEND LEADING(@"SEL$F5BB74E1" "H"@"SEL$2" "A"@"SEL$1") USE_NL(@"SE
L$F5BB74E1" "A"@"SEL$1") */ INTO WRH$_ACTIVE_SESSION_HISTORY ( snap_id
END IF;
, dbid, instance_number , sample_id, sample_time,sample_time_utc, usecs_per_row
, session_id, session_serial#, session_type , flags , user_id , sql_id, sql_chil

	   4.4		124    0.0	  4.4	98.9	1.0	.3 f3ww8rgva3hrs

update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

IF ( v_max_loop_iterations &gt; 0 )  THEN
	   2.3		211    0.0	  2.4	95.8	4.2	.4 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn
	v_loop_control := TRUE ;

	   1.6		 14    0.0	  1.9	87.1	2.0    9.6 03guhbfpak0w7
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

END IF;
	   1.2		179    0.0	  1.3	90.1	3.9    1.3 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)


	    .7		 22    0.0	  0.7	97.2	3.1	.6 1myuz4d7pbg2j
INSERT INTO wri$_adv_recommendations (id, task_id, finding_id, rank, benefit_msg
_id, benefit_val, type,flags, rec_type_id, exec_name) VALUES (:1,:2,:3,:4,:5,:6,
:7,:8,:9,:10)

IF ( v_update_pct = 0 ) 	  THEN
	    .6		156    0.0	  0.7	84.7	7.6	.0 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	    .5		 93    0.0	  0.5	94.6	6.3    1.4 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
	v_select_only_workload := TRUE;

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
END IF;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	121,308

-> Captured SQL account for   94.9% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
IF ( v_update_pct = 100 )	  THEN
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

	    .4		  7    0.0	  0.4	95.7	1.5    2.3 a4n4ayr88dbhy
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
select grantee#,privilege#,nvl(col#,0),max(mod(nvl(option$,0),2)),max(bitand(nvl
				-- Handle case where user has set UPDATE_PCT to a valid value
(option$,0), 8) /8), max(bitand(nvl(option$,0), 16) /16), max(bitand(nvl(option$
,0),64) /64), max(bitand(nvl(option$,0), 128) /128) from objauth$ where obj#=:1
				--
group by grantee#,privilege#,nvl(col#,0) order by grantee#

	    .3		 14    0.0	  0.3	94.6	2.9    4.0 fh5ufah919kun
select /*+ index(idl_sb4$ i_idl_sb41) */ piece#,length,piece from idl_sb4$ where
				-- We are doing updates during this run and quota has not been met yet
 obj#=:1 and part=:2 and version=:3 order by piece#

	    .2		 48    0.0	  0.9	23.8	3.9    1.7 6wvzvgvg6qsyb
				-- We still vacillate until update quota has been met

INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)

				IF ( MOD(v_random_block,  2) = 0 ) THEN
	    .2		 37    0.0	  0.2	88.1	5.6    3.5 acmvv4fhdc9zh
					v_do_update := TRUE;
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
				ELSE
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

	    .2		 98    0.0	  0.2	75.9   11.8	.2 aktbxfjwnzgmu
					v_do_update := FALSE;
update WRM$_DATABASE_INSTANCE set last_ash_sample_id = :last_ash_sample_id wh
ere instance_number = :instance_number and dbid = :dbid a
nd startup_time = (select max(startup_time) from WRM$_
				END IF;
DATABASE_INSTANCE where instance_number = :instance_numb

	    .2		 26    0.0	  0.2	72.0	5.2    6.3 4nc9zwu3h1k7z
INSERT INTO wri$_adv_actions (id, task_id, obj_id, command, msg_id, flags, attr1
			ELSE
, attr2, attr3,attr4, attr5, attr6,num_attr1,num_attr2,num_attr3,num_attr4,num_a
ttr5, exec_name) VALUES (:1,:2, :3,:4,:5,:6,:7,:8,:9,:10,' ',' ',:11,:12,:13,:14
,:15, :16)
				-- UPDATE quota has been filled,  force drain some SELECTs

	    .1		 17    0.0	  0.2	78.3	6.5   17.1 grwydz59pu6mc
select text from view$ where rowid=:1

				v_do_update := FALSE;
	    .1		 12    0.0	  0.1	82.9   11.4    9.6 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
			END IF;
 p_obj#=obj#(+) order by order#

	    .1		  5    0.0	  0.1	99.1	1.2	.2 cn6hhn36a4rrs
		END IF;
select con#,obj#,rcon#,enabled,nvl(defer,0),spare2,spare3,refact from cdef$ wher
e robj#=:1

			  ------------------------------------------------------
	END IF;


Key Instance Activity Stats		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
----------------------------------------------------------------------------------------------------------------------
db block changes			  7,204,466	   7,860.9	   261.3
execute count				    189,562	     206.8	     6.9
gc cr block receive time		     67,285	      73.4	     2.4
-- The type of SQL is now determined...execute it in the following section
gc cr blocks received			     16,276	      17.8	     0.6
gc current block receive time		     14,679	      16.0	     0.5
gc current blocks received		     10,046	      11.0	     0.4
logons cumulative				 41	       0.0	     0.0
----------------------------------------------------------------------------------------------------------------------
opened cursors cumulative		    218,029	     237.9	     7.9
parse count (total)			      3,259	       3.6	     0.1
parse time elapsed				271	       0.3	     0.0

physical reads				 22,345,229	  24,381.1	   810.6
physical writes 			  3,802,315	   4,148.7	   137.9
redo size			      2,926,731,908    3,193,379.1     106,164.1
	IF ( v_do_update != TRUE ) THEN
session cursor cache hits		    215,750	     235.4	     7.8
session logical reads			 24,645,118	  26,890.5	   894.0
user calls				      1,712	       1.9	     0.1
		--
user commits				     27,568	      30.1	     1.0
workarea executions - optimal		      1,329	       1.5	     0.1
			  ------------------------------------------------------

		-- Do a SELECT statement

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by statistic name

		-- Work out scan or random
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
ASSM bg: segment fix monitor			  2	       0.0	     0.0
		IF  ( v_random_workload_only = TRUE ) THEN
ASSM cbk:blocks examined		      1,013	       1.1	     0.0
ASSM cbk:blocks marked full			204	       0.2	     0.0
ASSM gsp:L1 bitmaps examined			836	       0.9	     0.0
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
ASSM gsp:L2 bitmap full 			 13	       0.0	     0.0
ASSM gsp:L2 bitmaps examined			164	       0.2	     0.0
ASSM gsp:Optimized reject DB			 10	       0.0	     0.0
			v_do_scan_query := FALSE;
ASSM gsp:Search all				 15	       0.0	     0.0
ASSM gsp:Search hint				  4	       0.0	     0.0
ASSM gsp:Search steal				  6	       0.0	     0.0
ASSM gsp:bump HWM				  6	       0.0	     0.0
			v_scan_query_quota := TRUE ;
ASSM gsp:get free block 			808	       0.9	     0.0
ASSM gsp:get free data block			651	       0.7	     0.0
ASSM gsp:get free index block			157	       0.2	     0.0
		ELSE
ASSM gsp:good hint				693	       0.8	     0.0
ASSM gsp:reject db				  1	       0.0	     0.0
ASSM rsv:fill reserve				  3	       0.0	     0.0
ASSM wasted db state change			  2	       0.0	     0.0
			IF ( v_scan_workload_only = TRUE ) THEN
Batched IO (bound) vector count 		330	       0.4	     0.0
Batched IO (full) vector count			  0	       0.0	     0.0
Batched IO block miss count		 28,577,018	  31,180.6	 1,036.6
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
Batched IO buffer defrag count			  1	       0.0	     0.0
Batched IO double miss count		 10,360,447	  11,304.4	   375.8
Batched IO same unit count			646	       0.7	     0.0
				v_do_scan_query := TRUE;
Batched IO single block count		      2,409	       2.6	     0.1
Batched IO vector block count		 28,708,052	  31,323.6	 1,041.4
Batched IO vector read count		    330,793	     360.9	    12.0
				v_scan_query_quota := FALSE;
Block Cleanout Optim referenced 	      3,580	       3.9	     0.1
CCursor + sql area evicted			  4	       0.0	     0.0
CPU used by this session		    461,157	     503.2	    16.7
			ELSE
CPU used when call started		    385,189	     420.3	    14.0
CR blocks created			      3,138	       3.4	     0.1
Cached Commit SCN referenced		 16,878,155	  18,415.9	   612.2
Client Advertised Receive Window	      1,778	       1.9	     0.1
				IF ( v_scan_query_quota = FALSE ) THEN
Client Advertised Send Window		      1,778	       1.9	     0.1
Client Path Maximum Transmission	    368,300	     401.9	    13.4
Client Send Congestion Window		      2,540	       2.8	     0.1
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
Client Time (usec) Last Ack Rece		221	       0.2	     0.0
Client Time (usec) Last Data Rec		122	       0.1	     0.0
Client Time (usec) Last Data Sen	      1,328	       1.5	     0.1
Client Time (usec) Round Trip Ti	    716,004	     781.2	    26.0
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
Client Time (usec) Round Trip Ti	    640,720	     699.1	    23.2
Client Total Bytes Acked		  4,009,287	   4,374.6	   145.4
Client Total Bytes Received		  1,552,058	   1,693.5	    56.3
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
Client Total Number of Retransmi		  2	       0.0	     0.0
Commit SCN cached				759	       0.8	     0.0
DBWR checkpoint buffers written 	    175,428	     191.4	     6.4
DBWR checkpoints				 51	       0.1	     0.0
						v_do_scan_query := TRUE;
DBWR fusion writes				838	       0.9	     0.0
DBWR object drop buffers written		 44	       0.1	     0.0
DBWR thread checkpoint buffers w		  0	       0.0	     0.0
					ELSE
DBWR transaction table writes			559	       0.6	     0.0
DBWR undo block writes			    166,577	     181.8	     6.0
DFO trees parallelized				 15	       0.0	     0.0
						v_do_scan_query := FALSE;
Effective IO time				  0	       0.0	     0.0
HSC Heap Segment Block Changes		  3,469,968	   3,786.1	   125.9
Heap Segment Array Inserts			189	       0.2	     0.0
					END IF;
Heap Segment Array Updates			  4	       0.0	     0.0
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
KTFB alloc req					  7	       0.0	     0.0

				ELSE
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
					-- Scan quota has been filled,	force drain some random access SELECTS
-------------------------------- ------------------ -------------- -------------
KTFB alloc space (block)		  8,781,824	   9,581.9	   318.6
KTFB alloc time (ms)			    453,387	     494.7	    16.5
					v_do_scan_query := FALSE;
LOB table id lookup cache misses		  0	       0.0	     0.0
PX local messages recv'd			182	       0.2	     0.0
PX local messages sent				182	       0.2	     0.0
PX remote messages recv'd			235	       0.3	     0.0
				END IF;
PX remote messages sent 			274	       0.3	     0.0
Parallel operations not downgrad		 15	       0.0	     0.0
Requests to/from client 			763	       0.8	     0.0
			END IF;
SMON posted for instance recover		  0	       0.0	     0.0
SQL*Net roundtrips to/from clien		509	       0.6	     0.0
TBS Extension: tasks created			  0	       0.0	     0.0
TBS Extension: tasks executed			  0	       0.0	     0.0
		END IF;
active txn count during cleanout	      1,755	       1.9	     0.1
background checkpoints completed		  1	       0.0	     0.0
background checkpoints started			  0	       0.0	     0.0

background timeouts			     13,028	      14.2	     0.5
blocks cleaned out using minact 	  1,815,638	   1,981.1	    65.9
branch node splits				  1	       0.0	     0.0

buffer is not pinned count		 77,415,207	  84,468.3	 2,808.2
buffer is pinned count			 23,532,784	  25,676.8	   853.6
bytes received via SQL*Net from 	    250,814	     273.7	     9.1
		IF ( v_do_scan_query != TRUE ) THEN
bytes sent via SQL*Net to client	    133,352	     145.5	     4.8
calls to get snapshot scn: kcmgs	    233,277	     254.5	     8.5
calls to kcmgas 			     64,912	      70.8	     2.4
			SELECT COUNT(c2) INTO v_rowcnt
calls to kcmgcs 			      8,192	       8.9	     0.3
cell physical IO interconnect by    254,107,977,216  277,259,113.2   9,217,497.7
change write time			      9,144	      10.0	     0.3
			FROM cf1
cleanout - number of ktugct call	     32,162	      35.1	     1.2
cleanouts and rollbacks - consis	      1,568	       1.7	     0.1
cleanouts only - consistent read	     25,908	      28.3	     0.9
cluster key scan block gets			313	       0.3	     0.0
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
cluster key scans				231	       0.3	     0.0
commit batch/immediate performed		  1	       0.0	     0.0
commit batch/immediate requested		  1	       0.0	     0.0

commit cleanout failures: block 	     31,205	      34.1	     1.1
commit cleanout failures: buffer	     25,055	      27.3	     0.9
commit cleanout failures: callba		 23	       0.0	     0.0
commit cleanout failures: cannot		 12	       0.0	     0.0
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
commit cleanouts			  3,322,329	   3,625.0	   120.5
commit cleanouts successfully co	  3,266,034	   3,563.6	   118.5
commit immediate performed			  1	       0.0	     0.0
		ELSE
commit immediate requested			  1	       0.0	     0.0
commit txn count during cleanout	     27,003	      29.5	     1.0
consistent changes			     13,336	      14.6	     0.5
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
consistent gets 			 20,766,475	  22,658.5	   753.3
consistent gets examination		    410,530	     447.9	    14.9
consistent gets examination (fas	    404,119	     440.9	    14.7

consistent gets from cache		 20,766,475	  22,658.5	   753.3
consistent gets pin			 20,355,945	  22,210.5	   738.4
consistent gets pin (fastpath)		 19,566,518	  21,349.2	   709.8
cursor authentications				119	       0.1	     0.0
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
data blocks consistent reads - u	      2,588	       2.8	     0.1
db block changes			  7,204,466	   7,860.9	   261.3
db block gets				  3,878,497	   4,231.9	   140.7

db block gets direct				973	       1.1	     0.0
db block gets from cache		  3,877,524	   4,230.8	   140.7
db block gets from cache (fastpa	    286,421	     312.5	    10.4
deferred (CURRENT) block cleanou	  1,927,718	   2,103.4	    69.9
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
dirty buffers inspected 		  3,257,667	   3,554.5	   118.2

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by statistic name
				v_scan_query_quota := TRUE;

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
enqueue conversions			      4,748	       5.2	     0.2
			END IF;
enqueue releases			    256,825	     280.2	     9.3
enqueue requests			    256,147	     279.5	     9.3
enqueue timeouts				 29	       0.0	     0.0
enqueue waits					386	       0.4	     0.0
		END IF;
exchange deadlocks				 10	       0.0	     0.0
execute count				    189,562	     206.8	     6.9
file io service time			587,485,784	 641,010.1	21,310.4

free buffer inspected			 24,389,027	  26,611.1	   884.7
free buffer requested			 23,094,347	  25,198.4	   837.7
gc blocks compressed			     15,231	      16.6	     0.6
gc blocks lost				      8,085	       8.8	     0.3
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
gc cleanout saved				  2	       0.0	     0.0
gc cr anti locks created		    342,760	     374.0	    12.4
gc cr anti locks expanded			361	       0.4	     0.0
gc cr anti locks shrunk 		      1,672	       1.8	     0.1
	ELSE
gc cr block build time				 71	       0.1	     0.0
gc cr block flush time			      1,205	       1.3	     0.0
gc cr block receive time		     67,285	      73.4	     2.4
		--
gc cr blocks built			      9,399	      10.3	     0.3
gc cr blocks flushed				113	       0.1	     0.0
gc cr blocks received			     16,276	      17.8	     0.6
		-- Do an UPDATE statement
gc cr blocks served			      9,840	      10.7	     0.4
gc cr multiblock grant time		 56,729,673	  61,898.2	 2,057.8
gc cr multiblock grants received	  4,793,536	   5,230.3	   173.9
gc current block flush time			416	       0.5	     0.0
		--
gc current block pin time			787	       0.9	     0.0
gc current block receive time		     14,679	      16.0	     0.5

gc current blocks flushed			 32	       0.0	     0.0
gc current blocks pinned			 14	       0.0	     0.0
gc current blocks received		     10,046	      11.0	     0.4
gc current blocks served		      6,597	       7.2	     0.2
		v_my_serial := v_my_serial + v_loop_cnt ;
gc force cr read cr				111	       0.1	     0.0
gc force cr read current			  6	       0.0	     0.0
gc index split wait timeouts			  0	       0.0	     0.0
gc kbytes saved 			     54,807	      59.8	     2.0

gc kbytes sent				     76,687	      83.7	     2.8
gc local grants 			 16,554,906	  18,063.2	   600.5
gc merge pi bg					  0	       0.0	     0.0
gc merge pi fg					119	       0.1	     0.0
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
gc no change made				 33	       0.0	     0.0
gc read time waited				  0	       0.0	     0.0
gc read wait timeouts				  1	       0.0	     0.0
gc read waits					  0	       0.0	     0.0
		--
gc reader bypass grants 			175	       0.2	     0.0
gc reader bypass waits				 16	       0.0	     0.0
gc remote grants			  6,099,029	   6,654.7	   221.2
gc status messages received		     35,920	      39.2	     1.3
		-- Increment count of UPDATES and set UPDATE quota flag if needed
gc status messages sent 		     18,579	      20.3	     0.7
gcs affinity lock failures		     28,367	      31.0	     1.0
gcs affinity lock grants		 14,662,181	  15,998.0	   531.9
gcs anti-locks created			    343,060	     374.3	    12.4
		--
gcs data block access records		 22,408,861	  24,450.5	   812.9
gcs messages sent			 18,317,597	  19,986.5	   664.5
gcs read-mostly lock failures		    317,646	     346.6	    11.5
gcs read-mostly lock grants		  1,652,395	   1,802.9	    59.9
		v_updates_cnt := v_updates_cnt + 1;
gcs stats management (SCM) proce		  8	       0.0	     0.0
ges messages sent			     10,375	      11.3	     0.4
global enqueue get time 		     17,138	      18.7	     0.6

global enqueue gets async			  0	       0.0	     0.0

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by statistic name

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
global enqueue gets sync		     83,085	      90.7	     3.0
global enqueue releases 		     86,806	      94.7	     3.2
			v_update_quota := TRUE;
heap block compress			     71,552	      78.1	     2.6
hot buffers moved to head of LRU	    606,127	     661.4	    22.0
immediate (CR) block cleanout ap	     27,480	      30.0	     1.0
		END IF;
immediate (CURRENT) block cleano		371	       0.4	     0.0
index crx upgrade (positioned)			  0	       0.0	     0.0
index fast full scans (full)			  4	       0.0	     0.0
index fetch by key			      3,804	       4.2	     0.1
	END IF ;
index range scans			    216,778	     236.5	     7.9
leaf node 90-10 splits				 75	       0.1	     0.0
leaf node splits				153	       0.2	     0.0
lob reads					562	       0.6	     0.0
lob writes				      6,672	       7.3	     0.2
----------------------------------------------------------------------------------------------------------------------
lob writes unaligned			      6,672	       7.3	     0.2
logical read bytes from cache	    201,883,631,616  220,276,739.4   7,323,114.9
logons cumulative				 41	       0.0	     0.0
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
max cf enq hold time			      1,084	       1.2	     0.0
messages received			    169,672	     185.1	     6.2
messages sent				    169,668	     185.1	     6.2
no work - consistent read gets		 20,284,051	  22,132.1	   735.8
----------------------------------------------------------------------------------------------------------------------
non-idle wait count			  8,349,999	   9,110.8	   302.9
opened cursors cumulative		    218,029	     237.9	     7.9
parse count (describe)				  1	       0.0	     0.0
parse count (failures)				  0	       0.0	     0.0

parse count (hard)				114	       0.1	     0.0
parse count (total)			      3,259	       3.6	     0.1
parse time cpu					 43	       0.1	     0.0
parse time elapsed				271	       0.3	     0.0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
physical read IO requests		 22,277,415	  24,307.1	   808.1
physical read bytes		    183,052,107,776  199,729,522.9   6,640,021.3
physical read total IO requests 	 22,284,580	  24,314.9	   808.4
physical read total bytes	    185,459,744,256  202,356,513.1   6,727,355.8
		--
physical read total multi block 	      3,303	       3.6	     0.1
physical reads				 22,345,229	  24,381.1	   810.6
physical reads cache			 22,345,229	  24,381.1	   810.6
physical reads cache prefetch		 18,190,018	  19,847.3	   659.8
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
physical reads direct				  0	       0.0	     0.0
physical reads direct (lob)			  0	       0.0	     0.0
physical reads direct temporary 		  0	       0.0	     0.0
physical reads prefetch warmup			  0	       0.0	     0.0
		-- so reset flags and counters before continuing
physical write IO requests		  3,586,656	   3,913.4	   130.1
physical write bytes		     31,148,564,480   33,986,431.5   1,129,881.2
physical write total IO requests	  3,634,459	   3,965.6	   131.8
physical write total bytes	     34,316,465,152   37,442,951.6   1,244,793.4
		--
physical write total multi block	      9,832	      10.7	     0.4
physical writes 			  3,802,315	   4,148.7	   137.9
physical writes direct			      1,116	       1.2	     0.0
physical writes direct (lob)			144	       0.2	     0.0
		v_update_quota := FALSE;
physical writes direct temporary		189	       0.2	     0.0
physical writes from cache		  3,801,199	   4,147.5	   137.9
physical writes non checkpoint		  3,722,326	   4,061.5	   135.0
pinned buffers inspected		     24,704	      27.0	     0.9
		v_updates_cnt := 0;
prefetch warmup blocks aged out 		  0	       0.0	     0.0
prefetched blocks aged out befor		444	       0.5	     0.0
recursive calls 			    269,328	     293.9	     9.8
recursive cpu usage			    452,501	     493.7	    16.4
		v_selects_cnt := 0;
redo KB read				  1,343,488	   1,465.9	    48.7
redo blocks checksummed by FG (e	  2,347,517	   2,561.4	    85.2
redo blocks written			  5,920,794	   6,460.2	   214.8

	END IF;
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans

-------------------------------- ------------------ -------------- -------------
redo blocks written (group 0)		  3,964,672	   4,325.9	   143.8
redo blocks written (group 1)		  1,956,122	   2,134.3	    71.0
redo entries				  3,685,647	   4,021.4	   133.7
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
redo size			      2,926,731,908    3,193,379.1     106,164.1
redo size for direct writes		      3,660	       4.0	     0.1
redo subscn max counts			     25,993	      28.4	     0.9
redo synch long waits				  2	       0.0	     0.0
redo synch time 			      1,590	       1.7	     0.1
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
redo synch time (usec)			 15,682,125	  17,110.9	   568.9
redo synch time overhead (usec) 	    258,659	     282.2	     9.4
redo synch time overhead count (		219	       0.2	     0.0
redo synch time overhead count (		  3	       0.0	     0.0
		-- so reset flags and counters
redo synch time overhead count (		  1	       0.0	     0.0
redo synch time overhead count (		  3	       0.0	     0.0
redo synch writes				255	       0.3	     0.0
redo wastage				  7,961,652	   8,687.0	   288.8
		v_scan_query_quota := FALSE;
redo write active strands		     32,586	      35.6	     1.2
redo write broadcast ack count			 62	       0.1	     0.0
redo write broadcast ack time		    400,307	     436.8	    14.5
redo write finish time			741,508,062	 809,065.0	26,897.4
		v_scan_queries_cnt := 0;
redo write gather time			 62,090,940	  67,747.9	 2,252.3
redo write info find				232	       0.3	     0.0
redo write info find fail			  6	       0.0	     0.0
redo write schedule time		 62,432,999	  68,121.1	 2,264.7
		v_random_access_queries_cnt := 0;
redo write size count (   4KB)			486	       0.5	     0.0
redo write size count (   8KB)			364	       0.4	     0.0
redo write size count (  16KB)			709	       0.8	     0.0
redo write size count (  32KB)		      1,481	       1.6	     0.1
	END IF;
redo write size count ( 128KB)		      7,160	       7.8	     0.3
redo write size count ( 256KB)		      4,220	       4.6	     0.2
redo write size count ( 512KB)		      1,667	       1.8	     0.1
redo write size count (1024KB)			354	       0.4	     0.0

redo write size count (inf)			443	       0.5	     0.0
redo write time 			     74,247	      81.0	     2.7
redo write time (usec)			742,477,176	 810,122.4	26,932.6
redo write total time			807,353,616	 880,909.6	29,285.9
	v_loop_cnt := v_loop_cnt + 1 ;
redo write worker delay (usec)		 59,621,478	  65,053.4	 2,162.7
redo write worker delay count		     16,882	      18.4	     0.6
redo writes				     16,882	      18.4	     0.6
redo writes (group 0)			      9,694	      10.6	     0.4
	v_now := DBMS_UTILITY.GET_TIME();
redo writes (group 1)			      7,188	       7.8	     0.3
redo writes adaptive all		     16,882	      18.4	     0.6
redo writes adaptive worker		     16,882	      18.4	     0.6
rollback changes - undo records 		  2	       0.0	     0.0

rollbacks only - consistent read		979	       1.1	     0.0
rows fetched via callback		      2,594	       2.8	     0.1
securefile allocation bytes		  1,171,456	   1,278.2	    42.5
securefile allocation chunks			 56	       0.1	     0.0
securefile bytes non-transformed	    981,104	   1,070.5	    35.6
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
securefile direct read bytes			  0	       0.0	     0.0
securefile direct read ops			  0	       0.0	     0.0
securefile direct write bytes		  1,171,456	   1,278.2	    42.5
securefile direct write ops			 56	       0.1	     0.0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
securefile number of non-transfo		 55	       0.1	     0.0
segment cfs allocations 			  0	       0.0	     0.0
segment chunks allocation from d		 56	       0.1	     0.0
segment dispenser allocations			 55	       0.1	     0.0
		-- iterations then set exit flag
segment dispenser load empty			  1	       0.0	     0.0
segment dispenser load tasks			  1	       0.0	     0.0
segment prealloc ops				 11	       0.0	     0.0

		v_stop_immediate := TRUE ;
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
	END IF;
segment prealloc tasks				  4	       0.0	     0.0
segment prealloc time (ms)		     10,138	      11.1	     0.4
segment prealloc ufs2cfs bytes			  0	       0.0	     0.0
session cursor cache hits		    215,750	     235.4	     7.8
END LOOP;
session logical reads			 24,645,118	  26,890.5	   894.0
shared hash latch upgrades - no 	  9,760,459	  10,649.7	   354.1
shared hash latch upgrades - wai		 45	       0.1	     0.0
shared io pool buffer get succes		 55	       0.1	     0.0

sorts (memory)					883	       1.0	     0.0
sorts (rows)				    131,587	     143.6	     4.8
sql area evicted				  4	       0.0	     0.0
sql area purged 				  4	       0.0	     0.0
v_end_time := v_now ;
summed dirty queue length		123,616,537	 134,878.9	 4,484.1
switch current caused by our pin		284	       0.3	     0.0
switch current to new buffer			299	       0.3	     0.0
table fetch by rowid			 48,645,064	  53,077.0	 1,764.6
table fetch continued row			 30	       0.0	     0.0
v_now := DBMS_UTILITY.GET_TIME();
table scan blocks gotten		     79,818	      87.1	     2.9
table scan disk non-IMC rows got	  1,684,039	   1,837.5	    61.1
table scan rows gotten			  1,684,039	   1,837.5	    61.1
table scans (short tables)			592	       0.7	     0.0
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
temp space allocated (bytes)			  0	       0.0	     0.0
total cf enq hold time			     10,396	      11.3	     0.4
total number of cf enq holders			368	       0.4	     0.0
total number of times SMON poste		  0	       0.0	     0.0

transaction lock background get 		  0	       0.0	     0.0
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
transaction rollbacks				  0	       0.0	     0.0
transaction tables consistent re		  1	       0.0	     0.0
v_total_time := v_end_time - v_begin_time ;
transaction tables consistent re	      2,115	       2.3	     0.1
undo change vector size 	      1,201,621,900    1,311,098.6	43,587.6
user calls				      1,712	       1.9	     0.1
user commits				     27,568	      30.1	     1.0
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
user logons cumulative				  0	       0.0	     0.0
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9jnaa1bq11a61"></a>9jnaa1bq11a61</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '99';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;

user logouts cumulative 			254	       0.3	     0.0

workarea executions - optimal		      1,329	       1.5	     0.1
write clones created in backgrou		  2	       0.0	     0.0
write clones created in foregrou	      8,707	       9.5	     0.3
			  ------------------------------------------------------
IF ( v_hot_schema_modulus != 0 ) THEN


	v_do_hot_schema := TRUE;
Instance Activity Stats - Absolute ValuesDB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Statistics with absolute values (should not be diffed)

END IF;
Statistic			     Begin Value       End Value
-------------------------------- --------------- ---------------
logons current				     373	     118

opened cursors current			   1,026	      65
session cursor cache count		  11,344	  11,496
session pga memory		   1,902,216,712     659,806,416
IF ( v_sleep_modulus != 0 )	  THEN
session pga memory max		   2,274,580,584     819,423,376
session uga memory		     877,155,936     374,316,608
session uga memory max		   2,586,809,152   3,078,694,040
	v_do_sleeps := TRUE;
			  ------------------------------------------------------

Instance Activity Stats - Thread ActivityDB/Inst: P60SDB/p60sdb2  Snaps: 66-67
END IF;
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour

-------------------------------- ------------------ ---------
log switches (derived)				  0	  .00
			  ------------------------------------------------------

IF ( v_max_loop_iterations &gt; 0 )  THEN
IOStat by Function summary		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
	v_loop_control := TRUE ;
-> ordered by (Data Read + Write) desc

		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
END IF;
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time
--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re  165.8G 2.4E+04 185.223      0M     0.0      0M      4M   3.68ms

DBWR		     0M     0.0      0M   28.4G  3832.4 31.735M       0
LGWR		     0M     0.0      0M    2.7G    34.8  3.037M   16.3K  40.58ms
Others		   2.2G     8.4  2.456M     22M     1.2   .024M    4802   5.20ms
IF ( v_update_pct = 0 ) 	  THEN
Direct Writes	     0M     0.0      0M      1M     0.1   .001M       0
TOTAL:		   168G 2.4E+04 187.679   31.1G  3868.5 34.797M      4M   3.83ms
			  ------------------------------------------------------
	v_select_only_workload := TRUE;

IOStat by Filetype summary		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
END IF;
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc


		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
IF ( v_update_pct = 100 )	  THEN
-------------- ------- ------- ------- ------- ------- ------- -------- --------
Data File	165.6G 2.4E+04 185.037	 28.4G	3830.5 31.725M 438.20us   2.61ms
Log File	  2.1G	   2.6	2.366M	  2.7G	  34.7	3.031M 950.00us 1550.01m
	v_update_only_workload := TRUE;
Control File	   83M	   5.8	 .091M	   15M	   1.0	 .016M 484.69us
Other		    9M	   0.0	  .01M	    0M	   0.0	    0M 315.79us   1.68ms
Temp File	    2M	   0.1	 .002M	    1M	   0.1	 .001M 260.87us
END IF;
TOTAL:		167.8G 2.4E+04 187.505	 31.1G	3866.3 34.774M 438.22us 1030.73m
			  ------------------------------------------------------


IOStat by Function/Filetype summary	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
IF ( v_scan_query_pct = 0 ) 	THEN
-> Ordered by (Data Read + Write) desc for each function

  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
	v_random_workload_only := TRUE;
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
  165.6G 2.4E+04 185.007      0M     0.0      0M    3.7M     2.95ms
END IF;
 Buffer Cache Reads (Data File)
  165.6G 2.4E+04 185.005      0M     0.0      0M    3.7M     2.95ms
 Buffer Cache Reads (Temp File)

      2M     0.1   .002M      0M     0.0      0M     115   513.04us
 DBWR (Data File)
      0M     0.0      0M   28.4G  3830.2 31.717M       0
IF ( v_scan_query_pct = 100 ) 	THEN
DBWR
      0M     0.0      0M   28.4G  3830.3 31.717M       0
 DBWR (Temp File)
	v_scan_workload_only := TRUE;
      0M     0.0      0M      0M     0.1      0M       0
 LGWR (Log File)
      0M     0.0      0M    2.7G    34.7  3.031M       0
END IF;
LGWR
      0M     0.0      0M    2.7G    34.7  3.031M       0
Others

    2.2G     8.4  2.456M     22M     1.2   .024M    4340      .99ms
 Others (Log File)
    2.1G     2.6  2.366M      0M     0.0      0M     220     1.31ms
 Others (Control File)
v_seconds_to_run := v_seconds_to_run * 100 ;
     83M     5.8   .091M     15M     1.0   .016M    4120      .97ms
 Others (Data File)
      0M     0.0      0M      6M     0.1   .007M       0

 Others (Temp File)
      0M     0.0      0M      1M     0.1   .001M       0
 Direct Writes (Data File)
      0M     0.0      0M      1M     0.1   .001M       0
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Direct Writes
      0M     0.0      0M      1M     0.1   .001M       0
TOTAL:
  167.8G 2.4E+04 187.463   31.1G  3866.2 34.774M    3.7M     2.94ms

			  ------------------------------------------------------


Tablespace IO Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');

		  No data exists for this section of the report.
			  ------------------------------------------------------

-- DBMS_RANDOM.seed (val =&gt; v_seed);

File IO Stats				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67


		  No data exists for this section of the report.
			  ------------------------------------------------------


v_begin_time := DBMS_UTILITY.GET_TIME();
Buffer Pool Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Standard block size Pools  D: default,  K: keep,  R: recycle
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k

v_now := v_begin_time ;
							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
v_brick_wall := v_now + v_seconds_to_run ;
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
D      898,448	  9   24,757,346   22,447,959	3,838,635 4.E+05   1920      157
			  ------------------------------------------------------
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

Checkpoint Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Physical Writes:		     3,802,315


					  Other    Autotune	 Thread
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
     Writes	 Writes      Writes	 Writes      Writes	 Writes
----------- ----------- ----------- ----------- ----------- -----------
----------------------------------------------------------------------------------------------------------------------
	  0	      0 	  0	      0     175,405	      0
			  ------------------------------------------------------

Instance Recovery Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-- The following WHILE loop is the master work loop control
-> B: Begin Snapshot,  E: End Snapshot

									    Estd
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
----------------------------------------------------------------------------------------------------------------------
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
B     0    86	142207	 747728 1.70E+07 1.70E+07      N/A	N/A    N/A    31
E     0     1	   283	  15589  2984602 1.70E+07  2984602	N/A    N/A     0
			  ------------------------------------------------------


MTTR Advisory				     DB/Inst: P60SDB/p60sdb2  Snap: 67

		  No data exists for this section of the report.
			  ------------------------------------------------------
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME

Buffer Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 67
-> Only rows with estimated physical reads >0 are displayed
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
-> ordered by Block Size, Buffers For Estimate

				    Est
				   Phys      Estimated			Est
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
--- -------- ------ ------------ ------ -------------- ------------ -------
D	 768	 .1	      89    1.0 	40,906		  1 2.8E+04
D      1,536	 .2	     179    1.0 	40,621		  1 2.8E+04
			DBMS_LOCK.SLEEP(v_num_tmp);
D      2,304	 .3	     268    1.0 	40,411		  1 2.8E+04
D      3,072	 .4	     358    1.0 	40,240		  1 2.8E+04
D      3,840	 .5	     447    1.0 	40,073		  1 2.8E+04
		END IF;
D      4,608	 .6	     537    1.0 	39,920		  1 2.8E+04
D      5,376	 .7	     626    1.0 	39,764		  1 2.8E+04
D      6,144	 .8	     716    1.0 	39,614		  1 2.8E+04
D      6,912	 .9	     805    1.0 	39,465		  1 2.7E+04
	END IF;
D      7,680	1.0	     895    1.0 	39,317		  1 2.7E+04
D      7,712	1.0	     898    1.0 	39,311		  1 2.7E+04
D      8,448	1.1	     984    1.0 	39,166		  1 2.7E+04

D      9,216	1.2	   1,074    1.0 	39,014		  1 2.7E+04
D      9,984	1.3	   1,163    1.0 	38,870		  1 2.7E+04
D     10,752	1.4	   1,253    1.0 	38,729		  1 2.7E+04
D     11,520	1.5	   1,342    1.0 	38,588		  1 2.7E+04
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
D     12,288	1.6	   1,432    1.0 	38,445		  1 2.7E+04
D     13,056	1.7	   1,521    1.0 	38,303		  1 2.7E+04
D     13,824	1.8	   1,610    1.0 	38,165		  1 2.6E+04
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
D     14,592	1.9	   1,700    1.0 	38,028		  1 2.6E+04
D     15,360	2.0	   1,789    1.0 	37,893		  1 2.6E+04
			  ------------------------------------------------------

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';

PGA Aggr Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory

			v_sharing_schema := TRUE ;
PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
--------------- ------------------ --------------------------
	  100.0 	       420			    0
		ELSE
			  ------------------------------------------------------

PGA Aggr Target Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
			IF ( v_sharing_schema = TRUE ) THEN
   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
				EXECUTE IMMEDIATE v_home_schema_str;
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt
-> %Man W/A Mem    - percentage of workarea memory under manual control

				v_sharing_schema := FALSE;
						%PGA  %Auto   %Man
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
			END IF;
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
B      3,215	    319    3,389.3	  0.0	  .0	 .0	.0    329,210
E      3,215	  1,383    1,942.8	  0.0	  .0	 .0	.0    329,210
		END IF;
			  ------------------------------------------------------

PGA Aggr Target Histogram		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Optimal Executions are purely in-memory operations
	END IF;

  Low	  High
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs

------- ------- -------------- -------------- ------------ ------------
     2K      4K 	   765		  765		 0	      0
    64K    128K 	    73		   73		 0	      0
   128K    256K 	    66		   66		 0	      0
	-- Choose the random block. The v_do_hotspot handler that follows can override.
   256K    512K 	    48		   48		 0	      0
   512K   1024K 	   155		  155		 0	      0
     1M      2M 	   221		  221		 0	      0
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
     2M      4M 	     7		    7		 0	      0
			  ------------------------------------------------------

PGA Memory Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 67

-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0

				       Estd Extra    Estd P Estd PGA
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
---------- ------- ---------------- ---------------- ------ -------- -------
       402     0.1	    2,414.5	       257.5   90.0	  53 8.4E+06
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
       804     0.3	    2,414.5	       257.5   90.0	  52 8.4E+06
     1,608     0.5	    2,414.5	       244.9   91.0	  49 8.4E+06
     2,411     0.8	    2,414.5	       177.5   93.0	  43 8.2E+06
     3,215     1.0	    2,414.5		 0.0  100.0	   0 7.6E+06
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
     3,858     1.2	    2,414.5		 0.0  100.0	   0 7.6E+06
     4,501     1.4	    2,414.5		 0.0  100.0	   0 7.6E+06
     5,144     1.6	    2,414.5		 0.0  100.0	   0 7.6E+06
     5,787     1.8	    2,414.5		 0.0  100.0	   0 7.6E+06
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
     6,430     2.0	    2,414.5		 0.0  100.0	   0 7.6E+06
     9,645     3.0	    2,414.5		 0.0  100.0	   0 7.6E+06
    12,860     4.0	    2,414.5		 0.0  100.0	   0 7.6E+06
    19,290     6.0	    2,414.5		 0.0  100.0	   0 7.6E+06
	END IF;
    25,720     8.0	    2,414.5		 0.0  100.0	   0 7.6E+06
			  ------------------------------------------------------



Shared Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 67
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
----------------------------------------------------------------------------------------------------------------------
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

-- The following section governs what the SQL execution will be (UPDATE or SELECT)
				       Est LC Est LC  Est LC Est LC
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
----------------------------------------------------------------------------------------------------------------------
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
   1,248    .8	     47        2,453	3,770	  .7   2,529	3.2	     162
   1,312    .8	    108        5,216	4,991	  .9   1,308	1.6	     205

   1,344    .8	    138        6,432	5,447	 1.0	 852	1.1	     221
   1,376    .8	    166        7,529	5,493	 1.0	 806	1.0	     222
   1,408    .9	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,440    .9	    166        7,529	5,498	 1.0	 801	1.0	     222
	IF  ( v_select_only_workload = TRUE ) THEN
   1,472    .9	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,504    .9	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,536    .9	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,568   1.0	    166        7,529	5,498	 1.0	 801	1.0	     222
		-- handle case where user specified zero pct updates (a SELECT-only workload)
   1,600   1.0	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,632   1.0	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,664   1.0	    166        7,529	5,498	 1.0	 801	1.0	     222
		v_do_update := FALSE;
   1,696   1.0	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,728   1.1	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,760   1.1	    166        7,529	5,498	 1.0	 801	1.0	     222
		v_update_quota := TRUE ;
   1,792   1.1	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,824   1.1	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,856   1.1	    166        7,529	5,498	 1.0	 801	1.0	     222
	ELSE
   1,888   1.2	    166        7,529	5,498	 1.0	 801	1.0	     222
   1,920   1.2	    166        7,529	5,498	 1.0	 801	1.0	     222
   2,016   1.2	    166        7,529	5,498	 1.0	 801	1.0	     222
   2,208   1.4	    166        7,529	5,498	 1.0	 801	1.0	     222
		IF ( v_update_only_workload = TRUE ) THEN
   2,400   1.5	    166        7,529	5,498	 1.0	 801	1.0	     222
   2,592   1.6	    166        7,529	5,498	 1.0	 801	1.0	     222
   2,784   1.7	    166        7,529	5,498	 1.0	 801	1.0	     222
   2,976   1.8	    166        7,529	5,498	 1.0	 801	1.0	     222
			-- handle case where user specified 100% updates
   3,168   1.9	    166        7,529	5,498	 1.0	 801	1.0	     222
   3,360   2.1	    166        7,529	5,498	 1.0	 801	1.0	     222
			  ------------------------------------------------------

			v_do_update := TRUE;
SGA Target Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 67

SGA Target   SGA Size	    Est DB     Est Physical
  Size (M)     Factor	  Time (s)	      Reads
			v_update_quota := FALSE;
---------- ---------- ------------ ----------------
     2,416	  0.3	   301,529	 41,056,209
     3,624	  0.4	   301,289	 40,773,171
     4,832	  0.5	   301,019	 40,387,925
		ELSE
     6,040	  0.6	   300,808	 40,065,577
     7,248	  0.8	   300,688	 39,912,264
     8,456	  0.9	   300,478	 39,609,571
     9,664	  1.0	   300,268	 39,310,809
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
    10,872	  1.1	   300,148	 39,157,497
    12,080	  1.3	   299,968	 38,870,528
    13,288	  1.4	   299,758	 38,587,490
    14,496	  1.5	   299,667	 38,442,040
    15,704	  1.6	   299,457	 38,166,864
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
    16,912	  1.8	   299,367	 38,033,208
    18,120	  1.9	   299,367	 38,033,208
    19,328	  2.0	   299,367	 38,033,208
			  ------------------------------------------------------
			IF ( v_update_quota = FALSE ) THEN

Streams Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 67

		  No data exists for this section of the report.
				-- Handle case where user has set UPDATE_PCT to a valid value
			  ------------------------------------------------------

Java Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 67

		  No data exists for this section of the report.
				--
			  ------------------------------------------------------

Buffer Wait Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by wait time desc, waits desc
				-- We are doing updates during this run and quota has not been met yet

Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
data block		   114			14	      126
				-- We still vacillate until update quota has been met
undo header		    11			 2	      185
segment header		     1			 0	       10
undo block		    30			 0		0
			  ------------------------------------------------------



Enqueue Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> only enqueues with requests are shown
				IF ( MOD(v_random_block,  2) = 0 ) THEN
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
					v_do_update := TRUE;
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
TX-Transaction (row lock contention)
				ELSE
	   8		8	    0		8	    39	     4,912.50
TM-DML
      27,691	   27,693	    0	       94	    11	       119.90
CF-Controlfile Transaction
					v_do_update := FALSE;
       2,337	    2,334	    3	       71	     3		40.32
RO-Multiple Object Reuse (fast object reuse)
				END IF;
	 342	      342	    0	      114	     1		12.15
PS-PX Process Reservation
	 120	      120	    0	       48	     1		16.29
FB-Format Block
			ELSE
	  17	       17	    0		8	     0		23.00
TD-KTF map table enqueue (KTF dump entries)
	   2		2	    0		2	     0		88.00
DW-In memory Dispenser
	  11		8	    3		6	     0		 6.00
				-- UPDATE quota has been filled,  force drain some SELECTs
WF-AWR Flush
	  34	       29	    5	       12	     0		 1.58
TO-Temp Object
	  64	       64	    0		5	     0		 3.00
				v_do_update := FALSE;
TT-Tablespace
	 135	      135	    0		3	     0		 3.33
WT-AWR CDB-Wide Table Lock
	  22	       22	    0		4	     0		 2.25
			END IF;
HW-Segment High Water Mark
	 700	      700	    0		4	     0		 1.50
DR-Distributed Recovery
	   1		1	    0		1	     0		 6.00
TA-Instance Undo
		END IF;
	   3		3	    0		3	     0		 1.67
AF-Advisor Framework (task serialization)
	  13	       13	    0		1	     0		 2.00
JG-Job Scheduler1
	END IF;
      93,261	   93,261	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)
      93,261	   93,261	    0		0	     0		  N/A
TX-Transaction

      27,520	   27,506	   15		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
       8,882	    8,882	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 738	      738	    0		0	     0		  N/A
----------------------------------------------------------------------------------------------------------------------
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
	 635	      634	    0		0	     0		  N/A
BU-Buddy Instance Context (recovery set construct)
	 283	      283	    0		0	     0		  N/A
FP-File Object (global fob contention)
-- The type of SQL is now determined...execute it in the following section
	 222	      222	    0		0	     0		  N/A
CU-Cursor
	 150	      150	    0		0	     0		  N/A
MR-Media Recovery
	 145	      145	    0		0	     0		  N/A
----------------------------------------------------------------------------------------------------------------------
SH-Active Session History Flushing
	 101	      100	    1		0	     0		  N/A
PW-Buffer Cache PreWarm (flush prewarm buffers)
	  55	       55	    0		0	     0		  N/A

XR-Quiesce / Force Logging (database force logging)
	  55	       55	    0		0	     0		  N/A
IS-Instance State
	  54	       54	    0		0	     0		  N/A

	IF ( v_do_update != TRUE ) THEN
Enqueue Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc
		--

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
		-- Do a SELECT statement
------------ ------------ ----------- ----------- ------------ --------------
SE-Session Migration
	  43	       43	    0		0	     0		  N/A
SQ-Sequence Cache
	  16	       16	    0		0	     0		  N/A
		-- Work out scan or random
TH-Threshold Chain (metric threshold evaluation)
	  15	       15	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)
	  14	       14	    0		0	     0		  N/A
		IF  ( v_random_workload_only = TRUE ) THEN
PR-Process Startup
	   7		7	    0		0	     0		  N/A
AE-Edition Lock (lock)
	   5		5	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
	   5		5	    0		0	     0		  N/A
IT-In-Mem Temp Table Meta Creation
	   4		4	    0		0	     0		  N/A
MW-MWIN Schedule
			v_do_scan_query := FALSE;
	   1		1	    0		0	     0		  N/A
RS-Reclaimable Space (read alert level)
	   1		1	    0		0	     0		  N/A
			  ------------------------------------------------------

			v_scan_query_quota := TRUE ;

Undo Segment Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Min/Max TR (mins) - Min and Max Tuned Retention (minutes)
-> STO - Snapshot Too Old count,  OOS - Out of Space count
		ELSE
-> Undo segment block stats:
-> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed
-> eS - expired   Stolen,   eR - expired   Released,   eU - expired   reUsed

			IF ( v_scan_workload_only = TRUE ) THEN
Undo   Num Undo       Number of  Max Qry   Max Tx Min/Max   STO/     uS/uR/uU/
 TS# Blocks (K)    Transactions  Len (s) Concurcy TR (mins) OOS      eS/eR/eU
---- ---------- --------------- -------- -------- --------- ----- --------------
   5	  172.6 	 32,130      960      242 20/30.1   0/0   0/0/0/0/0/0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
			  ------------------------------------------------------

Undo Segment Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Most recent 35 Undostat rows, ordered by Time desc

				v_do_scan_query := TRUE;
		Num Undo    Number of Max Qry  Max Tx Tun Ret STO/    uS/uR/uU/
End Time	  Blocks Transactions Len (s)	Concy  (mins) OOS     eS/eR/eU
------------ ----------- ------------ ------- ------- ------- ----- ------------
				v_scan_query_quota := FALSE;
12-Feb 15:09	 117,396       21,669	  960	  239	   30 0/0   0/0/0/0/0/0
12-Feb 14:59	  55,198       10,461	  358	  242	   20 0/0   0/0/0/0/0/0
			  ------------------------------------------------------


			ELSE
Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
				IF ( v_scan_query_quota = FALSE ) THEN
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
AQ Background: interrupt	      1    0.0		   0	       32    0.0
AQ Coord jobx_kwsbgsgn l	     30    0.0		   0		0    N/A
AQ Message drive state o	      1    0.0		   0		0    N/A
AQ Sharded master pool l	     30    0.0		   0		0    N/A
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
AQ deq hash table latch 	      1    0.0		   0		0    N/A
ASM Keyed state latch		    268    0.4	  0.0	   0		0    N/A
ASM allocation			 54,127    0.0		   0		0    N/A
ASM connection state lat	  7,734    0.0		   0		0    N/A
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
ASM db client latch		    802    0.0		   0		0    N/A
ASM map headers 		  1,571    0.0		   0		0    N/A
ASM map load waiting lis	    448    0.0		   0		0    N/A
ASM map operation freeli	 32,449    0.4	  0.0	   0		0    N/A
						v_do_scan_query := TRUE;
ASM map operation hash t     53,223,468    0.0	  0.3	   1		0    N/A
ASM network background l	  7,914    0.0		   0		0    N/A
ASM network state latch 	    466    0.0		   0		0    N/A
ASM remote client latch 	     14    0.0		   0		0    N/A
					ELSE
AWR Alerted Metric Eleme	 11,456    0.0		   0		0    N/A
Autotask management		     15    0.0		   0		0    N/A
Change Notification Hash	    395    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
						v_do_scan_query := FALSE;
Consistent RBA			 17,115    0.1	  0.6	   0		0    N/A
DML lock allocation		 58,205    0.0		   0		0    N/A
Event Group Locks		     49    0.0		   0		0    N/A
FIB s.o chain latch		    451    0.0		   0		0    N/A
					END IF;
FOB consolidated s.o lis	    451    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
				ELSE
Hang Manager wait event 	     59    0.0		   0	   10,598    0.0
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	    909    0.0		   0		0    N/A
ILM access tracking exte	      1    0.0		   0		0    N/A
					-- Scan quota has been filled,	force drain some random access SELECTS
ILM activity tracking la	      1    0.0		   0		0    N/A
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A
					v_do_scan_query := FALSE;
IM area sb latch		      1    0.0		   0		0    N/A
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
IM area scb latch		      1    0.0		   0		0    N/A
v_now := DBMS_UTILITY.GET_TIME();
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
IMFS defer write list		      1    0.0		   0		0    N/A
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		     10    0.0		   0		0    N/A
IPC stats buffer allocat	      1    0.0		   0		0    N/A

In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		  4,516    0.0		   0		0    N/A
JS broadcast add buf lat	  4,542    0.0		   0		0    N/A
v_total_time := v_end_time - v_begin_time ;
JS broadcast drop buf la	  4,542    0.0		   0		0    N/A
JS broadcast load blnc l	     27    0.0		   0		0    N/A
JS queue access latch		      1    0.0		   0		0    N/A
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
JS queue state obj latch	189,630    0.0		   0		0    N/A
JS slv state obj latch		      1    0.0		   0		0    N/A
KCNIBR - invalid block r	      1    0.0		   0		0    N/A
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
KDMADO action list latch	      1    0.0		   0		0    N/A
KDMADO bll latch		      1    0.0		   0		0    N/A


Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
END;</pre_sqltext></td></tr>
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

<tr><td scope="row" class='awrc'><a class="awr" name="9t7r85fxpxsnj"></a>9t7r85fxpxsnj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
v_default_schema_number PLS_INTEGER := '29';
------------------------ -------------- ------ ------ ------ ------------ ------
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
v_update_pct PLS_INTEGER := '15';
KFC Hash Latch			      1    0.0		   0		0    N/A
KFCL LE Freelist		      1    0.0		   0		0    N/A
v_max_loop_iterations PLS_INTEGER := '0';
KFIAS client latch		      1    0.0		   0		0    N/A
KFIAS cluster latch		      1    0.0		   0		0    N/A
KFIAS endpoint latch		      1    0.0		   0		0    N/A
v_seconds_to_run PLS_INTEGER := '600';
KFIAS node latch		      1    0.0		   0		0    N/A
KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A
v_scale PLS_INTEGER := '1048576';
KFK SGA Libload latch		 18,678    0.0		   0		0    N/A
KFMD SGA			    517    0.0		   0		0    N/A
KGNFS-NFS:SHM structure 	      5    0.0		   0		0    N/A
v_work_unit PLS_INTEGER := '128' ;
KGNFS-NFS:SVR LIST		    302    0.0		   0		0    N/A
KJC message pool KGH cal	 58,126    0.0		   0		0    N/A
KJC message pool free li	809,514    0.3	  0.2	   1	1,395,011    2.7
v_redo_stress  VARCHAR2(12) := 'LITE';
KJC message pool pending	      1    0.0		   0		0    N/A
KJCT flow control latch       6,341,118    0.1	  0.1	   1		0    N/A
KMG MMAN ready and start	    302    0.0		   0		0    N/A
v_hot_schema_modulus PLS_INTEGER := '0';
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
v_do_hotspot   VARCHAR(7) := 'FALSE';
KSFS id table parent lat	      1    0.0		   0		0    N/A
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
v_hotspot_mb  NUMBER := '8';
KSGL LS Segment latch		      1    0.0		   0		0    N/A
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
v_hotspot_offset_mb NUMBER := '16';
KSIPC SGA allocation par	  1,066    0.1	  0.0	   0		0    N/A
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A
KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
v_hotspot_modulus  PLS_INTEGER := '3';
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A

KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	    116    0.0		   0		4    0.0
KSXR hang analysis phase	    346    0.0		   0		0    N/A
KSXR large replies		     38    0.0		   0		0    N/A
v_sleep_modulus PLS_INTEGER := '0';
KTF sga latch			      4    0.0		   0	      404    0.0
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A
v_sleep_min NUMBER := '.1';
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
KWQMN job cache list lat	    131    0.0		   0		0    N/A
v_sleep_max NUMBER := '.5';
Latch for NonceHistory		      1    0.0		   0		0    N/A
Locator state objects po	      1    0.0		   0		0    N/A
Lost write change tracki	      1    0.0		   0		0    N/A
Lsod array latch		    335    0.0		   0		0    N/A
v_scan_query_pct PLS_INTEGER := '0';
MGA asr alloc latch		     15    0.0		   0		0    N/A
MGA heap latch			    541    8.9	  0.5	   0		0    N/A
MGA shared context latch	  4,263    2.0	  0.6	   0		0    N/A
v_obfuscate VARCHAR(5)	:= 'FALSE';
MGA shared context root 	    551   23.2	  0.7	   0		0    N/A
MQL Tracking Latch		      0    N/A		   0	       18    0.0

Memory Management Latch 	      0    N/A		   0	      302    0.0
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A

Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait

Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
v_num_tmp NUMBER := 0;
Message cache latch		      1    0.0		   0		0    N/A
MinActiveScn Latch		     45    0.0		   0		0    N/A
Mutex				      1    0.0		   0		0    N/A

Mutex Stats			      1    0.0		   0		0    N/A
Nologging Standby SCN Ti	    292    0.0		   0		0    N/A
OS process			  1,576    0.0		   0		0    N/A
v_loop_cnt PLS_INTEGER := 0;
OS process allocation		  2,096    0.0		   0		0    N/A
OS process: request allo	    268    0.0		   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A
PDB LRU structure		     25    0.0		   0		0    N/A
v_rowcnt PLS_INTEGER := 0;
PL/SQL warning settings 	     41    0.0		   0		0    N/A
PX hash array latch		      1    0.0		   0		0    N/A
Parent latch for depende	      1    0.0		   0		0    N/A
v_updates_cnt PLS_INTEGER := 0;
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
QMT				      1    0.0		   0		0    N/A
v_selects_cnt PLS_INTEGER := 0;
Real-time descriptor lat	 29,628    0.0		   0		0    N/A
Report Request stats lat	     58    0.0		   0		0    N/A
Report Request struct la	     22    0.0		   0		0    N/A

Request holder compeltio	     15    0.0		   0		0    N/A
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
SGA Blackbox latch		      3    0.0		   0		0    N/A
v_random_access_queries_cnt PLS_INTEGER := 0;
SGA IO buffer pool latch	     39    0.0		   0	       39    0.0
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
SGA Logging Log Latch		 16,471    0.0		   0		0    N/A
v_scan_queries_cnt PLS_INTEGER := 0;
SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
SGA heap locks			      1    0.0		   0		0    N/A

SGA pool locks			      1    0.0		   0		0    N/A
SO private so latch		    498    0.2	  0.0	   0	       28    0.0
SQL memory manager latch	      1    0.0		   0	      301    0.0
SQL memory manager worka	 21,565    0.0		   0		0    N/A
v_do_scan_query BOOLEAN :=FALSE;
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		     15    0.0		   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     33    0.0		   0		0    N/A
Streams Generic 		      1    0.0		   0		0    N/A
v_scan_workload_only BOOLEAN := FALSE;
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
Token Manager			      1    0.0		   0		0    N/A
Txn Ht elm latch		      1    0.0		   0		0    N/A
v_random_workload_only BOOLEAN := FALSE;
Txn bkt latch			      1    0.0		   0		0    N/A
UM object latch 		      1    0.0		   0		0    N/A
WCR: sync			      1    0.0		   0		0    N/A

Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
XDB NFS Security Latch		      1    0.0		   0		0    N/A

XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
active checkpoint queue 	152,441    0.2	  0.1	   0		0    N/A
active service list		 96,510    0.0	  0.2	   0	    1,008    0.0
v_random_block PLS_INTEGER := 1;
archive destination		     30    0.0		   0		0    N/A
begin backup scn array		    118    0.0		   0		0    N/A
buffer pool			      1    0.0		   0		0    N/A
business card			     31    0.0		   0		0    N/A
v_tmp PLS_INTEGER;
cache buffer handles		    168    0.0		   0		0    N/A
cache buffers chains	    153,266,064    0.0	  0.2	   1   42,943,442    0.1
cache buffers lru chain      10,836,656    0.3	  0.1	   1   27,128,302    0.8

v_now PLS_INTEGER;
Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_brick_wall PLS_INTEGER;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct

				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_begin_time PLS_INTEGER;
cache table scan latch		  1,848    0.0		   0	    1,848    0.0
call allocation 		  1,247    1.5	  0.8	   0		0    N/A
change notification clie	      1    0.0		   0		0    N/A
v_end_time PLS_INTEGER;
channel handle pool latc	    544    0.0		   0		0    N/A
channel operations paren	  3,317    0.0	  0.0	   0		4    0.0
checkpoint queue latch	      7,571,716    0.0	  0.2	   0	3,731,604    0.0
client/application info 	    389    0.0		   0		0    N/A
v_total_time PLS_INTEGER;
compile environment latc	     52    0.0		   0		0    N/A
corrupted undo seg latch	      6    0.0		   0		0    N/A
cp handoff latch		      1    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
cp sga latch			     14    0.0		   0		0    N/A
cp srv type state latch 	    904    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		     16    0.0		   0		5    0.0
cvmap freelist lock		      1    0.0		   0		0    N/A
v_total_cpu_tm PLS_INTEGER;
deferred cleanup latch		     14    0.0		   0		0    N/A
dispatcher info 		      8    0.0		   0		0    N/A
dml lock allocation		     14    0.0		   0		0    N/A

done queue latch		      1    0.0		   0		0    N/A
dtp latch			    268    0.0		   0		0    N/A
dummy allocation		    338    0.0		   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
eighth spare latch - X p	      1    0.0		   0		0    N/A
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	  401,172    0.0
enqueue hash chains		585,321    0.0	  0.2	   0	      104    0.0
v_loop_control BOOLEAN := FALSE;
enqueues			    378    0.0		   0		0    N/A
error message lists		     71    0.0		   0		0    N/A
fast space usage latch		     55    0.0		   0		0    N/A
v_update_quota BOOLEAN := FALSE;
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		    134    0.0		   0		0    N/A
flash file access latch 	      1    0.0		   0		0    N/A
flashback copy			      1    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
fourteenth spare latch -	      1    0.0		   0		0    N/A
fourth Audit Vault latch	      1    0.0		   0		0    N/A
gc element		     30,811,888    0.1	  0.1	   3	1,744,701    0.2
gc xid list			    159    0.0		   0		0    N/A
v_update_only_workload BOOLEAN := FALSE;
gcr global ctx			     76    0.0		   0		0    N/A
gcs commit scn state		      1    0.0		   0		0    N/A
gcs nodemap pool		733,742    0.0	  0.1	   0		0    N/A
v_do_update BOOLEAN := FALSE;
gcs opaque info freelist	692,376    0.0	  0.2	   0		0    N/A
gcs partitioned table ha     37,655,269    0.0	  0.0	   0   16,833,271    0.0
gcs pcm hashed value buc	      1    0.0		   0		0    N/A
gcs remaster request que	      3    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
gcs resource freelist	      4,750,558    0.0	  0.1	   0	  270,487    0.1
gcs resource hash	     48,646,303    0.0	  0.3	   2	      295    0.0
gcs resource scan list		      3    0.0		   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
gcs resource timerq list	      1    0.0		   0		0    N/A
gcs resource validate li	      1    0.0		   0		0    N/A
gcs shadows freelist	      4,368,738    0.0	  0.3	   0		0    N/A
ges cached resource list	 47,570    0.0	  0.1	   0	   33,589    0.0
v_sharing_schema BOOLEAN := FALSE;
ges deadlock list		  1,636    0.0		   0	       16    0.0
ges domain table		169,477    0.0		   0		0    N/A
ges enqueue table freeli	 63,659    0.0		   0		0    N/A
v_seed VARCHAR2(128);
ges group table 		169,870    0.0	  0.0	   0		0    N/A
ges process hash list		 16,472    0.0	  0.0	   0		0    N/A
ges process parent latch	345,872    0.0		   0		0    N/A
v_home_schema_str VARCHAR2(80);
ges process table freeli	    268    0.0		   0		0    N/A
ges remote lock freelist	    981    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_scratch VARCHAR2(200) ;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests

-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
v_cpu_pct NUMBER(6, 3);
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
ges resource hash list		231,310    0.2	  0.4	   0	    4,266    0.1
v_my_serial NUMBER(16);
ges resource scan list		      9    0.0		   0		0    N/A
ges resource table freel	  7,318    0.0		   0		0    N/A
ges s-lock bitvec freeli	    254    0.0		   0		0    N/A

ges timeout list		  1,545    0.0		   0	      462    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global tx hash mapping		      1    0.0		   0		0    N/A
granule from data transf	      1    0.0		   0		0    N/A
BEGIN
gws:Sharding global desc	     60    0.0		   0		0    N/A
hash table Sql Plan Find	     19    0.0		   0	       78    0.0
hash table column usage 	    422    0.0		   0	    3,719    0.0

hash table expression us	      9    0.0		   0		0    N/A
hash table modification 	      1    0.0		   0		0    N/A
hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      549    0.0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
heartbeat structure mana	      0    N/A		   0	      451    0.0
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
imc hash lat			      1    0.0		   0		0    N/A
EXECUTE IMMEDIATE v_home_schema_str;
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A

in-memory columnar segme	      1    0.0		   0		0    N/A
in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A

internal temp table obje	      1    0.0		   0		0    N/A
interrupt manipulation		    157    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
io pool granule list		    110    0.0		   0		0    N/A
io pool granule metadata	    222    0.0		   0		0    N/A
IF ( v_hot_schema_modulus != 0 ) THEN
job workq parent latch		      1    0.0		   0		0    N/A
job_queue_processes para	     15    0.0		   0		0    N/A
k2q global data latch		    602    0.0		   0		0    N/A
	v_do_hot_schema := TRUE;
k2q lock allocation		      1    0.0		   0		0    N/A
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A
kcn buffer chains		      1    0.0		   0		0    N/A
END IF;
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
kgnfs mount latch		      1    0.0		   0		0    N/A
kjbr roi instance map		      1    0.0		   0		0    N/A

kjci objects freelist la	 11,581    0.0		   0		0    N/A
kjci process context lat	 11,107    0.8	  0.1	   0	   56,120    0.0
kjci process list latch 	  4,637    0.0	  1.0	   0		0    N/A
kjci request sequence la	  1,307    0.0		   0		0    N/A
IF ( v_sleep_modulus != 0 )	  THEN
kjcipctx state object fr	    154    0.0		   0		0    N/A
kjoedcso state object fr	     14    0.0		   0		0    N/A
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A
kjoer owner hash bucket 	      1    0.0		   0		0    N/A
	v_do_sleeps := TRUE;
kjpm my inst data		     30    0.0		   0		0    N/A
kjsc Request obj freelis	    544    0.0		   0		0    N/A
kjsc Ring Buffer obj fre	    272    0.0		   0		0    N/A
END IF;
kjsc protect control req	    272    0.0		   0	    9,108    0.0
kjsc protect warm up con	    124    0.0		   0		0    N/A
kjsca protect pkey hash 	  9,109    0.0		   0		0    N/A

kjsca protect service ha	      1    0.0		   0		0    N/A
kjscpss state object fre	    272    0.0		   0		0    N/A
kokc descriptor allocati	     44    0.0		   0		0    N/A
kpoxft latch			      0    N/A		   0	      246    3.3
IF ( v_max_loop_iterations &gt; 0 )  THEN

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
	v_loop_control := TRUE ;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
END IF;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
krso process			     32    0.0		   0		0    N/A

ksbxic instance latch		     75    0.0		   0		0    N/A
ksevn object root latch 	    302    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
ksi resource reuse count	      1    0.0		   0		0    N/A
IF ( v_update_pct = 0 ) 	  THEN
ksim group membership ca	    583    0.0		   0		0    N/A
ksim membership request 	      0    N/A		   0	      413    0.0
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			     11    0.0		   0		0    N/A
	v_select_only_workload := TRUE;
ksuosstats global area		     68    0.0		   0	      345    0.0
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		     35    0.0		   0		0    N/A
ksv class latch 		 23,854    0.0	  0.6	   0		0    N/A
END IF;
ksv instance latch		      4    0.0		   0		0    N/A
ksv msg queue latch		    650    0.0		   0	      649    0.0
ksxp shared latch		    268    0.4	  1.0	   0		0    N/A

ksxp so latch			    268    0.4	  0.0	   0		0    N/A
ksz_so allocation latch 	    268    0.4	  1.0	   0		0    N/A
ktfbn latch			    261    0.0		   0		0    N/A
ktm adg jrnls			      1    0.0		   0		0    N/A
IF ( v_update_pct = 100 )	  THEN
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg space			      1    0.0		   0		0    N/A
ktm adg stages			      1    0.0		   0		0    N/A
	v_update_only_workload := TRUE;
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		     18    0.0		   0		0    N/A
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
END IF;
kwqbsn:qsga			     32    0.0		   0		0    N/A
kwslbmdl: metadata latch	     31    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A

kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	     21    0.0		   0		0    N/A
IF ( v_scan_query_pct = 0 ) 	THEN
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
kxfxscanrate_latch		      1    0.0		   0		0    N/A
lgwr LWN SCN			 17,463    0.3	  0.3	   0		0    N/A
list of block allocation	278,797    0.0	  1.0	   0		0    N/A
	v_random_workload_only := TRUE;
loader state object free	    250    0.0		   0		0    N/A
lob segment dispenser la	    119    0.0		   0		0    N/A
lob segment hash table l	    211    0.0		   0		0    N/A
lob segment query latch 	      1    0.0		   0		0    N/A
END IF;
lock DBA buffer during m	      1    0.0		   0		0    N/A
log write info			      0    N/A		   0	   52,896    3.4
log write worker phase		  7,523    0.0		   0		0    N/A

logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
logminer local			      1    0.0		   0		0    N/A
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
IF ( v_scan_query_pct = 100 ) 	THEN
managed standby 		     30    0.0		   0		0    N/A
message bitmap latch		      1    0.0		   0		0    N/A
message pool operations 	  1,029    0.0		   0		0    N/A
messages			444,229    0.2	  0.0	   0		0    N/A
	v_scan_workload_only := TRUE;
msg queue latch 		      1    0.0		   0		0    N/A
multiblock read objects 	668,480    0.1	  0.1	   0		0    N/A
name-service memory obje	    199    0.0		   0		0    N/A
name-service namespace b	  4,843    0.0		   0		0    N/A
END IF;
name-service pending que	     90    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for

   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
v_seconds_to_run := v_seconds_to_run * 100 ;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
name-service request		      8    0.0		   0		0    N/A

name-service request que	  9,184    0.0		   0		0    N/A
ncodef allocation latch 	     14    0.0		   0		0    N/A
ninth spare latch - X pa	      1    0.0		   0		0    N/A
object queue header free	 43,564    0.0		   0		0    N/A
object queue header oper     57,088,608    0.0	  0.1	   0	  435,323    0.0
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
object queue memory		     44    0.0		   0		0    N/A
object stats modificatio	    240    0.0		   0		0    N/A
parallel query alloc buf	    356    0.0		   0	      540    0.0
parallel query stats		     81    0.0		   0		0    N/A

parallel txn reco latch 	  1,938    0.0		   0		0    N/A
parameter table manageme	    705    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
pesom_free_list 		      1    0.0		   0		0    N/A
pesom_hash_node 		      1    0.0		   0		0    N/A
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		     14    0.0		   0		0    N/A
-- DBMS_RANDOM.seed (val =&gt; v_seed);
post/wait queue 		449,199    0.4	  0.1	   0	  428,030    0.3
process allocation		  4,657    0.0	  0.0	   0		0    N/A
process group creation		    268    0.0		   0		0    N/A
process memory detail		      1    0.0		   0		0    N/A

process pkey statistics 	      1    0.0		   0		0    N/A
process queue			    168    0.0		   0		0    N/A
process queue reference 	  5,675    0.0		   0	      783    0.0
qmn task queue latch		    132    0.0		   0		0    N/A
v_begin_time := DBMS_UTILITY.GET_TIME();
quarantine object		     15    0.0		   0		0    N/A
query server freelists		    175    0.0		   0		0    N/A
query server process		    788    0.0		   0		1    0.0
queued dump request		      3    0.0		   0		0    N/A
v_now := v_begin_time ;
queuing load statistics 	      1    0.0		   0		0    N/A
read-moslty lock queue u	      1    0.0		   0		0    N/A
recovery domain hash buc	    362    0.0		   0		0    N/A
redo allocation 		 70,627    3.1	  0.2	   0	3,740,226    1.1
v_brick_wall := v_now + v_seconds_to_run ;
redo copy			      1    0.0		   0	3,743,026    0.1
redo transport task		      2    0.0		   0		0    N/A
redo writing			220,251    0.1	  0.1	   0		0    N/A
remote tool request latc	    296    0.0		   0		0    N/A
resmgr group change latc	     35    0.0		   0		0    N/A
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
resmgr:active threads		    341    0.0		   0	       15    0.0

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
resmgr:actses change gro	     41    0.0		   0		0    N/A
resmgr:actses change sta	      1    0.0		   0		0    N/A
resmgr:free threads list	    337    0.0		   0		0    N/A
resmgr:plan CPU method		      1    0.0		   0		0    N/A
resmgr:plan change alloc	      1    0.0		   0		0    N/A
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A
resmgr:schema config		      6    0.0		   0	       15    0.0
resmgr:session queuing		      1    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
rt rmv count latch		      0    N/A		   0	      451    0.0
rules engine aggregate s	      1    0.0		   0		0    N/A
rules engine rule set st	      2    0.0		   0		0    N/A
second Audit Vault latch	      1    0.0		   0		0    N/A
segmented array pool		    451    0.0		   0		0    N/A
sequence cache			    564    0.0		   0		0    N/A
service drain list		    903    0.0		   0		0    N/A
session allocation		 26,801    0.0		   0	   26,161    0.0
session idle bit		 56,332    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
session state list latch	    343    0.0		   0		0    N/A
session statistics		    339    0.0		   0		0    N/A
session switching		    276    1.8	  0.2	   0		0    N/A
session timer			    301    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
sga hash table parent la	      1    0.0		   0		0    N/A
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		     97    0.0		   0		0    N/A
shared pool			153,963    0.1	  0.1	   0		0    N/A
shared pool sim alloc		      8    0.0		   0		0    N/A
shared pool simulator		    194    0.0		   0		0    N/A
shared server configurat	    302    0.0		   0		0    N/A
sim partition latch		      1    0.0		   0		0    N/A
simulator hash latch	      5,693,834    0.0	  0.1	   0		0    N/A
simulator lru latch		      1    0.0		   0	2,984,074    0.1
sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    625    0.0		   0		0    N/A
space background task la	  2,413   50.7	  1.0	   0	      599    2.0
state object free list		      2    0.0		   0		0    N/A
statistics aggregation		    145    0.0		   0		0    N/A
subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	     88    0.0		   0		0    N/A
temporary table state ob	      9    0.0		   0		0    N/A
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A
test excl. parent2 lmid 	      1    0.0		   0		0    N/A
test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A
test shared parent2 lmid	      1    0.0		   0		0    N/A
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     35    0.0		   0		0    N/A
trace latch			      4    0.0		   0		0    N/A
transaction allocation		    645    0.0		   0		0    N/A
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
twenty-second spare latc	      1    0.0		   0		0    N/A
twenty-third spare latch	      1    0.0		   0		0    N/A
undo global data		269,588    0.0	  0.2	   0	      142    0.0
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A
virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------


Latch Sleep Breakdown			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by misses desc

		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
-------------------------- --------------- ------------ ----------- -----------
cache buffers lru chain 	10,836,656	 33,857       1,945	 32,040
gc element			30,811,888	 15,924       1,860	 14,162
	END IF;
gcs resource hash		48,646,303	 12,033       3,278	  9,008
KJCT flow control latch 	 6,341,118	  9,134 	993	  8,204
cache buffers chains	       153,266,064	  5,941       1,023	  4,979

object queue header operat	57,088,608	  3,635 	327	  3,328
ASM map operation hash tab	53,223,468	  2,367 	627	  1,778
redo allocation 		    70,627	  2,222 	504	  1,741
KJC message pool free list	   809,514	  2,074 	470	  1,638
----------------------------------------------------------------------------------------------------------------------
post/wait queue 		   449,199	  1,679 	126	  1,553
space background task latc	     2,413	  1,223       1,168	    235
gcs resource freelist		 4,750,558	    846 	 63	    783
messages			   444,229	    742 	 28	    715
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
ges resource hash list		   231,310	    485 	181	    324
checkpoint queue latch		 7,571,716	    427 	 84	    350
multiblock read objects 	   668,480	    358 	 47	    311
active checkpoint queue la	   152,441	    313 	 28	    288
----------------------------------------------------------------------------------------------------------------------
redo writing			   220,251	    180 	 21	    162
ASM map operation freelist	    32,449	    134 	  1	    133
shared pool			   153,963	    130 	 13	    119

MGA shared context root la	       551	    128 	 85	     51
gcs nodemap pool		   733,742	    128 	 18	    110
gcs opaque info freelist	   692,376	     97 	 17	     81
kjci process context latch	    11,107	     90 	  7	     83
	IF  ( v_select_only_workload = TRUE ) THEN
MGA shared context latch	     4,263	     84 	 50	     40
undo global data		   269,588	     80 	 14	     67
MGA heap latch			       541	     48 	 24	     28
lgwr LWN SCN			    17,463	     45 	 12	     34
		-- handle case where user specified zero pct updates (a SELECT-only workload)
enqueue hash chains		   585,321	     34 	  7	     27
Consistent RBA			    17,115	     20 	 12	      8
call allocation 		     1,247	     19 	 16	      7
active service list		    96,510	     10 	  2	      8
		v_do_update := FALSE;
ges cached resource lists	    47,570	      8 	  1	      7
simulator hash latch		 5,693,834	      8 	  1	      7
ksv class latch 		    23,854	      7 	  4	      3
		v_update_quota := TRUE ;
session switching		       276	      5 	  1	      4
gcs shadows freelist		 4,368,738	      4 	  1	      3
list of block allocation	   278,797	      4 	  4	      1
kjci process list latch 	     4,637	      1 	  1	      0
	ELSE
ksxp shared latch		       268	      1 	  1	      0
ksz_so allocation latch 	       268	      1 	  1	      0
			  ------------------------------------------------------

		IF ( v_update_only_workload = TRUE ) THEN

Latch Miss Sources			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> only latches with sleeps are shown
-> ordered by name, sleeps desc
			-- handle case where user specified 100% updates

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
			v_do_update := TRUE;
ASM map operation freeli kffmsoDelete_1 		  0	     1	      1
ASM map operation hash t kffmTranslate			  0	   356	    321
ASM map operation hash t kffmDoDone_1			  0	   269	    306
			v_update_quota := FALSE;
ASM map operation hash t kffmUnidentify 		  0	     2	      0
KJC message pool free li kjcsmpav: allocate a msg b	  0	   295	    440
KJC message pool free li kjcspfmbq: free vector of	  0	   164	      0
		ELSE
KJC message pool free li kjcsmpf_sharepool: free ms	  0	    11	     29
KJCT flow control latch  kjctcsnd: send normal mess	  0	   365	    446
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	   271	     19
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	   228	    376
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
KJCT flow control latch  kjctr_updatetkt: update ti	  0	    56	     48
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	    43	     86
KJCT flow control latch  kjcts_adjtkt: adjust send	  0	    30	     18
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
MGA pid alloc latch	 ksm_mga_sctx_rtrcv_do_whr2	  0	     3	     30
MGA shared context latch ksm_mga_detach_whr2		  0	    30	     11
MGA shared context latch ksm_mga_sync_whr1		  0	    17	      9
MGA shared context root  ksm_mga_detach_whr1		  0	    85	     85
			IF ( v_update_quota = FALSE ) THEN
active checkpoint queue  kcbbacq: scan active check	  0	    28	     28
active service list	 kswsclstabc: scan list to	  0	     2	      1
cache buffers chains	 kcbzibmlt: multi-block rea	  0	   352	      0
				-- Handle case where user has set UPDATE_PCT to a valid value
cache buffers chains	 kcbzgb: scan from tail now	  0	   146	      0
cache buffers chains	 kclcls_3			  0	   103	     44
cache buffers chains	 kcbgtcr: slow path excl	  0	    66	    159
cache buffers chains	 kcbgcur: slow path		  0	    65	      8
				--
cache buffers chains	 kcbgtcr: fast path pin 	  0	    64	    404
cache buffers chains	 kcbgcur: fast path excl	  0	    41	     12
cache buffers chains	 kcbzibmlt: finish free buf	  0	    34	    161
cache buffers chains	 kcbgtcr: convert latch 	  0	    31	      0
				-- We are doing updates during this run and quota has not been met yet
cache buffers chains	 kcbbic2			  0	    22	     26
cache buffers chains	 kcbchg: aux pin		  0	    17	     18
cache buffers chains	 kcbzib: finish processing	  0	    15	     21
cache buffers chains	 kclpdcl			  0	    14	      0
				-- We still vacillate until update quota has been met
cache buffers chains	 kcbbxsv			  0	    13	     48
cache buffers chains	 kcbrls: fast pin release	  0	    11	     53
cache buffers chains	 kcbnlc 			  0	    10	     18

cache buffers chains	 kcbgtcr: convert latch 4	  0	     9	      0
cache buffers chains	 kcbnew: new latch again	  0	     7	      2
cache buffers chains	 kcbbic1			  0	     6	     19
cache buffers chains	 kcbchg: change complete	  0	     6	      3
				IF ( MOD(v_random_block,  2) = 0 ) THEN
cache buffers chains	 kclrlstp			  0	     6	      3
cache buffers chains	 kclexpandlock			  0	     5	     23
cache buffers chains	 kcbzacrb: convert latch	  0	     4	      0
cache buffers chains	 kcbchg: cleanout		  0	     3	      0
					v_do_update := TRUE;
cache buffers chains	 kcbchg: cur pin change 	  0	     3	      6
cache buffers chains	 kcbgtcr: fast path exam	  0	     3	     20
cache buffers chains	 kclrwrite_3			  0	     3	      0
				ELSE
cache buffers chains	 kclantilock			  0	     2	      1
cache buffers chains	 kcbso1: set no access		  0	     1	      0
cache buffers chains	 kcbzgb: exit_loop		  0	     1	      2
cache buffers chains	 kcllkopesc			  0	     1	      1
					v_do_update := FALSE;
cache buffers chains	 kclpdcl_1			  0	     1	     27
cache buffers lru chain  kcbzgws			  0	 1,317	      0
cache buffers lru chain  kcbzgb_2			  0	   545	    359
cache buffers lru chain  kcbbic2			  0	    28	  1,090
				END IF;
cache buffers lru chain  kcbzgb_1			  0	    25	     42
cache buffers lru chain  kcbbwlru			  0	    15	    308
			ELSE
cache buffers lru chain  kcbbxsv: move to being wri	  0	     9	      0
cache buffers lru chain  kcbzfw 			  0	     3	     18
cache buffers lru chain  kcbo_write_bufs		  0	     2	     70
call allocation 	 ksuxds 			  0	    16	     15

				-- UPDATE quota has been filled,  force drain some SELECTs
Latch Miss Sources			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

				v_do_update := FALSE;
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
checkpoint queue latch	 kcbklbc_cql			  0	    64	      0
			END IF;
checkpoint queue latch	 kcbkubc_4			  0	    13	     58
checkpoint queue latch	 kcbbwthc: thread checkpoin	  0	     3	     27
checkpoint queue latch	 kcbbwdl: thread checkpoint	  0	     2	      6
		END IF;
checkpoint queue latch	 kcbnlc: Link buffers into	  0	     2	      0
gc element		 kclnfndnewm			  0	   961	    426
gc element		 kclulb 			  0	   261	    583
gc element		 kclnfndx			  0	   152	    221
	END IF;
gc element		 KCLUNLNK			  0	   110	    392
gc element		 kclplz 			  0	    98	      0
gc element		 kclfwrite1			  0	    82	     68
gc element		 kclrwrite			  0	    64	     58

gc element		 kclpdcl			  0	    54	     19
gc element		 kclplz_1			  0	    28	      0
gc element		 kclhngcbk1			  0	    18	      0
gc element		 kclantilock_1			  0	    15	     12
gc element		 kclnfnds			  0	    11	     85
----------------------------------------------------------------------------------------------------------------------
gc element		 kclrwrite_1			  0	     9	      0
gc element		 kclpdc_1			  0	     5	     35
gc element		 kclebs 			  0	     3	      0
gc element		 kclexpand_2			  0	     3	      0
-- The type of SQL is now determined...execute it in the following section
gc element		 kclnfndnew			  0	     3	      1
gc element		 kclnfnd			  0	     2	      0
gc element		 kclbla 			  0	     1	      0
gcs nodemap pool	 kjbrnmapalloc_2		  0	    17	      9
gcs nodemap pool	 kjbrnmapalloc_1		  0	     1	      3
----------------------------------------------------------------------------------------------------------------------
gcs opaque info freelist kjbrinfoalloc			  0	    13	     12
gcs opaque info freelist kjbrinfofree free opaque i	  0	     4	      5
gcs resource freelist	 kjbrralc: reserve allocati	  0	    33	      0

gcs resource freelist	 kjbralc: check freelist no	  0	    17	      0
gcs resource freelist	 kjbrfr_bg2			  0	    13	     24
gcs resource hash	 kclfwrite1			  0	   902	    177
gcs resource hash	 kjblocalobj_nolock		  0	   635	  1,232
	IF ( v_do_update != TRUE ) THEN
gcs resource hash	 kjbcropen			  0	   338	    396
gcs resource hash	 kjbopen			  0	   300	     77
gcs resource hash	 kclpdc 			  0	   221	    405
gcs resource hash	 kjbmpopen			  0	   210	    123
		--
gcs resource hash	 kjbmpclose			  0	   184	    117
gcs resource hash	 kjblpast			  0	   156	    254
gcs resource hash	 kjbclose_remaster		  0	   132	    260
		-- Do a SELECT statement
gcs resource hash	 kjbrdowncvt			  0	    66	      2
gcs resource hash	 kjbrprmexpack			  0	    42	     16
gcs resource hash	 kclrwrite			  0	    30	    157
		-- Work out scan or random
gcs resource hash	 kjbmpflushpi			  0	    18	     28
gcs resource hash	 kjbassume			  0	    10	      7
gcs resource hash	 kjbcancel			  0	    10	      1
gcs resource hash	 kjbmpconvert			  0	     6	      0
		IF  ( v_random_workload_only = TRUE ) THEN
gcs resource hash	 kjbconvert			  0	     5	      1
gcs resource hash	 kjbopen:affinity		  0	     5	      0
gcs resource hash	 kjblpgorm: clear anti-lock	  0	     2	      2
gcs resource hash	 kjblprmexp2			  0	     2	     16
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
gcs shadows freelist	 kjblralc: allocate reserve	  0	     1	      0
ges cached resource list kjruch: cached obj cleanup	  0	     1	      0
ges resource hash list	 kjlrlr: remove lock from r	  0	   168	    177
ges resource hash list	 kjakcai: search for resp b	  0	     6	      1
			v_do_scan_query := FALSE;
ges resource hash list	 kjrmas1: lookup master nod	  0	     4	      0
ges resource hash list	 kjlmfnd: search for lockp	  0	     3	      1
kjci process context lat kjci_finish_int:2		  0	     7	      0
kjci process list latch  kjcilwplist3			  0	     1	      1
			v_scan_query_quota := TRUE ;
ksv class latch 	 ksvclsl: checkpool		  0	     2	      0

Latch Miss Sources			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> only latches with sleeps are shown
		ELSE
-> ordered by name, sleeps desc

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
			IF ( v_scan_workload_only = TRUE ) THEN
ksv class latch 	 ksvclsl: rdp - recycle 	  0	     1	      1
ksv class latch 	 ksvclsl: workmsgfree		  0	     1	      1
ksxp shared latch	 ksxp_close			  0	     1	      1
ksz_so allocation latch  ksz_parent_so_del1		  0	     1	      1
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
list of block allocation ktlbbl 			  0	     3	      1
list of block allocation ktlabl 			  0	     1	      3
messages		 ksarcv 			  0	    16	      7
messages		 ksaamb: after wakeup		  0	     6	     17
				v_do_scan_query := TRUE;
messages		 ksarcv: after wait		  0	     6	      4
mostly latch-free SCN	 kcs01				  0	    10	     12
mostly latch-free SCN	 kcs024 			  0	     8	      0
mostly latch-free SCN	 kcslcu3			  0	     4	     12
				v_scan_query_quota := FALSE;
mostly latch-free SCN	 kcsnew_scn_rba 		  0	     2	      0
multiblock read objects  kcbzibmlt: normal mbr free	  0	    25	     26
multiblock read objects  kcbzibmlt			  0	    22	     21
object queue header oper kcbo_unlink_q			  0	   196	    177
			ELSE
object queue header oper kcbo_link_q			  0	    69	     34
object queue header oper kcbo_switch_cq 		  0	    37	     63
object queue header oper kcbo_switch_q_bg		  0	    20	     16
object queue header oper kcbo_switch_mq_bg		  0	     9	     40
				IF ( v_scan_query_quota = FALSE ) THEN
object queue header oper kcbo_write_bufs		  0	     1	      2
post/wait queue 	 ksliwat:remove 		  0	    66	    121
post/wait queue 	 ksliwat:add:nowait		  0	    58	      0
post/wait queue 	 kslpstevent:reget		  0	     2	      2
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	   422	      0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    29	    367
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    20	      0
redo allocation 	 kcrfw_redo_write: before w	  0	    19	     80
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
redo allocation 	 kcrfw_post: more space 	  0	    14	     57
redo writing		 kcrfwcr			  0	    13	     19
redo writing		 kcrfw_post: rba scn pair	  0	     7	      0
redo writing		 kcrfw_cal_target_rba		  0	     1	      2
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
session switching	 kskexeall			  0	     1	      1
simulator hash latch	 kcbsacc: insert dba		  0	     1	      0
space background task la ktsj_grab_task 		  0	   815	  1,076
space background task la ktsj_detach_task		  0	   187	     92
						v_do_scan_query := TRUE;
space background task la ktsj_smco_purgeexpired 	  0	   159	      0
space background task la ktsj_smco_movetasks		  0	     7	      0
undo global data	 ktusmupst: KSLBEGIN		  0	    14	     14
unknown latch		 kghfre 			  0	    35	     35
					ELSE
unknown latch		 ksqcmi: if lk mode not req	  0	     3	      2
unknown latch		 kghupr1			  0	     2	      1
unknown latch		 ksqrcl 			  0	     2	      4
unknown latch		 ksqcmi: if lk mode request	  0	     1	      0
						v_do_scan_query := FALSE;
unknown latch		 ksqgtl3			  0	     1	      1
			  ------------------------------------------------------

Mutex Sleep Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by number of sleeps desc
					END IF;

									 Wait
Mutex Type	      Location				     Sleeps    Time (ms)
--------------------- -------------------------------- ------------ ------------
				ELSE
Library Cache	      kglpndl1	95				  6	       0
Row Cache	      [19] kqrpre				  5	      10
Library Cache	      kglhdgn1	62				  4	       0
Library Cache	      kglpin1	4				  2	       0
Cursor Pin	      kkslce [KKSCHLPIN2]			  2	       2
					-- Scan quota has been filled,	force drain some random access SELECTS
Cursor Pin	      kksLockDelete [KKSCHLPIN6]		  1	       1
			  ------------------------------------------------------


Parent Latch Statistics 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
					v_do_scan_query := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

Child Latch Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
				END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


			END IF;
Segments by Logical Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Logical Reads:      24,645,118
-> Captured Segments account for   80.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
		END IF;

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				 Logical

Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478    3,400,224   13.80

USER35		     IOPS
CF1				TABLE	   73450      73453    1,970,496    8.00
USER42		     IOPS
CF1				TABLE	   73488      73492    1,956,784    7.94
USER44		     IOPS
		IF ( v_do_scan_query != TRUE ) THEN
CF1				TABLE	   73501      73503    1,890,128    7.67
USER39		     IOPS
CF1				TABLE	   73471      73470    1,349,216    5.47
			  ------------------------------------------------------
			SELECT COUNT(c2) INTO v_rowcnt

Segments by Physical Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Physical Reads:      22,345,229
-> Captured Segments account for   82.8% of Total
			FROM cf1
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478    2,857,313   12.79

USER35		     IOPS
CF1				TABLE	   73450      73453    1,821,143    8.15
USER42		     IOPS
CF1				TABLE	   73488      73492    1,809,954    8.10
USER44		     IOPS
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
CF1				TABLE	   73501      73503    1,748,416    7.82
USER39		     IOPS
CF1				TABLE	   73471      73470    1,271,736    5.69
			  ------------------------------------------------------

		ELSE
Segments by Physical Read Requests	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Physical Read Requests:      22,277,415
-> Captured Segments account for   82.8% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.			       Phys Read

Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478    2,857,221   12.83
USER35		     IOPS
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
CF1				TABLE	   73450      73453    1,821,150    8.17
USER42		     IOPS
CF1				TABLE	   73488      73492    1,809,963    8.12
USER44		     IOPS

CF1				TABLE	   73501      73503    1,748,406    7.85
USER39		     IOPS
CF1				TABLE	   73471      73470    1,271,691    5.71
			  ------------------------------------------------------

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
Segments by UnOptimized Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total UnOptimized Read Requests:	 22,277,415
-> Captured Segments account for   82.8% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

				v_scan_query_quota := TRUE;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
			END IF;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478    2,857,221   12.83
USER35		     IOPS
CF1				TABLE	   73450      73453    1,821,150    8.17
		END IF;
USER42		     IOPS
CF1				TABLE	   73488      73492    1,809,963    8.12
USER44		     IOPS
CF1				TABLE	   73501      73503    1,748,406    7.85
USER39		     IOPS

CF1				TABLE	   73471      73470    1,271,691    5.71
			  ------------------------------------------------------

Segments by Optimized Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by Direct Physical Reads	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

	ELSE
		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by Physical Writes		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
		--
-> Total Physical Writes:	3,802,315
-> Captured Segments account for   80.1% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
		-- Do an UPDATE statement
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
		--
USER40		     IOPS
CF1				TABLE	   73481      73478	 516,448   13.58
USER35		     IOPS
CF1				TABLE	   73450      73453	 305,917    8.05
USER42		     IOPS

CF1				TABLE	   73488      73492	 302,499    7.96
USER44		     IOPS
CF1				TABLE	   73501      73503	 292,155    7.68
USER39		     IOPS
CF1				TABLE	   73471      73470	 212,625    5.59
		v_my_serial := v_my_serial + v_loop_cnt ;
			  ------------------------------------------------------

Segments by Physical Write Requests	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Physical Write Requests:	3,586,656
-> Captured Segments account for   83.1% of Total

-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.			      Phys Write
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrnc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,  SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,  DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,	SQL_TEXT,  PX_SERVER#,	PX_SERVER_GROUP,  PX_SERVER_SET,  PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,  USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,	FETCHES,  BUFFER_GETS,	IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,  PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,	PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,	0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,	IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,  IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,  ACTION,  SERVICE_NAME,  CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,	PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,  NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,	NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),  '00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,  TO_CHAR(RM_LAST_ACTION_TIME,	:B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,	CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,	MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,	SUM_SERVERS_REQUESTED,	SUM_SERVERS_ALLOCATED,	DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,	DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,  MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,  MAX_PROGRAM,	MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,  QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,	MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,	MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,	MAX_SQL_EXEC_ID,  MAX_LAST_REFRESH_TIME,  MAX_DBOP_NAME,  MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,  SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,	MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,	SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,	SUM_WRITE_BYTES,  SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,	DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,  1,  'platform_name',	SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,	0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,	MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,  SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,  MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,  MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,  MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,  MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,	MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,	MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,  MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,  MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,	SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,  SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,	SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,  NVL(SUM(READ_BYTES),	0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES)
 SUM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,	MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,	MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),	ASH_DATA AS (SELECT AD0.INST_ID,  AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,	AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,	AD0.DBOP_NAME,	AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,  AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,	AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,	AD0.CPU_COUNT,	AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,  AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,	AD0.DFO_MOST_ACTIVE_SID,  (CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,  AD0.BUCKET_DISTINCT_SAMPLES,	AD0.SQL_BUCKET_DISTINCT_SAMPLES,  CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,  CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,  ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,	ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,  ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,  TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,	ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,	MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,  ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,  MD.SID,  MD.SESSION_SERIAL#,	MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,	GVTF.SESSION_ID,  GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,	GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,  GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,	GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,	MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,	GVTF.PX_STEP_ID,  GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID,	GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,  GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 T-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478	 485,531   13.54
USER35		     IOPS
CF1				TABLE	   73450      73453	 298,434    8.32
USER42		     IOPS
CF1				TABLE	   73488      73492	 295,225    8.23
USER44		     IOPS
CF1				TABLE	   73501      73503	 285,166    7.95
USER39		     IOPS
CF1				TABLE	   73471      73470	 208,593    5.82
HEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,	CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,	ASH2.IS_MONITORED_SQL,	ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,  ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,	0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,	ASH2.PX_MIN_DOP,  :B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,	:B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,	ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,	SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,	ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,	MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,	MAX(ASH1.PX_DOP) PX_DOP,  MIN(ASH1.PX_DOP) PX_MIN_DOP,	MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,	COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,  ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,  ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,	ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,	ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL U
			  ------------------------------------------------------

Segments by Direct Physical Writes	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Direct Physical Writes:	   1,116
-> Captured Segments account for   70.0% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	   74075      74075	     770   69.00
SYS		     SYSAUX
SYS_LOB0000007451C00 S_LOB_P270 LOB P	   74210      74210	      11     .99
			  ------------------------------------------------------

Segments by Table Scans 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by DB Blocks Changes		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
NION ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,  ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,	DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,  NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,  :B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,	NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,  NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,	ASH.PLSQL_SUBPROGRAM_ID,  ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,	ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,	ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,	TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_P-> % of Capture shows % of DB Block Changes for each top segment compared
-> with total DB Block Changes for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				DB Block    % of
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478	 511,296   17.68
USER35		     IOPS
CF1				TABLE	   73450      73453	 296,080   10.24
USER42		     IOPS
LAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),	RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,	ADH.SQL,  ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,	NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,  'PX Server(s) - Sampling Child DFO',	4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',  7,  'QC - Initializing Objects',  8,	'QC - Flushing Objects',  9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,  'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,  'PX Server(s) - Preparing Transaction',  14,	'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,	'PX Server(s) - Aborting Transaction',	17,  'QC - Executing Child DFO',  18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,	ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,  ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,	ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),  'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,	ADH.DFO_PAIR_CPU_HEIGHT,  ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,
CF1				TABLE	   73488      73492	 294,064   10.17
USER44		     IOPS
CF1				TABLE	   73501      73503	 285,504    9.87
USER39		     IOPS
CF1				TABLE	   73471      73470	 202,816    7.01
			  ------------------------------------------------------


Segments by Row Lock Waits		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> % of Capture shows % of row lock waits for each top segment compared
-> with total row lock waits for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								     Row
		     Subobject	Obj.				    Lock    % of
Object Name	       Name	Type	    Obj#   Dataobj#	   Waits Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER42		     IOPS
CF1				TABLE	   73488      73492	       2   25.00
USER102 	     IOPS
CF1				TABLE	   73799      73803	       1   12.50
USER108 	     IOPS
CF1				TABLE	   73833      73837	       1   12.50
USER35		     IOPS
CF1				TABLE	   73450      73453	       1   12.50
USER58		     IOPS
CF1				TABLE	   73580      73582	       1   12.50
			  ------------------------------------------------------

Segments by ITL Waits			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by Buffer Busy Waits		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> % of Capture shows % of Buffer Busy Waits for each top segment compared
-> with total Buffer Busy Waits for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								  Buffer
		     Subobject	Obj.				    Busy    % of
Object Name	       Name	Type	    Obj#   Dataobj#	   Waits Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478	       2  100.00
			  ------------------------------------------------------

Segments by Global Cache Buffer Busy	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> % of Capture shows % of GC Buffer Busy for each top segment compared
-> with GC Buffer Busy for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								      GC
		     Subobject	Obj.				  Buffer    % of
Object Name	       Name	Type	    Obj#   Dataobj#	    Busy Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER31		     IOPS
CF1				TABLE	   73429      73424	       3   18.75
USER99		     IOPS
CF1				TABLE	   73781      73787	       3   18.75
USER109 	     IOPS
CF1				TABLE	   73835      73838	       2   12.50
USER110 	     IOPS
CF1				TABLE	   73842      73846	       2   12.50
USER40		     IOPS
CF1				TABLE	   73481      73478	       2   12.50
			  ------------------------------------------------------


Segments by CR Blocks Received		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total CR Blocks Received:	      16,276
-> Captured Segments account for   49.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								   CR
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478	   1,050    6.45
USER37		     IOPS
CF1				TABLE	   73460      73466	     934    5.74
USER39		     IOPS
CF1				TABLE	   73471      73470	     798    4.90
USER43		     IOPS
CF1				TABLE	   73490      73493	     720    4.42
USER42		     IOPS
CF1				TABLE	   73488      73492	     626    3.85
			  ------------------------------------------------------

Segments by Current Blocks Received	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Current Blocks Received:	   10,046
-> Captured Segments account for   65.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								 Current
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER40		     IOPS
CF1				TABLE	   73481      73478	   1,314   13.08
USER37		     IOPS
CF1				TABLE	   73460      73466	     757    7.54
USER39		     IOPS
CF1				TABLE	   73471      73470	     677    6.74
USER35		     IOPS
CF1				TABLE	   73450      73453	     454    4.52
USER44		     IOPS
CF1				TABLE	   73501      73503	     377    3.75
			  ------------------------------------------------------

Segments by Global Cache Remote Grants	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Total Global Cache Remote Grants:	   6,099,029
-> Captured Segments account for   71.8% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								      GC
		     Subobject	Obj.				  Remote
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER110 	     IOPS
CF1				TABLE	   73842      73846	 146,833    2.41
USER99		     IOPS
CF1				TABLE	   73781      73787	 146,586    2.40
USER28		     IOPS
CF1				TABLE	   73413      73419	 145,631    2.39
USER107 	     IOPS
CF1				TABLE	   73825      73828	 145,368    2.38
USER85		     IOPS
CF1				TABLE	   73713      73716	 145,234    2.38
			  ------------------------------------------------------


Dictionary Cache Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used

				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
------------------------- ------------ ------ ------- ----- -------- ----------
dc_awr_control			   240	  0.4	    0	N/A	   7	      1
dc_global_oids			 3,626	  3.1	    0	N/A	   0	    459
dc_histogram_data		 2,108	  0.1	    0	N/A	   0	  2,420
dc_histogram_defs		 2,951	  1.3	    0	N/A	  73	  7,285
dc_objects			 3,765	  1.0	    0	N/A	   8	  3,868
dc_props			   972	  0.0	    0	N/A	   0	     51
dc_rollback_segments		12,957	  0.0	    0	N/A	   0	    648
dc_segments			   248	  4.4	    0	N/A	  11	  1,427
dc_sequences			    27	 14.8	    0	N/A	  27	      8
dc_tablespaces			   312	  0.0	    0	N/A	   0	     22
dc_users			 1,148	  0.2	    0	N/A	   0	    513
outstanding_alerts		     7	 71.4	    0	N/A	   1	      7
			  ------------------------------------------------------

Dictionary Cache Stats (RAC)		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
--------------- ------------ ------ -------------- ------ ---------- --------
BODY			 324	1.5	     1,006    0.5	   0	    0
DBLINK			   1	0.0		 0    N/A	   0	    0
EDITION 		   5	0.0		10    0.0	   0	    0
HINTSET OBJECT		   3	0.0		 3    0.0	   0	    0
INDEX			  21	0.0		21    0.0	   0	    0
OBJECT ID		   2  100.0		 0    N/A	   0	    0
QUEUE			   0	N/A		 1    0.0	   0	    0
RULESET 		   0	N/A		 1    0.0	   0	    0
SCHEMA			  46	2.2		 0    N/A	   0	    0
SQL AREA	       1,679	7.7	   193,343    0.1	   2	    4
SQL AREA BUILD		  95   54.7		 0    N/A	   0	    0
SQL AREA STATS		  97   97.9		97   97.9	   0	    0
TABLE/PROCEDURE 	 759	4.6	     5,493    0.8	   2	    0
TRIGGER 		   6	0.0		 6    0.0	   0	    0
			  ------------------------------------------------------

Library Cache Activity (RAC)		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
BODY			   6	      957	   957		 0	     0
DBLINK			   1		0	     0		 0	     0
EDITION 		   5		5	     5		 0	     0
HINTSET OBJECT		   3		3	     3		 0	     0
INDEX			  21	       21	    21		 0	     0
QUEUE			   0		1	     1		 0	     0
RULESET 		   0		1	     1		 0	     0
SCHEMA			   2		0	     0		 0	     0
TABLE/PROCEDURE        1,422	    4,143	 4,143		 0	     0
TRIGGER 		   0		6	     6		 0	     0
			  ------------------------------------------------------


Memory Dynamic Components		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Min/Max sizes since instance startup
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
-> ordered by Component

		 Begin Snap	Current 	Min	    Max   Oper Last Op
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
--------------- ----------- ----------- ----------- ----------- ------ -------
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT buffer	   7,712.00    7,712.00    7,712.00    7,712.00      0 INI/
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
PGA Target	   3,232.00    3,232.00    3,232.00    3,232.00      0 STA/
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	   9,664.00    9,664.00    9,664.00    9,664.00      0 STA/
Shared IO Pool	     128.00	 128.00      128.00	 128.00      0 STA/
java pool		.00	    .00 	.00	    .00      0 STA/
large pool	     160.00	 160.00      160.00	 160.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
shared pool	   1,632.00    1,632.00    1,632.00    1,632.00      0 STA/
streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/
			  ------------------------------------------------------

Memory Resize Operations Summary	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Memory Resize Ops			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Process Memory Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> B: Begin Snap   E: End Snap
-> All rows below contain absolute values (i.e. not diffed over the interval)
-> Max Alloc is Maximum PGA Allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by Begin/End snapshot, Alloc (MB) desc
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed

							     Hist
				     Avg  Std Dev     Max     Max
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
B Freeable     351.1	    .0	    1.2      2.2      23     N/A    283    283
  Other      1,858.4	   N/A	    4.2      4.1      36      36    439    439
  PL/SQL       124.4	 122.0	     .3       .2       2       3    375    373
  SQL		32.5	  25.2	     .1       .3       1      11    304    294
  Total      2,366.4	 147.2	    5.9      6.8      62      50  1,401  1,389
E Freeable     155.6	    .0	    4.2      6.9      24     N/A     37     37
  Other        754.9	   N/A	    4.1      6.4      37      37    185    185
  PL/SQL	 6.2	   5.6	     .1       .2       2       3    121    118
  SQL		 2.2	   1.5	     .0       .1       1      11     56     26
  Total        918.8	   7.1	    8.4     13.7      63      51    399    366
			  ------------------------------------------------------

SGA Memory Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

						      End Size (Bytes)
SGA regions			Begin Size (Bytes)	(if different)
------------------------------ ------------------- -------------------
Database Buffers		     8,220,835,840
Fixed Size				12,445,928
Redo Buffers				21,106,688
Variable Size			     1,879,048,192
			       -------------------
sum				    10,133,436,648
			  ------------------------------------------------------

SGA breakdown difference by Pool and NameDB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> ordered by Pool, Name
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

Pool   Name				    Begin MB	     End MB  % Diff
------ ------------------------------ -------------- -------------- -------
large  PX msg pool			       128.0	      128.0    0.00
large  free memory				31.6	       31.6    0.00
shared ASH buffers				64.0	       64.0    0.00
shared KCRAHT Free Blocks			25.0	       35.0   40.00
shared KGLH0					48.7	       52.3    7.42
shared KGLS					21.2	       22.4    5.63
shared KJSC rnb slots				91.2	       17.5  -80.85
shared KKSSP					26.0		N/A -100.00
shared SO private sga				33.7	       33.7    0.00
shared SQLA					92.4	       98.8    6.91
shared db_block_hash_buckets			32.0	       32.0    0.00
shared free memory			       175.6	      260.3   48.19
shared gc name table				48.0	       48.0    0.00
shared gcs resources			       261.3	      261.3    0.00
shared gcs resv res hash bucket 		72.0	       72.0    0.00
shared gcs shadows			       142.5	      142.5    0.00
shared ges big msg buffers			26.3	       26.3    0.00
shared init_heap_kfsg				17.4	       17.5    0.41
shared ksunfy_meta 1				25.2	       25.2    0.00
shared row cache				  .0		 .0    0.00
       buffer_cache			     7,712.0	    7,712.0    0.00
       fixed_sga				11.9	       11.9    0.00
       log_buffer				20.1	       20.1    0.00
       shared_io_pool			       128.0	      128.0    0.00
			  ------------------------------------------------------


Replication System Resource Usage	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Replication SGA Usage			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
 (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,  AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,	NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,  (AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,  (AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,	SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,	NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,  AD01.ACTIVITY_COUNT,	NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,	:B27 ,	MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,	AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,  MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,	AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,	SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,	MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,  MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT			  ------------------------------------------------------


GoldenGate Capture			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Capture Rate 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Reader 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,	AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Coordinator		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Server 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Coordinator Rate	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Reader and Server Rate  DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------


XStream Capture 			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Capture Rate			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS &quot;sql_id&quot;,	:B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,  :B52 AS &quot;session_serial&quot;,	TO_CHAR(:B51 ,	:B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',  :B48 ,  NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),	CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,  NULL,  XMLFOREST( DECODE(:B4 ,  1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,  :B2 AS &quot;server_set&quot;,  :B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,  XMLFOREST(:B11 AS &quot;instance_id_low&quot;,  :B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,	(SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,  NULL,  :B9 ) AS &quot;sql_id&quot;,	NVL2(:B6 ,  NULL,  TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,	NVL2(:B6 ,  :B6 ,  NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,	:B5 ,  NULL) AS &quot;dbop_exec_id&quot;,  NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,	MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,  NULL,  SUM_SERVERS_ALLOCATED),  NULL),  NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,	XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,	XMLELEMENT( &quot;con_id&quot;,  NULL,	MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,	MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,	MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,  MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,	NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,	NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,	NULL,  MAX_PL_PROGID),	NULL),	NVL2(MAX_PL_NAME,  XMLELEMENT( &quot;plsql_name&quot;,	NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:XStream Apply Reader			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Coordinator		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Server			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Coordinator Rate		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Reader and Server Rate	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,	'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,	XMLELEMENT( &quot;status&quot;,  NULL,	MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,	GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,  20))),  CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),	MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),  DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),	DECODE(NVL(SUM_READ_REQS,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,  0),	0,  NULL
			  ------------------------------------------------------


Table Statistics by DML Operations	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Table Statistics by Conflict Resolutions DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Replication Large Transaction Statistics DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Replication Long Running Transaction StatisticsDB/Inst: P60SDB/p60sdb2	Snaps:

		  No data exists for this section of the report.
,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,  0,  1,  SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),  CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
			  ------------------------------------------------------


Advanced Queue CPU/IO Usage		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffered Queues 			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffered Queue Subscribers		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Rule Set				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Persistent Queues			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Persistent Queues Rate			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Persistent Queue Subscribers		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;, 			  ------------------------------------------------------


Resource Limit Stats			     DB/Inst: P60SDB/p60sdb2  Snap: 67
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
   exceeds 2*Initial Allocation are shown
-> Ordered by Resource Name

				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
------------------------------ ------------ ------------ ---------- ----------
ges_cache_ress			      3,637	   4,037	  0  UNLIMITED
ges_reg_msgs				144	   6,772       3310  UNLIMITED
			  ------------------------------------------------------

Shared Servers Activity 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active
 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
 :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
	   0		0	     1		  0	       1	    0
			  ------------------------------------------------------

Shared Servers Rates			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

  Common     Disp			 Common       Disp     Server
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0
			  ------------------------------------------------------

Shared Servers Utilization		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Statistics are combined for all servers
-> Incoming and Outgoing Net % are included in %Busy

  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
-------------- -------- -------- --------- ---------
	   893	    0.0    100.0       0.0	 0.0
			  ------------------------------------------------------

Shared Servers Common Queue		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
		  No data exists for this section of the report.
			  ------------------------------------------------------

Shared Servers Dispatchers		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ordered by %Busy, descending
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue
-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
     "(R)" - dispatcher re-started between begin and end snapshots

	      Avg Total Disp			    Total Total Queue  Avg Queue
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 893	  0.0	 100.0		0	    0
			  ------------------------------------------------------


Modified Parameters			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> This section shows all the modified initialization parameters that
were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
the snapshot interval

								End value
Parameter Name		      Begin value			(if different)
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
audit_file_dest 	      /u01/app/oracle/admin/p60sdb/adum
audit_trail		      DB
cluster_database	      TRUE
compatible		      19.0.0
control_files		      +P60S/P60SDB/CONTROLFILE/current.
db_block_size		      8192
db_create_file_dest	      +P60S
db_domain		      example.com
db_name 		      p60sdb
db_recovery_file_dest	      +FRA
db_recovery_file_dest_size    137438953472
diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p60sdbXDB
instance_number 	      2
listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
pga_aggregate_target	      3371171840
processes		      640
remote_listener 	       mcracpoc-scan.example.com:1521
remote_login_passwordfile     EXCLUSIVE
sga_target		      10133438464
thread			      2
undo_tablespace 	      UNDOTBS2
			  ------------------------------------------------------


Modified Multi-Valued Parameters	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot

								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
control_files		      +FRA/P60SDB/CONTROLFILE/current.2
			      +P60S/P60SDB/CONTROLFILE/current.
			  ------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		     6593	   61.67
gc current grant busy		 25.76 UPDATE				   25.76
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


gc current grant 2-way		 12.05 UPDATE				   12.05


gc current grant read-mostly i	  9.92 UPDATE				    9.92

	  bhdvtsvjhgvrh 	  1497866750		     4943	   35.07
gc cr multi block request	 16.32 TABLE ACCESS - BY INDEX ROWID BAT   16.32
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 11.50 TABLE ACCESS - BY INDEX ROWID BAT    6.80


db file parallel read		  2.38 TABLE ACCESS - BY INDEX ROWID BAT    2.38

			  ------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		     6593	   61.67
UPDATE					   60.96 gc current grant busy	   25.76
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	  bhdvtsvjhgvrh 	  1497866750		     4943	   35.07
TABLE ACCESS - BY INDEX ROWID BATCHED	   29.82 gc cr multi block reque   16.32
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    5.24 gc cr grant busy	    4.70

			  ------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

		  No data exists for this section of the report.
			  ------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       61.77
   SQL								       61.77
			  ------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc current grant busy		    Cluster	    FOREGROUND
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_     26.27	40.46
gc cr multi block request	    Cluster	    FOREGROUND
     16.44	25.32
gc current grant 2-way		    Cluster	    FOREGROUND
     12.52	19.28
gc cr grant busy		    Cluster	    FOREGROUND
     12.02	18.50
gc current grant read-mostly invali Cluster	    FOREGROUND
     10.27	15.81
			  ------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
gc cr multi block request	 16.44		     "8","33149","1"	   0.01
file#			   block#		      class#

db file sequential read 	  7.20		      "8","6704","1"	   0.01
file#			   block#		      blocks

free buffer waits		  2.41		    "5","10949","93"	   0.01
file#			   block#		      set-id#

db file parallel read		  2.38		     "1","125","125"	   1.44
files			   blocks		      requests

ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
			  ------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Top DB Objects by DB Time with respect to Application, Cluster,
   User I/O,  buffer busy waits and In-Memory DB events only.
-> Tablespace name is not available for reports generated from the root PDB
   of a consolidated database.
-> When ** MISSING ** occurs, some of the object attributes may not be available
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM

      Object ID % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------
Object Name (Type)				      Tablespace
----------------------------------------------------- --------------------------
	  73552       1.49 gc current grant 2-way		0.65
USER55.CF1 (TABLE)				      IOPS
	  73408       1.48 gc current grant 2-way		0.64
USER27.CF1 (TABLE)				      IOPS
	  73429       1.48 gc current grant busy		0.70
USER31.CF1 (TABLE)				      IOPS
	  73792       1.48 gc current grant busy		0.74
USER101.CF1 (TABLE)				      IOPS
	  73550       1.47 gc current grant 2-way		0.68
USER53.CF1 (TABLE)				      IOPS
			  ------------------------------------------------------

Activity Over Time			 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(P14:56:36   (3.4 min)	4,442 gc current grant busy		1,080	 7.66
			      gc cr multi block request 	  763	 5.41
			      gc cr grant busy			  676	 4.79
15:00:00   (5.0 min)	7,814 gc current grant busy		2,183	15.48
			      gc cr multi block request 	1,206	 8.55
			      gc current grant 2-way		1,010	 7.16
15:05:00   (5.0 min)	1,834 gc current grant busy		  443	 3.14
			      gc cr multi block request 	  350	 2.48
			      gc cr grant busy			  230	 1.63
15:10:00   (1.9 min)	   15 db file parallel write		   15	 0.11
			  ------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_2_67'
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 66 to 67.
LI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
Time period starts at 12-FEB-20 02.56.36 PM
Time period ends at 12-FEB-20 03.11.53 PM

Analysis Target
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb2, numbered 2 and hosted at
mcracpoc2.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 139930 seconds.
The average number of active sessions was 152.6.

Summary of Findings
-------------------
    Description 		  Active Sessions      Recommendations
				  Percent of Activity
    ----------------------------  -------------------  ---------------
1   Interconnect Latency	  152.6 | 100	       1
2   Top SQL Statements		  152.07 | 99.66       2
3   Global Cache Messaging	  116.31 | 76.22       1
4   Buffer Busy - Hot Objects	  63.6 | 41.68	       0
5   Global Cache Busy		  17.98 | 11.78        1
6   "User I/O" wait Class	  16.73 | 10.96        0
7   Unusual "Cluster" Wait Event  15.78 | 10.34        3
8   Global Cache Congestion	  4.91 | 3.22	       1
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD19   Free Buffer Waits		  3.86 | 2.53	       3
10  Global Cache Lost Blocks	  1.87 | 1.23	       1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 152.76 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 42371 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 16441 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.31.173 and source "?".

   Recommendation 1: Host Configuration
   Estimated benefit is 152.6 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATI   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.


Finding 2: Top SQL Statements
Impact is 152.24 active sessions, 99.66% of total activity.
ON,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 95.3 active sessions, 62.45% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 98% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 25721 times and
      had an average elapsed time of 3.3 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 52.69 active sessions, 34.53% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 95% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 151320 times and
      had an average elapsed time of 0.32 seconds.


Finding 3: Global Cache Messaging
Impact is 116.44 active sessions, 76.22% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 116.31 active sessions, 76.22% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID "35dumc2tpr9dv" is responsible for 73% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 132.1 active sessions, 86.57% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 63.67 active sessions, 41.68% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 63.6 active sessions, 41.68% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 116.31 active sessions, 76.22% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 132.1 active sessions, 86.57% of total activity.


Finding 5: Global Cache Busy
Impact is 18 active sessions, 11.78% of total activity.
-------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time in the cluster.

   Recommendation 1: Application Analysis
   Estimated benefit is 17.98 active sessions, 11.78% of total activity.
   ---------------------------------------------------------------------
   Action
      Verify that the set of services used by the application to connect to
      the database are optimally distributed if response time is critical.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.


Finding 6: "User I/O" wait Class
Impact is 16.75 active sessions, 10.96% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.
The SGA was adequately sized.

   No recommendations are available.


Finding 7: Unusual "Cluster" Wait Event
Impact is 15.8 active sessions, 10.34% of total activity.
---------------------------------------------------------
Wait event "gc current grant read-mostly invalidation" in wait class "Cluster"
was consuming significant database time.

   Recommendation 1: Application Analysis
   Estimated benefit is 15.78 active sessions, 10.34% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits. Refer to Oracle's "Database Reference" for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 15.78 active sessions, 10.34% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Module "SQL*Plus".

   Recommendation 3: Application Analysis
   Estimated benefit is 15.78 active sessions, 10.34% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Service "p60sdb.example.com".

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 132.1 active sessions, 86.57% of total activity.


Finding 8: Global Cache Congestion
Impact is 4.91 active sessions, 3.22% of total activity.
--------------------------------------------------------
Global Cache Service Processes (LMSn) in other instances were not processing
requests fast enough.

   Recommendation 1: Database Configuration
   Estimated benefit is 4.91 active sessions, 3.22% of total activity.
   -------------------------------------------------------------------
   Action
      Increase throughput of the Global Cache Service (LMSn) processes.
      Increase the number of Global Cache Service processes by increasing the
      value of the parameter "gcs_server_processes". Alternatively, if the
      host is CPU bound consider increasing the OS priority of the Global
      Cache Service processes.
   Rationale
      The value of parameter "gcs_server_processes" was "3" during the
      analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.


Finding 9: Free Buffer Waits
Impact is 3.86 active sessions, 2.53% of total activity.
--------------------------------------------------------
Database writers (DBWR) were unable to keep up with the demand for free
buffers.

   Recommendation 1: Database Configuration
   Estimated benefit is 3.86 active sessions, 2.53% of total activity.
   -------------------------------------------------------------------
   Action
      Consider increasing the number of database writers (DBWR) by setting the
      parameter "db_writer_processes". Also consider if asynchronous I/O is
      appropriate for your architecture.
   Rationale
      The value of parameter "db_writer_processes" was "4" during the analysis
      period.
   Rationale
      The value of parameter "disk_asynch_io" was "TRUE" during the analysis
      period.

   Recommendation 2: Host Configuration
   Estimated benefit is 3.86 active sessions, 2.53% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the I/O subsystem's write performance.
   Rationale
      During the analysis period, the average data files' I/O throughput was 0
      K per second for reads and 0 K per second for writes. The average
      response time for single block reads was 0 milliseconds.

   Recommendation 3: Application Analysis
   Estimated benefit is 3.86 active sessions, 2.53% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate application logic for possible use of direct path inserts as
      an alternative for multiple INSERT operations.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Configuration" was consuming significant database time.
      Impact is 3.86 active sessions, 2.53% of total activity.


Finding 10: Global Cache Lost Blocks
Impact is 1.87 active sessions, 1.23% of total activity.
--------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 42371 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 16441 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.31.173 and source "?".

   Recommendation 1: Host Configuration
   Estimated benefit is 1.87 active sessions, 1.23% of total activity.
   -------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

RAC Statistics  DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

				Begin	End
				----- -----
	   Number of Instances:     2	  2
	       Number of LMS's:     3	  3
      Number of realtime LMS's:     3	  3  (0 priority changes)


Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
				      ---------------	    ---------------
  Global Cache blocks received: 		28.72		       0.95
    Global Cache blocks served: 		17.93		       0.60
     GCS/GES messages received: 	    17,825.13		     592.60
	 GCS/GES messages sent: 	    20,018.06		     665.50
	    DBWR Fusion writes: 		 0.91		       0.03
 Estd Interconnect traffic (KB) 	     7,764.48


Global Cache Efficiency Percentages (Target local+remote 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:    9.22
Buffer access - remote cache %:    0.11
Buffer access - 	disk %:   90.67
Global Cache Locality	     %:   73.08


Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	  Avg global cache cr block receive time (us):	       41,340.0
     Avg global cache current block receive time (us):	       14,611.8
			       Avg LMS process busy %:		   25.9

	    Avg global cache cr block build time (us):		   75.5
      Global cache log flushes for cr blocks served %:		    1.2
	    Avg global cache cr block flush time (us):	      102,991.5

	 Avg global cache current block pin time (us):	      562,142.9
 Global cache log flushes for current blocks served %:		    0.5
       Avg global cache current block flush time (us):	      122,352.9

		     Avg global enqueue get time (us):		2,062.7

Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Avg message sent queue time (us):		1,582.1
	     Avg message sent queue time on ksxp (us):	       38,226.0
	  Avg message received kernel queue time (us):		  270.7
		 Avg message received queue time (us):		  107.9
		    Avg GCS message process time (us):		   25.6
		    Avg GES message process time (us):		   51.7

			    % of direct sent messages:		  12.01
			  % of indirect sent messages:		  86.09
			% of flow controlled messages:		   1.90
	  -------------------------------------------------------------

Cluster Interconnect
-> if Public/Source at End snap is different a '*' is displayed
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End
	     --------------------------------------------------   -------
Interface    IP Address      Pub Source 			  Pub Src
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.31.173  N

&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yzrfgvuxws9b"></a>9yzrfgvuxws9b</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
Global Enqueue S-optim Broadcasts		66	    0.1 	 0.0

Global Enqueue S-optim S-lock get	    32,176	   35.1 	 1.2
Global Enqueue S-optim anti-locks		59	    0.1 	 0.0
v_num_tmp NUMBER := 0;
KA local message waits				 0	    0.0 	 0.0
KA local messages received			 0	    0.0 	 0.0
KA messages received actual			 0	    0.0 	 0.0

KA messages received logical			 0	    0.0 	 0.0
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0
v_loop_cnt PLS_INTEGER := 0;
Pseudo reconfiguration count			 0	    0.0 	 0.0
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	     2,405	    2.6 	 0.1
v_rowcnt PLS_INTEGER := 0;
acks for commit broadcast(logical	     9,000	    9.8 	 0.3
broadcast msgs on commit(actual)	    10,466	   11.4 	 0.4
broadcast msgs on commit(logical)	    16,866	   18.4 	 0.6
v_updates_cnt PLS_INTEGER := 0;
broadcast msgs on commit(wasted)	     7,179	    7.8 	 0.3
dynamically allocated gcs resourc		 0	    0.0 	 0.0
dynamically allocated gcs shadows		 0	    0.0 	 0.0
flow control messages received			24	    0.0 	 0.0
v_selects_cnt PLS_INTEGER := 0;
flow control messages sent			24	    0.0 	 0.0
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			     5,574	    6.1 	 0.2

gcs ast to fg				    18,521	   20.2 	 0.7
gcs ast xid					 0	    0.0 	 0.0
gcs bidless ast to lms			       122	    0.1 	 0.0
v_random_access_queries_cnt PLS_INTEGER := 0;
gcs blocked converts			   351,957	  384.0 	12.8
gcs blocked cr converts 		    18,721	   20.4 	 0.7
gcs compatible basts				13	    0.0 	 0.0
gcs compatible cr basts (global)	     2,252	    2.5 	 0.1
v_scan_queries_cnt PLS_INTEGER := 0;
gcs compatible cr basts (local) 	     1,283	    1.4 	 0.0
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 5	    0.0 	 0.0

gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			 1,054,869	1,151.0 	38.3
gcs dbwr write request msgs		       830	    0.9 	 0.0
v_do_scan_query BOOLEAN :=FALSE;
gcs error msgs					 0	    0.0 	 0.0
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 6	    0.0 	 0.0
gcs force cr grant				13	    0.0 	 0.0
v_scan_query_quota  BOOLEAN := FALSE;
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				    18,643	   20.3 	 0.7
v_scan_workload_only BOOLEAN := FALSE;
gcs grant request in partial open		 0	    0.0 	 0.0
gcs immediate (compatible) conver	     6,425	    7.0 	 0.2
gcs immediate (null) converts		   645,031	  703.8 	23.4
v_random_workload_only BOOLEAN := FALSE;
gcs immediate cr (compatible) con	    44,317	   48.4 	 1.6
gcs immediate cr (null) converts	 3,355,959	3,661.7        121.7
gcs lms flush pi msgs				 0	    0.0 	 0.0

gcs lms write request msgs		     2,657	    2.9 	 0.1
gcs msgs process time(ms)		   416,832	  454.8 	15.1
gcs msgs received			16,294,675     17,779.2        591.1

gcs new served by master		       116	    0.1 	 0.0
gcs out-of-order msgs			     2,615	    2.9 	 0.1
gcs pings refused			     5,020	    5.5 	 0.2
gcs pkey conflicts retry			 0	    0.0 	 0.0
v_random_block PLS_INTEGER := 1;
gcs queued converts				 1	    0.0 	 0.0
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
v_tmp PLS_INTEGER;
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

v_now PLS_INTEGER;
Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
v_brick_wall PLS_INTEGER;
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
gcs reader bypass grant fg ast			 0	    0.0 	 0.0

gcs reader bypass grant immediate	       175	    0.2 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
gcs refuse xid					 0	    0.0 	 0.0
gcs refuse xid to fg				 0	    0.0 	 0.0
v_begin_time PLS_INTEGER;
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
gcs regular cr					 0	    0.0 	 0.0
v_end_time PLS_INTEGER;
gcs resources for dynamic sga			 0	    0.0 	 0.0
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
v_total_time PLS_INTEGER;
gcs side channel msgs actual		     3,156	    3.4 	 0.1
gcs side channel msgs logical		    70,318	   76.7 	 2.6
gcs stale cr				       137	    0.1 	 0.0
v_begin_cpu_tm PLS_INTEGER;
gcs undo cr					19	    0.0 	 0.0
gcs write notification msgs			 1	    0.0 	 0.0
gcs writes refused				 1	    0.0 	 0.0
ges msgs process time(ms)		       317	    0.3 	 0.0
v_end_cpu_tm PLS_INTEGER;
ges msgs received			     6,134	    6.7 	 0.2
ges remote lock allocation	  1.8446744074E+19 2.012738E+16 6.691361E+14
global posts dropped				 0	    0.0 	 0.0
v_total_cpu_tm PLS_INTEGER;
global posts queue time 			 0	    0.0 	 0.0
global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0

implicit batch messages received	   269,385	  293.9 	 9.8
implicit batch messages sent		   300,602	  328.0 	10.9
lmd msg send time(ms)				 0	    0.0 	 0.0
v_do_sleeps BOOLEAN := FALSE;
lms(s) msg send time(ms)			 0	    0.0 	 0.0
messages flow controlled		   182,150	  198.7 	 6.6
messages queue sent actual		 1,893,074	2,065.5 	68.7
messages queue sent logical		 2,486,580	2,713.1 	90.2
v_loop_control BOOLEAN := FALSE;
messages received actual		 3,424,545	3,736.5        124.2
messages received logical		16,300,809     17,785.9        591.3
messages sent directly			 1,152,441	1,257.4 	41.8
v_update_quota BOOLEAN := FALSE;
messages sent indirectly		 8,259,340	9,011.8        299.6
messages sent not implicit batche	   478,222	  521.8 	17.3
messages sent pbatched			15,346,273     16,744.4        556.7
msgs causing lmd to send msgs			 0	    0.0 	 0.0
v_select_only_workload BOOLEAN := FALSE;
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
msgs received kernel queue time ( 4.4122396089E+12 4.814228E+09 1.600493E+08
msgs received queue time (ms)		 1,758,450	1,918.7 	63.8
v_update_only_workload BOOLEAN := FALSE;
msgs received queued			16,300,809     17,785.9        591.3
msgs sent queue time (ms)		 4,604,912	5,024.5        167.0
msgs sent queue time on ksxp (ms)      133,200,770    145,336.4      4,831.7
v_do_update BOOLEAN := FALSE;
msgs sent queued			 2,910,609	3,175.8        105.6
msgs sent queued on ksxp		 3,484,559	3,802.0        126.4
number of broadcasted resources 		 0	    0.0 	 0.0
v_do_hot_schema BOOLEAN := FALSE;
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0
v_stop_immediate BOOLEAN := FALSE;
number of received ODPS messages		 0	    0.0 	 0.0
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
v_sharing_schema BOOLEAN := FALSE;
number of sent RBA messages			 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

v_seed VARCHAR2(128);
Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
process batch messages received 	 1,454,802	1,587.3 	52.8
v_home_schema_str VARCHAR2(80);
process batch messages sent		 1,552,502	1,693.9 	56.3
receiver cycle time			   817,878	  892.4 	29.7
receiver loop count			 1,712,250	1,868.2 	62.1
			  ------------------------------------------------------
v_scratch VARCHAR2(200) ;


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67


Statistic				    Total
------------------------------ ------------------
CR Block Requests			    9,422
CURRENT Block Requests			      515
v_cpu_pct NUMBER(6, 3);
Data Block Requests			    9,422
Undo Block Requests			       19
TX Block Requests			      341
Current Results 			    9,663
v_my_serial NUMBER(16);
Private results 				5
Zero Results				      177
Disk Read Results			       64
Fail Results					3

Fairness Down Converts			    4,480
Light Works				    3,618
Flushes 				      117
Builds					    9,399
BEGIN
Errors						0
			  ------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations

Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		     14 	    21.43     7.14	       64.29	 7.14
Flushes 	     34 		     23.53    35.29    41.18
EXECUTE IMMEDIATE v_home_schema_str;
			  ------------------------------------------------------

Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays

-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc


			       CR			  Current
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
IF ( v_hot_schema_modulus != 0 ) THEN
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   1 data block    11,428   93.3    2.7    4.0	  8,668   25.4	 70.8	 3.8
	v_do_hot_schema := TRUE;
   1 undo header    4,520   93.4    4.4    2.2	     69    1.4	 95.7	 2.9
   1 Others	      160   99.4     .0     .6	  1,281   88.8	 11.0	  .2
   1 undo block        55   85.5   12.7    1.8	    N/A    N/A	  N/A	 N/A
END IF;
			  ------------------------------------------------------

Global Cache Transfer Times (us)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67

-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
-> Immed, Busy, Congst -  Average times in us
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
IF ( v_sleep_modulus != 0 )	  THEN
	      --------------------------- ---------------------------
Inst Block
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
	v_do_sleeps := TRUE;
   1 data blo  49776  42208 3.E+05  59868  15971  35413   9060	15019
   1 undo hea  17877  10106 2.E+05  12992  62595    971  65252	 5742
   1 others	3223   3215    N/A   4418   3372    535  26167	 7473
END IF;
   1 undo blo  28744  18302 1.E+05   4062    N/A    N/A    N/A	  N/A
			  ------------------------------------------------------


Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc
IF ( v_max_loop_iterations &gt; 0 )  THEN

				   CR			    Current
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
	v_loop_control := TRUE ;
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
---- -------- ------- ----------- ------- ------- ----------- ------- -------
   1 data blo		   10,668   100.0     0.0	2,199	100.0	  0.0
END IF;
   1 undo hea		    4,222   100.0     0.0	    1	100.0	  0.0
   1 others		      159   100.0     0.0	1,137	100.0	  0.0
   1 undo blo		       47   100.0     0.0	  N/A	  N/A	  N/A

			  ------------------------------------------------------

Global Cache Times (Immediate)		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
IF ( v_update_pct = 0 ) 	  THEN
-> ordered by CR + Current Blocks Received desc

		       CR Avg Time (us)   Current Avg Time (us)
		     -------------------- --------------------
	v_select_only_workload := TRUE;
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
---- -------- ------ ------ ------ ------ ------ ------ ------
   1 data blo	      42208  42208    N/A  35413  35413    N/A
END IF;
   1 undo hea	      10106  10106    N/A    971    971    N/A
   1 others	       3215   3215    N/A    535    535    N/A
   1 undo blo	      18302  18302    N/A    N/A    N/A    N/A

			  ------------------------------------------------------

Interconnect Ping Latency Statistics	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Ping latency of the roundtrip of a message from this instance to -> target in
IF ( v_update_pct = 100 )	  THEN
-> The target instance is identified by an instance number.
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
	v_update_only_workload := TRUE;
-> Note that latency of a message from the instance to itself is used as
-> control, since message latency can include wait for CPU

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
END IF;
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
--------- -------- ------ ----------- -------- ------ -----------
	1	81   7190	47.89	    89	16441	    77.22

	2	81    552	  .80	    89	  539	      .77
			  ------------------------------------------------------

Interconnect Throughput by Client	 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
IF ( v_scan_query_pct = 0 ) 	THEN
-> Throughput of interconnect usage by major consumers
-> All throughput numbers are megabytes per second

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
	v_random_workload_only := TRUE;
---------------- ----------- -----------
Global Cache		 .09	     .13
Parallel Query		 .00	     .00
END IF;
DB Locks		5.03	    4.20
DB Streams		 N/A	     N/A
Other			 .01	     .01

			  ------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Throughput and errors of interconnect devices (at OS level)
IF ( v_scan_query_pct = 100 ) 	THEN
-> All throughput numbers are megabytes per second

Device Name	IP Address	 Public Source
--------------- ---------------- ------ -------------------------------
				  Send	   Send
	v_scan_workload_only := TRUE;
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
----------- -------- -------- -------- --------
			       Receive	Receive
END IF;
    Receive  Receive  Receive	Buffer	  Frame
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
----------- -------- -------- -------- --------
fg-priv:1	169.254.31.173	 NO

	.00	   0	    0	     0	      0
	.00	   0	    0	     0	      0
			  ------------------------------------------------------

v_seconds_to_run := v_seconds_to_run * 100 ;
Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 66-67
-> Times are in seconds
-> Affinity objects - Affinity objects mastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot


							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
-------------------------------- ------------ ------------- -------- --------
affinity objects					N/A	  40	   40
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
read-mostly objects					N/A	  43	   43
affinity objects (other inst)				N/A	  47	   47
read-mostly objects (persistent)			N/A	  31	   31
			  ------------------------------------------------------


End of Report
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

Report written to awr.txt
v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a4n4ayr88dbhy"></a>a4n4ayr88dbhy</td><td class='awrnc'><pre_sqltext class="awr">select grantee#, privilege#, nvl(col#, 0), max(mod(nvl(option$, 0), 2)), max(bitand(nvl(option$, 0),  8) /8),  max(bitand(nvl(option$, 0),  16) /16),  max(bitand(nvl(option$, 0), 64) /64),  max(bitand(nvl(option$, 0),  128) /128) from objauth$ where obj#=:1 group by grantee#, privilege#, nvl(col#, 0) order by grantee#</pre_sqltext></td></tr>
SQL> SQL> <tr><td scope="row" class='awrc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,	dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,	creverid,  modappid,  modverid,  crepatchid,  modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
SQL> SQL> SQL> SQL> <tr><td scope="row" class='awrnc'><a class="awr" name="aktbxfjwnzgmu"></a>aktbxfjwnzgmu</td><td class='awrnc'><pre_sqltext class="awr">update WRM$_DATABASE_INSTANCE set    last_ash_sample_id = :last_ash_sample_id where  instance_number    = :instance_number   and  dbid		    = :dbid   and  startup_time = (select max(startup_time)			   from   WRM$_DATABASE_INSTANCE			where  instance_number = :instance_number2			    and  dbid		 = :dbid2 )</pre_sqltext></td></tr>
SQL> <tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="awt1bwgs30hx1"></a>awt1bwgs30hx1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '77';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;

v_end_cpu_tm PLS_INTEGER;



v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;

END IF;
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the

name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
v_seconds_to_run := v_seconds_to_run * 100 ;
'text'		Text format
'active-html'	Includes Performance Hub active report


SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;

Type Specified:  text
				ELSE

					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bxpcry2tpc217"></a>bxpcry2tpc217</td><td class='awrnc'><pre_sqltext class="awr">select /*+ opt_param('parallel_execution_enabled',
				   'false') EXEC_FROM_DBMS_XPLAN */ * from gv$all_sql_plan where 1=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cmt7ct5kk8chb"></a>cmt7ct5kk8chb</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '39';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cn6hhn36a4rrs"></a>cn6hhn36a4rrs</td><td class='awrnc'><pre_sqltext class="awr">select con#, obj#, rcon#, enabled, nvl(defer, 0), spare2, spare3, refact from cdef$ where robj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cyhr3uaphj8u4"></a>cyhr3uaphj8u4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '33';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;





		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------


--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.

----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="czkhyr80ymm1z"></a>czkhyr80ymm1z</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '76';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="d8qmpacb3zab2"></a>d8qmpacb3zab2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="d96u6hzrz93x5"></a>d96u6hzrz93x5</td><td class='awrnc'><pre_sqltext class="awr">select con_id  from v$containers    where open_mode in ('READ WRITE',  'READ ONLY') </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dnhxxnnyzpq8g"></a>dnhxxnnyzpq8g</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '40';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="ds72ddrkju833"></a>ds72ddrkju833</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dyyddzrz52ydb"></a>dyyddzrz52ydb</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '35';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)    values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrnc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fd4xkca0yhc14"></a>fd4xkca0yhc14</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '54';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fh5ufah919kun"></a>fh5ufah919kun</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_sb4$ i_idl_sb41) */ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fjb8yj8xjzk39"></a>fjb8yj8xjzk39</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '83';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fm39d7d1vc1q3"></a>fm39d7d1vc1q3</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '32';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fqsx798y4df7a"></a>fqsx798y4df7a</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '79';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="g1p4d7mfawjcs"></a>g1p4d7mfawjcs</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="g2r0fu8hz8rv8"></a>g2r0fu8hz8rv8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '28';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gx2wbjnsndywg"></a>gx2wbjnsndywg</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '102';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>7,204,466</td><td align="right" class='awrc'>7,860.85</td><td align="right" class='awrc'>261.33</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>189,562</td><td align="right" class='awrnc'>206.83</td><td align="right" class='awrnc'>6.88</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>67,285</td><td align="right" class='awrc'>73.42</td><td align="right" class='awrc'>2.44</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>16,276</td><td align="right" class='awrnc'>17.76</td><td align="right" class='awrnc'>0.59</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>14,679</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>10,046</td><td align="right" class='awrnc'>10.96</td><td align="right" class='awrnc'>0.36</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>218,029</td><td align="right" class='awrnc'>237.89</td><td align="right" class='awrnc'>7.91</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>3,259</td><td align="right" class='awrc'>3.56</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>271</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>22,345,229</td><td align="right" class='awrc'>24,381.05</td><td align="right" class='awrc'>810.55</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>3,802,315</td><td align="right" class='awrnc'>4,148.73</td><td align="right" class='awrnc'>137.92</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>2,926,731,908</td><td align="right" class='awrc'>3,193,379.06</td><td align="right" class='awrc'>106,164.10</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>215,750</td><td align="right" class='awrnc'>235.41</td><td align="right" class='awrnc'>7.83</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>24,645,118</td><td align="right" class='awrc'>26,890.47</td><td align="right" class='awrc'>893.98</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,712</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>27,568</td><td align="right" class='awrc'>30.08</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,329</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>0.05</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>1,013</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>204</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.01</td></tr>
Current Database
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>836</td><td align="right" class='awrnc'>0.91</td><td align="right" class='awrnc'>0.03</td></tr>
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb


<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Optimized reject DB</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search all</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search hint</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search steal</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:bump HWM</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free block</td><td align="right" class='awrnc'>808</td><td align="right" class='awrnc'>0.88</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free data block</td><td align="right" class='awrc'>651</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free index block</td><td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:good hint</td><td align="right" class='awrc'>693</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:reject db</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>28,577,018</td><td align="right" class='awrc'>31,180.60</td><td align="right" class='awrc'>1,036.60</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO buffer defrag count</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>10,360,447</td><td align="right" class='awrc'>11,304.36</td><td align="right" class='awrc'>375.81</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>646</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>2,409</td><td align="right" class='awrc'>2.63</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>28,708,052</td><td align="right" class='awrnc'>31,323.57</td><td align="right" class='awrnc'>1,041.35</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>330,793</td><td align="right" class='awrc'>360.93</td><td align="right" class='awrc'>12.00</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>3,580</td><td align="right" class='awrnc'>3.91</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>461,157</td><td align="right" class='awrnc'>503.17</td><td align="right" class='awrnc'>16.73</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>385,189</td><td align="right" class='awrc'>420.28</td><td align="right" class='awrc'>13.97</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>3,138</td><td align="right" class='awrnc'>3.42</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>16,878,155</td><td align="right" class='awrc'>18,415.88</td><td align="right" class='awrc'>612.24</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>1,778</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>1,778</td><td align="right" class='awrc'>1.94</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>368,300</td><td align="right" class='awrnc'>401.85</td><td align="right" class='awrnc'>13.36</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>2,540</td><td align="right" class='awrc'>2.77</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>221</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>1,328</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>716,004</td><td align="right" class='awrc'>781.24</td><td align="right" class='awrc'>25.97</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>640,720</td><td align="right" class='awrnc'>699.09</td><td align="right" class='awrnc'>23.24</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>4,009,287</td><td align="right" class='awrc'>4,374.56</td><td align="right" class='awrc'>145.43</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>1,552,058</td><td align="right" class='awrnc'>1,693.46</td><td align="right" class='awrnc'>56.30</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>759</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>175,428</td><td align="right" class='awrc'>191.41</td><td align="right" class='awrc'>6.36</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>838</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>559</td><td align="right" class='awrnc'>0.61</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>166,577</td><td align="right" class='awrc'>181.75</td><td align="right" class='awrc'>6.04</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>3,469,968</td><td align="right" class='awrnc'>3,786.11</td><td align="right" class='awrnc'>125.87</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>189</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>8,781,824</td><td align="right" class='awrc'>9,581.91</td><td align="right" class='awrc'>318.55</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>453,387</td><td align="right" class='awrnc'>494.69</td><td align="right" class='awrnc'>16.45</td></tr>
<tr><td scope="row" class='awrc'>LOB table id lookup cache misses</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages recv'd</td><td align="right" class='awrnc'>182</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>PX local messages sent</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages recv'd</td><td align="right" class='awrnc'>235</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages sent</td><td align="right" class='awrc'>274</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Parallel operations not downgraded</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Requests to/from client</td><td align="right" class='awrc'>763</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>SMON posted for instance recovery</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>509</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks created</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks executed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>1,755</td><td align="right" class='awrnc'>1.91</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints completed</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints started</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background timeouts</td><td align="right" class='awrc'>13,028</td><td align="right" class='awrc'>14.21</td><td align="right" class='awrc'>0.47</td></tr>
<tr><td scope="row" class='awrnc'>blocks cleaned out using minact</td><td align="right" class='awrnc'>1,815,638</td><td align="right" class='awrnc'>1,981.06</td><td align="right" class='awrnc'>65.86</td></tr>
<tr><td scope="row" class='awrc'>branch node splits</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>77,415,207</td><td align="right" class='awrnc'>84,468.31</td><td align="right" class='awrnc'>2,808.15</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>23,532,784</td><td align="right" class='awrc'>25,676.80</td><td align="right" class='awrc'>853.63</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>250,814</td><td align="right" class='awrnc'>273.67</td><td align="right" class='awrnc'>9.10</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>133,352</td><td align="right" class='awrc'>145.50</td><td align="right" class='awrc'>4.84</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>233,277</td><td align="right" class='awrnc'>254.53</td><td align="right" class='awrnc'>8.46</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>64,912</td><td align="right" class='awrc'>70.83</td><td align="right" class='awrc'>2.35</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>8,192</td><td align="right" class='awrnc'>8.94</td><td align="right" class='awrnc'>0.30</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>254,107,977,216</td><td align="right" class='awrc'>277,259,113.17</td><td align="right" class='awrc'>9,217,497.72</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>9,144</td><td align="right" class='awrnc'>9.98</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>32,162</td><td align="right" class='awrc'>35.09</td><td align="right" class='awrc'>1.17</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>1,568</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>25,908</td><td align="right" class='awrc'>28.27</td><td align="right" class='awrc'>0.94</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>231</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>31,205</td><td align="right" class='awrnc'>34.05</td><td align="right" class='awrnc'>1.13</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>25,055</td><td align="right" class='awrc'>27.34</td><td align="right" class='awrc'>0.91</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: cannot pin</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>3,322,329</td><td align="right" class='awrnc'>3,625.02</td><td align="right" class='awrnc'>120.51</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>3,266,034</td><td align="right" class='awrc'>3,563.59</td><td align="right" class='awrc'>118.47</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>27,003</td><td align="right" class='awrnc'>29.46</td><td align="right" class='awrnc'>0.98</td></tr>
<tr><td scope="row" class='awrc'>consistent changes</td><td align="right" class='awrc'>13,336</td><td align="right" class='awrc'>14.55</td><td align="right" class='awrc'>0.48</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets</td><td align="right" class='awrnc'>20,766,475</td><td align="right" class='awrnc'>22,658.46</td><td align="right" class='awrnc'>753.28</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>410,530</td><td align="right" class='awrc'>447.93</td><td align="right" class='awrc'>14.89</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>404,119</td><td align="right" class='awrnc'>440.94</td><td align="right" class='awrnc'>14.66</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>20,766,475</td><td align="right" class='awrc'>22,658.46</td><td align="right" class='awrc'>753.28</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>20,355,945</td><td align="right" class='awrnc'>22,210.52</td><td align="right" class='awrnc'>738.39</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>19,566,518</td><td align="right" class='awrc'>21,349.17</td><td align="right" class='awrc'>709.75</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>2,588</td><td align="right" class='awrc'>2.82</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>7,204,466</td><td align="right" class='awrnc'>7,860.85</td><td align="right" class='awrnc'>261.33</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>3,878,497</td><td align="right" class='awrc'>4,231.86</td><td align="right" class='awrc'>140.69</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>973</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>3,877,524</td><td align="right" class='awrc'>4,230.80</td><td align="right" class='awrc'>140.65</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>286,421</td><td align="right" class='awrnc'>312.52</td><td align="right" class='awrnc'>10.39</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>1,927,718</td><td align="right" class='awrc'>2,103.35</td><td align="right" class='awrc'>69.93</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>3,257,667</td><td align="right" class='awrnc'>3,554.46</td><td align="right" class='awrnc'>118.17</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>4,748</td><td align="right" class='awrc'>5.18</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>256,825</td><td align="right" class='awrnc'>280.22</td><td align="right" class='awrnc'>9.32</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>256,147</td><td align="right" class='awrc'>279.48</td><td align="right" class='awrc'>9.29</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>386</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>189,562</td><td align="right" class='awrc'>206.83</td><td align="right" class='awrc'>6.88</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>587,485,784</td><td align="right" class='awrnc'>641,010.13</td><td align="right" class='awrnc'>21,310.42</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>24,389,027</td><td align="right" class='awrc'>26,611.05</td><td align="right" class='awrc'>884.69</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>23,094,347</td><td align="right" class='awrnc'>25,198.41</td><td align="right" class='awrnc'>837.72</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>15,231</td><td align="right" class='awrc'>16.62</td><td align="right" class='awrc'>0.55</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>8,085</td><td align="right" class='awrnc'>8.82</td><td align="right" class='awrnc'>0.29</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>342,760</td><td align="right" class='awrnc'>373.99</td><td align="right" class='awrnc'>12.43</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>361</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>1,672</td><td align="right" class='awrnc'>1.82</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>1,205</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>67,285</td><td align="right" class='awrc'>73.42</td><td align="right" class='awrc'>2.44</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>9,399</td><td align="right" class='awrnc'>10.26</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>16,276</td><td align="right" class='awrnc'>17.76</td><td align="right" class='awrnc'>0.59</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>9,840</td><td align="right" class='awrc'>10.74</td><td align="right" class='awrc'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>56,729,673</td><td align="right" class='awrnc'>61,898.17</td><td align="right" class='awrnc'>2,057.81</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>4,793,536</td><td align="right" class='awrc'>5,230.26</td><td align="right" class='awrc'>173.88</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>416</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>787</td><td align="right" class='awrc'>0.86</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>14,679</td><td align="right" class='awrnc'>16.02</td><td align="right" class='awrnc'>0.53</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>10,046</td><td align="right" class='awrc'>10.96</td><td align="right" class='awrc'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>6,597</td><td align="right" class='awrnc'>7.20</td><td align="right" class='awrnc'>0.24</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc index split wait timeouts</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>54,807</td><td align="right" class='awrnc'>59.80</td><td align="right" class='awrnc'>1.99</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>76,687</td><td align="right" class='awrc'>83.67</td><td align="right" class='awrc'>2.78</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>16,554,906</td><td align="right" class='awrnc'>18,063.18</td><td align="right" class='awrnc'>600.51</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi fg</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc no change made</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read time waited</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read wait timeouts</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>175</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>6,099,029</td><td align="right" class='awrc'>6,654.70</td><td align="right" class='awrc'>221.24</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>35,920</td><td align="right" class='awrnc'>39.19</td><td align="right" class='awrnc'>1.30</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>18,579</td><td align="right" class='awrc'>20.27</td><td align="right" class='awrc'>0.67</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock failures</td><td align="right" class='awrnc'>28,367</td><td align="right" class='awrnc'>30.95</td><td align="right" class='awrnc'>1.03</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock grants</td><td align="right" class='awrc'>14,662,181</td><td align="right" class='awrc'>15,998.02</td><td align="right" class='awrc'>531.86</td></tr>
<tr><td scope="row" class='awrnc'>gcs anti-locks created</td><td align="right" class='awrnc'>343,060</td><td align="right" class='awrnc'>374.32</td><td align="right" class='awrnc'>12.44</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>22,408,861</td><td align="right" class='awrc'>24,450.48</td><td align="right" class='awrc'>812.86</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>18,317,597</td><td align="right" class='awrnc'>19,986.47</td><td align="right" class='awrnc'>664.45</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>317,646</td><td align="right" class='awrc'>346.59</td><td align="right" class='awrc'>11.52</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>1,652,395</td><td align="right" class='awrnc'>1,802.94</td><td align="right" class='awrnc'>59.94</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>10,375</td><td align="right" class='awrnc'>11.32</td><td align="right" class='awrnc'>0.38</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>17,138</td><td align="right" class='awrc'>18.70</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>83,085</td><td align="right" class='awrc'>90.65</td><td align="right" class='awrc'>3.01</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>86,806</td><td align="right" class='awrnc'>94.71</td><td align="right" class='awrnc'>3.15</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>71,552</td><td align="right" class='awrc'>78.07</td><td align="right" class='awrc'>2.60</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>606,127</td><td align="right" class='awrnc'>661.35</td><td align="right" class='awrnc'>21.99</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>27,480</td><td align="right" class='awrc'>29.98</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>371</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>3,804</td><td align="right" class='awrc'>4.15</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>216,778</td><td align="right" class='awrnc'>236.53</td><td align="right" class='awrnc'>7.86</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>153</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>562</td><td align="right" class='awrc'>0.61</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>6,672</td><td align="right" class='awrnc'>7.28</td><td align="right" class='awrnc'>0.24</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>6,672</td><td align="right" class='awrc'>7.28</td><td align="right" class='awrc'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>201,883,631,616</td><td align="right" class='awrnc'>220,276,739.35</td><td align="right" class='awrnc'>7,323,114.90</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>1,084</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>169,672</td><td align="right" class='awrc'>185.13</td><td align="right" class='awrc'>6.15</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>169,668</td><td align="right" class='awrnc'>185.13</td><td align="right" class='awrnc'>6.15</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>20,284,051</td><td align="right" class='awrc'>22,132.08</td><td align="right" class='awrc'>735.78</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>8,349,999</td><td align="right" class='awrnc'>9,110.75</td><td align="right" class='awrnc'>302.89</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>218,029</td><td align="right" class='awrc'>237.89</td><td align="right" class='awrc'>7.91</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (failures)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>3,259</td><td align="right" class='awrc'>3.56</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>271</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>22,277,415</td><td align="right" class='awrnc'>24,307.05</td><td align="right" class='awrnc'>808.09</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>183,052,107,776</td><td align="right" class='awrc'>199,729,522.94</td><td align="right" class='awrc'>6,640,021.32</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>22,284,580</td><td align="right" class='awrnc'>24,314.87</td><td align="right" class='awrnc'>808.35</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>185,459,744,256</td><td align="right" class='awrc'>202,356,513.10</td><td align="right" class='awrc'>6,727,355.78</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>3,303</td><td align="right" class='awrnc'>3.60</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>22,345,229</td><td align="right" class='awrc'>24,381.05</td><td align="right" class='awrc'>810.55</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>22,345,229</td><td align="right" class='awrnc'>24,381.05</td><td align="right" class='awrnc'>810.55</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>18,190,018</td><td align="right" class='awrc'>19,847.26</td><td align="right" class='awrc'>659.82</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct (lob)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct temporary tablespace</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads prefetch warmup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>3,586,656</td><td align="right" class='awrnc'>3,913.43</td><td align="right" class='awrnc'>130.10</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>31,148,564,480</td><td align="right" class='awrc'>33,986,431.51</td><td align="right" class='awrc'>1,129,881.18</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>3,634,459</td><td align="right" class='awrnc'>3,965.59</td><td align="right" class='awrnc'>131.84</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>34,316,465,152</td><td align="right" class='awrc'>37,442,951.61</td><td align="right" class='awrc'>1,244,793.43</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>9,832</td><td align="right" class='awrnc'>10.73</td><td align="right" class='awrnc'>0.36</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>3,802,315</td><td align="right" class='awrc'>4,148.73</td><td align="right" class='awrc'>137.92</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>1,116</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>144</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>3,801,199</td><td align="right" class='awrc'>4,147.52</td><td align="right" class='awrc'>137.88</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>3,722,326</td><td align="right" class='awrnc'>4,061.46</td><td align="right" class='awrnc'>135.02</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>24,704</td><td align="right" class='awrc'>26.95</td><td align="right" class='awrc'>0.90</td></tr>
<tr><td scope="row" class='awrnc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>prefetched blocks aged out before use</td><td align="right" class='awrc'>444</td><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>recursive calls</td><td align="right" class='awrnc'>269,328</td><td align="right" class='awrnc'>293.87</td><td align="right" class='awrnc'>9.77</td></tr>
<tr><td scope="row" class='awrc'>recursive cpu usage</td><td align="right" class='awrc'>452,501</td><td align="right" class='awrc'>493.73</td><td align="right" class='awrc'>16.41</td></tr>
<tr><td scope="row" class='awrnc'>redo KB read</td><td align="right" class='awrnc'>1,343,488</td><td align="right" class='awrnc'>1,465.89</td><td align="right" class='awrnc'>48.73</td></tr>
<tr><td scope="row" class='awrc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrc'>2,347,517</td><td align="right" class='awrc'>2,561.39</td><td align="right" class='awrc'>85.15</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written</td><td align="right" class='awrnc'>5,920,794</td><td align="right" class='awrnc'>6,460.22</td><td align="right" class='awrnc'>214.77</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 0)</td><td align="right" class='awrc'>3,964,672</td><td align="right" class='awrc'>4,325.88</td><td align="right" class='awrc'>143.81</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 1)</td><td align="right" class='awrnc'>1,956,122</td><td align="right" class='awrnc'>2,134.34</td><td align="right" class='awrnc'>70.96</td></tr>
<tr><td scope="row" class='awrc'>redo entries</td><td align="right" class='awrc'>3,685,647</td><td align="right" class='awrc'>4,021.44</td><td align="right" class='awrc'>133.69</td></tr>
<tr><td scope="row" class='awrnc'>redo size</td><td align="right" class='awrnc'>2,926,731,908</td><td align="right" class='awrnc'>3,193,379.06</td><td align="right" class='awrnc'>106,164.10</td></tr>
<tr><td scope="row" class='awrc'>redo size for direct writes</td><td align="right" class='awrc'>3,660</td><td align="right" class='awrc'>3.99</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>redo subscn max counts</td><td align="right" class='awrnc'>25,993</td><td align="right" class='awrnc'>28.36</td><td align="right" class='awrnc'>0.94</td></tr>
<tr><td scope="row" class='awrc'>redo synch long waits</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>1,590</td><td align="right" class='awrnc'>1.73</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>15,682,125</td><td align="right" class='awrc'>17,110.88</td><td align="right" class='awrc'>568.85</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>258,659</td><td align="right" class='awrnc'>282.22</td><td align="right" class='awrnc'>9.38</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>219</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count ( 32ms)</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (128ms)</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>255</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>7,961,652</td><td align="right" class='awrnc'>8,687.02</td><td align="right" class='awrnc'>288.80</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>32,586</td><td align="right" class='awrc'>35.55</td><td align="right" class='awrc'>1.18</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>400,307</td><td align="right" class='awrc'>436.78</td><td align="right" class='awrc'>14.52</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>741,508,062</td><td align="right" class='awrnc'>809,064.99</td><td align="right" class='awrnc'>26,897.42</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>62,090,940</td><td align="right" class='awrc'>67,747.89</td><td align="right" class='awrc'>2,252.28</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>232</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write info find fail</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>62,432,999</td><td align="right" class='awrnc'>68,121.11</td><td align="right" class='awrnc'>2,264.69</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>486</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>364</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>709</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>1,481</td><td align="right" class='awrnc'>1.62</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>7,160</td><td align="right" class='awrc'>7.81</td><td align="right" class='awrc'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>4,220</td><td align="right" class='awrnc'>4.60</td><td align="right" class='awrnc'>0.15</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>1,667</td><td align="right" class='awrc'>1.82</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>354</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>443</td><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>74,247</td><td align="right" class='awrnc'>81.01</td><td align="right" class='awrnc'>2.69</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>742,477,176</td><td align="right" class='awrc'>810,122.40</td><td align="right" class='awrc'>26,932.57</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>807,353,616</td><td align="right" class='awrnc'>880,909.56</td><td align="right" class='awrnc'>29,285.90</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>59,621,478</td><td align="right" class='awrc'>65,053.44</td><td align="right" class='awrc'>2,162.71</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>16,882</td><td align="right" class='awrnc'>18.42</td><td align="right" class='awrnc'>0.61</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>16,882</td><td align="right" class='awrc'>18.42</td><td align="right" class='awrc'>0.61</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>9,694</td><td align="right" class='awrnc'>10.58</td><td align="right" class='awrnc'>0.35</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>7,188</td><td align="right" class='awrc'>7.84</td><td align="right" class='awrc'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>16,882</td><td align="right" class='awrnc'>18.42</td><td align="right" class='awrnc'>0.61</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>16,882</td><td align="right" class='awrc'>18.42</td><td align="right" class='awrc'>0.61</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>979</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>2,594</td><td align="right" class='awrnc'>2.83</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>1,171,456</td><td align="right" class='awrc'>1,278.18</td><td align="right" class='awrc'>42.49</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>981,104</td><td align="right" class='awrc'>1,070.49</td><td align="right" class='awrc'>35.59</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read bytes</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read ops</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>1,171,456</td><td align="right" class='awrnc'>1,278.18</td><td align="right" class='awrnc'>42.49</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment cfs allocations</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment chunks allocation from dispenser</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser allocations</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load empty</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load tasks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>10,138</td><td align="right" class='awrnc'>11.06</td><td align="right" class='awrnc'>0.37</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ufs2cfs bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>215,750</td><td align="right" class='awrnc'>235.41</td><td align="right" class='awrnc'>7.83</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>24,645,118</td><td align="right" class='awrc'>26,890.47</td><td align="right" class='awrc'>893.98</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>9,760,459</td><td align="right" class='awrnc'>10,649.71</td><td align="right" class='awrnc'>354.05</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>883</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>131,587</td><td align="right" class='awrnc'>143.58</td><td align="right" class='awrnc'>4.77</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>123,616,537</td><td align="right" class='awrc'>134,878.93</td><td align="right" class='awrc'>4,484.06</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>284</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>299</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>48,645,064</td><td align="right" class='awrnc'>53,076.99</td><td align="right" class='awrnc'>1,764.55</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>79,818</td><td align="right" class='awrnc'>87.09</td><td align="right" class='awrnc'>2.90</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>1,684,039</td><td align="right" class='awrc'>1,837.47</td><td align="right" class='awrc'>61.09</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>1,684,039</td><td align="right" class='awrnc'>1,837.47</td><td align="right" class='awrnc'>61.09</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>592</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>10,396</td><td align="right" class='awrc'>11.34</td><td align="right" class='awrc'>0.38</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>368</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>total number of times SMON posted</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background get time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock background gets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock foreground requests</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction rollbacks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent read rollbacks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrc'>2,115</td><td align="right" class='awrc'>2.31</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>undo change vector size</td><td align="right" class='awrnc'>1,201,621,900</td><td align="right" class='awrnc'>1,311,098.64</td><td align="right" class='awrnc'>43,587.56</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>1,712</td><td align="right" class='awrc'>1.87</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>27,568</td><td align="right" class='awrnc'>30.08</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>254</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>1,329</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in background</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>8,707</td><td align="right" class='awrc'>9.50</td><td align="right" class='awrc'>0.32</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>373</td><td align="right" class='awrc'>118</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>1,026</td><td align="right" class='awrnc'>65</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>11,344</td><td align="right" class='awrc'>11,496</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>1,902,216,712</td><td align="right" class='awrnc'>659,806,416</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>2,274,580,584</td><td align="right" class='awrc'>819,423,376</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>877,155,936</td><td align="right" class='awrnc'>374,316,608</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>2,586,809,152</td><td align="right" class='awrc'>3,078,694,040</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>165.8G</td><td align="right" class='awrc'>23632.37</td><td align="right" class='awrc'>185.223M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>4M</td><td align="right" class='awrc'>3.68ms</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>28.4G</td><td align="right" class='awrnc'>3832.44</td><td align="right" class='awrnc'>31.735M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2.7G</td><td align="right" class='awrc'>34.81</td><td align="right" class='awrc'>3.037M</td><td align="right" class='awrc'>16.3K</td><td align="right" class='awrc'>40.58ms</td></tr>
<tr><td scope="row" class='awrnc'>Others</td><td align="right" class='awrnc'>2.2G</td><td align="right" class='awrnc'>8.42</td><td align="right" class='awrnc'>2.456M</td><td align="right" class='awrnc'>22M</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>.024M</td><td align="right" class='awrnc'>4802</td><td align="right" class='awrnc'>5.20ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>.001M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>168G</td><td align="right" class='awrnc'>23640.78</td><td align="right" class='awrnc'>187.679M</td><td align="right" class='awrnc'>31.1G</td><td align="right" class='awrnc'>3868.46</td><td align="right" class='awrnc'>34.797M</td><td align="right" class='awrnc'>4M</td><td align="right" class='awrnc'>3.83ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>165.6G</td><td align="right" class='awrc'>23609.91</td><td align="right" class='awrc'>185.037M</td><td align="right" class='awrc'>28.4G</td><td align="right" class='awrc'>3830.47</td><td align="right" class='awrc'>31.725M</td><td align="right" class='awrc'>438.20us</td><td align="right" class='awrc'>2.61ms</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>2.1G</td><td align="right" class='awrnc'>2.61</td><td align="right" class='awrnc'>2.366M</td><td align="right" class='awrnc'>2.7G</td><td align="right" class='awrnc'>34.72</td><td align="right" class='awrnc'>3.031M</td><td align="right" class='awrnc'>950.00us</td><td align="right" class='awrnc'>1550.01ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>83M</td><td align="right" class='awrc'>5.81</td><td align="right" class='awrc'>.091M</td><td align="right" class='awrc'>15M</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>.016M</td><td align="right" class='awrc'>484.69us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>9M</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>.01M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>315.79us</td><td align="right" class='awrnc'>1.68ms</td></tr>
<tr><td scope="row" class='awrc'>Temp File</td><td align="right" class='awrc'>2M</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>.001M</td><td align="right" class='awrc'>260.87us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>167.8G</td><td align="right" class='awrnc'>23618.50</td><td align="right" class='awrnc'>187.505M</td><td align="right" class='awrnc'>31.1G</td><td align="right" class='awrnc'>3866.33</td><td align="right" class='awrnc'>34.774M</td><td align="right" class='awrnc'>438.22us</td><td align="right" class='awrnc'>1030.73ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>165.6G</td><td align="right" class='awrc'>23605.83</td><td align="right" class='awrc'>185.007M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3.7M</td><td align="right" class='awrc'>2.95ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>165.6G</td><td align="right" class='awrnc'>23605.71</td><td align="right" class='awrnc'>185.005M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>3.7M</td><td align="right" class='awrnc'>2.95ms</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>2M</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>513.04us</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>28.4G</td><td align="right" class='awrnc'>3830.25</td><td align="right" class='awrnc'>31.717M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
DBWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>28.4G</td><td align="right" class='awrc'>3830.30</td><td align="right" class='awrc'>31.717M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 LGWR (Log File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2.7G</td><td align="right" class='awrc'>34.72</td><td align="right" class='awrc'>3.031M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
LGWR
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2.7G</td><td align="right" class='awrnc'>34.72</td><td align="right" class='awrnc'>3.031M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Others
</td><td align="right" class='awrc'>2.2G</td><td align="right" class='awrc'>8.42</td><td align="right" class='awrc'>2.456M</td><td align="right" class='awrc'>22M</td><td align="right" class='awrc'>1.16</td><td align="right" class='awrc'>.024M</td><td align="right" class='awrc'>4340</td><td align="right" class='awrc'>.99ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Log File)
</td><td align="right" class='awrnc'>2.1G</td><td align="right" class='awrnc'>2.61</td><td align="right" class='awrnc'>2.366M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>220</td><td align="right" class='awrnc'>1.31ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>83M</td><td align="right" class='awrc'>5.81</td><td align="right" class='awrc'>.091M</td><td align="right" class='awrc'>15M</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>.016M</td><td align="right" class='awrc'>4120</td><td align="right" class='awrc'>.97ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>6M</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>.007M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>.001M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Writes (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>.001M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Direct Writes
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>.001M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
TOTAL:
</td><td align="right" class='awrnc'>167.8G</td><td align="right" class='awrnc'>23614.25</td><td align="right" class='awrnc'>187.463M</td><td align="right" class='awrnc'>31.1G</td><td align="right" class='awrnc'>3866.23</td><td align="right" class='awrnc'>34.774M</td><td align="right" class='awrnc'>3.7M</td><td align="right" class='awrnc'>2.94ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>898,448</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>24,757,346</td><td align="right" class='awrc'>22,447,959</td><td align="right" class='awrc'>3,838,635</td><td align="right" class='awrc'>366051</td><td align="right" class='awrc'>1920</td><td align="right" class='awrc'>157</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			  3,802,315</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>175,405</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>142207</td><td align="right" class='awrc'>747728</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>31</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>283</td><td align="right" class='awrnc'>15589</td><td align="right" class='awrnc'>2984602</td><td align="right" class='awrnc'>16986915</td><td align="right" class='awrnc'>2984602</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>768</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>40,906</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>28430.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,536</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>40,621</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>28229.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>2,304</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>40,411</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>28081.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>3,072</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>40,240</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27960.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>3,840</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>447</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>40,073</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27842.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>4,608</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>537</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>39,920</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27734.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>5,376</td><td align="right" class='awrc'>0.70</td><td align="right" class='awrc'>626</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>39,764</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27624.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>6,144</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>716</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>39,614</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27518.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>6,912</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>805</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>39,465</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27414.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>7,680</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>39,317</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27309.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>7,712</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>898</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>39,311</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27305.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>8,448</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>984</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>39,166</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27202.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>9,216</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>39,014</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27095.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>9,984</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>1,163</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>38,870</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>26993.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>10,752</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>1,253</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>38,729</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>26894.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>11,520</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>1,342</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>38,588</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>26795.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>12,288</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>1,432</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>38,445</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>26694.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>13,056</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>1,521</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>38,303</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>26593.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>13,824</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>1,610</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>38,165</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>26496.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>14,592</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>1,700</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>38,028</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>26400.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>15,360</td><td align="right" class='awrc'>1.99</td><td align="right" class='awrc'>1,789</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>37,893</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>26304.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>420</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>3,215</td><td align="right" class='awrc'>319</td><td align="right" class='awrc'>3,389.32</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>329,210</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>1,383</td><td align="right" class='awrnc'>1,942.75</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>329,210</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>765</td><td align="right" class='awrc'>765</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>155</td><td align="right" class='awrc'>155</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>221</td><td align="right" class='awrnc'>221</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>402</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>257.50</td><td align="right" class='awrc'>90.00</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>8,435,792</td></tr>
<tr><td align="right" scope="row" class='awrnc'>804</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>257.50</td><td align="right" class='awrnc'>90.00</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>8,435,792</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,608</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>244.91</td><td align="right" class='awrc'>91.00</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>8,396,031</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,411</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>177.53</td><td align="right" class='awrnc'>93.00</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>8,183,318</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,215</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,858</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,501</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,144</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,787</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,430</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,645</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,860</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,290</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>2,414.46</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,622,825</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,720</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>2,414.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,622,825</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,248</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>2,453</td><td align="right" class='awrc'>3,770</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>2,529</td><td align="right" class='awrc'>3.16</td><td align="right" class='awrc'>162</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,312</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>5,216</td><td align="right" class='awrnc'>4,991</td><td align="right" class='awrnc'>0.91</td><td align="right" class='awrnc'>1,308</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>205</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,344</td><td align="right" class='awrc'>0.82</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>6,432</td><td align="right" class='awrc'>5,447</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>852</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>221</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,376</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,493</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>806</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,408</td><td align="right" class='awrc'>0.86</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,440</td><td align="right" class='awrnc'>0.88</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,472</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,504</td><td align="right" class='awrnc'>0.92</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,536</td><td align="right" class='awrc'>0.94</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,568</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,600</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,632</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,664</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,696</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,728</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,760</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,792</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,824</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,856</td><td align="right" class='awrc'>1.14</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,888</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,920</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,016</td><td align="right" class='awrnc'>1.24</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,208</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,400</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,592</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,784</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,976</td><td align="right" class='awrc'>1.82</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,168</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>7,529</td><td align="right" class='awrnc'>5,498</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>801</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>222</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,360</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>7,529</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>801</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>2,416</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>301,529</td><td align="right" class='awrc'>41,056,209</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,624</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>301,289</td><td align="right" class='awrnc'>40,773,171</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,832</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>301,019</td><td align="right" class='awrc'>40,387,925</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,040</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>300,808</td><td align="right" class='awrnc'>40,065,577</td></tr>
<tr><td align="right" scope="row" class='awrc'>7,248</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>300,688</td><td align="right" class='awrc'>39,912,264</td></tr>
<tr><td align="right" scope="row" class='awrnc'>8,456</td><td align="right" class='awrnc'>0.88</td><td align="right" class='awrnc'>300,478</td><td align="right" class='awrnc'>39,609,571</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,664</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>300,268</td><td align="right" class='awrc'>39,310,809</td></tr>
<tr><td align="right" scope="row" class='awrnc'>10,872</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>300,148</td><td align="right" class='awrnc'>39,157,497</td></tr>
<tr><td align="right" scope="row" class='awrc'>12,080</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>299,968</td><td align="right" class='awrc'>38,870,528</td></tr>
<tr><td align="right" scope="row" class='awrnc'>13,288</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>299,758</td><td align="right" class='awrnc'>38,587,490</td></tr>
<tr><td align="right" scope="row" class='awrc'>14,496</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>299,667</td><td align="right" class='awrc'>38,442,040</td></tr>
<tr><td align="right" scope="row" class='awrnc'>15,704</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>299,457</td><td align="right" class='awrnc'>38,166,864</td></tr>
<tr><td align="right" scope="row" class='awrc'>16,912</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>299,367</td><td align="right" class='awrc'>38,033,208</td></tr>
<tr><td align="right" scope="row" class='awrnc'>18,120</td><td align="right" class='awrnc'>1.88</td><td align="right" class='awrnc'>299,367</td><td align="right" class='awrnc'>38,033,208</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,328</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>299,367</td><td align="right" class='awrc'>38,033,208</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>data block</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>126</td></tr>
<tr><td scope="row" class='awrnc'>undo header</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>185</td></tr>
<tr><td scope="row" class='awrc'>segment header</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td></tr>
<tr><td scope="row" class='awrnc'>undo block</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>TX-Transaction (row lock contention)</td>
<td align="right" class='awrc'>8</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>4,912.50</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>27,691</td><td align="right" class='awrnc'>27,693</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>119.90</td></tr>
<tr><td scope="row" class='awrc'>CF-Controlfile Transaction</td>
<td align="right" class='awrc'>2,337</td><td align="right" class='awrc'>2,334</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>40.32</td></tr>
<tr><td scope="row" class='awrnc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12.15</td></tr>
<tr><td scope="row" class='awrc'>PS-PX Process Reservation</td>
<td align="right" class='awrc'>120</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.29</td></tr>
<tr><td scope="row" class='awrnc'>FB-Format Block</td>
<td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23.00</td></tr>
<tr><td scope="row" class='awrc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>88.00</td></tr>
<tr><td scope="row" class='awrnc'>DW-In memory Dispenser</td>
<td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.00</td></tr>
<tr><td scope="row" class='awrc'>WF-AWR Flush</td>
<td align="right" class='awrc'>34</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.58</td></tr>
<tr><td scope="row" class='awrnc'>TO-Temp Object</td>
<td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.00</td></tr>
<tr><td scope="row" class='awrc'>TT-Tablespace</td>
<td align="right" class='awrc'>135</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.33</td></tr>
<tr><td scope="row" class='awrnc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.25</td></tr>
<tr><td scope="row" class='awrc'>HW-Segment High Water Mark</td>
<td align="right" class='awrc'>700</td><td align="right" class='awrc'>700</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>DR-Distributed Recovery</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.00</td></tr>
<tr><td scope="row" class='awrc'>TA-Instance Undo</td>
<td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.67</td></tr>
<tr><td scope="row" class='awrnc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.00</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1</td>
<td align="right" class='awrc'>93,261</td><td align="right" class='awrc'>93,261</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrnc'>93,261</td><td align="right" class='awrnc'>93,261</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TX-Transaction</td>
<td align="right" class='awrc'>27,520</td><td align="right" class='awrc'>27,506</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrnc'>8,882</td><td align="right" class='awrnc'>8,882</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrc'>738</td><td align="right" class='awrc'>738</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrnc'>635</td><td align="right" class='awrnc'>634</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrc'>283</td><td align="right" class='awrc'>283</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrnc'>222</td><td align="right" class='awrnc'>222</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CU-Cursor</td>
<td align="right" class='awrc'>150</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MR-Media Recovery</td>
<td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SH-Active Session History Flushing</td>
<td align="right" class='awrc'>101</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrc'>55</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IS-Instance State</td>
<td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SE-Session Migration</td>
<td align="right" class='awrc'>43</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQ-Sequence Cache</td>
<td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrc'>15</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PR-Process Startup</td>
<td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MW-MWIN Schedule</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RS-Reclaimable Space (read alert level)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>
<ul>
<li class="awr"> Min/Max TR (mins) - Min and Max Tuned Retention (minutes) </li>
<li class="awr"> STO - Snapshot Too Old count,	OOS - Out of Space count </li>
<li class="awr"> Undo segment block stats: </li>
<li class="awr"> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed </li>
<li class="awr"> eS - expired	Stolen,   eR - expired	 Released,   eU - expired   reUsed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays undo segment summary. It displays undo tablespace number, number of undo blocks, number of transactions, max query length, etc."><tr><th class="awrbg" scope="col">Undo TS#</th><th class="awrbg" scope="col">Num Undo Blocks (K)</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concurcy</th><th class="awrbg" scope="col">Min/Max TR (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">	uS/uR/uU/    eS/eR/eU</th></tr>
<tr><td align="right" scope="row" class='awrc'>5</td><td align="right" class='awrc'>172.59</td><td align="right" class='awrc'>32,130</td><td align="right" class='awrc'>960</td><td align="right" class='awrc'>242</td><td class='awrc'>20/30.1</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>
<ul>
<li class="awr"> Most recent 35 Undostat rows, ordered by Time desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the 35 most recent Undostat rows."><tr><th class="awrbg" scope="col">End Time</th><th class="awrbg" scope="col">Num Undo Blocks</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concy</th><th class="awrbg" scope="col">Tun Ret (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">  uS/uR/uU/   eS/eR/eU</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 15:09</td><td align="right" class='awrc'>117,396</td><td align="right" class='awrc'>21,669</td><td align="right" class='awrc'>960</td><td align="right" class='awrc'>239</td><td align="right" class='awrc'>30</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
<tr><td scope="row" class='awrnc'>12-Feb 14:59</td><td align="right" class='awrnc'>55,198</td><td align="right" class='awrnc'>10,461</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>242</td><td align="right" class='awrnc'>20</td><td class='awrnc'>0/0</td><td class='awrnc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>


<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>268</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM allocation</td><td align="right" class='awrc'>54,127</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM connection state latch</td><td align="right" class='awrnc'>7,734</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM db client latch</td><td align="right" class='awrc'>802</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map headers</td><td align="right" class='awrnc'>1,571</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map load waiting list</td><td align="right" class='awrc'>448</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>32,449</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>53,223,468</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network background latch</td><td align="right" class='awrnc'>7,914</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network state latch</td><td align="right" class='awrc'>466</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM remote client latch</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Alerted Metric Element list</td><td align="right" class='awrc'>11,456</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Autotask management</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Change Notification Hash table latch</td><td align="right" class='awrc'>395</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Column stats entry latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>17,115</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DML lock allocation</td><td align="right" class='awrnc'>58,205</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Event Group Locks</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FIB s.o chain latch</td><td align="right" class='awrnc'>451</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FOB consolidated s.o list latch</td><td align="right" class='awrc'>451</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>File State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile block</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile write queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hang Manager wait event statistics</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10,598</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>I/O Staticstics latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats main anchor latch</td><td align="right" class='awrnc'>909</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM access tracking extent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM activity tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary rw latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area sb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area scb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM emb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM seg hdr latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMFS defer write list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMXT hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC other latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>


<tr><td scope="row" class='awrc'>IPC stats buffer allocation latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>In memory undo latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS Sh mem access</td><td align="right" class='awrc'>4,516</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast add buf latch</td><td align="right" class='awrnc'>4,542</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast drop buf latch</td><td align="right" class='awrc'>4,542</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast load blnc latch</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue access latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue state obj latch</td><td align="right" class='awrnc'>189,630</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS slv state obj latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KCNIBR - invalid block range tree</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDCStatHash latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Buffer Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Bucket Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Elem Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO action list latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO bll latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC FX Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFCL LE Freelist</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS client latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS cluster latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS endpoint latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS process latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFK SGA Libload latch</td><td align="right" class='awrc'>18,678</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFMD SGA</td><td align="right" class='awrnc'>517</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrnc'>302</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool KGH calls</td><td align="right" class='awrc'>58,126</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>809,514</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1,395,011</td><td align="right" class='awrnc'>2.65</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool pending avail list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>6,341,118</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrc'>302</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS req layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS id table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS ksfs_node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFSD name cache parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL LS Segment latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC ASPC anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrnc'>1,066</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Namespace latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSK PDB IO STAT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMA SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMF SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSWL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrnc'>346</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR large replies</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTF sga latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>404</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTILM latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTU in-memory txn table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA ODPSCN latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KWQMN job cache list latch</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Latch for NonceHistory</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Locator state objects pool parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lost write change tracking</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lsod array latch</td><td align="right" class='awrc'>335</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA asr alloc latch</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>541</td><td align="right" class='awrc'>8.87</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context latch</td><td align="right" class='awrnc'>4,263</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>551</td><td align="right" class='awrc'>23.23</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MQL Tracking Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Management Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>302</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Subscriber</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Message cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MinActiveScn Latch</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex Stats</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrnc'>292</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process</td><td align="right" class='awrc'>1,576</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process allocation</td><td align="right" class='awrnc'>2,096</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process: request allocation</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB Hash Table Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB LRU structure</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL warning settings</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX hash array latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for dependency tracking</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for query hash table access</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for segments scanning</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>QMT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Real-time descriptor latch</td><td align="right" class='awrnc'>29,628</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request stats latch</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request struct latch</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Request holder compeltion list latch</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Blackbox latch</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA IO buffer pool latch</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Bkt Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Log Latch</td><td align="right" class='awrc'>16,471</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA blob parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA bucket locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA heap locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA pool locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SO private so latch</td><td align="right" class='awrnc'>498</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>301</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager workarea list latch</td><td align="right" class='awrnc'>21,565</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SR Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched IM Job latch</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched InMem Job Cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Shared B-Tree</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams Generic</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Subscriber Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Testing</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Token Manager</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>UM object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>WCR: sync</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Write State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>X$KSFQP</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB NFS Security Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB unused session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB used session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>152,441</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active service list</td><td align="right" class='awrc'>96,510</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,008</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>archive destination</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>begin backup scn array</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>business card</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffer handles</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>153,266,064</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42,943,442</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>10,836,656</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27,128,302</td><td align="right" class='awrnc'>0.85</td></tr>
<tr><td scope="row" class='awrc'>cache table scan latch</td><td align="right" class='awrc'>1,848</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,848</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>1,247</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>change notification client cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel handle pool latch</td><td align="right" class='awrnc'>544</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel operations parent latch</td><td align="right" class='awrc'>3,317</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>7,571,716</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,731,604</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>client/application info</td><td align="right" class='awrc'>389</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>compile environment latch</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>corrupted undo seg latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp handoff latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp server hash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp sga latch</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type state latch</td><td align="right" class='awrnc'>904</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type wait latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr slave free list</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cvmap freelist lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>deferred cleanup latch</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher info</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dml lock allocation</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>done queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dtp latch</td><td align="right" class='awrnc'>268</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dummy allocation</td><td align="right" class='awrc'>338</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eighth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eleventh spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enqueue freelist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>401,172</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>585,321</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueues</td><td align="right" class='awrnc'>378</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>error message lists</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fast space usage latch</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fifteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>file cache latch</td><td align="right" class='awrnc'>134</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flash file access latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flashback copy</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourth Audit Vault latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc element</td><td align="right" class='awrc'>30,811,888</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1,744,701</td><td align="right" class='awrc'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>gc xid list</td><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcr global ctx</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs commit scn state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>733,742</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs opaque info freelist</td><td align="right" class='awrnc'>692,376</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs partitioned table hash</td><td align="right" class='awrc'>37,655,269</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16,833,271</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource freelist</td><td align="right" class='awrnc'>4,750,558</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>270,487</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>48,646,303</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>295</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource scan list</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource timerq list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource validate list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs shadows freelist</td><td align="right" class='awrc'>4,368,738</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>47,570</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33,589</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ges deadlock list</td><td align="right" class='awrc'>1,636</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges domain table</td><td align="right" class='awrnc'>169,477</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enqueue table freelist</td><td align="right" class='awrc'>63,659</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges group table</td><td align="right" class='awrnc'>169,870</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process hash list</td><td align="right" class='awrc'>16,472</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process parent latch</td><td align="right" class='awrnc'>345,872</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process table freelist</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock freelist</td><td align="right" class='awrnc'>981</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>231,310</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4,266</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>ges resource scan list</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource table freelist</td><td align="right" class='awrc'>7,318</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges s-lock bitvec freelist</td><td align="right" class='awrnc'>254</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges timeout list</td><td align="right" class='awrc'>1,545</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>462</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges value block free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global tx hash mapping</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>granule from data transfer cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gws:Sharding global descriptor latch</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table Sql Plan Finding latch</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>78</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table column usage latch</td><td align="right" class='awrc'>422</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,719</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table expression usage tracking latch</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table modification latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table sql contorl latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat check</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>549</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat structure management</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>451</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>imc buf hdl lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc cr clone buf</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc hash lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc sj lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc srchsp lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc-txn-wrk-lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory area latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar segment hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory global pool latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>internal temp table object number allocation latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>interrupt manipulation</td><td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>intra txn parallel recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule list</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule metadata list</td><td align="right" class='awrc'>222</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job workq parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job_queue_processes parameter latch</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q global data latch</td><td align="right" class='awrnc'>602</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q lock allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kKCN Cqn SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcn buffer chains</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kdlx hb parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgb parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgnfs mount latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjbr roi instance map</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci objects freelist latch</td><td align="right" class='awrc'>11,581</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci process context latch</td><td align="right" class='awrnc'>11,107</td><td align="right" class='awrnc'>0.81</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>56,120</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjci process list latch</td><td align="right" class='awrc'>4,637</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci request sequence latch</td><td align="right" class='awrnc'>1,307</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjcipctx state object freelist latch</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoedcso state object freelist latch</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoer owner hash bucket</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjpm my inst data</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Request obj freelist latch</td><td align="right" class='awrnc'>544</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrc'>272</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect control request queue</td><td align="right" class='awrnc'>272</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9,108</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect warm up context</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrnc'>9,109</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect service hash table bucket</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjscpss state object freelist latch</td><td align="right" class='awrnc'>272</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kokc descriptor allocation latch</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kpoxft latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>246</td><td align="right" class='awrnc'>3.25</td></tr>
<tr><td scope="row" class='awrc'>krso process</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksbxic instance latch</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksevn object root latch</td><td align="right" class='awrc'>302</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksfv messages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksi resource reuse count</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim group membership cache</td><td align="right" class='awrnc'>583</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim membership request latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>413</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksns object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kss move lock</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksuosstats global area</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>345</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksutcpistat latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv allocation latch</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>23,854</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.57</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv instance latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv msg queue latch</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>649</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxp shared latch</td><td align="right" class='awrnc'>268</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxp so latch</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksz_so allocation latch</td><td align="right" class='awrnc'>268</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktfbn latch</td><td align="right" class='awrc'>261</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg space</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg stages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg worklink</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm global data</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm prv jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktmpj HT ls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwqbsn:qsga</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbmdl: metadata latch</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbql: queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsslLat: skiplist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kxfxscanrate_latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lgwr LWN SCN</td><td align="right" class='awrnc'>17,463</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>list of block allocation</td><td align="right" class='awrc'>278,797</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>loader state object freelist</td><td align="right" class='awrnc'>250</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment dispenser latch</td><td align="right" class='awrc'>119</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment hash table latch</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment query latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock DBA buffer during media recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log write info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>52,896</td><td align="right" class='awrc'>3.45</td></tr>
<tr><td scope="row" class='awrnc'>log write worker phase</td><td align="right" class='awrnc'>7,523</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logical standby cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer context allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer local</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer work area</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>longop free list parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>managed standby</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message bitmap latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message pool operations parent latch</td><td align="right" class='awrnc'>1,029</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>444,229</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>msg queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>668,480</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service memory objects</td><td align="right" class='awrnc'>199</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service namespace bucket</td><td align="right" class='awrc'>4,843</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service pending queue</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request queue</td><td align="right" class='awrnc'>9,184</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ncodef allocation latch</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ninth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header freelist</td><td align="right" class='awrc'>43,564</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>57,088,608</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>435,323</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>object queue memory</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object stats modification</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel query alloc buffer</td><td align="right" class='awrc'>356</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>540</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parallel query stats</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel txn reco latch</td><td align="right" class='awrc'>1,938</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parameter table management</td><td align="right" class='awrnc'>705</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pdb enqueue hash chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>peshm</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_free_list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_hash_node</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pkey global statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon dead latch</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>449,199</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>428,030</td><td align="right" class='awrc'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>process allocation</td><td align="right" class='awrnc'>4,657</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process group creation</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process memory detail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process pkey statistics list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue reference</td><td align="right" class='awrc'>5,675</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>783</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>qmn task queue latch</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>quarantine object</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server freelists</td><td align="right" class='awrnc'>175</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server process</td><td align="right" class='awrc'>788</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>queued dump request</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>queuing load statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read-moslty lock queue under pkey</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>recovery domain hash bucket</td><td align="right" class='awrc'>362</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>70,627</td><td align="right" class='awrnc'>3.15</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,740,226</td><td align="right" class='awrnc'>1.11</td></tr>
<tr><td scope="row" class='awrc'>redo copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,743,026</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>redo transport task</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>220,251</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote tool request latch</td><td align="right" class='awrnc'>296</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr group change latch</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:active threads</td><td align="right" class='awrnc'>341</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change group</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:free threads list</td><td align="right" class='awrc'>337</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change alloc latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:resource group CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:schema config</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:session queuing</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache objects</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rt rmv count latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>451</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rules engine aggregate statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rules engine rule set statistics</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>second Audit Vault latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>segmented array pool</td><td align="right" class='awrc'>451</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sequence cache</td><td align="right" class='awrnc'>564</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>service drain list</td><td align="right" class='awrc'>903</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session allocation</td><td align="right" class='awrnc'>26,801</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>26,161</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session idle bit</td><td align="right" class='awrc'>56,332</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session state list latch</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session statistics</td><td align="right" class='awrnc'>339</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session switching</td><td align="right" class='awrc'>276</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session timer</td><td align="right" class='awrnc'>301</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>seventh spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga hash table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shard latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shardgroup list latch</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool</td><td align="right" class='awrc'>153,963</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool sim alloc</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool simulator</td><td align="right" class='awrc'>194</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared server configuration</td><td align="right" class='awrnc'>302</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sim partition latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator hash latch</td><td align="right" class='awrnc'>5,693,834</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator lru latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,984,074</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>sixth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sort extent pool</td><td align="right" class='awrc'>625</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>2,413</td><td align="right" class='awrnc'>50.68</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>599</td><td align="right" class='awrnc'>2.00</td></tr>
<tr><td scope="row" class='awrc'>state object free list</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>statistics aggregation</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>subscriber Ht bkt</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tablespace key chain</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temp lob duration state obj allocation</td><td align="right" class='awrc'>88</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temporary table state object allocation</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tenth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 lmid cln</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mixed exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mode exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test open exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test pdb exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test shared parent2 lmid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thirteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>threshold alerts latch</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>trace latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction allocation</td><td align="right" class='awrc'>645</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twelfth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fifth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-first spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fourth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-second spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-third spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>269,588</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit holder</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit queues</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>10,836,656</td><td align="right" class='awrc'>33,857</td><td align="right" class='awrc'>1,945</td><td align="right" class='awrc'>32,040</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>30,811,888</td><td align="right" class='awrnc'>15,924</td><td align="right" class='awrnc'>1,860</td><td align="right" class='awrnc'>14,162</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>48,646,303</td><td align="right" class='awrc'>12,033</td><td align="right" class='awrc'>3,278</td><td align="right" class='awrc'>9,008</td></tr>



<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>6,341,118</td><td align="right" class='awrnc'>9,134</td><td align="right" class='awrnc'>993</td><td align="right" class='awrnc'>8,204</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>153,266,064</td><td align="right" class='awrc'>5,941</td><td align="right" class='awrc'>1,023</td><td align="right" class='awrc'>4,979</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>57,088,608</td><td align="right" class='awrnc'>3,635</td><td align="right" class='awrnc'>327</td><td align="right" class='awrnc'>3,328</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>53,223,468</td><td align="right" class='awrc'>2,367</td><td align="right" class='awrc'>627</td><td align="right" class='awrc'>1,778</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>70,627</td><td align="right" class='awrnc'>2,222</td><td align="right" class='awrnc'>504</td><td align="right" class='awrnc'>1,741</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>809,514</td><td align="right" class='awrc'>2,074</td><td align="right" class='awrc'>470</td><td align="right" class='awrc'>1,638</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>449,199</td><td align="right" class='awrnc'>1,679</td><td align="right" class='awrnc'>126</td><td align="right" class='awrnc'>1,553</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>2,413</td><td align="right" class='awrc'>1,223</td><td align="right" class='awrc'>1,168</td><td align="right" class='awrc'>235</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource freelist</td><td align="right" class='awrnc'>4,750,558</td><td align="right" class='awrnc'>846</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>783</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>444,229</td><td align="right" class='awrc'>742</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>715</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>231,310</td><td align="right" class='awrnc'>485</td><td align="right" class='awrnc'>181</td><td align="right" class='awrnc'>324</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>7,571,716</td><td align="right" class='awrc'>427</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>350</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>668,480</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>311</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>152,441</td><td align="right" class='awrc'>313</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>288</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>220,251</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>162</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation freelist</td><td align="right" class='awrc'>32,449</td><td align="right" class='awrc'>134</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>153,963</td><td align="right" class='awrnc'>130</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>119</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>551</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>51</td></tr>
<tr><td scope="row" class='awrnc'>gcs nodemap pool</td><td align="right" class='awrnc'>733,742</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>110</td></tr>
<tr><td scope="row" class='awrc'>gcs opaque info freelist</td><td align="right" class='awrc'>692,376</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>81</td></tr>
<tr><td scope="row" class='awrnc'>kjci process context latch</td><td align="right" class='awrnc'>11,107</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>83</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>4,263</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>40</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>269,588</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>67</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>541</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>28</td></tr>
<tr><td scope="row" class='awrnc'>lgwr LWN SCN</td><td align="right" class='awrnc'>17,463</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>34</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>585,321</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>27</td></tr>
<tr><td scope="row" class='awrnc'>Consistent RBA</td><td align="right" class='awrnc'>17,115</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>8</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>1,247</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>active service list</td><td align="right" class='awrnc'>96,510</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>8</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>47,570</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>simulator hash latch</td><td align="right" class='awrnc'>5,693,834</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>23,854</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>3</td></tr>
<tr><td scope="row" class='awrnc'>session switching</td><td align="right" class='awrnc'>276</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4</td></tr>
<tr><td scope="row" class='awrc'>gcs shadows freelist</td><td align="right" class='awrc'>4,368,738</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td scope="row" class='awrnc'>list of block allocation</td><td align="right" class='awrnc'>278,797</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>kjci process list latch</td><td align="right" class='awrc'>4,637</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>ksxp shared latch</td><td align="right" class='awrnc'>268</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation freelist</td><td class='awrc'>kffmsoDelete_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmTranslate</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>356</td><td align="right" class='awrnc'>321</td></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmDoDone_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>269</td><td align="right" class='awrc'>306</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmUnidentify</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>295</td><td align="right" class='awrc'>440</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnc'>0</td></tr>


<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpf_sharepool: free msg buffers to shared pool</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>29</td></tr>
Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctcsnd: send normal message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>446</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>271</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>228</td><td align="right" class='awrnc'>376</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>48</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>86</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_adjtkt: adjust send tickets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>18</td></tr>
<tr><td class='awrnc'>MGA pid alloc latch</td><td class='awrnc'>ksm_mga_sctx_rtrcv_do_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_detach_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>11</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_sync_whr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>9</td></tr>
<tr><td class='awrc'>MGA shared context root latch</td><td class='awrc'>ksm_mga_detach_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>85</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>28</td></tr>
<tr><td class='awrc'>active service list</td><td class='awrc'>kswsclstabc: scan list to return rows</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>352</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclcls_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>44</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: slow path excl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>159</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: slow path</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: fast path pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>404</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzibmlt: finish free bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>161</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: convert latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>26</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: aux pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>18</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzib: finish processing buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>21</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclpdcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbxsv</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>48</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbrls: fast pin release</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>53</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnlc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>18</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: convert latch 4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnew: new latch again</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbic1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrlstp</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclexpandlock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>23</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzacrb: convert latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: cleanout</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: cur pin change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: fast path exam</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrwrite_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclantilock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbso1: set no access</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: exit_loop</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcllkopesc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclpdcl_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgws</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,317</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgb_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>545</td><td align="right" class='awrc'>359</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbbic2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>1,090</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgb_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>42</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbbwlru</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>308</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbxsv: move to being written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzfw</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>18</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbo_write_bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>70</td></tr>
<tr><td class='awrnc'>call allocation</td><td class='awrnc'>ksuxds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>15</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbklbc_cql</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbkubc_4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>58</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbbwthc: thread checkpoint buffers</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>27</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbbwdl: thread checkpoint queue</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbnlc: Link buffers into FQ</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnewm</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>961</td><td align="right" class='awrnc'>426</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclulb</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>261</td><td align="right" class='awrc'>583</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndx</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>221</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>KCLUNLNK</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>392</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>68</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>58</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclpdcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclhngcbk1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclantilock_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnds</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>85</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclpdc_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>35</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclebs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclexpand_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnew</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnd</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclbla</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs nodemap pool</td><td class='awrc'>kjbrnmapalloc_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>gcs nodemap pool</td><td class='awrnc'>kjbrnmapalloc_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>gcs opaque info freelist</td><td class='awrc'>kjbrinfoalloc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>12</td></tr>
<tr><td class='awrnc'>gcs opaque info freelist</td><td class='awrnc'>kjbrinfofree free opaque info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrralc: reserve allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc: check freelist nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrfr_bg2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>24</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>902</td><td align="right" class='awrnc'>177</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblocalobj_nolock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>635</td><td align="right" class='awrc'>1,232</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>338</td><td align="right" class='awrnc'>396</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>300</td><td align="right" class='awrc'>77</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclpdc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>221</td><td align="right" class='awrnc'>405</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>123</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpclose</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>184</td><td align="right" class='awrnc'>117</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblpast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>254</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbclose_remaster</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>260</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrdowncvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrprmexpack</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>16</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclrwrite</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>157</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpflushpi</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>28</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbassume</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcancel</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpconvert</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbconvert</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen:affinity</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblpgorm: clear anti-lock</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblprmexp2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>gcs shadows freelist</td><td class='awrnc'>kjblralc: allocate reserve</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges cached resource lists</td><td class='awrc'>kjruch: cached obj cleanup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>177</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjakcai: search for resp by resname</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrmas1: lookup master node</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjlmfnd: search for lockp by rename and inst id</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>kjci process context latch</td><td class='awrnc'>kjci_finish_int:2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>kjci process list latch</td><td class='awrc'>kjcilwplist3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ksv class latch</td><td class='awrnc'>ksvclsl: checkpool</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ksv class latch</td><td class='awrc'>ksvclsl: rdp - recycle</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ksv class latch</td><td class='awrnc'>ksvclsl: workmsgfree</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>ksxp shared latch</td><td class='awrc'>ksxp_close</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ksz_so allocation latch</td><td class='awrnc'>ksz_parent_so_del1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>list of block allocation</td><td class='awrc'>ktlbbl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>list of block allocation</td><td class='awrnc'>ktlabl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksaamb: after wakeup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>17</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcs01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcs024</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcslcu3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcsnew_scn_rba</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>multiblock read objects</td><td class='awrnc'>kcbzibmlt: normal mbr free</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>multiblock read objects</td><td class='awrc'>kcbzibmlt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>21</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_unlink_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>196</td><td align="right" class='awrnc'>177</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_link_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>34</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_cq</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>63</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_q_bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>40</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_write_bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>ksliwat:remove</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>121</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>ksliwat:add:nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>kslpstevent:reget</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>422</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>367</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_write: before write</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>80</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_post: more space</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>57</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfwcr</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_post: rba scn pair</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfw_cal_target_rba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>session switching</td><td class='awrc'>kskexeall</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>simulator hash latch</td><td class='awrnc'>kcbsacc: insert dba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_grab_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>815</td><td align="right" class='awrc'>1,076</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_detach_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>187</td><td align="right" class='awrnc'>92</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_purgeexpired</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>159</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_movetasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktusmupst: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfre</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>35</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghupr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqrcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcmi: if lk mode requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqgtl3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpndl1  95</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Row Cache</td><td class='awrnc'>[19] kqrpre</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglhdgn1  62</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpin1   4</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Cursor Pin</td><td class='awrc'>kkslce [KKSCHLPIN2]</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>Cursor Pin</td><td class='awrnc'>kksLockDelete [KKSCHLPIN6]</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	  24,645,118</li>
<li class="awr">Captured Segments account for	80.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>3,400,224</td><td align="right" class='awrc'>13.80</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1,970,496</td><td align="right" class='awrnc'>8.00</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>1,956,784</td><td align="right" class='awrc'>7.94</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>1,890,128</td><td align="right" class='awrnc'>7.67</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>1,349,216</td><td align="right" class='awrc'>5.47</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	   22,345,229</li>
<li class="awr">Captured Segments account for	82.8% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2,857,313</td><td align="right" class='awrc'>12.79</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1,821,143</td><td align="right" class='awrnc'>8.15</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>1,809,954</td><td align="right" class='awrc'>8.10</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>1,748,416</td><td align="right" class='awrnc'>7.82</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>1,271,736</td><td align="right" class='awrc'>5.69</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   22,277,415</li>
<li class="awr">Captured Segments account for	82.8% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2,857,221</td><td align="right" class='awrc'>12.83</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1,821,150</td><td align="right" class='awrnc'>8.17</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>1,809,963</td><td align="right" class='awrc'>8.12</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>1,748,406</td><td align="right" class='awrnc'>7.85</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>1,271,691</td><td align="right" class='awrc'>5.71</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:      22,277,415</li>
<li class="awr">Captured Segments account for	82.8% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2,857,221</td><td align="right" class='awrc'>12.83</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1,821,150</td><td align="right" class='awrnc'>8.17</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>1,809,963</td><td align="right" class='awrc'>8.12</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>1,748,406</td><td align="right" class='awrnc'>7.85</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>1,271,691</td><td align="right" class='awrc'>5.71</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	     3,802,315</li>
<li class="awr">Captured Segments account for	80.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>516,448</td><td align="right" class='awrc'>13.58</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>305,917</td><td align="right" class='awrnc'>8.05</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>302,499</td><td align="right" class='awrc'>7.96</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>292,155</td><td align="right" class='awrnc'>7.68</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>212,625</td><td align="right" class='awrc'>5.59</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	     3,586,656</li>
<li class="awr">Captured Segments account for	83.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>485,531</td><td align="right" class='awrc'>13.54</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>298,434</td><td align="right" class='awrnc'>8.32</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>295,225</td><td align="right" class='awrc'>8.23</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>285,166</td><td align="right" class='awrnc'>7.95</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>208,593</td><td align="right" class='awrc'>5.82</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		1,116</li>
<li class="awr">Captured Segments account for	70.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>770</td><td align="right" class='awrc'>69.00</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P270</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>74210</td><td align="right" class='awrnc'>74210</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.99</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>511,296</td><td align="right" class='awrc'>17.68</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>296,080</td><td align="right" class='awrnc'>10.24</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>294,064</td><td align="right" class='awrc'>10.17</td></tr>
<tr><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>285,504</td><td align="right" class='awrnc'>9.87</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>202,816</td><td align="right" class='awrc'>7.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>
<ul>
<li class="awr"> % of Capture shows % of row lock waits for each top segment compared  </li>
<li class="awr"> with total row lock waits for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by row lock waits. Owner, tablespace name, object type, row lock waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Row Lock Waits</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>25.00</td></tr>
<tr><td class='awrnc'>USER102</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73799</td><td align="right" class='awrnc'>73803</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12.50</td></tr>
<tr><td class='awrc'>USER108</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73833</td><td align="right" class='awrc'>73837</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>12.50</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12.50</td></tr>
<tr><td class='awrc'>USER58</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73580</td><td align="right" class='awrc'>73582</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>12.50</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>
<ul>
<li class="awr"> % of Capture shows % of Buffer Busy Waits for each top segment compared  </li>
<li class="awr"> with total Buffer Busy Waits for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by buffer busy waits. Owner, tablespace name, object type, buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Buffer Busy Waits</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>
<ul>
<li class="awr"> % of Capture shows % of GC Buffer Busy for each top segment compared  </li>
<li class="awr"> with GC Buffer Busy for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by global cache buffer busy waits. Owner, tablespace name, object type, GC buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Buffer Busy</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER31</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73429</td><td align="right" class='awrc'>73424</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>18.75</td></tr>
<tr><td class='awrnc'>USER99</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73781</td><td align="right" class='awrnc'>73787</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>18.75</td></tr>
<tr><td class='awrc'>USER109</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73835</td><td align="right" class='awrc'>73838</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>12.50</td></tr>
<tr><td class='awrnc'>USER110</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73842</td><td align="right" class='awrnc'>73846</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>12.50</td></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>12.50</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	   16,276</li>
<li class="awr">Captured Segments account for	49.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>1,050</td><td align="right" class='awrc'>6.45</td></tr>
<tr><td class='awrnc'>USER37</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73460</td><td align="right" class='awrnc'>73466</td><td align="right" class='awrnc'>934</td><td align="right" class='awrnc'>5.74</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>798</td><td align="right" class='awrc'>4.90</td></tr>
<tr><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>720</td><td align="right" class='awrnc'>4.42</td></tr>
<tr><td class='awrc'>USER42</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>626</td><td align="right" class='awrc'>3.85</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		10,046</li>
<li class="awr">Captured Segments account for	65.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER40</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>1,314</td><td align="right" class='awrc'>13.08</td></tr>
<tr><td class='awrnc'>USER37</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73460</td><td align="right" class='awrnc'>73466</td><td align="right" class='awrnc'>757</td><td align="right" class='awrnc'>7.54</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>677</td><td align="right" class='awrc'>6.74</td></tr>
<tr><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>454</td><td align="right" class='awrnc'>4.52</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73501</td><td align="right" class='awrc'>73503</td><td align="right" class='awrc'>377</td><td align="right" class='awrc'>3.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	6,099,029</li>
<li class="awr">Captured Segments account for	71.8% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER110</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73842</td><td align="right" class='awrc'>73846</td><td align="right" class='awrc'>146,833</td><td align="right" class='awrc'>2.41</td></tr>
<tr><td class='awrnc'>USER99</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73781</td><td align="right" class='awrnc'>73787</td><td align="right" class='awrnc'>146,586</td><td align="right" class='awrnc'>2.40</td></tr>
<tr><td class='awrc'>USER28</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73413</td><td align="right" class='awrc'>73419</td><td align="right" class='awrc'>145,631</td><td align="right" class='awrc'>2.39</td></tr>
<tr><td class='awrnc'>USER107</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73825</td><td align="right" class='awrnc'>73828</td><td align="right" class='awrnc'>145,368</td><td align="right" class='awrnc'>2.38</td></tr>
<tr><td class='awrc'>USER85</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73713</td><td align="right" class='awrc'>73716</td><td align="right" class='awrc'>145,234</td><td align="right" class='awrc'>2.38</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>240</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>3,626</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>459</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>2,108</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,420</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>2,951</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>7,285</td></tr>
<tr><td scope="row" class='awrc'>dc_objects</td><td align="right" class='awrc'>3,765</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>3,868</td></tr>
<tr><td scope="row" class='awrnc'>dc_props</td><td align="right" class='awrnc'>972</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>51</td></tr>
<tr><td scope="row" class='awrc'>dc_rollback_segments</td><td align="right" class='awrc'>12,957</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>648</td></tr>
<tr><td scope="row" class='awrnc'>dc_segments</td><td align="right" class='awrnc'>248</td><td align="right" class='awrnc'>4.44</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>1,427</td></tr>
<tr><td scope="row" class='awrc'>dc_sequences</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>14.81</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>8</td></tr>
<tr><td scope="row" class='awrnc'>dc_tablespaces</td><td align="right" class='awrnc'>312</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22</td></tr>
<tr><td scope="row" class='awrc'>dc_users</td><td align="right" class='awrc'>1,148</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>513</td></tr>
<tr><td scope="row" class='awrnc'>outstanding_alerts</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>71.43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>324</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>1,006</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>DBLINK</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>EDITION</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>HINTSET OBJECT</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>QUEUE</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>RULESET</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>2.17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>1,679</td><td align="right" class='awrnc'>7.74</td><td align="right" class='awrnc'>193,343</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>4</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>54.74</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>97.94</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>97.94</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>759</td><td align="right" class='awrc'>4.61</td><td align="right" class='awrc'>5,493</td><td align="right" class='awrc'>0.80</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>957</td><td align="right" class='awrc'>957</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>DBLINK</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>EDITION</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>HINTSET OBJECT</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>RULESET</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>1,422</td><td align="right" class='awrc'>4,143</td><td align="right" class='awrc'>4,143</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>7,712.00</td><td align="right" class='awrc'>7,712.00</td><td align="right" class='awrc'>7,712.00</td><td align="right" class='awrc'>7,712.00</td><td align="right" class='awrc'>0</td><td class='awrc'>INI/</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,632.00</td><td align="right" class='awrnc'>1,632.00</td><td align="right" class='awrnc'>1,632.00</td><td align="right" class='awrnc'>1,632.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
<p />
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
<a class="awr" href="#33">Back to Memory Statistics</a>

<br /><a class="awr" href="#top">Back to Top</a><p />
Using 3889879926 for database Id
Using instances ALL (default 'ALL')
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>351.13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>2.22</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>283</td><td align="right" class='awrc'>283</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1,858.41</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.23</td><td align="right" class='awrnc'>4.08</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>439</td><td align="right" class='awrnc'>439</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>124.42</td><td align="right" class='awrc'>122.02</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>373</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>32.48</td><td align="right" class='awrnc'>25.16</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>304</td><td align="right" class='awrnc'>294</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2,366.43</td><td align="right" class='awrc'>147.18</td><td align="right" class='awrc'>5.91</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>1,401</td><td align="right" class='awrc'>1,389</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>155.56</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.20</td><td align="right" class='awrnc'>6.86</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>754.92</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.08</td><td align="right" class='awrc'>6.43</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>185</td><td align="right" class='awrc'>185</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.17</td><td align="right" class='awrnc'>5.63</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>118</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>2.16</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>26</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>918.81</td><td align="right" class='awrnc'>7.08</td><td align="right" class='awrnc'>8.37</td><td align="right" class='awrnc'>13.65</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>399</td><td align="right" class='awrnc'>366</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>8,220,835,840</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>12,445,928</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>21,106,688</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>1,879,048,192</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KCRAHT Free Blocks</td><td align="right" class='awrnc'>25.00</td><td align="right" class='awrnc'>35.00</td><td align="right" class='awrnc'>40.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KGLH0</td><td align="right" class='awrc'>48.71</td><td align="right" class='awrc'>52.33</td><td align="right" class='awrc'>7.42</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLS</td><td align="right" class='awrnc'>21.22</td><td align="right" class='awrnc'>22.42</td><td align="right" class='awrnc'>5.63</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>91.19</td><td align="right" class='awrc'>17.46</td><td align="right" class='awrc'>-80.85</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KKSSP</td><td align="right" class='awrnc'>25.97</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>-100.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SO private sga</td><td align="right" class='awrc'>33.73</td><td align="right" class='awrc'>33.73</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SQLA</td><td align="right" class='awrnc'>92.39</td><td align="right" class='awrnc'>98.77</td><td align="right" class='awrnc'>6.91</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>db_block_hash_buckets</td><td align="right" class='awrc'>32.00</td><td align="right" class='awrc'>32.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>175.62</td><td align="right" class='awrnc'>260.26</td><td align="right" class='awrnc'>48.19</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gc name table</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resources</td><td align="right" class='awrnc'>261.27</td><td align="right" class='awrnc'>261.27</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resv res hash bucket</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs shadows</td><td align="right" class='awrnc'>142.51</td><td align="right" class='awrnc'>142.51</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges big msg buffers</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>init_heap_kfsg</td><td align="right" class='awrnc'>17.42</td><td align="right" class='awrnc'>17.49</td><td align="right" class='awrnc'>0.41</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ksunfy_meta 1</td><td align="right" class='awrc'>25.23</td><td align="right" class='awrc'>25.23</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>row cache</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>7,712.00</td><td align="right" class='awrc'>7,712.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>3,637</td><td align="right" class='awrc'>4,037</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
<tr><td scope="row" class='awrnc'>ges_reg_msgs</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>6,772</td><td class='awrnc'>3310</td><td class='awrnc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>893</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>893</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P60S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p60sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>137438953472</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>3371171840</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>640</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>10133438464</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>2</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>UNDOTBS2</td><td class='awrc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>6593</td><td align="right" class='awrc'>61.67</td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>25.76</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>25.76</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">6593</div></td><td align="right" class='awrnc'><div class="hidden">61.66607585962424672102091456930166607586</div></td>
<td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>12.05</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>12.05</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">6593</div></td><td align="right" class='awrc'><div class="hidden">61.66607585962424672102091456930166607586</div></td>
<td class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>9.92</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>9.92</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>4943</td><td align="right" class='awrnc'>35.07</td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>16.32</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>16.32</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">4943</div></td><td align="right" class='awrc'><div class="hidden">35.07266926621765331442750797589507266927</div></td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>11.50</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>6.80</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">4943</div></td><td align="right" class='awrnc'><div class="hidden">35.07266926621765331442750797589507266927</div></td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>2.38</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>2.38</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>

<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>

Specify the number of days of snapshots to choose from
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
</ul>
specifying a number lists all completed snapshots.


<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>6593</td><td align="right" class='awrc'>61.67</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>60.96</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>25.76</td>
Enter value for num_days: <td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>4943</td><td align="right" class='awrnc'>35.07</td>
<td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>29.82</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>16.32</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">4943</div></td><td align="right" class='awrc'><div class="hidden">35.07266926621765331442750797589507266927</div></td>
<td class='awrc'>INDEX - RANGE SCAN</td><td align="right" class='awrc'>5.24</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>4.70</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>61.77</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>61.77</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>26.27</td><td align="right" class='awrc'>40.46</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>16.44</td><td align="right" class='awrnc'>25.32</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>12.52</td><td align="right" class='awrc'>19.28</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>12.02</td><td align="right" class='awrnc'>18.50</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>10.27</td><td align="right" class='awrc'>15.81</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>16.44</td><td align="right" class='awrc'>&quot;8&quot;,&quot;33149&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>7.20</td><td align="right" class='awrnc'>&quot;8&quot;,&quot;6704&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.01</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>blocks</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>2.41</td><td align="right" class='awrc'>&quot;5&quot;,&quot;10949&quot;,&quot;93&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>set-id#</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>2.38</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;125&quot;,&quot;125&quot;</td><td align="right" class='awrnc'>1.44</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>
<ul>
<li class="awr"> Top DB Objects by DB Time with respect to Application, Cluster,     User I/O,	buffer busy waits and In-Memory DB events only. </li>
<li class="awr"> Tablespace name is not available for reports generated from the root PDB     of a consolidated database. </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available.</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the Top DB Objects"><tr><th class="awrbg" scope="col">Object ID</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Object Name (Type)</th><th class="awrbg" scope="col">Tablespace</th></tr>
<tr><td align="right" scope="row" class='awrc'>73552</td><td align="right" class='awrc'>1.49</td><td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>0.65</td>
<td class='awrc'>USER55.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73408</td><td align="right" class='awrnc'>1.48</td><td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>0.64</td>
<td class='awrnc'>USER27.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73429</td><td align="right" class='awrc'>1.48</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>0.70</td>
<td class='awrc'>USER31.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73792</td><td align="right" class='awrnc'>1.48</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>0.74</td>
<td class='awrnc'>USER101.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73550</td><td align="right" class='awrc'>1.47</td><td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>0.68</td>
<td class='awrc'>USER53.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>14:56:36   (3.4 min)</td><td align="right" class='awrc'>4,442</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>1,080</td><td align="right" class='awrc'>7.66</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">14:56:36   (3.4 min)</div></td><td align="right" class='awrnc'><div class="hidden">4442</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>763</td><td align="right" class='awrnc'>5.41</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">14:56:36   (3.4 min)</div></td><td align="right" class='awrc'><div class="hidden">4442</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>676</td><td align="right" class='awrc'>4.79</td></tr>
<tr><td align="right" class='awrnc'>15:00:00   (5.0 min)</td><td align="right" class='awrnc'>7,814</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>2,183</td><td align="right" class='awrnc'>15.48</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">15:00:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">7814</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>1,206</td><td align="right" class='awrc'>8.55</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">15:00:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">7814</div></td><td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>1,010</td><td align="right" class='awrnc'>7.16</td></tr>
<tr><td align="right" class='awrc'>15:05:00   (5.0 min)</td><td align="right" class='awrc'>1,834</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>443</td><td align="right" class='awrc'>3.14</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">15:05:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">1834</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>350</td><td align="right" class='awrnc'>2.48</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">15:05:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">1834</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>230</td><td align="right" class='awrc'>1.63</td></tr>

Listing all Completed Snapshots
<tr><td align="right" class='awrnc'>15:10:00   (1.9 min)</td><td align="right" class='awrnc'>15</td><td class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.11</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:3889879926_2_67</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_2_67&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 66 to 67.
Time period starts at 12-FEB-20 02.56.36 PM
Time period ends at 12-FEB-20 03.11.53 PM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb2, numbered 2 and hosted at
mcracpoc2.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 139930 seconds.
The average number of active sessions was 152.6.

Summary of Findings
-------------------
    Description 		  Active Sessions      Recommendations
				  Percent of Activity
    ----------------------------  -------------------  ---------------
1   Interconnect Latency	  152.6 | 100	       1
2   Top SQL Statements		  152.07 | 99.66       2
3   Global Cache Messaging	  116.31 | 76.22       1
4   Buffer Busy - Hot Objects	  63.6 | 41.68	       0
5   Global Cache Busy		  17.98 | 11.78        1
6   &quot;User I/O&quot; wait Class	    16.73 | 10.96	 0
7   Unusual &quot;Cluster&quot; Wait Event  15.78 | 10.34	 3
8   Global Cache Congestion	  4.91 | 3.22	       1
9   Free Buffer Waits		  3.86 | 2.53	       3
10  Global Cache Lost Blocks	  1.87 | 1.23	       1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 152.76 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 42371 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 16441 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.31.173 and source &quot;?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 152.6 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.


Finding 2: Top SQL Statements
Impact is 152.24 active sessions, 99.66% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 95.3 active sessions, 62.45% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 98% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 25721 times and
      had an average elapsed time of 3.3 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 52.69 active sessions, 34.53% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 95% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 151320 times and
      had an average elapsed time of 0.32 seconds.


Finding 3: Global Cache Messaging
Impact is 116.44 active sessions, 76.22% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 116.31 active sessions, 76.22% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 73% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 132.1 active sessions, 86.57% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 63.67 active sessions, 41.68% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 63.6 active sessions, 41.68% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 116.31 active sessions, 76.22% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 132.1 active sessions, 86.57% of total activity.


Finding 5: Global Cache Busy
Impact is 18 active sessions, 11.78% of total activity.
-------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time in the cluster.

   Recommendation 1: Application Analysis
   Estimated benefit is 17.98 active sessions, 11.78% of total activity.
   ---------------------------------------------------------------------
   Action
      Verify that the set of services used by the application to connect to
      the database are optimally distributed if response time is critical.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.


Finding 6: &quot;User I/O&quot; wait Class
Impact is 16.75 active sessions, 10.96% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.
The SGA was adequately sized.

   No recommendations are available.


Finding 7: Unusual &quot;Cluster&quot; Wait Event
Impact is 15.8 active sessions, 10.34% of total activity.
---------------------------------------------------------
Wait event &quot;gc current grant read-mostly invalidation&quot; in wait class &quot;Cluster&quot;
was consuming significant database time.

   Recommendation 1: Application Analysis
   Estimated benefit is 15.78 active sessions, 10.34% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 15.78 active sessions, 10.34% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 15.78 active sessions, 10.34% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Service &quot;p60sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 132.1 active sessions, 86.57% of total activity.


Finding 8: Global Cache Congestion
Impact is 4.91 active sessions, 3.22% of total activity.
--------------------------------------------------------
Global Cache Service Processes (LMSn) in other instances were not processing
requests fast enough.

   Recommendation 1: Database Configuration
   Estimated benefit is 4.91 active sessions, 3.22% of total activity.
   -------------------------------------------------------------------
   Action
      Increase throughput of the Global Cache Service (LMSn) processes.
      Increase the number of Global Cache Service processes by increasing the
      value of the parameter &quot;gcs_server_processes&quot;. Alternatively, if the
      host is CPU bound consider increasing the OS priority of the Global
      Cache Service processes.
   Rationale
      The value of parameter &quot;gcs_server_processes&quot; was &quot;3&quot; during the
      analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.


Finding 9: Free Buffer Waits
Impact is 3.86 active sessions, 2.53% of total activity.
--------------------------------------------------------
Database writers (DBWR) were unable to keep up with the demand for free
buffers.

   Recommendation 1: Database Configuration
   Estimated benefit is 3.86 active sessions, 2.53% of total activity.
   -------------------------------------------------------------------
   Action
      Consider increasing the number of database writers (DBWR) by setting the
      parameter &quot;db_writer_processes&quot;. Also consider if asynchronous I/O is
      appropriate for your architecture.
   Rationale
      The value of parameter &quot;db_writer_processes&quot; was &quot;4&quot; during the analysis
      period.
   Rationale
      The value of parameter &quot;disk_asynch_io&quot; was &quot;TRUE&quot; during the analysis
      period.

   Recommendation 2: Host Configuration
   Estimated benefit is 3.86 active sessions, 2.53% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the I/O subsystem&apos;s write performance.
   Rationale
      During the analysis period, the average data files&apos; I/O throughput was 0
      K per second for reads and 0 K per second for writes. The average
      response time for single block reads was 0 milliseconds.

   Recommendation 3: Application Analysis
   Estimated benefit is 3.86 active sessions, 2.53% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate application logic for possible use of direct path inserts as
      an alternative for multiple INSERT operations.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Configuration&quot; was consuming significant database time.
      Impact is 3.86 active sessions, 2.53% of total activity.


Finding 10: Global Cache Lost Blocks
Impact is 1.87 active sessions, 1.23% of total activity.
--------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 42371 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 16441 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.31.173 and source &quot;?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 1.87 active sessions, 1.23% of total activity.
   -------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 116.31 active sessions, 76.22% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 132.1 active sessions, 86.57% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 3</td><td align="right" class='awrc'>	  3</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    3</td><td align="right" class='awrnc'>    3</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		    28.72</td><td align="right" class='awrnc'>		       0.95</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		17.93</td><td align="right" class='awrc'>		  0.60</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     17,825.13</td><td align="right" class='awrnc'>		  592.60</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       20,018.06</td><td align="right" class='awrc'>		   665.50</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.91</td><td align="right" class='awrnc'>		     0.03</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>		7,764.48</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	 9.22</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.11</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	90.67</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  73.08</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	   41,340.0</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	      14,611.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  25.9</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	   75.5</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    1.2</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'>       102,991.5</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>	   562,142.9</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       0.5</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	     122,352.9</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       2,062.7</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	 1,582.1</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	      38,226.0</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	      270.7</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	     107.9</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     25.6</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   51.7</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   12.01</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   86.09</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 1.90</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.31.173</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>32,176</td><td align="right" class='awrnc'>35.11</td><td align="right" class='awrnc'>1.17</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>2,405</td><td align="right" class='awrnc'>2.62</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>9,000</td><td align="right" class='awrc'>9.82</td><td align="right" class='awrc'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>10,466</td><td align="right" class='awrnc'>11.42</td><td align="right" class='awrnc'>0.38</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>16,866</td><td align="right" class='awrc'>18.40</td><td align="right" class='awrc'>0.61</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>7,179</td><td align="right" class='awrnc'>7.83</td><td align="right" class='awrnc'>0.26</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>5,574</td><td align="right" class='awrnc'>6.08</td><td align="right" class='awrnc'>0.20</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>18,521</td><td align="right" class='awrc'>20.21</td><td align="right" class='awrc'>0.67</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>351,957</td><td align="right" class='awrnc'>384.02</td><td align="right" class='awrnc'>12.77</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>18,721</td><td align="right" class='awrc'>20.43</td><td align="right" class='awrc'>0.68</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>2,252</td><td align="right" class='awrc'>2.46</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>1,283</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>1,054,869</td><td align="right" class='awrnc'>1,150.98</td><td align="right" class='awrnc'>38.26</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>830</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>18,643</td><td align="right" class='awrnc'>20.34</td><td align="right" class='awrnc'>0.68</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>6,425</td><td align="right" class='awrnc'>7.01</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>645,031</td><td align="right" class='awrc'>703.80</td><td align="right" class='awrc'>23.40</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>44,317</td><td align="right" class='awrnc'>48.35</td><td align="right" class='awrnc'>1.61</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>3,355,959</td><td align="right" class='awrc'>3,661.71</td><td align="right" class='awrc'>121.73</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>2,657</td><td align="right" class='awrc'>2.90</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>416,832</td><td align="right" class='awrnc'>454.81</td><td align="right" class='awrnc'>15.12</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>16,294,675</td><td align="right" class='awrc'>17,779.24</td><td align="right" class='awrc'>591.07</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>2,615</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>5,020</td><td align="right" class='awrnc'>5.48</td><td align="right" class='awrnc'>0.18</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>175</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>3,156</td><td align="right" class='awrnc'>3.44</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>70,318</td><td align="right" class='awrc'>76.72</td><td align="right" class='awrc'>2.55</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>317</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>6,134</td><td align="right" class='awrc'>6.69</td><td align="right" class='awrc'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>18,446,744,073,709,551,537</td><td align="right" class='awrnc'>20,127,380,331,379,761.63</td><td align="right" class='awrnc'>669,136,102,499,620.99</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>269,385</td><td align="right" class='awrnc'>293.93</td><td align="right" class='awrnc'>9.77</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>300,602</td><td align="right" class='awrc'>327.99</td><td align="right" class='awrc'>10.90</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>182,150</td><td align="right" class='awrnc'>198.75</td><td align="right" class='awrnc'>6.61</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>1,893,074</td><td align="right" class='awrc'>2,065.55</td><td align="right" class='awrc'>68.67</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>2,486,580</td><td align="right" class='awrnc'>2,713.13</td><td align="right" class='awrnc'>90.20</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>3,424,545</td><td align="right" class='awrc'>3,736.55</td><td align="right" class='awrc'>124.22</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>16,300,809</td><td align="right" class='awrnc'>17,785.93</td><td align="right" class='awrnc'>591.29</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>1,152,441</td><td align="right" class='awrc'>1,257.44</td><td align="right" class='awrc'>41.80</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>8,259,340</td><td align="right" class='awrnc'>9,011.83</td><td align="right" class='awrnc'>299.60</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>478,222</td><td align="right" class='awrc'>521.79</td><td align="right" class='awrc'>17.35</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>15,346,273</td><td align="right" class='awrnc'>16,744.43</td><td align="right" class='awrnc'>556.67</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>4,412,239,608,856</td><td align="right" class='awrc'>4,814,227,614.68</td><td align="right" class='awrc'>160,049,318.37</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>1,758,450</td><td align="right" class='awrnc'>1,918.66</td><td align="right" class='awrnc'>63.79</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>16,300,809</td><td align="right" class='awrc'>17,785.93</td><td align="right" class='awrc'>591.29</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>4,604,912</td><td align="right" class='awrnc'>5,024.45</td><td align="right" class='awrnc'>167.04</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>133,200,770</td><td align="right" class='awrc'>145,336.36</td><td align="right" class='awrc'>4,831.72</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>2,910,609</td><td align="right" class='awrnc'>3,175.79</td><td align="right" class='awrnc'>105.58</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>3,484,559</td><td align="right" class='awrc'>3,802.03</td><td align="right" class='awrc'>126.40</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>1,454,802</td><td align="right" class='awrc'>1,587.35</td><td align="right" class='awrc'>52.77</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>1,552,502</td><td align="right" class='awrnc'>1,693.95</td><td align="right" class='awrnc'>56.32</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>817,878</td><td align="right" class='awrc'>892.39</td><td align="right" class='awrc'>29.67</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>1,712,250</td><td align="right" class='awrnc'>1,868.25</td><td align="right" class='awrnc'>62.11</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>9,422</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>515</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>9,422</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>19</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>341</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>9,663</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>5</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>177</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>64</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>3</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>4,480</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>3,618</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>117</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>9,399</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>21.43</td><td align="right" class='awrc'>7.14</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>64.29</td><td align="right" class='awrc'>7.14</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>23.53</td><td align="right" class='awrnc'>35.29</td><td align="right" class='awrnc'>41.18</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>11,428</td><td align="right" headers="CR %|Immed" class='awrc'>93.35</td><td align="right" headers="CR %|Busy" class='awrc'>2.68</td><td align="right" headers="CR %|Congst" class='awrc'>3.97</td><td align="right" headers="Current Blocks|Received" class='awrclb'>8,668</td><td align="right" headers="Current %|Immed" class='awrc'>25.37</td><td align="right" headers="Current %|Busy" class='awrc'>70.84</td><td align="right" headers="Current %|Congst" class='awrcrb'>3.80</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>4,520</td><td align="right" headers="CR %|Immed" class='awrnc'>93.41</td><td align="right" headers="CR %|Busy" class='awrnc'>4.38</td><td align="right" headers="CR %|Congst" class='awrnc'>2.21</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>69</td><td align="right" headers="Current %|Immed" class='awrnc'>1.45</td><td align="right" headers="Current %|Busy" class='awrnc'>95.65</td><td align="right" headers="Current %|Congst" class='awrncrb'>2.90</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrclb'>160</td><td align="right" headers="CR %|Immed" class='awrc'>99.38</td><td align="right" headers="CR %|Busy" class='awrc'>0.00</td><td align="right" headers="CR %|Congst" class='awrc'>0.63</td><td align="right" headers="Current Blocks|Received" class='awrclb'>1,281</td><td align="right" headers="Current %|Immed" class='awrc'>88.76</td><td align="right" headers="Current %|Busy" class='awrc'>11.01</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.23</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>55</td><td align="right" headers="CR %|Immed" class='awrnc'>85.45</td><td align="right" headers="CR %|Busy" class='awrnc'>12.73</td><td align="right" headers="CR %|Congst" class='awrnc'>1.82</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|Immed" class='awrnc'>&#160;</td><td align="right" headers="Current %|Busy" class='awrnc'>&#160;</td><td align="right" headers="Current %|Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>49776</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>42208</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>298650</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>59868</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>15971</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>35413</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>9060</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>15019</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>17877</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>10106</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>186057</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>12992</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>62595</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>971</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>65252</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>5742</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>3223</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>3215</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>4418</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>3372</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>535</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>26167</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>7473</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>28744</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>18302</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>102379</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>4062</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>10,668</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>2,199</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>4,222</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>1</td><td align="right" headers="Current %|2hop" class='awrnc'>100.00</td><td align="right" headers="Current %|3hop" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>159</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>1,137</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>47</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>42208</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>42208</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>35413</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>35413</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>10106</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>10106</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>971</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>971</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>3215</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>3215</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>535</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>535</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>18302</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>18302</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>7190</td><td align="right" class='awrc'>47.89</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>16441</td><td align="right" class='awrc'>77.22</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>552</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>539</td><td align="right" class='awrnc'>0.77</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>5.03</td><td align="right" class='awrc'>4.20</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.31.173</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>affinity objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>40</td></tr>
<tr><td scope="row" class='awrnc'>read-mostly objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>43</td></tr>
<tr><td scope="row" class='awrc'>affinity objects (other inst)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>47</td></tr>
<tr><td scope="row" class='awrnc'>read-mostly objects (persistent)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>31</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1
		    53	12 Feb 2020 12:13    1
		    54	12 Feb 2020 12:24    1
		    55	12 Feb 2020 12:34    1
		    56	12 Feb 2020 12:44    1
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		    57	12 Feb 2020 12:46    1
		    58	12 Feb 2020 12:50    1
		    59	12 Feb 2020 12:56    1
		    60	12 Feb 2020 13:09    1
		    61	12 Feb 2020 13:51    1
		    62	12 Feb 2020 14:03    1
		    63	12 Feb 2020 14:12    1
		    64	12 Feb 2020 14:31    1
		    65	12 Feb 2020 14:42    1
		    66	12 Feb 2020 14:56    1
		    67	12 Feb 2020 15:11    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 66

End   Snapshot Id specified: 67

Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_66_67.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.txt

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 3889879926 P60SDB    p60sdb	  PRIMARY	   EE	   YES NO	 8192	      66       67	    2	     2		 2	  2	 4,784.59	 15.28
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p60sdb1   mcracpoc1. 12-Feb-20 14:29 12-Feb-20 14:56 12-Feb-20 15:11 19.0.0.0.0		      15.27	2,452.43	 0.71	  160.64 Linux x86 64-bi
   2 p60sdb2   mcracpoc2. 12-Feb-20 14:29 12-Feb-20 14:56 12-Feb-20 15:11 19.0.0.0.0		      15.27	2,332.16	 0.71	  152.76 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  313.40 1.E+02 ADDM:3889879926_67	       12-Feb-20 14:56 12-Feb-20 15:11
Top SQL Statements			  313.40  99.80 ADDM:3889879926_67	       12-Feb-20 14:56 12-Feb-20 15:11
Global Cache Messaging			  313.40  71.72 ADDM:3889879926_67	       12-Feb-20 14:56 12-Feb-20 15:11
Buffer Busy - Hot Objects		  313.40  38.37 ADDM:3889879926_67	       12-Feb-20 14:56 12-Feb-20 15:11
Unusual "Cluster" Wait Event		  313.40  10.87 ADDM:3889879926_67	       12-Feb-20 14:56 12-Feb-20 15:11
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			      9,664		  7,712 	      1,632		    160 						      3,232		     19.4
   2			      9,664		  7,712 	      1,632		    160 						      3,232		     19.4
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			      9,664		  7,712 	      1,632		    160 						      3,232		     19.4
 Min			      9,664		  7,712 	      1,632		    160 						      3,232		     19.4
 Max			      9,664		  7,712 	      1,632		    160 						      3,232		     19.4

OS Statistics By Instance		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  32	16     1     20.9     .4     17.7    4.8    8.3   19.2	 82.3	       4,867.7	     22,680.6	    27,548.4	257,947.8
   2	  32	16     1     21.0    2.3     25.3    6.6   11.2   15.1	 74.7	       6,836.1	     20,195.9	    27,031.9	257,947.8
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										      11,703.8	     42,876.5	    54,580.3
			  --------------------------------------------------------------------------------------------------------------------


Time Model				 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	  147,145.9	   2,290.5	147,138.9	     2.3	    2.2 	   7.3		  0.0	     4,277.4	    1,274.1
   2	  139,929.6	   3,457.3	139,909.8	     5.9	    5.4 	  13.1		  0.0	     4,501.7	    1,548.9
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  287,075.5	   5,747.8	287,048.7	     8.2	    7.6 	  20.4		  0.0	     8,779.2	    2,822.9
 Avg	  143,537.8	   2,873.9	143,524.4	     4.1	    3.8 	  10.2		  0.0	     4,389.6	    1,411.5
 Std	    5,102.6	     825.0	  5,111.7	     2.5	    2.2 	   4.1		  0.0	       158.6	      194.3
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       51.3		 1.6	      100.0	       0.0	      0.0	     0.0	    0.0 	    48.7	     29.8
   2	       48.7		 2.5	      100.0	       0.0	      0.0	     0.0	    0.0 	    51.3	     34.4
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 2.0	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.0	     32.1
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P60SDB/p60sdb1  Snaps: 6
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      10.8	     0.0	   0.2		 0.0	       0.0	     0.0	   0.0		 6.4	      82.6	     N/A	   N/A		 2.0
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	  15,719.9	     0.0	  92.5		25.6	       4.4	     0.0	   0.7	    14,774.8	 115,989.6	     N/A	   N/A	     2,290.5	  147,145.9
   2	  15,340.0	     0.1	 345.2		39.3	      15.7	     0.0	   4.9	     3,537.3	 121,134.5	     N/A	   N/A	     3,457.3	  139,929.6
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  31,059.9	     0.1	 437.7		64.9	      20.1	     0.0	   5.6	    18,312.1	 237,124.0	     0.0	   0.0	     5,747.8	  287,075.5
 Avg	  15,529.9	     0.0	 218.9		32.4	      10.0	     0.0	   2.8	     9,156.0	 118,562.0	     N/A	   N/A	     2,873.9	  143,537.8
 Std	     268.7	     0.0	 178.7		 9.7	       7.9	     0.0	   3.0	     7,946.1	   3,638.0	     N/A	   N/A	       825.0	    5,102.6
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time  DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		10.7	       0.0	     0.1	   0.0		 0.0	       0.0	     0.0	  10.0		78.8	       N/A	     N/A	   1.6		  51.3
   2		11.0	       0.0	     0.2	   0.0		 0.0	       0.0	     0.0	   2.5		86.6	       N/A	     N/A	   2.5		  48.7
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		10.8	       0.0	     0.2	   0.0		 0.0	       0.0	     0.0	   6.3		82.7	       N/A	     N/A	   2.0
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc current grant busy 			1,461,826	0.0	  79,330.38  54.27ms	27.63	   54.44ms    52.32ms	 56.56ms     3.00ms    2
       Cluster	  gc current grant 2-way			  344,495	0.0	  42,650.39 123.81ms	14.86	  123.67ms   111.63ms	135.71ms    17.03ms    2
       Cluster	  gc cr multi block grant			  182,227	0.0	  39,726.93 218.01ms	13.84	  217.75ms   215.48ms	220.03ms     3.21ms    2
       Cluster	  gc current grant read-mostly invalidatio	  364,201	0.0	  31,215.62  85.71ms	10.87	   85.60ms    82.89ms	 88.31ms     3.83ms    2
       Cluster	  gc cr grant busy				  332,814	0.0	  30,647.27  92.09ms	10.68	   91.89ms    89.44ms	 94.34ms     3.46ms    2
       User I/O   db file sequential read			7,256,332	0.0	  22,758.26   3.14ms	 7.93	    3.15ms     2.94ms	  3.37ms   307.35us    2
       Configurat free buffer waits				1,891,910	0.0	  18,036.37   9.53ms	 6.28	    9.47ms     9.35ms	  9.58ms   157.22us    2
       Cluster	  gc current grant congested			   47,177	0.0	  10,334.75 219.06ms	 3.60	  219.54ms   215.16ms	223.91ms     6.19ms    2
       User I/O   db file parallel read 			  645,007	0.0	   8,302.95  12.87ms	 2.89	   12.96ms    12.29ms	 13.64ms      .95ms    2
		  DB CPU					      N/A	N/A	   5,747.79		 2.00						       2

   1   Cluster	  gc current grant busy 			  671,550	0.0	  37,986.10  56.56ms	25.82
       Cluster	  gc current grant 2-way			  174,222	0.0	  23,643.41 135.71ms	16.07
       Cluster	  gc cr multi block grant			   80,934	0.0	  17,439.89 215.48ms	11.85
       Cluster	  gc current grant read-mostly invalidatio	  189,576	0.0	  16,741.26  88.31ms	11.38
       Configurat free buffer waits				1,527,409	0.0	  14,626.86   9.58ms	 9.94
       Cluster	  gc cr grant busy				  153,136	0.0	  13,697.16  89.44ms	 9.31
       User I/O   db file sequential read			3,330,882	0.0	  11,229.96   3.37ms	 7.63
       Cluster	  gc current grant congested			   26,143	0.0	   5,625.01 215.16ms	 3.82
       User I/O   db file parallel read 			  365,770	0.0	   4,494.57  12.29ms	 3.05
		  DB CPU					      N/A	N/A	   2,290.54		 1.56

   2   Cluster	  gc current grant busy 			  790,276	0.0	  41,344.28  52.32ms	29.55
       Cluster	  gc cr multi block grant			  101,293	0.0	  22,287.05 220.03ms	15.93
       Cluster	  gc current grant 2-way			  170,273	0.0	  19,006.97 111.63ms	13.58
       Cluster	  gc cr grant busy				  179,678	0.0	  16,950.11  94.34ms	12.11
       Cluster	  gc current grant read-mostly invalidatio	  174,625	0.0	  14,474.36  82.89ms	10.34
       User I/O   db file sequential read			3,925,450	0.0	  11,528.30   2.94ms	 8.24
       Cluster	  gc current grant congested			   21,034	0.0	   4,709.74 223.91ms	 3.37
       User I/O   db file parallel read 			  279,237	0.0	   3,808.38  13.64ms	 2.72
		  DB CPU					      N/A	N/A	   3,457.25		 2.47
       Configurat free buffer waits				  364,501	0.0	   3,409.51   9.35ms	 2.44
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc current grant busy 			1,461,114	0.0	  79,282.47  54.26ms	27.62	   54.43ms    52.31ms	 56.56ms     3.00ms    2
       Cluster	  gc current grant 2-way			  344,308	0.0	  42,643.19 123.85ms	14.85	  123.72ms   111.65ms	135.78ms    17.06ms    2
       Cluster	  gc cr multi block grant			  182,136	0.0	  39,722.67 218.09ms	13.84	  217.85ms   215.65ms	220.04ms     3.11ms    2
       Cluster	  gc current grant read-mostly invalidatio	  364,201	0.0	  31,215.62  85.71ms	10.87	   85.60ms    82.89ms	 88.31ms     3.83ms    2
       Cluster	  gc cr grant busy				  331,179	0.0	  30,545.76  92.23ms	10.64	   92.04ms    89.61ms	 94.47ms     3.44ms    2
       User I/O   db file sequential read			7,250,489	0.0	  22,749.29   3.14ms	 7.92	    3.16ms     2.94ms	  3.37ms   308.51us    2
       Configurat free buffer waits				1,889,266	0.0	  18,010.92   9.53ms	 6.27	    9.46ms     9.35ms	  9.58ms   157.26us    2
       Cluster	  gc current grant congested			   47,139	0.0	  10,331.29 219.17ms	 3.60	  219.64ms   215.25ms	224.03ms     6.20ms    2
       User I/O   db file parallel read 			  645,001	0.0	   8,302.94  12.87ms	 2.89	   12.96ms    12.29ms	 13.64ms      .96ms    2
		  DB CPU					      N/A	N/A	   5,747.79		 2.00						       2

   1   Cluster	  gc current grant busy 			  671,086	0.0	  37,954.50  56.56ms	25.79
       Cluster	  gc current grant 2-way			  174,106	0.0	  23,639.64 135.78ms	16.07
       Cluster	  gc cr multi block grant			   80,852	0.0	  17,435.64 215.65ms	11.85
       Cluster	  gc current grant read-mostly invalidatio	  189,576	0.0	  16,741.26  88.31ms	11.38
       Configurat free buffer waits				1,524,922	0.0	  14,602.92   9.58ms	 9.92
       Cluster	  gc cr grant busy				  152,285	0.0	  13,645.52  89.61ms	 9.27
       User I/O   db file sequential read			3,327,116	0.0	  11,224.73   3.37ms	 7.63
       Cluster	  gc current grant congested			   26,118	0.0	   5,622.00 215.25ms	 3.82
       User I/O   db file parallel read 			  365,768	0.0	   4,494.57  12.29ms	 3.05
		  DB CPU					      N/A	N/A	   2,290.54		 1.56

   2   Cluster	  gc current grant busy 			  790,028	0.0	  41,327.97  52.31ms	29.53
       Cluster	  gc cr multi block grant			  101,284	0.0	  22,287.04 220.04ms	15.93
       Cluster	  gc current grant 2-way			  170,202	0.0	  19,003.55 111.65ms	13.58
       Cluster	  gc cr grant busy				  178,894	0.0	  16,900.24  94.47ms	12.08
       Cluster	  gc current grant read-mostly invalidatio	  174,625	0.0	  14,474.36  82.89ms	10.34
       User I/O   db file sequential read			3,923,373	0.0	  11,524.56   2.94ms	 8.24
       Cluster	  gc current grant congested			   21,021	0.0	   4,709.29 224.03ms	 3.37
       User I/O   db file parallel read 			  279,233	0.0	   3,808.38  13.64ms	 2.72
		  DB CPU					      N/A	N/A	   3,457.25		 2.47
       Configurat free buffer waits				  364,344	0.0	   3,407.99   9.35ms	 2.44
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   2,822.92		32.15						       2
       System I/O log file parallel write			   31,949	0.0	   1,361.49  42.61ms	15.51	   42.81ms    40.17ms	 45.44ms     3.73ms    2
       System I/O db file parallel write			  235,063	0.0	     818.56   3.48ms	 9.32	    3.14ms     1.62ms	  4.66ms     2.15ms    2
       Other	  LGWR any worker group 			   13,518	0.0	     451.15  33.37ms	 5.14	   33.57ms    31.42ms	 35.72ms     3.04ms    2
       Other	  LGWR worker group ordering			    7,268	0.0	     131.61  18.11ms	 1.50	   18.14ms    17.20ms	 19.09ms     1.33ms    2
       Cluster	  gc cr grant busy				    1,637	0.0	     101.51  62.01ms	 1.16	   62.07ms    60.68ms	 63.45ms     1.96ms    2
       Other	  gcs log flush sync				  113,144	0.0	      53.85 475.93us	 0.61	  517.47us   463.04us	571.89us    76.97us    2
       System I/O control file parallel write			      875	0.0	      52.69  60.22ms	 0.60	   61.43ms    44.67ms	 78.19ms    23.70ms    2
       Cluster	  gc current grant busy 			      711	0.0	      47.87  67.33ms	 0.55	   66.64ms    64.20ms	 69.07ms     3.44ms    2
       Other	  LGWR all worker groups			      496	0.0	      47.64  96.06ms	 0.54	   93.89ms    84.79ms	102.99ms    12.87ms    2

   1		  background cpu time				      N/A	N/A	   1,274.06		29.79
       System I/O log file parallel write			   14,808	0.0	     672.94  45.44ms	15.73
       Other	  LGWR any worker group 			    6,141	0.0	     219.34  35.72ms	 5.13
       System I/O db file parallel write			   91,216	0.0	     147.96   1.62ms	 3.46
       Other	  LGWR worker group ordering			    3,496	0.0	      66.73  19.09ms	 1.56
       Cluster	  gc cr grant busy				      851	0.0	      51.64  60.68ms	 1.21
       Other	  gcs log flush sync				   99,747	0.0	      46.19 463.04us	 1.08
       System I/O control file parallel write			      406	0.0	      31.74  78.19ms	 0.74
       Cluster	  gc current grant busy 			      457	0.0	      31.56  69.07ms	 0.74
       Cluster	  gc current block busy 			      338	0.0	      24.92  73.74ms	 0.58

   2		  background cpu time				      N/A	N/A	   1,548.86		34.41
       System I/O log file parallel write			   17,141	0.0	     688.55  40.17ms	15.30
       System I/O db file parallel write			  143,847	0.0	     670.61   4.66ms	14.90
       Other	  LGWR any worker group 			    7,377	0.0	     231.81  31.42ms	 5.15
       Other	  LGWR worker group ordering			    3,772	0.0	      64.88  17.20ms	 1.44
       Cluster	  gc cr grant busy				      786	0.0	      49.87  63.45ms	 1.11
       User I/O   Disk file Mirror Read 			    1,206	0.0	      33.46  27.74ms	 0.74
       Cluster	  gc cr block lost				       51	0.0	      33.43 655.44ms	 0.74
       Other	  LGWR all worker groups			      307	0.0	      31.62 102.99ms	 0.70
       Other	  DLM cross inst call completion		    1,284	0.0	      28.17  21.94ms	 0.63
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc current grant busy			 1,461,114	 0.0	   79,282.47  54.26ms	 27.62	    54.43ms    52.31ms	  56.56ms     3.00ms
Cluster    gc current grant 2-way			   344,308	 0.0	   42,643.19 123.85ms	 14.85	   123.72ms   111.65ms	 135.78ms    17.06ms
Cluster    gc cr multi block grant			   182,136	 0.0	   39,722.67 218.09ms	 13.84	   217.85ms   215.65ms	 220.04ms     3.11ms
Cluster    gc current grant read-mostly invalidatio	   364,201	 0.0	   31,215.62  85.71ms	 10.87	    85.60ms    82.89ms	  88.31ms     3.83ms
Cluster    gc cr grant busy				   331,179	 0.0	   30,545.76  92.23ms	 10.64	    92.04ms    89.61ms	  94.47ms     3.44ms
User I/O   db file sequential read			 7,250,489	 0.0	   22,749.29   3.14ms	  7.92	     3.16ms	2.94ms	   3.37ms   308.51us
Configurat free buffer waits				 1,889,266	 0.0	   18,010.92   9.53ms	  6.27	     9.46ms	9.35ms	   9.58ms   157.26us
Cluster    gc current grant congested			    47,139	 0.0	   10,331.29 219.17ms	  3.60	   219.64ms   215.25ms	 224.03ms     6.20ms
User I/O   db file parallel read			   645,001	 0.0	    8,302.94  12.87ms	  2.89	    12.96ms    12.29ms	  13.64ms      .96ms
Cluster    gc current block lost			     2,703	 0.0	    1,655.47 612.46ms	  0.58	   629.82ms   607.46ms	 652.18ms    31.62ms
Cluster    gc cr multi block mixed			     2,250	 0.0	      843.39 374.84ms	  0.29	   365.15ms   310.36ms	 419.94ms    77.49ms
Other	   KJC: Wait for msg sends to complete		     1,920	 0.0	      394.99 205.72ms	  0.14	   197.65ms   184.24ms	 211.06ms    18.96ms
Cluster    gc cr block lost				       460	 0.0	      296.85 645.34ms	  0.10	   627.96ms   603.30ms	 652.63ms    34.88ms
Configurat write complete waits 			       146	 0.0	      293.77 2012.13m	  0.10	  2012.13ms  1771.76ms	2252.50ms   339.94ms
Cluster    gc current block busy			    11,381	 0.0	      250.56  22.02ms	  0.09	    23.34ms	9.07ms	  37.62ms    20.19ms
Cluster    gc cr grant 2-way				     5,170	 0.0	      143.43  27.74ms	  0.05	    31.84ms	9.67ms	  54.01ms    31.35ms
Cluster    gc cr block 2-way				     1,798	 0.0	       73.84  41.07ms	  0.03	    50.52ms    19.52ms	  81.51ms    43.84ms
Applicatio enq: TX - row lock contention			17	 0.0	       64.87 3815.79m	  0.02	  3876.71ms  2841.05ms	4912.37ms  1464.64ms
Cluster    gc buffer busy acquire			       101	 0.0	       46.94 464.75ms	  0.02	   460.14ms   304.95ms	 615.34ms   219.48ms
Cluster    gc cr block busy				       132	 0.0	       30.61 231.92ms	  0.01	   225.02ms   209.33ms	 240.72ms    22.20ms
Other	   ges message buffer allocation			90	 0.0	       24.58 273.07ms	  0.01	   274.74ms   249.77ms	 299.71ms    35.31ms
Commit	   log file sync				       344	 0.0	       20.09  58.41ms	  0.01	    53.48ms    38.84ms	  68.11ms    20.69ms
Cluster    gc current block congested			       869	 0.0	       14.93  17.18ms	  0.01	    16.27ms    13.86ms	  18.68ms     3.41ms
Cluster    gc current block 2-way			       417	 0.0		8.74  20.95ms	  0.00	    23.30ms    17.50ms	  29.10ms     8.20ms
Cluster    gc cr grant congested			       466	 0.0		8.63  18.51ms	  0.00	    15.47ms	5.48ms	  25.46ms    14.12ms
Configurat log buffer space				       113	 0.0		7.41  65.54ms	  0.00	    65.54ms    65.54ms	  65.54ms
Other	   lock escalate retry				       723     100.0		7.24  10.01ms	  0.00	    10.01ms    10.01ms	  10.01ms
User I/O   db file scattered read			     1,804	 0.0		4.85   2.69ms	  0.00	     1.75ms   797.25us	   2.70ms     1.34ms
Cluster    gc cr block congested			       130	 0.0		4.25  32.67ms	  0.00	    34.48ms    28.87ms	  40.10ms     7.94ms
Concurrenc library cache lock					16	12.5		4.22 263.47ms	  0.00	   228.42ms    88.21ms	 368.62ms   198.28ms
Cluster    gc buffer busy release				16	 0.0		2.96 185.06ms	  0.00	   180.33ms   142.49ms	 218.17ms    53.51ms
Other	   latch: gc element				     1,892	 0.0		2.72   1.44ms	  0.00	     1.20ms   819.55us	   1.59ms   542.03us
Cluster    gc cr failure				       318	 0.0		2.34   7.37ms	  0.00	     5.20ms	2.99ms	   7.41ms     3.13ms
Other	   PX Deq: Slave Session Stats				70	 0.0		2.09  29.80ms	  0.00	    29.80ms    29.73ms	  29.87ms   100.69us
Other	   latch free					     2,713	 0.0		2.07 763.80us	  0.00	   707.42us   413.79us	   1.00ms   415.25us
Other	   latch: gcs resource hash			     2,173	 0.0		1.50 691.73us	  0.00	   592.02us   383.89us	 800.15us   294.34us
User I/O   Disk file Mirror Read				40	 0.0		1.22  30.51ms	  0.00	    24.48ms   377.93us	  48.58ms    34.09ms
Other	   IPC send completion sync			       117	 0.0		1.17   9.96ms	  0.00	     8.28ms	 .96ms	  15.59ms    10.35ms
Concurrenc latch: cache buffers chains			     1,149	 0.0		1.14   1.00ms	  0.00	   842.55us   493.22us	   1.19ms   494.02us
User I/O   read by other session				93	 0.0		1.01  10.87ms	  0.00	    10.90ms	8.81ms	  12.98ms     2.94ms
User I/O   Disk file operations I/O			       272	 0.0		0.34   1.26ms	  0.00	     1.31ms    49.50us	   2.57ms     1.78ms
Other	   latch: object queue header operation 	       332	 0.0		0.32	.97ms	  0.00	   850.88us   626.04us	   1.08ms   317.97us
Other	   latch: cache buffers lru chain		       645	 0.0		0.26 408.45us	  0.00	   337.67us   172.85us	 502.49us   233.09us
Concurrenc row cache lock					25	92.0		0.22   8.98ms	  0.00	     5.93ms	1.93ms	   9.94ms     5.67ms
Other	   latch: redo allocation			       468	 0.0		0.22 472.34us	  0.00	   414.61us   288.35us	 540.86us   178.55us
User I/O   direct path write					 5	 0.0		0.20  40.35ms	  0.00	    40.35ms    40.35ms	  40.35ms
Other	   lock deadlock retry				     2,687     100.1		0.16  59.78us	  0.00	    48.94us    34.96us	  62.92us    19.77us
System I/O control file sequential read 		       160	 0.0		0.10 617.44us	  0.00	   556.81us   314.27us	 799.35us   343.01us
Other	   latch: ges resource hash list		       168	 0.0		0.08 480.27us	  0.00	   413.86us   331.81us	 495.90us   116.03us
Cluster    gc current multi block request			 6	 0.0		0.08  13.31ms	  0.00	     8.20ms   538.00us	  15.86ms    10.84ms
Other	   enq: PS - contention 				38	 2.6		0.07   1.88ms	  0.00	     1.72ms	1.00ms	   2.45ms     1.03ms
Other	   PGA memory operation 			     1,246	 0.0		0.06  46.22us	  0.00	    46.99us    37.41us	  56.58us    13.56us
Other	   PX Deq: reap credit				     1,415     100.0		0.04  31.35us	  0.00	    30.08us    24.97us	  35.19us     7.23us
Other	   enq: WF - contention 				19	 0.0		0.03   1.50ms	  0.00	     1.36ms   838.57us	   1.89ms   742.47us
Concurrenc library cache pin					12	 0.0		0.03   2.25ms	  0.00	     1.99ms	1.47ms	   2.51ms   730.68us
Concurrenc library cache: mutex X				 9	 0.0		0.02   2.12ms	  0.00	     4.68ms    72.43us	   9.30ms     6.52ms
Other	   CSS initialization					 2	 0.0		0.02   8.26ms	  0.00	     8.26ms	8.26ms	   8.26ms
Other	   DLM cross inst call completion			26	 0.0		0.01 562.42us	  0.00	   438.18us   276.67us	 599.70us   228.42us
Applicatio SQL*Net break/reset to client		       182	 0.0		0.01  79.37us	  0.00	    79.37us    79.37us	  79.37us
Other	   enq: WT - contention 				 6	 0.0		0.01   2.07ms	  0.00	     1.73ms   705.00us	   2.76ms     1.45ms
Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   name-service call wait				 4	 0.0		0.01   2.99ms	  0.00	     2.99ms	2.53ms	   3.45ms   645.23us
Network    SQL*Net message to client			     1,215	 0.0		0.01   8.57us	  0.00	     8.91us	6.83us	  10.99us     2.94us
Other	   enq: TO - contention 				 4	 0.0		0.01   2.55ms	  0.00	     2.61ms	2.48ms	   2.74ms   182.43us
Other	   CSS operation: action				 2	 0.0		0.01   3.64ms	  0.00	     3.64ms	3.64ms	   3.64ms
Other	   enq: FB - contention 				 5	 0.0		0.01   1.43ms	  0.00	     1.06ms   441.00us	   1.67ms   871.69us
Other	   latch: enqueue hash chains				10	 0.0		0.01 647.10us	  0.00	   588.00us   292.50us	 883.50us   417.90us
Concurrenc latch: shared pool					12	 0.0		0.01 477.33us	  0.00	   309.91us   109.00us	 510.82us   284.13us
Other	   latch: undo global data				16	 0.0		0.01 320.25us	  0.00	   223.49us    68.67us	 378.31us   218.95us
Other	   latch: call allocation				22	 0.0		0.01 228.36us	  0.00	   222.23us   154.70us	 289.75us    95.49us
Other	   CSS operation: query 				 6	 0.0		0.00 742.17us	  0.00	   742.17us   742.17us	 742.17us
Concurrenc buffer busy waits					37	 0.0		0.00 103.14us	  0.00	   103.93us    98.05us	 109.81us     8.32us
Concurrenc cursor: pin S					 3	 0.0		0.00   1.17ms	  0.00	     1.17ms	1.17ms	   1.17ms
Configurat enq: HW - contention 				 3	 0.0		0.00	.99ms	  0.00	   866.50us   496.00us	   1.24ms   523.97us
Other	   latch: messages					 6	 0.0		0.00 446.33us	  0.00	   446.33us   213.00us	 679.67us   329.98us
Other	   enq: AF - task serialization 			 1	 0.0		0.00   1.62ms	  0.00	     1.62ms	1.62ms	   1.62ms
User I/O   ASM IO for non-blocking poll 			24	 0.0		0.00  36.50us	  0.00	    36.50us    36.50us	  36.50us
Concurrenc row cache mutex					 2	 0.0		0.00 177.50us	  0.00	   177.50us   177.50us	 177.50us
Network    IPC group service call				13	 0.0		0.00   9.92us	  0.00	    10.71us	8.67us	  12.75us     2.89us
Other	   latch: active service list				 1	 0.0		0.00 127.00us	  0.00	   127.00us   127.00us	 127.00us
Other	   ges resource directory to be unfrozen		 5	 0.0		0.00  19.00us	  0.00	    21.83us	7.67us	  36.00us    20.03us
Other	   asynch descriptor resize				 5     100.0		0.00  13.20us	  0.00	    13.00us    12.00us	  14.00us     1.41us
Concurrenc library cache: bucket mutex X			 3	 0.0		0.00  18.00us	  0.00	    18.00us    18.00us	  18.00us
Other	   buffer deadlock					 2     100.0		0.00  25.50us	  0.00	    25.50us    25.50us	  25.50us
Other	   AWR Flush						 6	 0.0		0.00   5.83us	  0.00	     5.50us	5.00us	   6.00us   707.11ns
Idle	   watchdog main loop				     3,035	 0.0	    9,105.12 3000.04m	  3.17	  3000.04ms  3000.02ms	3000.06ms    24.73us
Idle	   SQL*Net message from client			     1,217	 0.0	      911.48 748.95ms	  0.32	   644.01ms	2.21ms	1285.81ms   907.64ms
Idle	   PX Deq: Execution Msg			       210	 0.0	       14.23  67.78ms	  0.00	    67.78ms    33.96ms	 101.60ms    47.83ms
Idle	   PX Deq: Msg Fragment 			       582	 0.0	       13.16  22.62ms	  0.00	    22.62ms    22.44ms	  22.79ms   251.01us
Idle	   PX Deq Credit: send blkd				70	 0.0		2.83  40.38ms	  0.00	    40.38ms    40.38ms	  40.38ms
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O log file parallel write			    31,949	 0.0	    1,361.49  42.61ms	  0.16	    42.81ms    40.17ms	  45.44ms     3.73ms
System I/O db file parallel write			   235,063	 0.0	      818.56   3.48ms	  0.09	     3.14ms	1.62ms	   4.66ms     2.15ms
Other	   LGWR any worker group			    13,518	 0.0	      451.15  33.37ms	  0.05	    33.57ms    31.42ms	  35.72ms     3.04ms
Other	   LGWR worker group ordering			     7,268	 0.0	      131.61  18.11ms	  0.01	    18.14ms    17.20ms	  19.09ms     1.33ms
Cluster    gc cr grant busy				     1,637	 0.0	      101.51  62.01ms	  0.01	    62.07ms    60.68ms	  63.45ms     1.96ms
Other	   gcs log flush sync				   113,144	 0.0	       53.85 475.93us	  0.01	   517.47us   463.04us	 571.89us    76.97us
System I/O control file parallel write			       875	 0.0	       52.69  60.22ms	  0.01	    61.43ms    44.67ms	  78.19ms    23.70ms
Cluster    gc current grant busy			       711	 0.0	       47.87  67.33ms	  0.01	    66.64ms    64.20ms	  69.07ms     3.44ms
Other	   LGWR all worker groups			       496	 0.0	       47.64  96.06ms	  0.01	    93.89ms    84.79ms	 102.99ms    12.87ms
Other	   KJC: Wait for msg sends to complete		   182,916	99.8	       37.27 203.75us	  0.00	   278.66us   123.96us	 433.36us   218.78us
User I/O   Disk file Mirror Read			     2,420	 0.0	       35.05  14.48ms	  0.00	    14.53ms	1.31ms	  27.74ms    18.69ms
Cluster    gc current block busy			       627	 0.0	       34.38  54.84ms	  0.00	    53.24ms    32.73ms	  73.74ms    28.99ms
Cluster    gc cr block lost					52	 0.0	       34.16 656.88ms	  0.00	   693.04ms   655.44ms	 730.65ms    53.18ms
Cluster    gc cr block 2-way				     4,126	 0.0	       32.56   7.89ms	  0.00	    17.38ms	6.88ms	  27.88ms    14.85ms
Other	   DLM cross inst call completion		     1,844	 0.0	       31.69  17.18ms	  0.00	    14.11ms	6.27ms	  21.94ms    11.08ms
Other	   IMR slave acknowledgement msg		     5,460	 0.0	       26.86   4.92ms	  0.00	     4.95ms   552.22us	   9.34ms     6.22ms
Configurat free buffer waits				     2,644	 0.0	       25.45   9.63ms	  0.00	     9.65ms	9.62ms	   9.67ms    29.84us
Concurrenc library cache lock				       539	 0.0	       23.90  44.35ms	  0.00	    55.26ms    19.19ms	  91.32ms    51.00ms
Cluster    gc cr block busy				       178	 0.0	       22.21 124.77ms	  0.00	   104.02ms    73.23ms	 134.80ms    43.53ms
Applicatio enq: RO - fast object reuse			       233	 0.0	       19.24  82.58ms	  0.00	    81.04ms	9.39ms	 152.70ms   101.34ms
Applicatio enq: TM - contention 			       196	 0.0	       18.10  92.37ms	  0.00	    92.37ms    70.83ms	 113.91ms    30.46ms
Cluster    gc current block lost				13	 0.0	       11.13 856.33ms	  0.00	   777.10ms   629.97ms	 924.23ms   208.07ms
User I/O   db file sequential read			     5,849	 0.0		8.96   1.53ms	  0.00	     1.59ms	1.38ms	   1.80ms   293.72us
User I/O   ASM IO for non-blocking poll 		   170,280	 0.0		8.18  48.01us	  0.00	    50.05us    33.87us	  66.22us    22.87us
User I/O   direct path write				       139	 0.0		7.81  56.16ms	  0.00	    54.84ms    34.43ms	  75.24ms    28.85ms
Cluster    gc current grant 2-way			       186	 0.0		7.19  38.67ms	  0.00	    40.49ms    32.79ms	  48.20ms    10.90ms
Other	   IPC send completion sync			     1,875	97.0		7.15   3.81ms	  0.00	     3.83ms	2.18ms	   5.49ms     2.34ms
Other	   ASM file metadata operation			     8,343	 0.0		6.94 832.42us	  0.00	   832.28us   813.59us	 850.97us    26.43us
System I/O control file sequential read 		    10,551	 0.0		6.80 644.81us	  0.00	   643.63us   534.73us	 752.53us   154.01us
Other	   KSV master wait				     3,415	46.2		6.74   1.97ms	  0.00	     1.97ms	1.90ms	   2.05ms   111.04us
Other	   enq: CF - contention 			       165	55.2		6.02  36.49ms	  0.00	    36.94ms    33.71ms	  40.17ms     4.57ms
Cluster    gc cr disk read					95	 0.0		5.68  59.82ms	  0.00	    57.08ms    49.19ms	  64.96ms    11.16ms
Other	   Sync ASM rebalance				       216	 0.0		5.31  24.57ms	  0.00	    24.57ms    23.34ms	  25.79ms     1.73ms
Other	   DFS lock handle				     1,518     100.0		5.17   3.40ms	  0.00	     3.41ms	3.17ms	   3.66ms   340.34us
Cluster    gc cr multi block grant				91	 0.0		4.26  46.81ms	  0.00	    26.35ms   838.00us	  51.85ms    36.07ms
Cluster    gc cr block congested			       103	 0.0		3.65  35.47ms	  0.00	    81.95ms	5.96ms	 157.95ms   107.47ms
Cluster    gc current grant congested				38	 0.0		3.45  90.91ms	  0.00	    77.29ms    34.14ms	 120.43ms    61.01ms
Other	   PX Deq: reap credit				   122,003     100.0		3.40  27.90us	  0.00	    27.91us    26.18us	  29.65us     2.46us
Configurat write complete waits 				 3	 0.0		3.16 1053.43m	  0.00	  1053.43ms  1053.43ms	1053.43ms
Concurrenc library cache pin				       491	 0.0		3.04   6.19ms	  0.00	     6.31ms	6.01ms	   6.62ms   432.82us
Cluster    gc current block 2-way			     1,204	 0.0		2.96   2.46ms	  0.00	    26.77ms   545.55us	  52.99ms    37.09ms
Other	   reliable message				       107	 0.0		2.81  26.30ms	  0.00	    25.35ms	4.95ms	  45.75ms    28.85ms
Cluster    gc cr multi block mixed				26	 0.0		2.80 107.75ms	  0.00	   107.75ms    52.41ms	 163.08ms    78.26ms
System I/O log file sequential read			     1,383	 0.0		2.51   1.81ms	  0.00	     1.81ms	1.65ms	   1.98ms   230.53us
Cluster    gc buffer busy release				11	 0.0		1.90 173.04ms	  0.00	   141.83ms    92.80ms	 190.87ms    69.34ms
Concurrenc buffer busy waits					 9	 0.0		1.78 197.81ms	  0.00	   262.40ms    68.63ms	 456.17ms   274.04ms
User I/O   direct path write temp			       140	 0.0		1.71  12.19ms	  0.00	    12.23ms    11.35ms	  13.10ms     1.24ms
Other	   enq: WF - contention 				17	17.6		1.55  91.15ms	  0.00	    55.70ms   922.33us	 110.48ms    77.47ms
System I/O db file async I/O submit			   207,080	 0.0		1.38   6.67us	  0.00	     6.59us	6.03us	   7.14us   783.17ns
Cluster    gc cr grant 2-way				       555	 0.0		1.24   2.24ms	  0.00	     1.64ms	1.03ms	   2.26ms   869.11us
Cluster    gc buffer busy acquire				 3	 0.0		1.17 391.06ms	  0.00	   295.25ms	7.81ms	 582.68ms   406.50ms
Other	   latch free					     3,150	 0.0		1.09 346.19us	  0.00	   341.41us   280.14us	 402.68us    86.65us
Other	   latch: cache buffers lru chain		     1,773	 0.0		1.07 605.68us	  0.00	   495.45us   289.51us	 701.39us   291.25us
Other	   latch: gcs resource hash			     2,208	 0.0		1.04 472.08us	  0.00	   433.64us   301.42us	 565.85us   186.97us
Other	   PX Deq: Signal ACK EXT				70	 0.0		1.01  14.46ms	  0.00	    12.07ms   111.46us	  24.03ms    16.91ms
Commit	   log file sync					 2	 0.0		0.95 476.32ms	  0.00	   476.32ms	4.78ms	 947.87ms   666.87ms
Cluster    gc current multi block request			12	 0.0		0.83  68.93ms	  0.00	    79.55ms    15.81ms	 143.30ms    90.15ms
Other	   kjctssqmg: quick message send wait		     2,134     100.0		0.82 384.29us	  0.00	   391.69us   332.81us	 450.56us    83.26us
User I/O   Disk file operations I/O			     1,408	 0.0		0.73 517.89us	  0.00	   517.91us   502.41us	 533.41us    21.92us
Other	   PX Deq: Join ACK					70	 0.0		0.68   9.73ms	  0.00	     8.51ms	2.39ms	  14.62ms     8.65ms
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   ges inquiry response 				81	 0.0		0.63   7.72ms	  0.00	    12.39ms	1.58ms	  23.21ms    15.29ms
Other	   AQ: RAC AQ Network				    18,139     100.0		0.54  29.63us	  0.00	    29.64us    28.63us	  30.65us     1.43us
Other	   CGS wait for IPC msg 			    18,520     100.0		0.52  28.28us	  0.00	    28.29us    28.21us	  28.36us   108.05ns
Other	   enq: PS - contention 				56	32.1		0.48   8.53ms	  0.00	     9.26ms	2.43ms	  16.10ms     9.66ms
Cluster    gc cr failure				       271	 0.0		0.46   1.69ms	  0.00	     3.85ms	1.32ms	   6.38ms     3.58ms
Other	   oracle thread bootstrap				14	 0.0		0.43  30.37ms	  0.00	    30.37ms    27.03ms	  33.71ms     4.73ms
Concurrenc row cache lock					69	97.1		0.39   5.68ms	  0.00	     5.87ms	3.97ms	   7.77ms     2.69ms
Other	   latch: gc element				       340	 0.0		0.32 939.67us	  0.00	   880.56us   723.53us	   1.04ms   222.07us
Other	   ges message buffer allocation			 7	 0.0		0.31  44.21ms	  0.00	    51.50ms   440.25us	 102.57ms    72.21ms
Cluster    gc current block congested				47	 0.0		0.30   6.48ms	  0.00	     6.14ms	5.65ms	   6.62ms   685.19us
Other	   lock escalate retry					26     100.0		0.26  10.00ms	  0.00	    10.11ms	9.99ms	  10.23ms   174.42us
Other	   LGWR wait for redo copy			       262	 0.0		0.23 872.76us	  0.00	   775.39us   590.55us	    .96ms   261.41us
Other	   enq: MW - contention 				 1	 0.0		0.22 215.01ms	  0.00	   215.01ms   215.01ms	 215.01ms
Concurrenc latch: cache buffers chains			       200	 0.0		0.20   1.01ms	  0.00	   921.58us   695.50us	   1.15ms   319.72us
Other	   enq: FB - contention 				 9	 0.0		0.19  20.68ms	  0.00	    23.03ms	1.90ms	  44.16ms    29.88ms
Other	   enq: TD - KTF dump entries				 4	 0.0		0.19  46.32ms	  0.00	    46.32ms	4.78ms	  87.85ms    58.74ms
Other	   cr request retry					19     100.0		0.19   9.75ms	  0.00	     9.75ms	9.75ms	   9.75ms
User I/O   db file scattered read			       241	 0.0		0.17 723.05us	  0.00	   582.22us   334.48us	 829.95us   350.35us
Other	   latch: redo allocation			       184	 0.0		0.12 676.65us	  0.00	   540.12us   303.13us	 777.12us   335.16us
Other	   CSS operation: data query				56	 0.0		0.11   2.03ms	  0.00	     2.03ms	1.80ms	   2.25ms   316.83us
Other	   PGA memory operation 			     2,094	 0.0		0.11  53.50us	  0.00	    53.55us    53.05us	  54.05us   709.46ns
Concurrenc latch: MGA shared context root latch 	       141	 0.0		0.11 768.24us	  0.00	   743.06us   556.21us	 929.91us   264.25us
Network    IPC group service call			     1,461	 0.0		0.10  70.90us	  0.00	    70.91us    66.95us	  74.88us     5.61us
Other	   latch: object queue header operation 		70	 0.0		0.09   1.30ms	  0.00	     1.12ms   756.22us	   1.49ms   519.61us
Other	   ksxr poll remote instances			     2,670     100.0		0.09  32.00us	  0.00	    31.98us    31.46us	  32.51us   741.32ns
Other	   CSS operation: data update				63	 0.0		0.07   1.17ms	  0.00	     1.17ms	1.10ms	   1.24ms    97.74us
Configurat latch: redo writing					25	 0.0		0.07   2.76ms	  0.00	     1.85ms   100.67us	   3.60ms     2.47ms
Concurrenc libcache interrupt action by LCK		     7,199	 0.0		0.05   7.51us	  0.00	     7.52us	7.37us	   7.68us   221.65ns
Other	   enq: DW - contention 				11     100.0		0.05   4.11ms	  0.00	     3.96ms	2.29ms	   5.63ms     2.36ms
Other	   enq: CO - master slave det				15     100.0		0.04   2.56ms	  0.00	     2.56ms	2.56ms	   2.56ms
Other	   os thread creation					14	 0.0		0.03   2.37ms	  0.00	     2.37ms	1.91ms	   2.84ms   660.54us
Other	   latch: checkpoint queue latch			90	 0.0		0.03 364.31us	  0.00	   406.22us   347.29us	 465.15us    83.35us
Concurrenc latch: MGA shared context latch			79	 0.0		0.03 346.77us	  0.00	   345.26us   331.97us	 358.55us    18.79us
Other	   PX Deq: Slave Session Stats				70	 0.0		0.02 297.27us	  0.00	   284.11us   218.29us	 349.93us    93.09us
Other	   enq: SM -  contention				 9	 0.0		0.02   2.21ms	  0.00	     2.07ms	1.64ms	   2.49ms   602.57us
Other	   enq: WT - contention 				 7	 0.0		0.02   2.73ms	  0.00	     2.73ms	2.73ms	   2.73ms
Other	   enq: TT - contention 				 6	50.0		0.02   3.11ms	  0.00	     3.49ms	2.33ms	   4.66ms     1.64ms
Other	   enq: TO - contention 				 6	 0.0		0.02   2.58ms	  0.00	     2.78ms	2.18ms	   3.37ms   837.74us
Other	   CSS initialization					 2	 0.0		0.02   7.71ms	  0.00	     7.71ms	7.71ms	   7.71ms
Other	   enq: TA - contention 				 6	 0.0		0.01   2.06ms	  0.00	     2.06ms	1.21ms	   2.91ms     1.20ms
Other	   name-service call wait				 4	 0.0		0.01   2.65ms	  0.00	     2.65ms	1.70ms	   3.59ms     1.33ms
Concurrenc row cache mutex					 3	 0.0		0.01   3.17ms	  0.00	     4.73ms    58.50us	   9.40ms     6.61ms
Other	   latch: ges resource hash list			14	 0.0		0.01 645.00us	  0.00	   448.75us   174.00us	 723.50us   388.56us
Concurrenc latch: MGA heap latch				34	 0.0		0.01 255.56us	  0.00	   234.84us   117.43us	 352.25us   166.04us
Other	   latch: messages					33	 0.0		0.01 245.97us	  0.00	   196.85us    88.78us	 304.92us   152.83us
Other	   enq: DR - contention 				 2	 0.0		0.01   3.82ms	  0.00	     3.82ms	1.69ms	   5.95ms     3.01ms
Configurat enq: HW - contention 				 5	 0.0		0.01   1.46ms	  0.00	     1.72ms	1.28ms	   2.16ms   625.61us
Other	   latch: kjci process context latch			 9	 0.0		0.00 538.78us	  0.00	   669.57us   434.14us	 905.00us   332.95us
Other	   CSS operation: action				 4	 0.0		0.00   1.17ms	  0.00	     1.17ms   900.00us	   1.45ms   385.37us
Other	   asynch descriptor resize			       548     100.0		0.00   8.49us	  0.00	     8.50us	8.00us	   9.00us   709.67ns
Network    SQL*Net message to client			       515	 0.0		0.00   7.97us	  0.00	     7.99us	6.54us	   9.44us     2.05us
User I/O   db file parallel read				 6	 0.0		0.00 655.50us	  0.00	   660.75us   645.00us	 676.50us    22.27us
Other	   enq: AF - task serialization 			 1	 0.0		0.00   2.96ms	  0.00	     2.96ms	2.96ms	   2.96ms
Concurrenc latch: shared pool					 3	 0.0		0.00 812.67us	  0.00	   812.67us   812.67us	 812.67us
Other	   wait list latch free 				 2	 0.0		0.00   1.16ms	  0.00	     1.16ms	1.16ms	   1.16ms
Other	   latch: active service list				 1	 0.0		0.00   1.66ms	  0.00	     1.66ms	1.66ms	   1.66ms
Other	   CSS operation: query 				 7	 0.0		0.00 178.86us	  0.00	   178.86us   178.86us	 178.86us
Other	   GCR CSS group query					56	 0.0		0.00  16.11us	  0.00	    16.11us    14.86us	  17.36us     1.77us
Other	   GCR CSS group update 				56	 0.0		0.00  14.70us	  0.00	    14.70us    13.36us	  16.04us     1.89us
Other	   latch: call allocation				 3	 0.0		0.00 155.33us	  0.00	   187.75us    90.50us	 285.00us   137.53us
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   lock deadlock retry					12     100.0		0.00  35.83us	  0.00	    28.50us    17.50us	  39.50us    15.56us
Other	   ges resource directory to be unfrozen		20	 0.0		0.00   4.85us	  0.00	     4.86us	4.73us	   5.00us   192.85ns
Other	   latch: enqueue hash chains				 1	 0.0		0.00  76.00us	  0.00	    76.00us    76.00us	  76.00us
Other	   AWR Flush						 4	 0.0		0.00  13.50us	  0.00	    10.33us	4.00us	  16.67us     8.96us
Other	   undo_retention publish retry 			 6	 0.0		0.00   5.83us	  0.00	     5.83us	5.33us	   6.33us   707.11ns
Other	   buffer deadlock					 1     100.0		0.00  16.00us	  0.00	    16.00us    16.00us	  16.00us
Other	   gcs resource directory to be unfrozen		 1	 0.0		0.00   7.00us	  0.00	     7.00us	7.00us	   7.00us
Idle	   PX Idle Wait 					74	 0.0	  118,484.10 1601.14	 13.50	  1601.14 s  1591.66 s	1610.62 s    13.41 s
Idle	   Space Manager: slave idle wait		    15,744	 0.0	   67,031.34 4257.58m	  7.64	  4257.17ms  4242.82ms	4271.51ms    20.29ms
Idle	   rdbms ipc message				   117,481	36.3	   45,403.99 386.48ms	  5.17	   386.60ms   377.05ms	 396.16ms    13.51ms
Idle	   class slave wait				    23,112	77.0	   12,075.91 522.50ms	  1.38	   523.20ms   467.67ms	 578.72ms    78.52ms
Idle	   wait for unread message on broadcast cha	     2,790     100.0	    5,461.84 1957.65m	  0.62	  1957.65ms  1957.44ms	1957.86ms   302.90us
Idle	   LMS CR slave timer				   542,318	 0.0	    5,451.42  10.05ms	  0.62	    10.05ms    10.03ms	  10.08ms    33.44us
Idle	   gcs yield cpu				   185,445     100.0	    5,430.60  29.28ms	  0.62	    29.29ms    28.91ms	  29.66ms   532.18us
Idle	   gcs remote message				 3,893,805	 0.0	    4,186.43   1.08ms	  0.48	     1.09ms	 .98ms	   1.20ms   159.86us
Idle	   pmon timer					     1,214     100.0	    3,641.93 2999.94m	  0.41	  2999.94ms  2999.93ms	2999.96ms    19.63us
Idle	   ges remote message				    60,289	 0.0	    3,636.30  60.31ms	  0.41	    60.32ms    60.10ms	  60.54ms   309.86us
Idle	   GCR sleep					    12,102	 0.0	    3,634.33 300.31ms	  0.41	   300.31ms   300.19ms	 300.43ms   170.55us
Idle	   DIAG idle wait				    26,963	73.8	    3,627.70 134.54ms	  0.41	   134.56ms   132.52ms	 136.60ms     2.88ms
Idle	   Data Guard: Timer					 4	 0.0	    2,400.00 600.00 s	  0.27	   600.00 s   600.00 s	 600.00 s    35.71us
Idle	   LGWR worker group idle			    23,372	 0.0	    2,136.67  91.42ms	  0.24	    92.42ms    81.95ms	 102.90ms    14.82ms
Idle	   VKRM Idle						 0	 N/A	    1,830.14		  0.21
Idle	   AQPC idle						61     100.0	    1,830.04  30.00 s	  0.21	    30.00 s    30.00 s	  30.00 s    38.91us
Idle	   ASM background timer 			     6,335	 0.0	    1,821.07 287.46ms	  0.21	   287.51ms   282.66ms	 292.35ms     6.85ms
Idle	   OFS idle					       607     100.0	    1,821.02 3000.04m	  0.21	  3000.04ms  3000.01ms	3000.06ms    31.52us
Idle	   pman timer					       607     100.0	    1,820.83 2999.72m	  0.21	  2999.72ms  2999.70ms	2999.75ms    32.68us
Idle	   Streams AQ: qmn coordinator idle wait	       133	 0.0	    1,820.06  13.68 s	  0.21	    13.69 s    13.59 s	  13.79 s   138.88ms
Idle	   Streams AQ: qmn slave idle wait			67	 0.0	    1,820.06  27.17 s	  0.21	    27.16 s    27.15 s	  27.18 s    17.61ms
Idle	   Streams AQ: waiting for time management		 0	 N/A	    1,820.02		  0.21
Idle	   lreg timer					       606     100.0	    1,819.63 3002.69m	  0.21	  3002.69ms  3002.65ms	3002.74ms    67.19us
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		31     100.0	    1,819.42  58.69 s	  0.21	    58.74 s    57.20 s	  60.28 s  2176.08ms
Idle	   heartbeat redo informer			     1,819	 0.0	    1,819.36 1000.20m	  0.21	  1000.20ms  1000.18ms	1000.21ms    24.70us
Idle	   ASM cluster membership changes		     1,038	86.7	    1,816.96 1750.44m	  0.21	  1750.44ms  1750.41ms	1750.47ms    41.43us
Idle	   SCM slave idle				    18,306	 0.0	    1,811.59  98.96ms	  0.21	    98.96ms    98.65ms	  99.27ms   434.48us
Idle	   PING 					     1,620	19.6	    1,810.87 1117.82m	  0.21	  1120.65ms  1067.35ms	1173.94ms    75.37ms
Idle	   shared server idle wait				 0	 N/A	    1,800.35		  0.21
Idle	   dispatcher timer					30     100.0	    1,800.18  60.01 s	  0.21	    60.01 s    60.01 s	  60.01 s   211.28us
Idle	   Data Guard: Gap Manager				30	 0.0	    1,800.01  60.00 s	  0.21	    60.00 s    60.00 s	  60.00 s    46.34us
Idle	   smon timer						 6     100.0	    1,800.00 300.00 s	  0.21	   300.00 s   300.00 s	 300.00 s   284.02us
Idle	   PX Deq: Parse Reply					70	 0.0		4.57  65.23ms	  0.00	    54.62ms	1.57ms	 107.67ms    75.02ms
Idle	   PX Deq: Execute Reply			       204	 0.0		2.09  10.26ms	  0.00	    17.34ms	7.58ms	  27.10ms    13.80ms
Idle	   PX Deq Credit: send blkd			       302	 0.0		0.61   2.03ms	  0.00	     2.00ms	1.77ms	   2.23ms   322.42us
Idle	   SQL*Net message from client			       516	 0.0		0.51	.98ms	  0.00	      .99ms   367.19us	   1.61ms   881.07us
Idle	   RMA: IPC0 completion sync			     1,971	 0.0		0.04  22.03us	  0.00	    22.04us    21.18us	  22.89us     1.21us
Idle	   heartbeat monitor sleep				33	 0.0		0.00  29.79us	  0.00	    20.94us	5.57us	  36.31us    21.73us
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	     18K					    0.1     87.8      7.4      3.1	1.0	 0.4	  0.2	   0.1	 0.0(1)
ASM IO for non-blocking p   170K			       0.0(61)	   71.4      9.7      3.0      4.6	7.8	 2.6	  0.6	   0.2	    0.1  0.0(29)   0.0(4)   0.0(1)
ASM file metadata operati   8277			  0.1	  26.7	    1.8     28.3     16.8      4.4	5.4	 4.3	  0.9	   1.5	    2.9      4.2      1.9      0.4	0.2	 0.1
AWR Flush		      10				  90.0			     10.0
CGS wait for IPC msg	   18.4K					    5.9     82.7      7.0      3.0	0.9	 0.3	  0.1	0.0(8)	 0.0(4)   0.0(1)
CSS initialization	       4					   25.0     25.0									     25.0     25.0
CSS operation: action	       6						    16.7					 33.3		   50.0
CSS operation: data query     56											 8.9	 30.4	  30.4	   19.6      8.9      1.8
CSS operation: data updat     63											 1.6	 65.1	  22.2	    9.5      1.6
CSS operation: query	      13				  76.9	    7.7 							   7.7		     7.7
DFS lock handle 	    1518						     0.1      0.1      0.1	0.3	39.1	 29.3	  18.8	    9.6      1.6      0.6      0.1			  0.2	   0.3	    0.1
DLM cross inst call compl   1873						     2.5      0.5      0.2	0.5	 1.5	 18.0	  29.5	   33.0     10.4      2.0      0.1		 0.7	  0.2	   0.3	    0.1      0.4
Disk file Mirror Read	    2446								       0.2     23.7	15.0	  9.9	  16.2	    4.0      6.5      8.2      7.3	4.0	 2.2	  2.1	   0.5	    0.2
Disk file operations I/O    1672				   0.5	   14.7     11.4     13.1      6.5     28.3	 9.8	  2.5	   7.1	    5.1      0.6      0.4			 0.1	  0.1
GCR CSS group query	      56					   80.4     14.3      3.6      1.8
GCR CSS group update	      56					   78.6     16.1      5.4
IMR slave acknowledgement   5432					   11.6     13.1      3.5     17.6     15.5	15.8	  5.2	   7.0	    1.6      1.5      2.2      2.4	1.4	 0.8	  0.6	   0.2	    0.1
IPC group service call	    1467				   2.5	    3.6     18.9     30.6     37.0	5.9	 1.0	  0.5	   0.1
IPC send completion sync    1980						    82.6      4.9      2.7	2.8	 1.9	  1.6	   1.4	    1.1      0.7      0.1						    0.2      0.1
KJC: Wait for msg sends t 183.1K					   23.2     26.1     13.4     15.1	8.4	 7.9	  3.8	   1.0	    0.4      0.1  0.0(58)  0.0(19)	      0.0(1)		   0.4	    0.1  0.0(13)
KSV master wait 	    3389					   10.8     22.1      5.5      8.6     18.9	 5.3	  1.0	   2.7	    7.3     11.5      5.1      0.8	0.2	 0.2
LGWR all worker groups	     502														    1.0      1.6      8.2     20.1     34.7	16.3	  9.2	   7.4	    1.4      0.2
LGWR any worker group	   13.3K					    0.1   0.0(2)      0.1      0.4	0.8	 1.5	  2.5	   5.5	   12.3     17.7     21.1     18.3     10.1	 2.5	  5.4	   1.3	    0.3   0.0(6)
LGWR wait for redo copy      251				   3.2	    3.6      0.4      4.0     12.0     15.5	16.3	 19.9	  12.7	   10.0      2.0      0.4
LGWR worker group orderin   7143				   0.8	    0.9      0.7      2.4      3.9	3.0	 2.4	  2.6	   5.6	   22.2     23.6     13.3      9.6	4.5	 1.2	  2.4	   0.7	    0.2   0.0(1)
PGA memory operation	    3322				  15.7	   32.6     21.9     11.8      7.9	6.6	 2.6	  0.6	   0.2	 0.0(1)
PX Deq: Join ACK	      70												 40.0	  12.9	   24.3     11.4      5.7      2.9			  1.4	   1.4
PX Deq: Signal ACK EXT	      70						    48.6     11.4      4.3     25.7	 4.3	  4.3											    1.4
PX Deq: Slave Session Sta    140					   15.0      6.4      4.3     13.6     15.7	14.3	 14.3	   7.1	    4.3      2.9      0.7						    1.4
PX Deq: reap credit	  122.7K					    1.4     88.2      6.7      2.4	0.8	 0.3	  0.1	   0.1	0.0(22)   0.0(4)   0.0(1)
SQL*Net break/reset to cl    182				  33.0	   16.5 	      0.5     33.0     12.6	 3.3	  1.1
SQL*Net message to client   1732			  0.1	  89.1	    7.3      1.1      1.6      0.5	0.1	 0.1	  0.1
Sync ASM rebalance	     216				   1.9	   39.8      1.9      0.9		2.8	 8.3	  9.3	   1.9			      6.9      1.4	6.9	15.3	  2.8
asynch descriptor resize     553				  76.3	   19.3      1.6      1.8      0.7	0.2
buffer busy waits	      46					   15.2     17.4     13.0     17.4     10.9	 8.7	  2.2							4.3	 4.3	  2.2		    4.3
buffer deadlock 	       3						   100.0
control file parallel wri    870														   10.0     42.9     11.8      8.0	7.8	 5.4	  9.2	   2.8	    1.8      0.2
control file sequential r  10.6K					    8.0     12.9      1.1      2.0     35.1	23.0	  8.6	   4.1	    2.3      1.4      1.0      0.4   0.0(2)   0.0(1)
cr request retry	      19																    100.0
cursor: pin S		       3													 100.0
db file async I/O submit  206.7K			  0.3	  94.3	    3.2      0.6      0.9      0.4	0.2  0.0(97)  0.0(36)  0.0(17)	 0.0(8)   0.0(2)
db file parallel read	  640.7K									    0.0(42)	 1.1	  3.9	   7.5	   12.1     40.2     11.9     11.4     10.3	 1.5	  0.2  0.0(28)	 0.0(2)
db file parallel write	  234.7K					0.0(17)      1.5      2.0      2.3	4.3	 7.1	 14.7	  13.7	   37.2     12.9      2.7      1.1	0.3	 0.2	  0.2  0.0(20)	 0.0(6)
db file scattered read	    2045								       0.1	2.9	11.8	 40.2	  23.1	   10.2      5.3      3.1      2.8	0.3	 0.1
db file sequential read     7.1M								  0.0(272)	2.0	30.2	 13.4	   6.9	   29.0     12.1      3.4      2.3	0.6 0.0(1938  0.0(39)	0.0(2)	 0.0(2)
direct path write	     143												  0.7		   12.6      7.0     21.0     23.8     11.9	11.9	  4.9	   6.3
direct path write temp	     140														   37.1     49.3      3.6      3.6	2.9	 1.4	  1.4	   0.7
enq: AF - task serializat      2													  50.0	   50.0
enq: CF - contention	     165											 1.8	 35.2	  18.8	   24.2     10.9      0.6      0.6	0.6	 0.6	  2.4	   2.4	    1.2      0.6
enq: CO - master slave de     15												 40.0	  26.7	   20.0      6.7      6.7
enq: DR - contention	       2													  50.0		    50.0
enq: DW - contention	      11												  9.1	  27.3	   18.2     36.4      9.1
enq: FB - contention	      22											27.3	 36.4	  13.6	   13.6      4.5					  4.5
enq: HW - contention	      12											25.0	 33.3	  25.0	   16.7
enq: MW - contention	       1																					100.0
enq: PS - contention	      94								       1.1		11.7	 40.4	  16.0	   14.9      9.6      3.2			 2.1	  1.1
enq: RO - fast object reu    233											18.9	 46.8	  11.2	   12.4      4.7      0.9			 0.4	  0.4	   0.9	    1.3      2.1
enq: SM -  contention	       9											11.1	 33.3	  11.1	   22.2     22.2
enq: TA - contention	       6												 33.3	  50.0		    16.7
enq: TD - KTF dump entrie      4											50.0					     25.0				 25.0
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
enq: TM - contention	     194											 1.0	 13.9	  23.2	   30.4     11.9      4.6      0.5	0.5	 1.0	  2.1	   6.7	    2.1      2.1
enq: TO - contention	      10												 10.0	  10.0	   80.0
enq: TT - contention	       6												 33.3	  33.3		    16.7     16.7
enq: TX - row lock conten     17																					 17.6	  29.4		    52.9
enq: WF - contention	      36											 5.6	 27.8	  22.2	   36.1 							   8.3
enq: WT - contention	      13												 15.4	  23.1	   46.2     15.4
free buffer waits	    1.9M					    0.6      0.3      0.1      0.1	0.2	 0.3	  0.4	   0.6	    1.1      2.1     94.1      0.1  0.0(22)  0.0(13)  0.0(25)  0.0(20)	0.0(13)   0.0(1)
gc buffer busy acquire	     104													   1.9	    1.9      3.8      3.8     12.5	8.7	14.4	 10.6	  12.5	   19.2     10.6
gc buffer busy release	      30										3.3					    10.0      6.7     16.7	6.7	16.7	 23.3	  10.0	    6.7
gc cr block 2-way	    5924							      0.1      0.2	0.9	26.7	 13.6	  23.1	   23.3      8.4      1.1      0.3	0.3	 0.3	  0.4	   0.2	    0.8      0.3
gc cr block busy	     314													   1.0	    1.3      4.1     14.0     18.5     14.3	10.5	 14.0	  15.0	    5.4      1.9
gc cr block congested	     233													   1.7	   34.8     38.6     14.6      5.6	0.9	 0.9		   0.4	    2.1      0.4
gc cr block lost	     509																						  21.2	   76.6      2.2
gc cr disk read 	      95										6.3	35.8	 13.7	  10.5	   13.7      5.3      3.2      1.1	2.1	 2.1	  2.1		    3.2      1.1
gc cr failure		     589										0.2	25.8	 18.3	  24.4	   20.0      8.1      1.9      0.8					    0.3
gc cr grant 2-way	    5679							      0.1      0.2	2.5	10.4	 12.6	  27.2	   30.4     11.9      2.4      0.4   0.0(2)		  0.1		    1.6      0.3
gc cr grant busy	  330.1K					 0.0(2)  0.0(11)   0.0(6)  0.0(11)  0.0(21)	 0.3	  2.7	   7.8	   16.4     17.8     12.4      8.5	7.6	11.1	  7.9	   3.3	    2.9      1.3
gc cr grant congested	     454													   1.8	   24.0     46.9     20.7      4.4	1.1				    1.1
gc cr multi block grant   181.4K								    0.0(1)   0.0(1)   0.0(9)	  0.2	   1.0	    4.1      9.4      9.3      8.7     10.7	17.7	 19.8	   8.9	    5.1      5.1
gc cr multi block mixed     2252											 0.2	  0.8	   4.1	   11.1     11.4      7.4      5.9	4.8	 7.5	  5.7	   6.6	   28.2      6.4
gc current block 2-way	    1618								       0.1	1.3	56.1	 14.0	   9.6	   12.6      4.1      0.7      0.3	0.2	 0.1	  0.3	   0.1	    0.5
gc current block busy	   11.8K							   0.0(4)      0.1	0.1	 4.6	 15.6	  29.4	   31.6     11.9      2.5      0.7	0.5	 0.5	  0.5	   0.3	    1.4      0.2
gc current block congeste    913												  0.1	   1.9	   33.6     43.0     15.4      4.2	0.5		  0.2	   0.2	    0.7      0.1
gc current block lost	    2707																						  26.3	   72.3      1.4
gc current grant 2-way	  337.1K							  0.0(39) 0.0(131) 0.0(109)	 0.5	  1.9	   5.4	   10.0     13.7     13.0     11.1	9.9	10.9	 11.6	   6.2	    3.9      1.9
gc current grant busy	    1.4M					 0.0(4)  0.0(62)  0.0(22)  0.0(69) 0.0(144)	 0.3	  3.7	  10.6	   20.7     19.7     12.9      9.0	7.2	 8.0	  4.4	   1.2	    1.7      0.7
gc current grant congeste  46.3K										      0.0(2)   0.0(1)	   0.1	    2.1      7.3     12.1     12.0     11.9	13.8	 16.8	  12.5	    7.6      3.7
gc current grant read-mos 356.9K						  0.0(3)		     0.0(8)  0.0(84)	  1.2	   5.7	   12.0     13.5     12.1     11.1     11.6	13.7	 11.2	   5.3	    2.2      0.3
gc current multi block re     28											 3.6	 53.6	   7.1	    7.1      3.6      3.6      3.6	7.1	 3.6	  3.6	   3.6
gcs log flush sync	    110K					    4.2      3.8     12.8     17.7     17.3	18.5	 14.2	   7.7	    2.9      0.7      0.2  0.0(49)
gcs resource directory to      1				 100.0
ges inquiry response	      81											 2.5	 61.7	  18.5	    8.6      7.4						   1.2
ges message buffer alloca     93					    7.5      2.2      1.1			 1.1		   1.1		     1.1						  86.0
ges resource directory to     25				  84.0	   12.0 	      4.0
kjctssqmg: quick message    2088					   10.1     21.3      3.6     12.0     12.3	18.6	 14.3	   5.4	    1.7      0.5      0.1   0.0(1)
ksxr poll remote instance   2659					 0.0(1)     83.3     11.3      3.4	1.4	 0.2	  0.2	   0.1	 0.0(1)
latch free		    5806					    8.9      1.8      2.7     14.5     28.3	23.6	 10.6	   5.4	    2.4      1.1      0.5      0.2
latch: MGA heap latch	      34					   20.6      2.9      8.8      8.8     29.4	17.6	  5.9	   5.9
latch: MGA shared context     79					   10.1      1.3      5.1     17.7     26.6	17.7	 11.4	  10.1
latch: MGA shared context    141					    5.7      2.8      0.7      8.5     14.9	19.9	 19.1	  19.9	    8.5
latch: active service lis      2								      50.0				  50.0
latch: cache buffers chai   1332					   12.0      2.3      3.5     11.3     16.5	16.0	 14.4	  11.3	    8.2      3.2      1.0      0.2		 0.1
latch: cache buffers lru    2393					   18.6      3.1      4.8     16.5     19.5	13.6	 10.9	   6.6	    4.3      1.8      0.5   0.0(1)
latch: call allocation	      25					   32.0      4.0	       8.0     24.0	20.0	 12.0
latch: checkpoint queue l     90					   12.2      1.1      5.6     23.3     16.7	18.9	 12.2	   7.8	    2.2
latch: enqueue hash chain     11							     18.2      9.1     18.2	 9.1	 36.4		    9.1
latch: gc element	    2191					    3.5      0.8      2.4      6.9     11.8	15.8	 21.2	  18.2	   11.9      6.1      1.2      0.1
latch: gcs resource hash    4299					   14.2      2.8      4.5     16.8     20.1	15.3	 11.7	   8.3	    4.2      1.7      0.4   0.0(1)
latch: ges resource hash     182					   14.8      6.6      3.8     12.6     19.8	18.1	  7.7	  11.0	    4.9      0.5
latch: kjci process conte      9					   11.1 		      11.1     22.2	11.1	 22.2	  22.2
latch: messages 	      39					   15.4      2.6     10.3     15.4     23.1	20.5	  7.7	   5.1
latch: object queue heade    397					    4.5      1.8      2.0      8.8     14.9	17.4	 18.9	  19.1	    9.1      2.5      1.0
latch: redo allocation	     616					   12.3      1.1      5.5     18.8     22.9	16.1	 10.1	   8.6	    2.6      1.5      0.5
latch: redo writing	      24					    8.3 		      29.2     12.5	 4.2		  12.5	   16.7      4.2     12.5
latch: shared pool	      15					    6.7 		      20.0     20.0	13.3	 20.0	  20.0
latch: undo global data       16					    6.3      6.3      6.3     31.3     12.5	 6.3	 25.0	   6.3
libcache interrupt action   7205			  0.5	  94.7	    2.0      0.7      1.2      0.5	0.3	 0.1	  0.1		 0.0(1)
library cache lock	     555								       0.2	0.2	 3.6	 21.3	  33.5	   26.8      9.7      1.1				  1.1	   1.4		     1.1
library cache pin	     503											 2.8	 23.3	  30.2	   31.0      9.9      0.8      0.4		 0.2	  1.0	   0.4
library cache: bucket mut      3					   66.7 	     33.3
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
library cache: mutex X	       9					   11.1     22.2     11.1     22.2		11.1					     22.2
lock deadlock retry	    2692					    5.0     72.7      8.1      7.0	3.8	 1.9	  0.8	   0.6	    0.1   0.0(1)
lock escalate retry	     749																    100.0
log buffer space	     114															     0.9      2.6     29.8	7.0	59.6
log file parallel write    31.5K														    0.7      4.0     32.4     29.3     23.1	 4.4	  4.0	   1.7	    0.3  0.0(15)
log file sequential read    1373						     1.5     27.2      2.9     14.4	 5.8	 12.8	   9.7	   16.4      4.8      2.5      1.6	0.5
log file sync		     347														    0.9      6.3     19.3     24.5     22.5	12.1	 13.3	   0.9	    0.3
name-service call wait	       8													  37.5	   37.5     25.0
oracle thread bootstrap       14																	      64.3     35.7
os thread creation	      14													  42.9	   57.1
read by other session	      92										2.2		  8.7	  10.9	   17.4     27.2     14.1      8.7     10.9
reliable message	     107												 14.0	  18.7	   36.4     17.8      8.4      1.9	0.9				    0.9      0.9
row cache lock		      97								       1.0			 21.6	  38.1	   19.6     13.4      3.1		1.0		  2.1
row cache mutex 	       5					   40.0 		      20.0		20.0					     20.0
undo_retention publish re      6				  83.3	   16.7
wait list latch free	       2													 100.0
write complete waits	     149																				 1.3	  0.7	   4.7	   16.1     77.2
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	  21,583,064   17,174,219    3,090,491	  2,289,108    5,805,666	1,934	   150,398	  6,269 	42	 22,232
   2	  24,645,118   22,345,229    3,802,315	  2,858,137    7,204,466	1,712	   189,562	  3,259 	41	 27,568
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  46,228,182   39,519,448    6,892,806	  5,147,245   13,010,132	3,646	   339,960	  9,528 	83	 49,800
 Avg	  23,114,091   19,759,724    3,446,403	  2,573,622    6,505,066	1,823	   169,980	  4,764 	42	 24,900
 Std	   2,165,199	3,656,456      503,336	    402,364	 989,101	  157	    27,693	  2,128 	 1	  3,773
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   23,565.90	 18,752.0      3,374.4	    2,499.4	 6,339.0	  2.1	     164.2	    6.8       0.05	   24.3
   2	   26,890.47	 24,381.0      4,148.7	    3,118.5	 7,860.8	  1.9	     206.8	    3.6       0.04	   30.1
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	   50,456.37	 43,133.1      7,523.1	    5,617.9	14,199.9	  4.0	     371.0	   10.4       0.09	   54.4
 Avg	   25,228.19	 21,566.5      3,761.6	    2,809.0	 7,099.9	  2.0	     185.5	    5.2       0.05	   27.2
 Std	    2,350.83	  3,980.3	 547.5	      437.8	 1,076.1	  0.2	      30.1	    2.3       0.00	    4.1
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	      970.81	    772.5	 139.0	      103.0	   261.1	  0.1	       6.8	    0.3       0.00
   2	      893.98	    810.5	 137.9	      103.7	   261.3	  0.1	       6.9	    0.1       0.00
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	      932.39	    791.5	 138.5	      103.3	   261.2	  0.1	       6.8	    0.2       0.00
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     6,752	 9,433	      11,557	  21,362	  N/A	       0       18,665,924	  10,886     16,655,505       6,207    1,032,961   6,420,290	 1,171	       23
   2	    10,046	16,276	       6,597	   9,840	  N/A	       0       16,330,595	   6,134     18,336,176      10,375    1,152,441   8,259,340	 8,085	      566
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	    16,798	25,709	      18,154	  31,202	    0	       0       34,996,519	  17,020     34,991,681      16,582    2,185,402  14,679,630	 9,256	      589
 Avg	     8,399	12,855	       9,077	  15,601	  N/A	       0       17,498,260	   8,510     17,495,841       8,291    1,092,701   7,339,815	 4,628	      295
 Std	     2,329	 4,839	       3,507	   8,147	  N/A	       0	1,651,327	   3,360      1,188,414       2,947	  84,485   1,300,405	 4,889	      384
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 66-

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      7.37	 10.30	       12.62	   23.32	  N/A	    0.00	20,380.76	   11.89      18,185.65        6.78	 1,127.9    7,010.12	     1		0
   2	     10.96	 17.76		7.20	   10.74	  N/A	    0.00	17,818.43	    6.69      20,006.74       11.32	 1,257.4    9,011.83	     9		1
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     18.33	 28.06	       19.82	   34.06	 0.00	    0.00	38,199.20	   18.58      38,192.38       18.10	 2,385.3   16,021.95	    10		1
 Avg	      9.17	 14.03		9.91	   17.03	  N/A	    0.00	19,099.60	    9.29      19,096.19        9.05	 1,192.6    8,010.97	     5		0
 Std	      2.54	  5.27		3.83	    8.90	  N/A	    0.00	 1,811.84	    3.67       1,287.71        3.21	    91.6    1,415.42	     5		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 66-6

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.30	  0.42		0.52	    0.96	  N/A	    0.00	   839.60	    0.49	 749.17        0.28	    46.5      288.79	  0.1	     0.0
   2	      0.36	  0.59		0.24	    0.36	  N/A	    0.00	   592.38	    0.22	 665.13        0.38	    41.8      299.60	  0.3	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.33	  0.51		0.38	    0.66	  N/A	    0.00	   715.99	    0.36	 707.15        0.33	    44.1      294.19	  0.2	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	     20.35     0.07    79.58	     74.78
   2	      9.22     0.11    90.67	     73.08
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	  1191	     96190	  57	277528	     3.7       39966	155455	  156207       0.5
   2	  2063	     41340	  76	102991	     1.2       14612	562143	  122353       0.5
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	   6028    68351       47	  19	   28	    13.5     84.2      2.2
   2	   1582    38226      108	  26	   52	    12.0     86.1      1.9
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	    16,887	 5,149	    16,888	 63    4,879	    20,768	 0	  590	   33	  644	     7,899	8,616	       793     16,503	 0
   2	     9,422	   515	     9,422	 19	 341	     9,663	 5	  177	   64	    3	     4,480	3,618	       117	9,399	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	    26,309	 5,664	    26,310	 82    5,220	    30,431	 5	  767	   97	  647	    12,379     12,234	       910     25,902	 0
 Avg	    13,155	 2,832	    13,155	 41    2,610	    15,216	 3	  384	   49	  324	     6,190	6,117	       455     12,951	 0
 Std	     5,279	 3,277	     5,279	 31    3,209	     7,852	 4	  292	   22	  453	     2,418	3,534	       478	5,023	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	      10     0.00    80.00     0.00	0.00	20.00	  0.00		58     0.00	0.00	24.14	 43.10	  31.03     1.72
   2	      14     0.00    21.43     7.14	0.00	64.29	  7.14		34     0.00	0.00	23.53	 35.29	  41.18     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	      24								92
 Avg	      12								46
 Std	       3								17
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		 8,970	 93.3	 0.9	5.8	    6,427    8.4   81.9    9.7	  96685  97063	92191  91293	39468  69358  38729  19693
	2   undo header 	   357	 78.4	10.9   10.6	       58    0.0   94.8    5.2	  99375  97440 2.E+05  21034	60137	 N/A  63126   5349
	2   others		    97	 87.6	 0.0   12.4	      217   13.4   75.6   11.1	  33825  13806	  N/A 2.E+05	59919  38128  71624   6270
	2   undo block		    18	 88.9	 5.6	5.6		0    N/A    N/A    N/A	  74554  73267 2.E+05	6744	  N/A	 N/A	N/A    N/A

   2	1   data block		11,428	 93.3	 2.7	4.0	    8,668   25.4   70.8    3.8	  49776  42208 3.E+05  59868	15971  35413   9060  15019
	1   undo header 	 4,520	 93.4	 4.4	2.2	       69    1.4   95.7    2.9	  17877  10106 2.E+05  12992	62595	 971  65252   5742
	1   others		   160	 99.4	 0.0	0.6	    1,281   88.8   11.0    0.2	   3223   3215	  N/A	4418	 3372	 535  26167   7473
	1   undo block		    55	 85.5	12.7	1.8		0    N/A    N/A    N/A	  28744  18302 1.E+05	4062	  N/A	 N/A	N/A    N/A
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	  8,370   100.0      0.0	   541	 100.0	    0.0     97063   97063     N/A     69358   69358	N/A
	2   undo header 	 0    N/A	    280   100.0      0.0	     0	   N/A	    N/A     97440   97440     N/A	N/A	N/A	N/A
	2   others		 0    N/A	     85   100.0      0.0	    29	 100.0	    0.0     13806   13806     N/A     38128   38128	N/A
	2   undo block		 0    N/A	     16   100.0      0.0	     0	   N/A	    N/A     73267   73267     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	 10,668   100.0      0.0	 2,199	 100.0	    0.0     42208   42208     N/A     35413   35413	N/A
	1   undo header 	 0    N/A	  4,222   100.0      0.0	     1	 100.0	    0.0     10106   10106     N/A	971	971	N/A
	1   others		 0    N/A	    159   100.0      0.0	 1,137	 100.0	    0.0      3215    3215     N/A	535	535	N/A
	1   undo block		 0    N/A	     47   100.0      0.0	     0	   N/A	    N/A     18302   18302     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.22.248  N
   2 fg-priv:1	  169.254.31.173  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      82      616    0.4	   90	   645	  0.5
	  2	      82    75284  463.7	   90	236111	806.1

   2	  1	      81     7190   47.9	   89	 16441	 77.2
	  2	      81      552    0.8	   89	   539	  0.8
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  4,119.5      159.0	    3.1    3,917.1	  1.5	    38.8      4,825.9	    76.4	3.8    4,699.8	      1.5	44.3
   2	  4,737.8	78.1	    3.8    4,611.3	  1.5	    43.1      4,011.2	   123.0	3.1    3,845.3	      1.5	38.2
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	  8,857.3      237.1	    6.9    8,528.3	  3.0	    81.9      8,837.0	   199.5	6.9    8,545.2	      3.0	82.5
 Avg	  4,428.6      118.5	    3.5    4,264.2	  1.5	    41.0      4,418.5	    99.7	3.5    4,272.6	      1.5	41.2
 Std	    437.2	57.1	    0.4      490.9	  0.0	     3.0	576.1	    33.0	0.4	 604.2	      0.0	 4.3
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 66-

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      4.5	 0.2	    0.0        4.3	  0.0	     0.0	  5.3	     0.1	0.0	   5.1	      0.0	 0.0
   2	      5.2	 0.1	    0.0        5.0	  0.0	     0.0	  4.4	     0.1	0.0	   4.2	      0.0	 0.0
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	      9.7	 0.3	    0.0        9.3	  0.0	     0.1	  9.6	     0.2	0.0	   9.3	      0.0	 0.1
 Avg	      4.8	 0.1	    0.0        4.7	  0.0	     0.0	  4.8	     0.1	0.0	   4.7	      0.0	 0.0
 Std	      0.5	 0.1	    0.0        0.5	  0.0	     0.0	  0.6	     0.0	0.0	   0.7	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	 35,072.3   16,390,203	     0	     0	     0	     0	      43,432.8	 15,685,240	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  6,073.1    7,079,655	     0	     0	     0	     0	       6,548.8	  9,202,809	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      4.6	11,062	     0	     0	     0	     0		   2.1	      9,526	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      3.7	 5,200	     0	     0	     0	     0		   2.3	      5,261	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    101.9    1,841,966	     0	     0	     0	     0		 101.9	  1,841,966	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	 43,666.7   16,357,277	     0	     0	     0	     0	      34,828.4	 15,650,397	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  6,495.3    6,404,240	     0	     0	     0	     0	       6,119.3	  9,502,876	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      2.1	 9,525	     0	     0	     0	     0		   4.6	     11,107	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      3.7	 5,245	     0	     0	     0	     0		   2.3	      5,263	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    146.4    2,182,775	     0	     0	     0	     0		 146.4	  2,182,775	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 91,569.8   50,287,148	     0	     0	     0	     0	      91,188.8	 54,097,220	  0	  0	  0	  0
 Avg							  5,386.5    2,958,068	     0	     0	     0	     0	       5,364.0	  3,182,189	  0	  0	  0	  0
 Std							 13,044.9    5,515,546	     0	     0	     0	     0	      12,967.9	  5,601,161	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 66-
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	     38.3	17,896	     0	     0	     0	     0		  47.4	     17,126	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	      6.6	 7,730	     0	     0	     0	     0		   7.2	     10,048	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	    12	     0	     0	     0	     0		   0.0		 10	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  6	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.1	 2,011	     0	     0	     0	     0		   0.1	      2,011	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	     47.6	17,848	     0	     0	     0	     0		  38.0	     17,076	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	      7.1	 6,988	     0	     0	     0	     0		   6.7	     10,369	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	    10	     0	     0	     0	     0		   0.0		 12	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  6	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 2,382	     0	     0	     0	     0		   0.2	      2,382	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							     99.9	54,888	     0	     0	     0	     0		  99.5	     59,046	  0	  0	  0	  0
 Avg							      5.9	 3,229	     0	     0	     0	     0		   5.9	      3,473	  0	  0	  0	  0
 Std							     14.2	 6,020	     0	     0	     0	     0		  14.2	      6,114	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	      47	   47		  43	       31	    43
   2	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	      40	   40		  43	       31	    43
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	      44	   44		  43	       31	    43
 Max				      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	      47	   47		  43	       31	    43
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Captured SQL account for   96.1% of Total DB Time (s):	  287,076
-> Captured PL/SQL account for	 63.5% of Total DB Time (s):	     287,076

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	   176,962.46	 2,550.09   17,179.04	   6,611,025	5,621,026    5,904,738	152,887.92	 46,494 	   3.81        0.05	   0.37 	 142.2	      120.9	   127.0	3.29	   61.6     44.4      0.6     14.3     14.2	64.4	 13.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	    98,574.93	 2,811.39   11,990.71	  34,634,294   32,194,683      265,512	 73,169.34	265,424 	   0.37        0.01	   0.05 	 130.5	      121.3	     1.0	0.28	   34.3     48.9      0.4     74.9     81.5	30.8	 78.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

dbv58zsfpkbvq	     2,189.06	    17.62      150.63	     105,437	  100,784	     4	  1,789.51	      4 	 547.26        4.41	  37.66       26,359.3	   25,196.0	     1.0      447.38	    0.8      0.3      0.0      0.2	0.3	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

7h2sq3cqbq9vx	     2,188.02	    17.16      132.53	     102,387	   98,077	     4	  1,803.54	      4 	 547.01        4.29	  33.13       25,596.8	   24,519.3	     1.0      450.89	    0.8      0.3      0.0      0.2	0.2	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

fhwqa2yvncr24	     2,188.02	    15.33      135.18	      86,754	   82,706	     4	  1,916.14	      4 	 547.00        3.83	  33.79       21,688.5	   20,676.5	     1.0      479.03	    0.8      0.3      0.0      0.2	0.2	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

0sj52dccuywgx	     2,187.96	    17.43      142.33	     102,208	   97,866	     4	  1,813.62	      4 	 546.99        4.36	  35.58       25,552.0	   24,466.5	     1.0      453.40	    0.8      0.3      0.0      0.2	0.2	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

31f7zbqd24a7y	     2,187.83	    25.49      166.82	     115,601	  111,171	     4	  1,913.44	      4 	 546.96        6.37	  41.71       28,900.3	   27,792.8	     1.0      478.36	    0.8      0.4      0.0      0.3	0.3	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '113'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

2btqdckmw7ph2	     2,187.10	    17.03      138.71	     101,255	   96,900	     4	  1,872.33	      4 	 546.78        4.26	  34.68       25,313.8	   24,225.0	     1.0      468.08	    0.8      0.3      0.0      0.2	0.2	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

8kj5gxr8qkjq2	     2,187.05	    24.97      167.82	     110,203	  105,944	     4	  1,903.82	      4 	 546.76        6.24	  41.96       27,550.8	   26,486.0	     1.0      475.96	    0.8      0.4      0.0      0.2	0.3	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '117'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

1sbxgvwvwp2bt	     2,186.87	    26.40      168.07	     120,354	  115,783	     4	  1,899.95	      4 	 546.72        6.60	  42.02       30,088.5	   28,945.8	     1.0      474.99	    0.8      0.5      0.0      0.3	0.3	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '115'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Captured SQL account for   93.8% of Total CPU Time (s):	     5,748
-> Captured PL/SQL account for	 75.1% of Total CPU Time (s):		5,748

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   2,811.39	98,574.93   11,990.71	  34,634,294   32,194,683      265,512	 73,169.34	265,424 	 0.01	       0.37	   0.05 	 130.5	      121.3	     1.0	0.28	   48.9     34.3     38.5     74.9     81.5	30.8	 78.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   2,550.09    176,962.46   17,179.04	   6,611,025	5,621,026    5,904,738	152,887.92	 46,494 	 0.05	       3.81	   0.37 	 142.2	      120.9	   127.0	3.29	   44.4     61.6     55.2     14.3     14.2	64.4	 13.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

dnhxxnnyzpq8g	     273.49	 1,591.78      817.64	   3,505,669	2,831,723	     3	    397.69	      3 	91.16	     530.59	 272.55    1,168,556.3	  943,907.7	     1.0      132.56	    4.8      0.6      2.6      7.6	7.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

dyyddzrz52ydb	     185.58	 1,590.40      846.02	   2,027,314	1,806,386	     3	    462.75	      3 	61.86	     530.13	 282.01      675,771.3	  602,128.7	     1.0      154.25	    3.2      0.6      2.7      4.4	4.6	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

5hg6sgckh1tnx	     184.07	 1,591.08      793.97	   2,014,757	1,796,019	     3	    497.87	      3 	61.36	     530.36	 264.66      671,585.7	  598,673.0	     1.0      165.96	    3.2      0.6      2.6      4.4	4.5	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

7601qqtdhust2	     179.98	 1,591.27      863.11	   1,951,007	1,739,632	     3	    453.60	      3 	59.99	     530.42	 287.70      650,335.7	  579,877.3	     1.0      151.20	    3.1      0.6      2.8      4.2	4.4	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

9xv3wfaqtjswf	     139.77	 2,181.41      923.68	   1,940,736	1,681,470	     4	    289.31	      4 	34.94	     545.35	 230.92      485,184.0	  420,367.5	     1.0       72.33	    2.4      0.8      3.0      4.2	4.3	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '122'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

cmt7ct5kk8chb	     127.87	 1,061.79      449.86	   1,385,986	1,261,388	     2	    409.82	      2 	63.93	     530.89	 224.93      692,993.0	  630,694.0	     1.0      204.91	    2.2      0.4      1.4      3.0	3.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

8cbqpnkxnw661	     126.36	 2,180.87      873.51	   1,678,715	1,487,110	     4	    380.50	      4 	31.59	     545.22	 218.38      419,678.8	  371,777.5	     1.0       95.13	    2.2      0.8      2.8      3.6	3.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '120'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

3xy3zh57sf5by	     124.34	 2,181.03      872.78	   1,641,256	1,456,349	     4	    372.31	      4 	31.09	     545.26	 218.19      410,314.0	  364,087.3	     1.0       93.08	    2.2      0.8      2.8      3.6	3.7	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Captured SQL account for   93.8% of Total User I/O Wait Time (s):	      31,122
-> Captured PL/SQL account for	 72.4% of Total User I/O Wait Time (s): 	 31,122

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	  17,179.04    176,962.46    2,550.09	   6,611,025	5,621,026    5,904,738	152,887.92	 46,494 	 0.37	       3.81	   0.05 	 142.2	      120.9	   127.0	3.29	   55.2     61.6     44.4     14.3     14.2	64.4	 13.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	  11,990.71	98,574.93    2,811.39	  34,634,294   32,194,683      265,512	 73,169.34	265,424 	 0.05	       0.37	   0.01 	 130.5	      121.3	     1.0	0.28	   38.5     34.3     48.9     74.9     81.5	30.8	 78.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

9xv3wfaqtjswf	     923.68	 2,181.41      139.77	   1,940,736	1,681,470	     4	    289.31	      4        230.92	     545.35	  34.94      485,184.0	  420,367.5	     1.0       72.33	    3.0      0.8      2.4      4.2	4.3	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '122'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

8cbqpnkxnw661	     873.51	 2,180.87      126.36	   1,678,715	1,487,110	     4	    380.50	      4        218.38	     545.22	  31.59      419,678.8	  371,777.5	     1.0       95.13	    2.8      0.8      2.2      3.6	3.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '120'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

3xy3zh57sf5by	     872.78	 2,181.03      124.34	   1,641,256	1,456,349	     4	    372.31	      4        218.19	     545.26	  31.09      410,314.0	  364,087.3	     1.0       93.08	    2.8      0.8      2.2      3.6	3.7	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

7601qqtdhust2	     863.11	 1,591.27      179.98	   1,951,007	1,739,632	     3	    453.60	      3        287.70	     530.42	  59.99      650,335.7	  579,877.3	     1.0      151.20	    2.8      0.6      3.1      4.2	4.4	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

dyyddzrz52ydb	     846.02	 1,590.40      185.58	   2,027,314	1,806,386	     3	    462.75	      3        282.01	     530.13	  61.86      675,771.3	  602,128.7	     1.0      154.25	    2.7      0.6      3.2      4.4	4.6	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

dnhxxnnyzpq8g	     817.64	 1,591.78      273.49	   3,505,669	2,831,723	     3	    397.69	      3        272.55	     530.59	  91.16    1,168,556.3	  943,907.7	     1.0      132.56	    2.6      0.6      4.8      7.6	7.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

5hg6sgckh1tnx	     793.97	 1,591.08      184.07	   2,014,757	1,796,019	     3	    497.87	      3        264.66	     530.36	  61.36      671,585.7	  598,673.0	     1.0      165.96	    2.6      0.6      3.2      4.4	4.5	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

cmt7ct5kk8chb	     449.86	 1,061.79      127.87	   1,385,986	1,261,388	     2	    409.82	      2        224.93	     530.89	  63.93      692,993.0	  630,694.0	     1.0      204.91	    1.4      0.4      2.2      3.0	3.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Total Buffer Gets:	   46,228,182
-> Captured SQL account for   95.5% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    34,634,294	 32,194,683	98,574.93    2,811.39	11,990.71      265,512	 73,169.34	265,424 	   130.5	121.3	       0.37	   0.01        0.05	     1.0	0.28	   74.9     81.5     34.3     48.9     38.5	30.8	 78.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     6,611,025	  5,621,026    176,962.46    2,550.09	17,179.04    5,904,738	152,887.92	 46,494 	   142.2	120.9	       3.81	   0.05        0.37	   127.0	3.29	   14.3     14.2     61.6     44.4     55.2	64.4	 13.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

dnhxxnnyzpq8g	     3,505,669	  2,831,723	 1,591.78      273.49	   817.64	     3	    397.69	      3      1,168,556.3    943,907.7	     530.59	  91.16      272.55	     1.0      132.56	    7.6      7.2      0.6      4.8	2.6	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

3kqrku32p6sfn	     2,791,117		  8	     6.46	 6.22	     0.03	     0	      0.11	      1      2,791,117.0	  8.0	       6.46	   6.22        0.03	     0.0	0.11	    6.0      0.0      0.0      0.1	0.0	 0.0	  0.0
MERGE /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ INTO OPTSTAT_USER_
PREFS$ D USING ( SELECT * FROM (SELECT O.OBJ#, SYSTIMESTAMP CHGTIME, ROUND(MAX(S
.DELTA_READ_IO_BYTES/S.DELTA_TIME), 3) SCANRATE FROM GV$ACTIVE_SESSION_HISTORY S
, GV$SQL_PLAN P, OBJ$ O, USER$ U WHERE S.INST_ID = P.INST_ID AND S.SQL_ID = P.SQ

dyyddzrz52ydb	     2,027,314	  1,806,386	 1,590.40      185.58	   846.02	     3	    462.75	      3        675,771.3    602,128.7	     530.13	  61.86      282.01	     1.0      154.25	    4.4      4.6      0.6      3.2	2.7	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

5hg6sgckh1tnx	     2,014,757	  1,796,019	 1,591.08      184.07	   793.97	     3	    497.87	      3        671,585.7    598,673.0	     530.36	  61.36      264.66	     1.0      165.96	    4.4      4.5      0.6      3.2	2.6	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

7601qqtdhust2	     1,951,007	  1,739,632	 1,591.27      179.98	   863.11	     3	    453.60	      3        650,335.7    579,877.3	     530.42	  59.99      287.70	     1.0      151.20	    4.2      4.4      0.6      3.1	2.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

9xv3wfaqtjswf	     1,940,736	  1,681,470	 2,181.41      139.77	   923.68	     4	    289.31	      4        485,184.0    420,367.5	     545.35	  34.94      230.92	     1.0       72.33	    4.2      4.3      0.8      2.4	3.0	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '122'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

8cbqpnkxnw661	     1,678,715	  1,487,110	 2,180.87      126.36	   873.51	     4	    380.50	      4        419,678.8    371,777.5	     545.22	  31.59      218.38	     1.0       95.13	    3.6      3.8      0.8      2.2	2.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '120'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

3xy3zh57sf5by	     1,641,256	  1,456,349	 2,181.03      124.34	   872.78	     4	    372.31	      4        410,314.0    364,087.3	     545.26	  31.09      218.19	     1.0       93.08	    3.6      3.7      0.8      2.2	2.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Total Disk Reads:	  39,519,448
-> Captured SQL account for   95.7% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  32,194,683	 34,634,294	98,574.93    2,811.39	11,990.71      265,512	 73,169.34	265,424 	 121.3		130.5	       0.37	   0.01        0.05	     1.0	0.28	   81.5     74.9     34.3     48.9     38.5	30.8	 78.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   5,621,026	  6,611,025    176,962.46    2,550.09	17,179.04    5,904,738	152,887.92	 46,494 	 120.9		142.2	       3.81	   0.05        0.37	   127.0	3.29	   14.2     14.3     61.6     44.4     55.2	64.4	 13.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

dnhxxnnyzpq8g	   2,831,723	  3,505,669	 1,591.78      273.49	   817.64	     3	    397.69	      3      943,907.7	  1,168,556.3	     530.59	  91.16      272.55	     1.0      132.56	    7.2      7.6      0.6      4.8	2.6	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

dyyddzrz52ydb	   1,806,386	  2,027,314	 1,590.40      185.58	   846.02	     3	    462.75	      3      602,128.7	    675,771.3	     530.13	  61.86      282.01	     1.0      154.25	    4.6      4.4      0.6      3.2	2.7	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

5hg6sgckh1tnx	   1,796,019	  2,014,757	 1,591.08      184.07	   793.97	     3	    497.87	      3      598,673.0	    671,585.7	     530.36	  61.36      264.66	     1.0      165.96	    4.5      4.4      0.6      3.2	2.6	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

7601qqtdhust2	   1,739,632	  1,951,007	 1,591.27      179.98	   863.11	     3	    453.60	      3      579,877.3	    650,335.7	     530.42	  59.99      287.70	     1.0      151.20	    4.4      4.2      0.6      3.1	2.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

9xv3wfaqtjswf	   1,681,470	  1,940,736	 2,181.41      139.77	   923.68	     4	    289.31	      4      420,367.5	    485,184.0	     545.35	  34.94      230.92	     1.0       72.33	    4.3      4.2      0.8      2.4	3.0	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '122'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

8cbqpnkxnw661	   1,487,110	  1,678,715	 2,180.87      126.36	   873.51	     4	    380.50	      4      371,777.5	    419,678.8	     545.22	  31.59      218.38	     1.0       95.13	    3.8      3.6      0.8      2.2	2.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '120'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

3xy3zh57sf5by	   1,456,349	  1,641,256	 2,181.03      124.34	   872.78	     4	    372.31	      4      364,087.3	    410,314.0	     545.26	  31.09      218.19	     1.0       93.08	    3.7      3.6      0.8      2.2	2.8	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

7fr7cwdnxufu3	   1,401,821	  1,567,972	 2,181.88      121.19	   851.06	     4	    407.07	      4      350,455.3	    391,993.0	     545.47	  30.30      212.76	     1.0      101.77	    3.5      3.4      0.8      2.1	2.7	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P60SDB/p60sdb1  Snap
-> Total Physical Read Requests:      39,449,745
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	 39,449,745
-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
dnhxxnnyzpq8g	   2,831,723	2,831,723    2,831,723	    1,591.78	  273.49      817.64		3      397.69		 3	943,907.7    943,907.7	  943,907.7	   530.59	91.16	   272.55	   1.0	    132.56	     7.2      7.2    7.2     0.6    4.8     2.6     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

dyyddzrz52ydb	   1,806,386	1,806,386    1,806,386	    1,590.40	  185.58      846.02		3      462.75		 3	602,128.7    602,128.7	  602,128.7	   530.13	61.86	   282.01	   1.0	    154.25	     4.6      4.6    4.6     0.6    3.2     2.7     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

5hg6sgckh1tnx	   1,796,019	1,796,019    1,796,019	    1,591.08	  184.07      793.97		3      497.87		 3	598,673.0    598,673.0	  598,673.0	   530.36	61.36	   264.66	   1.0	    165.96	     4.6      4.6    4.5     0.6    3.2     2.6     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

7601qqtdhust2	   1,739,632	1,739,632    1,739,632	    1,591.27	  179.98      863.11		3      453.60		 3	579,877.3    579,877.3	  579,877.3	   530.42	59.99	   287.70	   1.0	    151.20	     4.4      4.4    4.4     0.6    3.1     2.8     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

9xv3wfaqtjswf	   1,681,470	1,681,470    1,681,470	    2,181.41	  139.77      923.68		4      289.31		 4	420,367.5    420,367.5	  420,367.5	   545.35	34.94	   230.92	   1.0	     72.33	     4.3      4.3    4.3     0.8    2.4     3.0     0.1    0.0
DECLARE v_default_schema_number PLS_INTEGER := '122'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

8cbqpnkxnw661	   1,487,110	1,487,110    1,487,110	    2,180.87	  126.36      873.51		4      380.50		 4	371,777.5    371,777.5	  371,777.5	   545.22	31.59	   218.38	   1.0	     95.13	     3.8      3.8    3.8     0.8    2.2     2.8     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '120'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

3xy3zh57sf5by	   1,455,782	1,455,782    1,456,349	    2,181.03	  124.34      872.78		4      372.31		 4	363,945.5    363,945.5	  364,087.3	   545.26	31.09	   218.19	   1.0	     93.08	     3.7      3.7    3.7     0.8    2.2     2.8     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

7fr7cwdnxufu3	   1,401,821	1,401,821    1,401,821	    2,181.88	  121.19      851.06		4      407.07		 4	350,455.3    350,455.3	  350,455.3	   545.47	30.30	   212.76	   1.0	    101.77	     3.6      3.6    3.5     0.8    2.1     2.7     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

cmt7ct5kk8chb	   1,261,388	1,261,388    1,261,388	    1,061.79	  127.87      449.86		2      409.82		 2	630,694.0    630,694.0	  630,694.0	   530.89	63.93	   224.93	   1.0	    204.91	     3.2      3.2    3.2     0.4    2.2     1.4     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

66j7nhxd85syt	   1,245,459	1,245,459    1,245,459	    2,181.84	  109.61      812.42		4      489.94		 4	311,364.8    311,364.8	  311,364.8	   545.46	27.40	   203.11	   1.0	    122.48	     3.2      3.2    3.2     0.8    1.9     2.6     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Total Executions:	     339,960
-> Captured SQL account for   94.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	     265,424	 98,574.93    2,811.39	 11,990.71     34,634,294   32,194,683	    265,512   73,169.34 	   0.37        0.01	   0.05 	 130.5	      121.3	     1.0	0.28	   78.1     34.3     48.9     38.5     74.9	81.5	 30.8
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	      46,494	176,962.46    2,550.09	 17,179.04	6,611,025    5,621,026	  5,904,738  152,887.92 	   3.81        0.05	   0.37 	 142.2	      120.9	   127.0	3.29	   13.7     61.6     44.4     55.2     14.3	14.2	 64.4
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

24djtk7r8fz33	       2,253	      0.51	  0.19	      0.00	    6,790	     0	      2,198	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.7      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

87gaftwrm2h68	       1,523	      0.06	  0.06	      0.00	    3,109	     0		 63	   0.00 	   0.00        0.00	   0.00 	   2.0		0.0	     0.0	0.00	    0.4      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

f3ww8rgva3hrs		 596	     10.90	  0.15	      0.11	    2,100	    50		596	   8.15 	   0.02        0.00	   0.00 	   3.5		0.1	     1.0	0.01	    0.2      0.0      0.0      0.0	0.0	 0.0	  0.0
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

9babjv8yq8ru3		 512	      0.30	  0.25	      0.00		0	     0		512	   0.00 	   0.00        0.00	   0.00 	   0.0		0.0	     1.0	0.00	    0.2      0.0      0.0      0.0	0.0	 0.0	  0.0
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

3dbzmtf9ahvzt		 429	      6.93	  0.20	      0.01	    2,604	     3		429	   6.55 	   0.02        0.00	   0.00 	   6.1		0.0	     1.0	0.02	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

fn5s5p6hr6702		 282	      1.88	  0.07	      0.02	    1,882	    22		282	   1.67 	   0.01        0.00	   0.00 	   6.7		0.1	     1.0	0.01	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

f80h0xb1qvbsk		 244	      1.13	  0.08	      0.00	      107	     1		244	   0.62 	   0.00        0.00	   0.00 	   0.4		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

0gx3b09qrx9f5		 219	      0.02	  0.02	      0.00	      442	     1		  4	   0.00 	   0.00        0.00	   0.00 	   2.0		0.0	     0.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,index# from oid$ where user#=:1 and oid$=:2

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Total Cluster Wait Time (s): 	237,444
-> Captured SQL account for   95.2% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	 152,887.92    176,962.46    2,550.09	17,179.04      6,611,025    5,621,026	 5,904,738	 46,494 	 3.29	       3.81	   0.05        0.37	     142.2	  120.9        127.0	   64.4     61.6     44.4     55.2     14.3	14.2	 13.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	  73,169.34	98,574.93    2,811.39	11,990.71     34,634,294   32,194,683	   265,512	265,424 	 0.28	       0.37	   0.01        0.05	     130.5	  121.3 	 1.0	   30.8     34.3     48.9     38.5     74.9	81.5	 78.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

868wdptu2wdsf	   1,956.90	 2,128.09	37.53	   115.21	 146,690      141,895		 4	      4        489.22	     532.02	   9.38       28.80	  36,672.5     35,473.8 	 1.0	    0.8      0.7      0.7      0.4	0.3	 0.4	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

59c9hcdmc2sp8	   1,956.18	 2,125.19	37.83	   114.64	 148,971      143,696		 4	      4        489.05	     531.30	   9.46       28.66	  37,242.8     35,924.0 	 1.0	    0.8      0.7      0.7      0.4	0.3	 0.4	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

6a32815hkfxqf	   1,954.93	 2,132.49	20.91	   129.64	 105,527       99,829		 4	      4        488.73	     533.12	   5.23       32.41	  26,381.8     24,957.3 	 1.0	    0.8      0.7      0.4      0.4	0.2	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

9jnaa1bq11a61	   1,952.60	 2,127.44	38.94	   116.74	 151,715      146,184		 4	      4        488.15	     531.86	   9.73       29.18	  37,928.8     36,546.0 	 1.0	    0.8      0.7      0.7      0.4	0.3	 0.4	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

05dgz376x2uah	   1,951.44	 2,124.65	38.18	   118.32	 149,081      143,915		 4	      4        487.86	     531.16	   9.55       29.58	  37,270.3     35,978.8 	 1.0	    0.8      0.7      0.7      0.4	0.3	 0.4	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

279tufy9n4jkw	   1,949.83	 2,130.78	21.35	   126.43	 107,062      101,664		 4	      4        487.46	     532.70	   5.34       31.61	  26,765.5     25,416.0 	 1.0	    0.8      0.7      0.4      0.4	0.2	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

gx2wbjnsndywg	   1,948.85	 2,126.51	38.16	   115.52	 149,586      144,280		 4	      4        487.21	     531.63	   9.54       28.88	  37,396.5     36,070.0 	 1.0	    0.8      0.7      0.7      0.4	0.3	 0.4	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_
redo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_

fd4xkca0yhc14	   1,948.42	 2,132.23	21.13	   131.04	 105,168      100,178		 4	      4        487.11	     533.06	   5.28       32.76	  26,292.0     25,044.5 	 1.0	    0.8      0.7      0.4      0.4	0.2	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '54'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '128' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM bg: segment fix monitor						      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM cbk:blocks examined						  2,008 	   2.2		0.0		1.1	      0.0	    1.1 	  1.1
ASSM cbk:blocks marked full						    499 	   0.5		0.0		0.3	      0.1	    0.2 	  0.3
ASSM gsp:L1 bitmaps examined						  1,571 	   1.7		0.0		0.9	      0.1	    0.8 	  0.9
ASSM gsp:L2 bitmap full 						     27 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    284 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
ASSM gsp:Optimized reject DB						     10 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM gsp:Search all							     32 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search hint							     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search steal							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						  1,510 	   1.6		0.0		0.8	      0.1	    0.8 	  0.9
ASSM gsp:get free data block						  1,130 	   1.2		0.0		0.6	      0.1	    0.5 	  0.7
ASSM gsp:get free index block						    380 	   0.4		0.0		0.2	      0.1	    0.2 	  0.2
ASSM gsp:good hint							  1,334 	   1.5		0.0		0.7	      0.0	    0.7 	  0.8
ASSM gsp:reject db							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM rsv:fill reserve							      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM wasted db state change						      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO (bound) vector count 					    457 	   0.5		0.0		0.2	      0.2	    0.1 	  0.4
Batched IO (full) vector count						 45,176 	  49.3		0.9	       49.3	      N/A	   49.3 	 49.3
Batched IO block miss count					     62,102,247       67,785.8	    1,247.0	   33,892.9	  3,835.8      31,180.6      36,605.2
Batched IO buffer defrag count						  5,054 	   5.5		0.1		2.8	      3.9	    0.0 	  5.5
Batched IO double miss count					     30,224,880       32,993.7	      606.9	   16,496.9	  7,343.3      11,304.4      21,689.4
Batched IO same unit count						    898 	   1.0		0.0		0.5	      0.3	    0.3 	  0.7
Batched IO single block count						  6,539 	   7.1		0.1		3.6	      1.3	    2.6 	  4.5
Batched IO vector block count					     62,543,585       68,267.6	    1,255.9	   34,133.8	  3,974.2      31,323.6      36,944.0
Batched IO vector read count						828,386 	 904.2	       16.6	      452.1	    129.0	  360.9 	543.3
Block Cleanout Optim referenced 					  7,904 	   8.6		0.2		4.3	      0.6	    3.9 	  4.7
CCursor + sql area evicted						    134 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
CPU used by this session						788,995 	 861.1	       15.8	      430.6	    102.7	  358.0 	503.2
CPU used when call started						642,571 	 701.3	       12.9	      350.7	     98.5	  281.0 	420.3
CR blocks created							  6,781 	   7.4		0.1		3.7	      0.4	    3.4 	  4.0
Cached Commit SCN referenced					     30,521,955       33,313.1	      612.9	   16,656.6	  2,488.0      14,897.3      18,415.9
Client Advertised Receive Window					  3,591 	   3.9		0.1		2.0	      0.0	    1.9 	  2.0
Client Advertised Send Window						  3,591 	   3.9		0.1		2.0	      0.0	    1.9 	  2.0
Client Path Maximum Transmission Unit(MTU)			     17,341,865       18,934.8	      348.2	    9,467.4	 12,820.6	  401.9      18,532.9
Client Send Congestion Window						  5,130 	   5.6		0.1		2.8	      0.0	    2.8 	  2.8
Client Time (usec) Last Ack Received					    342 	   0.4		0.0		0.2	      0.1	    0.1 	  0.2
Client Time (usec) Last Data Received					    238 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
Client Time (usec) Last Data Sent					  1,860 	   2.0		0.0		1.0	      0.6	    0.6 	  1.4
Client Time (usec) Round Trip Time				      1,726,056        1,884.1	       34.7	      942.0	    227.4	  781.2       1,102.8
Client Time (usec) Round Trip Time Variance			      2,114,541        2,308.3	       42.5	    1,154.2	    643.6	  699.1       1,609.2
Client Total Bytes Acked					      8,108,781        8,850.7	      162.8	    4,425.3	     71.8	4,374.6       4,476.1
Client Total Bytes Received					      3,135,607        3,422.5	       63.0	    1,711.2	     25.1	1,693.5       1,729.0
Client Total Number of Retransmitted Packets				      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Commit SCN cached							    840 	   0.9		0.0		0.5	      0.5	    0.1 	  0.8
DB time 							     30,837,810       33,659.2	      619.2	   16,829.6	    254.0      16,650.0      17,009.2
DBWR checkpoint buffers written 					298,641 	 325.9		6.0	      163.0	     40.2	  134.5 	191.4
DBWR checkpoints							    102 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
DBWR fusion writes							  3,969 	   4.3		0.1		2.2	      1.8	    0.9 	  3.4
DBWR object drop buffers written					     92 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
DBWR transaction table writes						  1,150 	   1.3		0.0		0.6	      0.0	    0.6 	  0.6
DBWR undo block writes							299,973 	 327.4		6.0	      163.7	     25.5	  145.7 	181.8
DFO trees parallelized							     37 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
HSC Heap Segment Block Changes					      6,260,658        6,833.2	      125.7	    3,416.6	    522.6	3,047.1       3,786.1
Heap Segment Array Inserts						    361 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
Heap Segment Array Updates						     24 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								     64 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
KTFB alloc space (block)					     69,992,448       76,416.0	    1,405.5	   38,208.0	 40,483.4	9,581.9      66,834.0
KTFB alloc time (ms)							508,669 	 555.1	       10.2	      277.5	    307.1	   60.4 	494.7

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
KTFB apply req								     50 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
KTFB apply time (ms)							  1,555 	   1.7		0.0		1.7	      N/A	    1.7 	  1.7
PX local messages recv'd						    487 	   0.5		0.0		0.3	      0.1	    0.2 	  0.3
PX local messages sent							    487 	   0.5		0.0		0.3	      0.1	    0.2 	  0.3
PX remote messages recv'd						    509 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
PX remote messages sent 						    509 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
Parallel operations not downgraded					     37 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Requests to/from client 						  1,729 	   1.9		0.0		0.9	      0.2	    0.8 	  1.1
SQL*Net roundtrips to/from client					  1,217 	   1.3		0.0		0.7	      0.2	    0.6 	  0.8
active txn count during cleanout					  3,970 	   4.3		0.1		2.2	      0.4	    1.9 	  2.4
application wait time							 10,172 	  11.1		0.2		5.6	      0.0	    5.5 	  5.6
background checkpoints completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
background timeouts							 26,225 	  28.6		0.5	       14.3	      0.1	   14.2 	 14.4
blocks cleaned out using minact 				      3,097,939        3,381.2	       62.2	    1,690.6	    410.8	1,400.1       1,981.1
branch node splits							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
buffer is not pinned count					    165,060,052      180,165.1	    3,314.5	   90,082.5	  7,939.7      84,468.3      95,696.8
buffer is pinned count						     41,433,702       45,222.3	      832.0	   22,611.1	  4,335.5      19,545.5      25,676.8
bytes received via SQL*Net from client				      1,082,195        1,181.4	       21.7	      590.7	    448.4	  273.7 	907.8
bytes sent via SQL*Net to client					304,165 	 332.0		6.1	      166.0	     29.0	  145.5 	186.5
calls to get snapshot scn: kcmgss					425,300 	 464.2		8.5	      232.1	     31.7	  209.7 	254.5
calls to kcmgas 							120,354 	 131.4		2.4	       65.7	      7.3	   60.5 	 70.8
calls to kcmgcs 							 15,734 	  17.2		0.3		8.6	      0.5	    8.2 	  8.9
cell physical IO interconnect bytes				453,317,684,224  494,770,203.3	9,102,764.7   2.4738510E+08  42,248,232.2 2.1751109E+08 2.7725911E+08
change write time							 14,689 	  16.0		0.3		8.0	      2.8	    6.1 	 10.0
cleanout - number of ktugct calls					 62,753 	  68.5		1.3	       34.2	      1.2	   33.4 	 35.1
cleanouts and rollbacks - consistent read gets				  3,215 	   3.5		0.1		1.8	      0.1	    1.7 	  1.8
cleanouts only - consistent read gets					 46,151 	  50.4		0.9	       25.2	      4.4	   22.1 	 28.3
cluster key scan block gets						  1,695 	   1.9		0.0		0.9	      0.8	    0.3 	  1.5
cluster key scans							  1,195 	   1.3		0.0		0.7	      0.6	    0.3 	  1.1
cluster wait time						     23,564,746       25,720.5	      473.2	   12,860.2	    310.1      12,641.0      13,079.5
commit batch/immediate performed					      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit batch/immediate requested					      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: block lost					 55,474 	  60.5		1.1	       30.3	      5.3	   26.5 	 34.0
commit cleanout failures: buffer being written				 46,839 	  51.1		0.9	       25.6	      2.5	   23.8 	 27.3
commit cleanout failures: callback failure				     60 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: cannot pin					     21 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanouts						      5,991,560        6,539.5	      120.3	    3,269.7	    502.4	2,914.5       3,625.0
commit cleanouts successfully completed 			      5,889,166        6,427.7	      118.3	    3,213.9	    494.6	2,864.1       3,563.6
commit immediate performed						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit immediate requested						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit txn count during cleanout					 48,274 	  52.7		1.0	       26.3	      4.4	   23.2 	 29.5
concurrency wait time							  3,502 	   3.8		0.1		1.9	      0.3	    1.7 	  2.1
consistent changes							 28,013 	  30.6		0.6	       15.3	      1.0	   14.6 	 16.0
consistent gets 						     39,217,807       42,804.9	      787.5	   21,402.5	  1,776.3      20,146.5      22,658.5
consistent gets examination					      3,435,854        3,751.2	       69.0	    1,875.6	  2,019.0	  447.9       3,303.3
consistent gets examination (fastpath)				      3,417,905        3,731.6	       68.6	    1,865.8	  2,015.1	  440.9       3,290.7
consistent gets from cache					     39,217,807       42,804.9	      787.5	   21,402.5	  1,776.3      20,146.5      22,658.5
consistent gets pin						     35,781,953       39,053.7	      718.5	   19,526.9	  3,795.3      16,843.2      22,210.5
consistent gets pin (fastpath)					     34,135,346       37,256.4	      685.4	   18,628.2	  3,848.0      15,907.3      21,349.2
cursor authentications							    249 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
cursor reload failures							     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
data blocks consistent reads - undo records applied			  4,748 	   5.2		0.1		2.6	      0.3	    2.4 	  2.8
db block changes						     13,010,132       14,199.9	      261.2	    7,099.9	  1,076.1	6,339.0       7,860.8
db block gets							      7,010,000        7,651.1	      140.8	    3,825.5	    574.6	3,419.2       4,231.9
db block gets direct							  2,002 	   2.2		0.0		1.1	      0.0	    1.1 	  1.1
db block gets from cache					      7,007,998        7,648.9	      140.7	    3,824.4	    574.7	3,418.1       4,230.8
db block gets from cache (fastpath)					520,954 	 568.6	       10.5	      284.3	     39.9	  256.1 	312.5
deferred (CURRENT) block cleanout applications			      3,283,575        3,583.8	       65.9	    1,791.9	    440.5	1,480.4       2,103.3
dirty buffers inspected 					      5,776,705        6,304.9	      116.0	    3,152.5	    568.5	2,750.5       3,554.5
enqueue conversions							  9,621 	  10.5		0.2		5.3	      0.1	    5.2 	  5.3

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
enqueue releases							507,474 	 553.9	       10.2	      276.9	      4.6	  273.7 	280.2
enqueue requests							506,126 	 552.4	       10.2	      276.2	      4.6	  272.9 	279.5
enqueue timeouts							     84 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
enqueue waits								    832 	   0.9		0.0		0.5	      0.0	    0.4 	  0.5
exchange deadlocks							     68 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
execute count								339,960 	 371.0		6.8	      185.5	     30.1	  164.2 	206.8
file io service time						  1,304,747,057    1,424,166.2	   26,199.7	  712,083.1	100,512.3     641,010.1     783,156.0
file io wait time					     1.197030579801E+13 1.30663964E+10 2.403676E+08   6.5331982E+09 1.9120547E+09 5.1811714E+09 7.8852251E+09
free buffer inspected						     44,625,691       48,706.9	      896.1	   24,353.4	  3,192.8      22,095.8      26,611.0
free buffer requested						     42,305,694       46,174.7	      849.5	   23,087.4	  2,985.5      20,976.3      25,198.4
gc blocks compressed							 41,585 	  45.4		0.8	       22.7	      8.6	   16.6 	 28.8
gc blocks lost								  9,256 	  10.1		0.2		5.1	      5.3	    1.3 	  8.8
gc cleanout applied							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc cleanout saved							     24 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc cr anti locks created						702,770 	 767.1	       14.1	      383.5	     13.5	  374.0 	393.1
gc cr anti locks expanded						    499 	   0.5		0.0		0.3	      0.2	    0.2 	  0.4
gc cr anti locks shrunk 						  2,796 	   3.1		0.1		1.5	      0.4	    1.2 	  1.8
gc cr block build time							    165 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
gc cr block flush time							 23,213 	  25.3		0.5	       12.7	     16.1	    1.3 	 24.0
gc cr block receive time						158,021 	 172.5		3.2	       86.2	     18.1	   73.4 	 99.1
gc cr blocks built							 25,902 	  28.3		0.5	       14.1	      5.5	   10.3 	 18.0
gc cr blocks flushed							    906 	   1.0		0.0		0.5	      0.5	    0.1 	  0.9
gc cr blocks received							 25,709 	  28.1		0.5	       14.0	      5.3	   10.3 	 17.8
gc cr blocks served							 31,202 	  34.1		0.6	       17.0	      8.9	   10.7 	 23.3
gc cr multiblock grant time					     96,755,059      105,600.7	    1,942.9	   52,800.3	 12,866.3      43,702.5      61,898.2
gc cr multiblock grants received				      7,956,746        8,684.1	      159.8	    4,342.0	  1,256.1	3,453.8       5,230.3
gc current block flush time						  1,322 	   1.4		0.0		0.7	      0.4	    0.5 	  1.0
gc current block pin time						    958 	   1.0		0.0		0.5	      0.5	    0.2 	  0.9
gc current block receive time						 41,664 	  45.5		0.8	       22.7	      9.5	   16.0 	 29.5
gc current blocks flushed						     87 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
gc current blocks pinned						     25 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks received						 16,798 	  18.3		0.3		9.2	      2.5	    7.4 	 11.0
gc current blocks served						 18,154 	  19.8		0.4		9.9	      3.8	    7.2 	 12.6
gc force cr read cr							    176 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
gc force cr read current						     13 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc kbytes saved 							161,410 	 176.2		3.2	       88.1	     40.0	   59.8 	116.4
gc kbytes sent								233,437 	 254.8		4.7	      127.4	     61.9	   83.7 	171.2
gc local grants 						     29,574,983       32,279.4	      593.9	   16,139.7	  2,720.2      14,216.2      18,063.2
gc merge pi bg								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc merge pi fg								    256 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
gc no change made							     67 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc read time waited							     12 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc read wait timeouts							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc read waits								     11 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc reader bypass grants 						    182 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
gc reader bypass waits							     21 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc remote grants						     10,490,099       11,449.2	      210.6	    5,724.6	  1,315.4	4,794.5       6,654.7
gc status messages received						 57,304 	  62.5		1.2	       31.3	     11.2	   23.3 	 39.2
gc status messages sent 						 58,599 	  64.0		1.2	       32.0	     16.6	   20.3 	 43.7
gcs affinity lock failures						 33,487 	  36.5		0.7	       18.3	     17.9	    5.6 	 31.0
gcs affinity lock grants					     25,644,123       27,988.9	      514.9	   13,994.4	  2,833.5      11,990.9      15,998.0
gcs anti-locks created							703,081 	 767.4	       14.1	      383.7	     13.3	  374.3 	393.1
gcs data block access records					     39,621,948       43,244.9	      795.6	   21,622.5	  3,999.4      18,794.5      24,450.5
gcs messages sent						     34,933,082       38,128.4	      701.5	   19,064.2	  1,304.3      18,141.9      19,986.5
gcs read-mostly lock failures						672,165 	 733.7	       13.5	      366.8	     28.6	  346.6 	387.1
gcs read-mostly lock grants					      3,546,471        3,871.0	       71.2	    1,935.5	    187.5	1,802.9       2,068.1
gcs stats management (SCM) process posts				     23 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ges messages sent							 16,582 	  18.1		0.3		9.0	      3.2	    6.8 	 11.3
global enqueue get time 						 27,827 	  30.4		0.6	       15.2	      5.0	   11.7 	 18.7
global enqueue gets sync						172,853 	 188.7		3.5	       94.3	      5.2	   90.7 	 98.0

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
global enqueue releases 						180,410 	 196.9		3.6	       98.5	      5.3	   94.7 	102.2
heap block compress							117,858 	 128.6		2.4	       64.3	     19.5	   50.6 	 78.1
hot buffers moved to head of LRU				      1,030,419        1,124.6	       20.7	      562.3	    140.1	  463.3 	661.3
immediate (CR) block cleanout applications				 49,577 	  54.1		1.0	       27.1	      4.1	   24.1 	 30.0
immediate (CURRENT) block cleanout applications 			  1,098 	   1.2		0.0		0.6	      0.3	    0.4 	  0.8
in call idle wait time						     20,190,769       22,038.1	      405.4	   11,019.0	    215.0      10,867.0      11,171.1
index crx upgrade (positioned)						     91 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
index fetch by key						      2,633,833        2,875.8	       52.9	    1,437.9	  2,027.6	    4.2       2,871.6
index range scans						      2,982,871        3,256.7	       59.9	    1,628.4	  1,968.4	  236.5       3,020.2
leaf node 90-10 splits							     78 	   0.1		0.0		0.0	      0.1	    0.0 	  0.1
leaf node splits							    373 	   0.4		0.0		0.2	      0.1	    0.2 	  0.2
lob reads								  1,594 	   1.7		0.0		0.9	      0.4	    0.6 	  1.1
lob writes								 13,520 	  14.8		0.3		7.4	      0.1	    7.3 	  7.5
lob writes unaligned							 13,520 	  14.8		0.3		7.4	      0.1	    7.3 	  7.5
logical read bytes from cache					378,681,778,176  413,317,320.4	7,604,051.8   2.0665866E+08  19,258,872.2 1.9304058E+08 2.2027674E+08
logons cumulative							     83 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
max cf enq hold time							  2,222 	   2.4		0.0		1.2	      0.0	    1.2 	  1.2
messages received							285,215 	 311.3		5.7	      155.6	     41.7	  126.2 	185.1
messages sent								285,207 	 311.3		5.7	      155.6	     41.7	  126.2 	185.1
no work - consistent read gets					     35,634,734       38,893.0	      715.6	   19,446.5	  3,798.0      16,760.9      22,132.1
non-idle wait count						     18,593,339       20,295.1	      373.4	   10,147.6	  1,466.3	9,110.7      11,184.4
non-idle wait time						     28,856,838       31,497.2	      579.5	   15,748.6	    544.4      15,363.6      16,133.5
opened cursors cumulative						391,183 	 427.0		7.9	      213.5	     34.5	  189.1 	237.9
parse count (describe)							      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
parse count (hard)							    601 	   0.7		0.0		0.3	      0.3	    0.1 	  0.5
parse count (total)							  9,528 	  10.4		0.2		5.2	      2.3	    3.6 	  6.8
parse time cpu								    130 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
parse time elapsed							    472 	   0.5		0.0		0.3	      0.1	    0.2 	  0.3
physical read IO requests					     39,449,745       43,057.0	      792.2	   21,528.5	  3,929.5      18,750.0      24,307.1
physical read bytes						323,743,293,440  353,345,998.9	6,500,869.3   1.7667300E+08  32,606,848.2 1.5361648E+08 1.9972952E+08
physical read total IO requests 				     39,464,587       43,073.2	      792.5	   21,536.6	  3,929.1      18,758.3      24,314.9
physical read total bytes					328,872,869,888  358,944,993.5	6,603,872.9   1.7947250E+08  32,362,886.3 1.5658848E+08 2.0235651E+08
physical read total multi block requests				  5,857 	   6.4		0.1		3.2	      0.6	    2.8 	  3.6
physical reads							     39,519,448       43,133.1	      793.6	   21,566.5	  3,980.3      18,752.0      24,381.0
physical reads cache						     39,519,446       43,133.1	      793.6	   21,566.5	  3,980.3      18,752.0      24,381.0
physical reads cache prefetch					     31,681,187       34,577.9	      636.2	   17,288.9	  3,618.0      14,730.6      19,847.3
physical write IO requests					      6,507,481        7,102.6	      130.7	    3,551.3	    512.1	3,189.2       3,913.4
physical write bytes						 56,465,866,752   61,629,632.7	1,133,852.7    30,814,816.4   4,485,341.2  27,643,201.2  33,986,431.5
physical write total IO requests				      6,599,526        7,203.1	      132.5	    3,601.5	    514.9	3,237.5       3,965.6
physical write total bytes					 62,208,132,608   67,897,024.8	1,249,159.3    33,948,512.4   4,941,883.3  30,454,073.2  37,442,951.6
physical write total multi block requests				 18,203 	  19.9		0.4		9.9	      1.1	    9.1 	 10.7
physical writes 						      6,892,806        7,523.1	      138.4	    3,761.6	    547.5	3,374.4       4,148.7
physical writes direct							  2,279 	   2.5		0.0		1.2	      0.0	    1.2 	  1.3
physical writes direct (lob)						    279 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
physical writes direct temporary tablespace				    380 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
physical writes from cache					      6,890,527        7,520.7	      138.4	    3,760.3	    547.6	3,373.1       4,147.5
physical writes non checkpoint					      6,775,738        7,395.4	      136.1	    3,697.7	    514.4	3,333.9       4,061.5
pinned buffers inspected						 44,385 	  48.4		0.9	       24.2	      3.9	   21.5 	 27.0
prefetched blocks aged out before use					    653 	   0.7		0.0		0.4	      0.2	    0.2 	  0.5
process last non-idle time						    918 	   1.0		0.0		1.0	      N/A	    1.0 	  1.0
recursive calls 							521,458 	 569.2	       10.5	      284.6	     13.1	  275.3 	293.9
recursive cpu usage							777,178 	 848.2	       15.6	      424.1	     98.4	  354.5 	493.7
redo KB read							      2,994,176        3,268.2	       60.1	    1,634.1	    237.9	1,465.9       1,802.3
redo blocks checksummed by FG (exclusive)			      4,225,932        4,612.4	       84.9	    2,306.2	    360.9	2,051.0       2,561.4
redo blocks written						     10,664,688       11,639.9	      214.2	    5,820.0	    905.5	5,179.7       6,460.2
redo blocks written (group 0)					      7,064,412        7,710.4	      141.9	    3,855.2	    665.6	3,384.5       4,325.9
redo blocks written (group 1)					      3,600,276        3,929.5	       72.3	    1,964.8	    239.8	1,795.2       2,134.3
redo buffer allocation retries						    121 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
redo entries							      6,634,164        7,240.8	      133.2	    3,620.4	    567.1	3,219.4       4,021.4

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo size							  5,270,778,824    5,752,773.4	  105,838.9	2,876,386.7	448,294.9   2,559,394.4   3,193,379.1
redo size for direct writes						  7,560 	   8.3		0.2		4.1	      0.2	    4.0 	  4.3
redo subscn max counts							 46,403 	  50.6		0.9	       25.3	      4.3	   22.3 	 28.4
redo synch long waits							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo synch time 							  2,133 	   2.3		0.0		1.2	      0.8	    0.6 	  1.7
redo synch time (usec)						     21,061,780       22,984.8	      422.9	   11,492.4	  7,945.8	5,873.9      17,110.9
redo synch time overhead (usec) 					270,476 	 295.1		5.4	      147.6	    190.4	   12.9 	282.2
redo synch time overhead count (  2ms)					    334 	   0.4		0.0		0.2	      0.1	    0.1 	  0.2
redo synch time overhead count (  8ms)					      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo synch time overhead count ( 32ms)					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo synch time overhead count (128ms)					      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo synch writes							    516 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
redo wastage							     14,791,996       16,144.9	      297.0	    8,072.4	    869.2	7,457.8       8,687.0
redo write active strands						 60,480 	  66.0		1.2	       33.0	      3.6	   30.5 	 35.6
redo write broadcast ack count						     85 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
redo write broadcast ack time						950,416        1,037.4	       19.1	      518.7	    115.9	  436.8 	600.6
redo write finish time						  1,473,059,773    1,607,824.3	   29,579.5	  803,912.2	  7,287.2     798,759.3     809,065.0
redo write gather time						    122,424,719      133,624.5	    2,458.3	   66,812.3	  1,323.2      65,876.6      67,747.9
redo write info find							    347 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
redo write info find fail						      6 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write schedule time					    122,997,560      134,249.7	    2,469.8	   67,124.9	  1,408.9      66,128.6      68,121.1
redo write size count (   4KB)						    888 	   1.0		0.0		0.5	      0.1	    0.4 	  0.5
redo write size count (   8KB)						    725 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
redo write size count (  16KB)						  1,455 	   1.6		0.0		0.8	      0.0	    0.8 	  0.8
redo write size count (  32KB)						  2,891 	   3.2		0.1		1.6	      0.1	    1.5 	  1.6
redo write size count ( 128KB)						 13,553 	  14.8		0.3		7.4	      0.6	    7.0 	  7.8
redo write size count ( 256KB)						  7,706 	   8.4		0.2		4.2	      0.6	    3.8 	  4.6
redo write size count ( 512KB)						  3,050 	   3.3		0.1		1.7	      0.2	    1.5 	  1.8
redo write size count (1024KB)						    634 	   0.7		0.0		0.3	      0.1	    0.3 	  0.4
redo write size count (inf)						    726 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
redo write time 							147,468 	 161.0		3.0	       80.5	      0.8	   79.9 	 81.0
redo write time (usec)						  1,474,696,012    1,609,610.1	   29,612.4	  804,805.1	  7,519.8     799,487.7     810,122.4
redo write total time						  1,606,593,265    1,753,575.3	   32,260.9	  876,787.7	  5,829.3     872,665.7     880,909.6
redo write worker delay (usec)					    118,622,713      129,475.1	    2,382.0	   64,737.6	    446.7      64,421.7      65,053.4
redo write worker delay count						 31,624 	  34.5		0.6	       17.3	      1.6	   16.1 	 18.4
redo writes								 31,624 	  34.5		0.6	       17.3	      1.6	   16.1 	 18.4
redo writes (group 0)							 18,181 	  19.8		0.4		9.9	      0.9	    9.3 	 10.6
redo writes (group 1)							 13,443 	  14.7		0.3		7.3	      0.7	    6.8 	  7.8
redo writes adaptive all						 31,624 	  34.5		0.6	       17.3	      1.6	   16.1 	 18.4
redo writes adaptive worker						 31,624 	  34.5		0.6	       17.3	      1.6	   16.1 	 18.4
rollback changes - undo records applied 				      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
rollbacks only - consistent read gets					  1,492 	   1.6		0.0		0.8	      0.4	    0.6 	  1.1
rows fetched via callback					      2,627,895        2,869.3	       52.8	    1,434.7	  2,024.9	    2.8       2,866.5
saved cleanouts 							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
saved cleanouts successfully completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
securefile allocation bytes					      2,269,184        2,476.8	       45.6	    1,238.4	     56.3	1,198.6       1,278.2
securefile allocation chunks						    108 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
securefile bytes non-transformed				      1,909,024        2,083.7	       38.3	    1,041.8	     40.5	1,013.2       1,070.5
securefile direct write bytes					      2,269,184        2,476.8	       45.6	    1,238.4	     56.3	1,198.6       1,278.2
securefile direct write ops						    108 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
securefile number of non-transformed flushes				    110 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
segment chunks allocation from dispenser				    108 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
segment dispenser allocations						    107 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
segment dispenser load empty						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment dispenser load tasks						      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc ops							     22 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc tasks							     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc time (ms)						 17,625 	  19.2		0.4		9.6	      2.0	    8.2 	 11.1
session connect time							    968 	   1.1		0.0		1.1	      N/A	    1.1 	  1.1
session cursor cache hits						386,548 	 421.9		7.8	      210.9	     34.6	  186.5 	235.4

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
session logical reads						     46,228,182       50,456.4	      928.3	   25,228.2	  2,350.8      23,565.9      26,890.5
shared hash latch upgrades - no wait				     21,285,034       23,233.0	      427.4	   11,616.5	  1,367.3      10,649.7      12,583.3
shared hash latch upgrades - wait					    106 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
shared io pool buffer get success					    107 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
sorts (memory)								  2,452 	   2.7		0.0		1.3	      0.5	    1.0 	  1.7
sorts (rows)								269,346 	 294.0		5.4	      147.0	      4.8	  143.6 	150.4
sql area evicted							    150 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
sql area purged 							      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
summed dirty queue length					    331,761,813      362,146.5	    6,661.9	  181,073.2	 65,328.6     134,878.9     227,267.6
switch current caused by our pin					    473 	   0.5		0.0		0.3	      0.1	    0.2 	  0.3
switch current to new buffer						    538 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
table fetch by rowid						     99,910,728      109,052.4	    2,006.2	   54,526.2	  2,049.5      53,077.0      55,975.4
table fetch continued row						     80 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
table scan blocks gotten						 85,522 	  93.3		1.7	       46.7	     57.2	    6.2 	 87.1
table scan disk non-IMC rows gotten				      1,998,646        2,181.0	       40.1	    1,090.5	  1,056.4	  343.5       1,837.5
table scan rows gotten						      1,998,646        2,181.0	       40.1	    1,090.5	  1,056.4	  343.5       1,837.5
table scans (short tables)						  1,411 	   1.5		0.0		0.8	      0.2	    0.6 	  0.9
temp space allocated (bytes)					      1,048,576        1,144.9	       21.1	    1,144.9	      N/A	1,144.9       1,144.9
total cf enq hold time							 20,803 	  22.7		0.4	       11.4	      0.0	   11.3 	 11.4
total number of cf enq holders						    720 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
transaction tables consistent read rollbacks				      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
transaction tables consistent reads - undo records applied		  5,096 	   5.6		0.1		2.8	      0.7	    2.3 	  3.3
undo change vector size 					  2,166,060,504    2,364,140.2	   43,495.2	1,182,070.1	182,473.9   1,053,041.5   1,311,098.6
user I/O wait time						      3,082,550        3,364.6	       61.9	    1,682.3	     39.5	1,654.4       1,710.2
user calls								  3,646 	   4.0		0.1		2.0	      0.2	    1.9 	  2.1
user commits								 49,800 	  54.4		1.0	       27.2	      4.1	   24.3 	 30.1
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    513 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
workarea executions - optimal						  2,948 	   3.2		0.1		1.6	      0.2	    1.5 	  1.8
write clones created in background					      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
write clones created in foreground					 14,304 	  15.6		0.3		7.8	      2.4	    6.1 	  9.5
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    188 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
Global Enqueue S-optim S-lock gets					 76,133 	  83.1		1.5	       41.6	      9.1	   35.1 	 48.0
Global Enqueue S-optim anti-locks crea					     92 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
acks for commit broadcast(actual)					  5,218 	   5.7		0.1		2.8	      0.3	    2.6 	  3.1
acks for commit broadcast(logical)					 19,768 	  21.6		0.4	       10.8	      1.4	    9.8 	 11.8
broadcast msgs on commit(actual)					 19,647 	  21.4		0.4	       10.7	      1.0	   10.0 	 11.4
broadcast msgs on commit(logical)					 31,604 	  34.5		0.6	       17.2	      1.6	   16.1 	 18.4
broadcast msgs on commit(wasted)					 12,946 	  14.1		0.3		7.1	      1.1	    6.3 	  7.8
flow control messages received						     48 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
flow control messages sent						     48 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gcs assume no cvt							  9,932 	  10.8		0.2		5.4	      0.9	    4.8 	  6.1
gcs ast to fg								 57,878 	  63.2		1.2	       31.6	     16.1	   20.2 	 43.0
gcs bidless ast to lms							    854 	   0.9		0.0		0.5	      0.5	    0.1 	  0.8
gcs blocked converts							715,365 	 780.8	       14.4	      390.4	      9.0	  384.0 	396.8
gcs blocked cr converts 						 30,751 	  33.6		0.6	       16.8	      5.2	   13.1 	 20.4
gcs compatible basts							     34 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (global)					  2,593 	   2.8		0.1		1.4	      1.5	    0.4 	  2.5
gcs compatible cr basts (local) 					  2,174 	   2.4		0.0		1.2	      0.3	    1.0 	  1.4
gcs cr requests to slave						      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs dbwr flush pi msgs						      1,989,950        2,172.0	       40.0	    1,086.0	     91.9	1,021.0       1,151.0
gcs dbwr write request msgs						  3,943 	   4.3		0.1		2.2	      1.8	    0.9 	  3.4
gcs force cr block only 						      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs force cr grant							     13 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs grant ast								 58,732 	  64.1		1.2	       32.1	     16.6	   20.3 	 43.8
gcs immediate (compatible) converts					 20,104 	  21.9		0.4	       11.0	      5.6	    7.0 	 14.9
gcs immediate (null) converts					      1,477,815        1,613.1	       29.7	      806.5	    145.3	  703.8 	909.3
gcs immediate cr (compatible) converts					 73,842 	  80.6		1.5	       40.3	     11.4	   32.2 	 48.4
gcs immediate cr (null) converts				      8,398,777        9,167.8	      168.7	    4,583.9	  1,304.2	3,661.7       5,506.1
gcs lms write request msgs						  3,152 	   3.4		0.1		1.7	      1.7	    0.5 	  2.9
gcs msgs process time(ms)						761,957 	 831.6	       15.3	      415.8	     55.1	  376.8 	454.8
gcs msgs received						     34,939,215       38,136.7	      701.6	   19,068.3	  1,823.0      17,779.2      20,357.4
gcs new served by master						    416 	   0.5		0.0		0.2	      0.1	    0.1 	  0.3
gcs out-of-order msgs							  6,720 	   7.3		0.1		3.7	      1.2	    2.9 	  4.5
gcs pings refused							  8,333 	   9.1		0.2		4.5	      1.3	    3.6 	  5.5
gcs queued converts							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs reader bypass grant immediate					    182 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
gcs side channel msgs actual						  5,543 	   6.0		0.1		3.0	      0.6	    2.6 	  3.4
gcs side channel msgs logical						109,032 	 119.0		2.2	       59.5	     24.4	   42.3 	 76.7
gcs stale cr								    169 	   0.2		0.0		0.1	      0.1	    0.0 	  0.1
gcs undo cr								    795 	   0.9		0.0		0.4	      0.6	    0.0 	  0.8
gcs write notification msgs						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs writes refused							      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ges msgs process time(ms)						    617 	   0.7		0.0		0.3	      0.0	    0.3 	  0.3
ges msgs received							 17,020 	  18.6		0.3		9.3	      3.7	    6.7 	 11.9
ges remote lock allocation				     1.844674407371E+19 2.01273803E+16 3.704165E+14   2.0127380E+16	      N/A 2.0127380E+16 2.0127380E+16
implicit batch messages received					581,052 	 634.2	       11.7	      317.1	     32.8	  293.9 	340.3
implicit batch messages sent						578,289 	 631.2	       11.6	      315.6	     17.5	  303.2 	328.0
messages flow controlled						353,476 	 385.8		7.1	      192.9	      8.3	  187.1 	198.7
messages queue sent actual					      4,096,544        4,471.4	       82.3	    2,235.7	    240.7	2,065.5       2,405.9
messages queue sent logical					      4,720,334        5,152.1	       94.8	    2,576.0	    193.9	2,439.0       2,713.1
messages received actual					      7,045,036        7,689.7	      141.5	    3,844.8	    153.1	3,736.5       3,953.1
messages received logical					     34,956,235       38,155.2	      701.9	   19,077.6	  1,826.7      17,785.9      20,369.3
messages sent directly						      2,185,402        2,385.3	       43.9	    1,192.6	     91.6	1,127.9       1,257.4
messages sent indirectly					     14,679,630       16,021.9	      294.8	    8,011.0	  1,415.4	7,010.1       9,011.8
messages sent not implicit batched					884,771 	 965.7	       17.8	      482.8	     55.1	  443.9 	521.8
messages sent pbatched						     29,226,623       31,900.0	      586.9	   15,950.0	  1,123.5      15,155.5      16,744.4
msgs received kernel queue time (ns)			      6,370,283,234,988 6.95215658E+09 1.279173E+08   3.4760783E+09 1.8924289E+09 2.1379290E+09 4.8142276E+09
msgs received queue time (ms)					      2,632,314        2,872.8	       52.9	    1,436.4	    682.0	  954.1       1,918.7
msgs received queued						     34,956,235       38,155.2	      701.9	   19,077.6	  1,826.7      17,785.9      20,369.3
msgs sent queue time (ms)					     23,312,337       25,450.5	      468.1	   12,725.3	 10,890.6	5,024.5      20,426.1

Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
msgs sent queue time on ksxp (ms)				    376,419,273      410,899.3	    7,558.6	  205,449.7	 85,013.1     145,336.4     265,563.0
msgs sent queued						      6,014,218        6,564.5	      120.8	    3,282.3	    150.6	3,175.8       3,388.7
msgs sent queued on ksxp					      7,042,935        7,687.3	      141.4	    3,843.7	     58.9	3,802.0       3,885.3
process batch messages received 				      2,801,340        3,057.6	       56.3	    1,528.8	     82.8	1,470.2       1,587.3
process batch messages sent					      3,283,095        3,583.5	       65.9	    1,791.8	    138.3	1,693.9       1,889.6
receiver cycle time						      1,596,077        1,742.1	       32.0	      871.0	     30.2	  849.7 	892.4
receiver loop count						      4,035,353        4,404.8	       81.0	    2,202.4	    472.5	1,868.2       2,536.5
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    379      121	    1,126	   107		 12,879       13,208
   2	    373      118	    1,026	    65		 11,344       11,496
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    752      239	    2,152	   172		 24,223       24,704
 Avg	    376      120	    1,076	    86		 12,112       12,352
 Std	      4        2	       71	    30		  1,085        1,211
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     50,260.90	    43,060.11	    7,200.79
Database Requests		     50,144.27	    43,043.91	    7,100.36
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				 34.51		  N/A	       34.51
Total (MB)				406.94	       342.21	       64.73
Database (MB)				395.63	       336.87	       58.76
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  5.48		  N/A		5.48
Database (blocks)		     50,640.76	    43,119.97	    7,520.79
Via Buffer Cache (blocks)	     50,638.27	    43,119.96	    7,518.31
Direct (blocks) 			  2.49		 0.00		2.49
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 44,809,816   48,892.33   41,840.19    7,052.14        362,837	    395.89	332.59	     63.30	7.6M   4.13ms
     Buffer Cache Re	 38,330,913   41,823.15   41,823.15	   0.00        300,017	    327.35	327.35	      0.00	7.5M   3.97ms
     DBWR		  6,401,332    6,984.54        0.00    6,984.54 	52,955	     57.78	  0.00	     57.78	   0
     LGWR		     59,861	  65.31        0.00	  65.31 	 5,016	      5.47	  0.00	      5.47     30.9K  42.49ms
     Others		     17,620	  19.23       17.04	   2.19 	 4,847	      5.29	  5.24	      0.05	9418   6.21ms
     Direct Writes		 89	   0.10        0.00	   0.10 	     2	      0.00	  0.00	      0.00	   0
     Streams AQ 		  1	   0.00        0.00	   0.00 	     0	      0.00	  0.00	      0.00	   1	.00ns

   1 Total		 19,597,597   21,383.08   18,199.40    3,183.68        158,938	    173.42	144.91	     28.50	3.6M   4.47ms
     Buffer Cache Re	 16,671,850   18,190.78   18,190.78	   0.00        130,260	    142.13	142.13	      0.00	3.5M   4.30ms
     DBWR		  2,888,900    3,152.10        0.00    3,152.10 	23,870	     26.04	  0.00	     26.04	   0
     Others		      8,845	   9.65        8.62	   1.03 	 2,574	      2.81	  2.79	      0.02	4616   7.25ms
     LGWR		     27,958	  30.51        0.00	  30.51 	 2,233	      2.44	  0.00	      2.44     14.6K  44.61ms
     Direct Writes		 43	   0.05        0.00	   0.05 	     1	      0.00	  0.00	      0.00	   0
     Streams AQ 		  1	   0.00        0.00	   0.00 	     0	      0.00	  0.00	      0.00	   1	.00ns

   2 Total		 25,212,219   27,509.24   23,640.78    3,868.46        203,899	    222.48	187.68	     34.80	  4M   3.83ms
     Buffer Cache Re	 21,659,063   23,632.37   23,632.37	   0.00        169,757	    185.22	185.22	      0.00	  4M   3.68ms
     DBWR		  3,512,432    3,832.44        0.00    3,832.44 	29,085	     31.73	  0.00	     31.73	   0
     LGWR		     31,903	  34.81        0.00	  34.81 	 2,783	      3.04	  0.00	      3.04     16.3K  40.58ms
     Others		      8,775	   9.57        8.42	   1.16 	 2,273	      2.48	  2.46	      0.02	4802   5.20ms
     Direct Writes		 46	   0.05        0.00	   0.05 	     1	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 44,777,516   48,857.08   41,808.90    7,048.18        362,585	    395.62	332.36	     63.26   522.62us 1181.86m
     Data File		 44,699,906   48,772.40   41,791.56    6,980.84        352,727	    384.86	327.10	     57.76   522.65us	2.53ms
     Log File		     64,848	  70.76        5.55	  65.21 	 9,650	     10.53	  5.06	      5.47   823.53us 1469.83m
     Control File	     12,246	  13.36       11.48	   1.88 	   192	      0.21	  0.18	      0.03   392.65us
     Other			 38	   0.04        0.04	   0.00 	     9	      0.01	  0.01	      0.00   315.79us	1.68ms
     Temp File			478	   0.52        0.27	   0.26 	     7	      0.01	  0.00	      0.00   555.56us

   1 Total		 19,587,677   21,372.26   18,190.40    3,181.86        158,867	    173.34	144.85	     28.49   632.20us 1378.33m
     Data File		 19,550,793   21,332.02   18,181.65    3,150.37        154,065	    168.10	142.06	     26.04   632.31us 368.42us
     Log File		     30,638	  33.43        2.94	  30.49 	 4,704	      5.13	  2.70	      2.43   698.20us 1399.51m
     Control File	      5,997	   6.54        5.67	   0.87 	    94	      0.10	  0.09	      0.01   298.40us
     Temp File			249	   0.27        0.14	   0.13 	     4	      0.00	  0.00	      0.00   820.31us

   2 Total		 25,189,839   27,484.82   23,618.50    3,866.33        203,718	    222.28	187.50	     34.77   438.22us 1030.73m
     Data File		 25,149,113   27,440.39   23,609.91    3,830.47        198,662	    216.76	185.04	     31.73   438.20us	2.61ms
     Log File		     34,210	  37.33        2.61	  34.72 	 4,946	      5.40	  2.37	      3.03   950.00us 1550.01m
     Control File	      6,249	   6.82        5.81	   1.01 	    98	      0.11	  0.09	      0.02   484.69us
     Other			 38	   0.04        0.04	   0.00 	     9	      0.01	  0.01	      0.00   315.79us	1.68ms
     Temp File			229	   0.25        0.13	   0.12 	     3	      0.00	  0.00	      0.00   260.87us
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   80.9% of Total Logical Reads:      46,228,182
-> Captured Segments account for   82.3% of Total Physical Reads:      39,519,448
-> Captured Segments account for   82.3% of Total Physical Read Requests:      39,449,745
-> Captured Segments account for   82.3% of Total UnOptimized Read Requests:	  39,449,745
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       1
-> Captured Segments account for   80.1% of Total Physical Writes:	 6,892,806
-> Captured Segments account for   83.1% of Total Physical Write Requests:	 6,507,481
-> Captured Segments account for   70.4% of Total Direct Physical Writes:	    2,279
-> Captured Segments account for    0.0% of Total Table Scans:		     5
-> Captured Segments account for   46.4% of Total CR Blocks Received:	       25,709
-> Captured Segments account for   51.9% of Total Current Blocks Received:	    16,798
-> Captured Segments account for   38.2% of Total CR Blocks Served:	     31,202
-> Captured Segments account for   48.0% of Total Current Blocks Served:	  18,154
-> Captured Segments account for   74.9% of Total Global Cache Remote Grants:	   10,490,099
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
buffer busy waits	 USER40     IOPS       CF1			       TABLE	  73481      73478	      2    N/A	   66.7
			 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	      1    N/A	   33.3
db block changes	 USER40     IOPS       CF1			       TABLE	  73481      73478	511,296    N/A	   30.6
			 USER35     IOPS       CF1			       TABLE	  73450      73453	296,080    N/A	   17.7
			 USER42     IOPS       CF1			       TABLE	  73488      73492	294,064    N/A	   17.6
			 USER44     IOPS       CF1			       TABLE	  73501      73503	285,504    N/A	   17.1
			 USER122    IOPS       CF1			       TABLE	  73902      73888	283,392    N/A	   17.0
gc buffer busy		 USER43     IOPS       CF1			       TABLE	  73490      73493	      5    N/A	   13.5
			 USER62     IOPS       CF1			       TABLE	  73598      73604	      4    N/A	   10.8
			 USER119    IOPS       CF1			       TABLE	  73882      73885	      3    N/A	    8.1
			 USER31     IOPS       CF1			       TABLE	  73429      73424	      3    N/A	    8.1
			 USER99     IOPS       CF1			       TABLE	  73781      73787	      3    N/A	    8.1
			 USER10     IOPS       CF1			       TABLE	  73325      73320	      2    N/A	    5.4
			 USER109    IOPS       CF1			       TABLE	  73835      73838	      2    N/A	    5.4
			 USER110    IOPS       CF1			       TABLE	  73842      73846	      2    N/A	    5.4
			 USER114    IOPS       CF1			       TABLE	  73861      73866	      2    N/A	    5.4
			 USER40     IOPS       CF1			       TABLE	  73481      73478	      2    N/A	    5.4
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	  74075      74075	      1    N/A	    2.7
			 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	      1    N/A	    2.7
			 USER102    IOPS       CF1			       TABLE	  73799      73803	      1    N/A	    2.7
			 USER11     IOPS       CF1			       TABLE	  73327      73331	      1    N/A	    2.7
			 USER117    IOPS       CF1			       TABLE	  73869      73877	      1    N/A	    2.7
			 USER75     IOPS       CF1			       TABLE	  73664      73658	      1    N/A	    2.7
			 USER76     IOPS       CF1			       TABLE	  73669      73673	      1    N/A	    2.7
			 USER88     IOPS       CF1			       TABLE	  73729      73733	      1    N/A	    2.7
			 USER91     IOPS       CF1			       TABLE	  73743      73740	      1    N/A	    2.7
gc cr blocks received	 USER43     IOPS       CF1			       TABLE	  73490      73493	  1,127    4.4	   22.8
			 USER40     IOPS       CF1			       TABLE	  73481      73478	  1,050    4.1	   21.3
			 USER41     IOPS       CF1			       TABLE	  73483      73479	  1,030    4.0	   20.9
			 USER37     IOPS       CF1			       TABLE	  73460      73466	    934    3.6	   18.9
			 USER39     IOPS       CF1			       TABLE	  73471      73470	    798    3.1	   16.2
gc cr blocks served	 USER43     IOPS       CF1			       TABLE	  73490      73493	  1,127    3.6	   22.8
			 USER40     IOPS       CF1			       TABLE	  73481      73478	  1,050    3.4	   21.3
			 USER41     IOPS       CF1			       TABLE	  73483      73479	  1,030    3.3	   20.9
			 USER37     IOPS       CF1			       TABLE	  73460      73466	    934    3.0	   18.9
			 USER39     IOPS       CF1			       TABLE	  73471      73470	    798    2.6	   16.2
gc cu blocks received	 USER40     IOPS       CF1			       TABLE	  73481      73478	  1,314    7.8	   36.7
			 USER37     IOPS       CF1			       TABLE	  73460      73466	    757    4.5	   21.2
			 USER39     IOPS       CF1			       TABLE	  73471      73470	    677    4.0	   18.9
			 USER35     IOPS       CF1			       TABLE	  73450      73453	    454    2.7	   12.7
			 USER44     IOPS       CF1			       TABLE	  73501      73503	    377    2.2	   10.5
gc cu blocks served	 USER40     IOPS       CF1			       TABLE	  73481      73478	  1,314    7.2	   36.7
			 USER37     IOPS       CF1			       TABLE	  73460      73466	    757    4.2	   21.2
			 USER39     IOPS       CF1			       TABLE	  73471      73470	    677    3.7	   18.9
			 USER35     IOPS       CF1			       TABLE	  73450      73453	    454    2.5	   12.7
			 USER44     IOPS       CF1			       TABLE	  73501      73503	    377    2.1	   10.5
gc remote grants	 USER110    IOPS       CF1			       TABLE	  73842      73846	146,833    1.4	   20.1
			 USER99     IOPS       CF1			       TABLE	  73781      73787	146,586    1.4	   20.1
			 USER28     IOPS       CF1			       TABLE	  73413      73419	145,631    1.4	   20.0
			 USER107    IOPS       CF1			       TABLE	  73825      73828	145,368    1.4	   19.9
			 USER85     IOPS       CF1			       TABLE	  73713      73716	145,234    1.4	   19.9
logical reads		 USER40     IOPS       CF1			       TABLE	  73481      73478    3,400,224    7.4	   28.7
			 SYS	    SYSTEM     USER$			       TABLE	     22 	10    2,622,304    5.7	   22.1
			 USER35     IOPS       CF1			       TABLE	  73450      73453    1,970,496    4.3	   16.6
			 USER42     IOPS       CF1			       TABLE	  73488      73492    1,956,784    4.2	   16.5
			 USER44     IOPS       CF1			       TABLE	  73501      73503    1,890,128    4.1	   16.0
physical reads		 USER40     IOPS       CF1			       TABLE	  73481      73478    2,857,313    7.2	   28.8
			 USER35     IOPS       CF1			       TABLE	  73450      73453    1,821,143    4.6	   18.3
			 USER42     IOPS       CF1			       TABLE	  73488      73492    1,809,954    4.6	   18.2
			 USER44     IOPS       CF1			       TABLE	  73501      73503    1,748,416    4.4	   17.6

Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   80.9% of Total Logical Reads:      46,228,182
-> Captured Segments account for   82.3% of Total Physical Reads:      39,519,448
-> Captured Segments account for   82.3% of Total Physical Read Requests:      39,449,745
-> Captured Segments account for   82.3% of Total UnOptimized Read Requests:	  39,449,745
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       1
-> Captured Segments account for   80.1% of Total Physical Writes:	 6,892,806
-> Captured Segments account for   83.1% of Total Physical Write Requests:	 6,507,481
-> Captured Segments account for   70.4% of Total Direct Physical Writes:	    2,279
-> Captured Segments account for    0.0% of Total Table Scans:		     5
-> Captured Segments account for   46.4% of Total CR Blocks Received:	       25,709
-> Captured Segments account for   51.9% of Total Current Blocks Received:	    16,798
-> Captured Segments account for   38.2% of Total CR Blocks Served:	     31,202
-> Captured Segments account for   48.0% of Total Current Blocks Served:	  18,154
-> Captured Segments account for   74.9% of Total Global Cache Remote Grants:	   10,490,099
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
			 USER122    IOPS       CF1			       TABLE	  73902      73888    1,697,559    4.3	   17.1
physical read requests	 USER40     IOPS       CF1			       TABLE	  73481      73478    2,857,221    7.2	   28.8
			 USER35     IOPS       CF1			       TABLE	  73450      73453    1,821,150    4.6	   18.3
			 USER42     IOPS       CF1			       TABLE	  73488      73492    1,809,963    4.6	   18.2
			 USER44     IOPS       CF1			       TABLE	  73501      73503    1,748,406    4.4	   17.6
			 USER122    IOPS       CF1			       TABLE	  73902      73888    1,697,514    4.3	   17.1
physical writes 	 USER40     IOPS       CF1			       TABLE	  73481      73478	516,448    N/A	   30.1
			 USER35     IOPS       CF1			       TABLE	  73450      73453	305,917    N/A	   17.8
			 USER42     IOPS       CF1			       TABLE	  73488      73492	302,499    N/A	   17.6
			 USER122    IOPS       CF1			       TABLE	  73902      73888	300,433    N/A	   17.5
			 USER44     IOPS       CF1			       TABLE	  73501      73503	292,155    N/A	   17.0
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	  74075      74075	  1,593    N/A	   99.3
			 SYS	    SYSAUX     SYS_LOB0000007451C00 S_LOB_P270 LOB P	  74210      74210	     11    N/A	    0.7
physical write requests  USER40     IOPS       CF1			       TABLE	  73481      73478	485,531    7.5	   29.4
			 USER35     IOPS       CF1			       TABLE	  73450      73453	298,434    4.6	   18.0
			 USER42     IOPS       CF1			       TABLE	  73488      73492	295,225    4.5	   17.9
			 USER122    IOPS       CF1			       TABLE	  73902      73888	289,196    4.4	   17.5
			 USER44     IOPS       CF1			       TABLE	  73501      73503	285,166    4.4	   17.2
row lock waits		 USER25     IOPS       CF1			       TABLE	  73394      73399	      2    N/A	   12.5
			 USER42     IOPS       CF1			       TABLE	  73488      73492	      2    N/A	   12.5
			 USER89     IOPS       CF1			       TABLE	  73731      73736	      2    N/A	   12.5
			 USER102    IOPS       CF1			       TABLE	  73799      73803	      1    N/A	    6.3
			 USER108    IOPS       CF1			       TABLE	  73833      73837	      1    N/A	    6.3
			 USER121    IOPS       CF1			       TABLE	  73895      73898	      1    N/A	    6.3
			 USER122    IOPS       CF1			       TABLE	  73902      73888	      1    N/A	    6.3
			 USER35     IOPS       CF1			       TABLE	  73450      73453	      1    N/A	    6.3
			 USER50     IOPS       CF1			       TABLE	  73540      73535	      1    N/A	    6.3
			 USER58     IOPS       CF1			       TABLE	  73580      73582	      1    N/A	    6.3
			 USER66     IOPS       CF1			       TABLE	  73621      73626	      1    N/A	    6.3
			 USER75     IOPS       CF1			       TABLE	  73664      73658	      1    N/A	    6.3
			 USER85     IOPS       CF1			       TABLE	  73713      73716	      1    N/A	    6.3
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 647	1.9	     2,011    0.7	   2	    0		33	  1,910        1,910	       0	   0
CLUSTER 		  49	0.0		49    0.0	   0	    0		49	     49 	  49	       0	   0
DBLINK			   6	0.0		 0    N/A	   0	    0		 6	      0 	   0	       0	   0
EDITION 		  11	0.0		22    0.0	   0	    0		11	     11 	  11	       0	   0
HINTSET OBJECT		  18   22.2		18   22.2	   0	    0		18	     18 	  18	       0	   0
INDEX			 116	0.9	       116    6.0	   6	    0	       116	    116 	 116	       0	   0
OBJECT ID		   2  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  91	0.0		92    0.0	   0	    0		91	     92 	  92	       0	   0
RULESET 		   0	N/A		 1    0.0	   0	    0		 0	      1 	   1	       0	   0
SCHEMA			 109	1.8		 0    N/A	   0	    0		 3	      0 	   0	       0	   0
SQL AREA	       3,828	7.6	   350,180    0.3	 234	    5		 0	      0 	   0	       0	   0
SQL AREA BUILD		 468   65.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS		 386   81.9	       386   81.9	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        2,984	2.5	    12,660    3.0	 240	    0	     4,366	  9,098        9,098	       0	   0
TRANSFORMATION		  91	0.0		91    0.0	   0	    0		91	     91 	  91	       0	   0
TRIGGER 		  10   30.0		10   30.0	   0	    0		 0	     10 	  10	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  3,215.0    3,215.0	      281.3    1,388.8	      3,371.0	 1,957.4	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
   2	  3,215.0    3,215.0	      318.5    1,383.3	      3,389.3	 1,942.8	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      230.7	 .0	1.3	3.4	33    N/A   171   171
       Other	    1953.7	N/A	4.4	4.0	37     37   445   445
       PL/SQL	     126.7    124.2	 .3	 .2	 1	3   381   379
       SQL	      37.0     26.8	 .1	 .3	 1     12   313   304
       Total	    2348.1    151.0	6.2	7.9	72     52  1310  1299
     E Freeable      162.4	 .0	4.3	8.0	34    N/A    38    38
       Other	     761.8	N/A	4.1	6.4	39     39   188   188
       PL/SQL	       5.7	5.1	 .0	 .2	 1	3   124   121
       SQL	       3.6	2.4	 .1	 .2	 1     18    61    28
       Total	     933.4	7.5	8.4    14.8	76     59   411   375
   2 B Freeable      351.1	 .0	1.2	2.2	23    N/A   283   283
       Other	    1858.4	N/A	4.2	4.1	36     36   439   439
       PL/SQL	     124.4    122.0	 .3	 .2	 2	3   375   373
       SQL	      32.5     25.2	 .1	 .3	 1     11   304   294
       Total	    2366.4    147.2	5.9	6.8	62     50  1401  1389
     E Freeable      155.6	 .0	4.2	6.9	24    N/A    37    37
       Other	     754.9	N/A	4.1	6.4	37     37   185   185
       PL/SQL	       6.2	5.6	 .1	 .2	 2	3   121   118
       SQL	       2.2	1.5	 .0	 .1	 1     11    56    26
       Total	     918.8	7.1	8.4    13.7	63     51   399   366
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p60sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P60S/P60SDB/CONTROLFILE/current.267.1031675639, +FRA
db_block_size			* 8192
db_create_file_dest		* +P60S
db_domain			* example.com
db_name 			* p60sdb
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 137438953472
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p60sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 3371171840
processes			* 640
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_target			* 10133438464
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P60SDB/CONTROLFILE/current.270.1031675639
				* +P60S/P60SDB/CONTROLFILE/current.267.1031675639
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		    13205	   62.31
gc current grant busy		 25.06 UPDATE				   25.06
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


gc current grant 2-way		 13.34 UPDATE				   13.34


gc current grant read-mostly i	 10.06 UPDATE				   10.06

	  bhdvtsvjhgvrh 	  1497866750		     9857	   34.66
gc cr multi block request	 14.12 TABLE ACCESS - BY INDEX ROWID BAT   14.12
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 10.42 TABLE ACCESS - BY INDEX ROWID BAT    6.27


free buffer waits		  4.17 TABLE ACCESS - BY INDEX ROWID BAT    4.08

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		    13205	   62.31
UPDATE					   61.62 gc current grant busy	   25.06
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	  bhdvtsvjhgvrh 	  1497866750		     9857	   34.66
TABLE ACCESS - BY INDEX ROWID BATCHED	   30.05 gc cr multi block reque   14.12
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    4.59 gc cr grant busy	    4.15

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Blocking session activity percentages are calculated with respect to
      waits on enqueues, latches and "buffer busy" only
-> '% Activity' represents the load on the database caused by
      a particular blocking session
-> '# Samples Active' shows the number of ASH samples in which the
      blocking session was found active.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
      when the blocking session was found active.

 Blocking Sid (Inst) % Activity Event Caused			  % Event
-------------------- ---------- ------------------------------ ----------
User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
   343,38654(	  1)	   1.56 free buffer waits		     1.54
SYS		     oracle@mcracpo...le.com (DBW3)	  57/92 [ 62%]	      0

   126,57129(	  1)	   1.25 free buffer waits		     1.24
SYS		     oracle@mcracpo...le.com (DBW1)	  57/92 [ 62%]	      0

   250, 6454(	  1)	   1.24 free buffer waits		     1.23
SYS		     oracle@mcracpo...le.com (DBW2)	  60/92 [ 66%]	      0

			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       62.37
   SQL								       62.37
			  --------------------------------------------------------------------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc current grant busy		    Cluster	    FOREGROUND
     25.34	78.82
gc cr multi block request	    Cluster	    FOREGROUND
     14.18	44.10
gc current grant 2-way		    Cluster	    FOREGROUND
     13.95	43.37
gc cr grant busy		    Cluster	    FOREGROUND
     10.99	34.18
gc current grant read-mostly invali Cluster	    FOREGROUND
     10.48	32.59
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
gc cr multi block request	 14.18		     "8","33149","1"	   0.00
file#			   block#		      class#

db file sequential read 	  7.29		      "8","6704","1"	   0.00
file#			   block#		      blocks

free buffer waits		  6.15		    "1","93120","96"	   0.00
file#			   block#		      set-id#

db file parallel read		  2.63		     "1","125","125"	   1.30
files			   blocks		      requests

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			 DB/Inst: P60SDB/p60sdb1  Snaps: 66-67
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
14:56:36   (3.4 min)	8,964 gc current grant busy		2,066	 7.25
			      gc cr multi block request 	1,384	 4.86
			      gc current grant 2-way		1,282	 4.50
15:00:00   (5.0 min)   15,812 gc current grant busy		4,287	15.05
			      gc current grant 2-way		2,243	 7.87
			      gc cr multi block request 	2,036	 7.15
15:05:00   (5.0 min)	3,696 gc current grant busy		  868	 3.05
			      gc cr multi block request 	  620	 2.18
			      gc cr grant busy			  477	 1.67
15:10:00   (1.9 min)	   16 db file parallel write		   15	 0.05
			      CPU + Wait for CPU		    1	 0.00
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_67'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 66 to 67.
Time period starts at 12-FEB-20 02.56.36 PM
Time period ends at 12-FEB-20 03.11.53 PM

Analysis Target
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 287076 seconds.
The average number of active sessions was 313.06.

Summary of Findings
-------------------
   Description			 Active Sessions      Recommendations
				 Percent of Activity
   ----------------------------  -------------------  ---------------
1  Interconnect Latency 	 313.06 | 100	      1
2  Top SQL Statements		 312.45 | 99.8	      2
3  Global Cache Messaging	 224.54 | 71.72       1
4  Buffer Busy - Hot Objects	 120.13 | 38.37       0
5  Unusual "Cluster" Wait Event  34.04 | 10.87	      3
6  "User I/O" wait Class	 33.87 | 10.82	      0
7  "Configuration" Wait Class	 19.97 | 6.38	      0
8  Free Buffer Waits		 19.96 | 6.38	      1
9  Global Cache Congestion	 3.58 | 1.14	      1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 313.4 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 79212 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 96% for database lock management.
The average latency for 8K interconnect messages was 77357 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.26	     ADDM:3889879926_1_67
    2	    p60sdb2  48.74	     ADDM:3889879926_2_67

   Recommendation 1: Host Configuration
   Estimated benefit is 313.06 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 224.54 active sessions, 71.72% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 258.59 active sessions, 82.6% of total activity.


Finding 2: Top SQL Statements
Impact is 312.79 active sessions, 99.8% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.6	     ADDM:3889879926_1_67
    2	    p60sdb2  49.4	     ADDM:3889879926_2_67

   Recommendation 1: SQL Tuning
   Estimated benefit is 193.81 active sessions, 61.91% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 96% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 46494 times and
      had an average elapsed time of 3.8 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 98.23 active sessions, 31.38% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 87% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 265424 times and
      had an average elapsed time of 0.37 seconds.


Finding 3: Global Cache Messaging
Impact is 224.79 active sessions, 71.72% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.81	     ADDM:3889879926_2_67
    1	    p60sdb1  48.19	     ADDM:3889879926_1_67

   Recommendation 1: Application Analysis
   Estimated benefit is 224.54 active sessions, 71.72% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID "35dumc2tpr9dv" is responsible for 77% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 258.59 active sessions, 82.6% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 120.26 active sessions, 38.37% of total activity.
-----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  100	     ADDM:3889879926_1_67

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 120.13 active sessions, 38.37% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 224.54 active sessions, 71.72% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 258.59 active sessions, 82.6% of total activity.


Finding 5: Unusual "Cluster" Wait Event
Impact is 34.08 active sessions, 10.87% of total activity.
----------------------------------------------------------
Wait event "gc current grant read-mostly invalidation" in wait class "Cluster"
was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.49	     ADDM:3889879926_1_67
    2	    p60sdb2  48.51	     ADDM:3889879926_2_67

   Recommendation 1: Application Analysis
   Estimated benefit is 34.04 active sessions, 10.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits. Refer to Oracle's "Database Reference" for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 34.04 active sessions, 10.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Module "SQL*Plus".

   Recommendation 3: Application Analysis
   Estimated benefit is 34.04 active sessions, 10.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Service "p60sdb.example.com".

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 258.59 active sessions, 82.6% of total activity.


Finding 6: "User I/O" wait Class
Impact is 33.91 active sessions, 10.82% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.61	     ADDM:3889879926_1_67
    2	    p60sdb2  49.39	     ADDM:3889879926_2_67

   No recommendations are available.


Finding 7: "Configuration" Wait Class
Impact is 19.99 active sessions, 6.38% of total activity.
---------------------------------------------------------
Wait class "Configuration" was consuming significant database time.
Waits for archiver processes were not consuming significant database time.
Log file switch operations were not consuming significant database time while
waiting for checkpoint completion.
High watermark (HW) enqueue waits were not consuming significant database
time.
Space Transaction (ST) enqueue waits were not consuming significant database
time.
ITL enqueue waits were not consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  80.68	     ADDM:3889879926_1_67
    2	    p60sdb2  19.32	     ADDM:3889879926_2_67

   No recommendations are available.


Finding 8: Free Buffer Waits
Impact is 19.98 active sessions, 6.38% of total activity.
---------------------------------------------------------
Waits for free buffers were consuming significant database time in some
instances. Database writers (DBWR) were unable to keep up with the demand for
free buffers.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  80.68	     ADDM:3889879926_1_67
    2	    p60sdb2  19.32	     ADDM:3889879926_2_67

   Recommendation 1: Examine instance ADDM
   Estimated benefit is 19.96 active sessions, 6.38% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate the I/O subsystem's write performance. Consider increasing
      the number of database writers, the appropriateness of asynchronous I/O,
      and use of direct path inserts. Check the ADDM analysis of affected
      instances for more details.


Finding 9: Global Cache Congestion
Impact is 3.58 active sessions, 1.14% of total activity.
--------------------------------------------------------
Global Cache Service Processes (LMSn) were not processing requests fast
enough.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  55.11	     ADDM:3889879926_1_67
    2	    p60sdb2  44.89	     ADDM:3889879926_2_67

   Recommendation 1: Database Configuration
   Estimated benefit is 3.58 active sessions, 1.14% of total activity.
   -------------------------------------------------------------------
   Action
      Increase throughput of the Global Cache Service (LMSn) processes.
      Increase the number of Global Cache Service processes by increasing the
      value of the parameter "gcs_server_processes". Alternatively, if the
      host is CPU bound consider increasing the OS priority of the Global
      Cache Service processes.
   Rationale
      The value of parameter "gcs_server_processes" was "3" during the
      analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 224.54 active sessions, 71.72% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 258.59 active sessions, 82.6% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  160.64	     51.26
    2	    p60sdb2  mcracpoc2.example.com  152.76	     48.74

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1
		    53	12 Feb 2020 12:13    1
		    54	12 Feb 2020 12:24    1
		    55	12 Feb 2020 12:34    1
		    56	12 Feb 2020 12:44    1
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		    57	12 Feb 2020 12:46    1
		    58	12 Feb 2020 12:50    1
		    59	12 Feb 2020 12:56    1
		    60	12 Feb 2020 13:09    1
		    61	12 Feb 2020 13:51    1
		    62	12 Feb 2020 14:03    1
		    63	12 Feb 2020 14:12    1
		    64	12 Feb 2020 14:31    1
		    65	12 Feb 2020 14:42    1
		    66	12 Feb 2020 14:56    1
		    67	12 Feb 2020 15:11    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 66

End   Snapshot Id specified: 67



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_66_67.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P60SDB, Snaps: 66-67</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>3889879926</td><td headers="Database Name" class='awrc'>P60SDB</td><td headers="Database UniqueName" class='awrc'>p60sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>66</td><td align="right" headers="SnapshotIds End" class='awrc'>67</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>4,784.59</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>15.28</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p60sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>12-Feb-20 14:29</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>15.27</td><td align="right" class='awrc'>2,452.43</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>160.64</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p60sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>12-Feb-20 14:29</td><td class='awrnc'>12-Feb-20 14:56</td><td class='awrnc'>12-Feb-20 15:11</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>15.27</td><td align="right" class='awrnc'>2,332.16</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>152.76</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>313.40</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_67</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>313.40</td><td align="right" class='awrnc'>99.80</td><td scope="row" class='awrnc'>ADDM:3889879926_67</td><td class='awrnc'>12-Feb-20 14:56</td><td class='awrnc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>313.40</td><td align="right" class='awrc'>71.72</td><td scope="row" class='awrc'>ADDM:3889879926_67</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>313.40</td><td align="right" class='awrnc'>38.37</td><td scope="row" class='awrnc'>ADDM:3889879926_67</td><td class='awrnc'>12-Feb-20 14:56</td><td class='awrnc'>12-Feb-20 15:11</td></tr>
<tr><td class='awrc'>Unusual &quot;Cluster&quot; Wait Event</td><td align="right" class='awrc'>313.40</td><td align="right" class='awrc'>10.87</td><td scope="row" class='awrc'>ADDM:3889879926_67</td><td class='awrc'>12-Feb-20 14:56</td><td class='awrc'>12-Feb-20 15:11</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>7,712</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>1,632</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>160</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>3,232</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>7,712</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>1,632</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>160</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>3,232</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>9,664</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>7,712</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,632</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>160</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,232</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9,664</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>7,712</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,632</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>160</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,232</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>9,664</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>7,712</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,632</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>160</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,232</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>32</td><td align="right" headers="CPU #Cores" class='awrc'>16</td><td align="right" headers="CPU #Sckts" class='awrc'>1</td><td align="right" headers="Load Begin" class='awrclb'>20.93</td><td align="right" headers="Load End" class='awrc'>0.36</td><td align="right" headers="%CPU %Busy" class='awrclb'>17.67</td><td align="right" headers="%CPU %Usr" class='awrc'>4.83</td><td align="right" headers="%CPU %Sys" class='awrc'>8.29</td><td align="right" headers="%CPU %WIO" class='awrc'>19.22</td><td align="right" headers="%CPU %Idl" class='awrc'>82.33</td><td align="right" headers="Time(s) Busy" class='awrclb'>4,867.74</td><td align="right" headers="Time(s) Idle" class='awrc'>22,680.64</td><td align="right" headers="Time(s) Total" class='awrc'>27,548.38</td><td align="right" headers="Memory MB" class='awrclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>32</td><td align="right" headers="CPU #Cores" class='awrnc'>16</td><td align="right" headers="CPU #Sckts" class='awrnc'>1</td><td align="right" headers="Load Begin" class='awrnclb'>21.01</td><td align="right" headers="Load End" class='awrnc'>2.35</td><td align="right" headers="%CPU %Busy" class='awrnclb'>25.29</td><td align="right" headers="%CPU %Usr" class='awrnc'>6.60</td><td align="right" headers="%CPU %Sys" class='awrnc'>11.22</td><td align="right" headers="%CPU %WIO" class='awrnc'>15.07</td><td align="right" headers="%CPU %Idl" class='awrnc'>74.71</td><td align="right" headers="Time(s) Busy" class='awrnclb'>6,836.07</td><td align="right" headers="Time(s) Idle" class='awrnc'>20,195.86</td><td align="right" headers="Time(s) Total" class='awrnc'>27,031.93</td><td align="right" headers="Memory MB" class='awrnclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>11,703.81</td><td align="right" class='awrct'>42,876.50</td><td align="right" class='awrct'>54,580.31</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>147,145.87</td><td align="right" class='awrc'>2,290.54</td><td align="right" class='awrc'>147,138.89</td><td align="right" class='awrc'>2.35</td><td align="right" class='awrc'>2.22</td><td align="right" class='awrc'>7.27</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4,277.45</td><td align="right" class='awrc'>1,274.06</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>139,929.64</td><td align="right" class='awrnc'>3,457.25</td><td align="right" class='awrnc'>139,909.82</td><td align="right" class='awrnc'>5.89</td><td align="right" class='awrnc'>5.39</td><td align="right" class='awrnc'>13.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4,501.72</td><td align="right" class='awrnc'>1,548.86</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>287,075.51</td><td align="right" class='awrct'>5,747.79</td><td align="right" class='awrct'>287,048.71</td><td align="right" class='awrct'>8.24</td><td align="right" class='awrct'>7.62</td><td align="right" class='awrct'>20.37</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>8,779.16</td><td align="right" class='awrct'>2,822.92</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>143,537.76</td><td align="right" class='awrnc'>2,873.90</td><td align="right" class='awrnc'>143,524.36</td><td align="right" class='awrnc'>4.12</td><td align="right" class='awrnc'>3.81</td><td align="right" class='awrnc'>10.18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4,389.58</td><td align="right" class='awrnc'>1,411.46</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>5,102.65</td><td align="right" class='awrc'>824.99</td><td align="right" class='awrc'>5,111.73</td><td align="right" class='awrc'>2.51</td><td align="right" class='awrc'>2.24</td><td align="right" class='awrc'>4.12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>158.58</td><td align="right" class='awrc'>194.31</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>51.26</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>1.56</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>100.00</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.00</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>48.72</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>29.79</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>48.74</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>2.47</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>51.28</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>34.41</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>2.01</td><td align="right" class='awrct'>99.99</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>32.10</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>10.82</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>6.38</td><td align="right" class='awrc'>82.60</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>15,719.91</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>92.47</td><td align="right" class='awrc'>25.58</td><td align="right" class='awrc'>4.43</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.72</td><td align="right" class='awrc'>14,774.76</td><td align="right" class='awrc'>115,989.56</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,290.54</td><td align="right" class='awrc'>147,145.87</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>15,339.95</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>345.24</td><td align="right" class='awrnc'>39.30</td><td align="right" class='awrnc'>15.67</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>4.93</td><td align="right" class='awrnc'>3,537.34</td><td align="right" class='awrnc'>121,134.47</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3,457.25</td><td align="right" class='awrnc'>139,929.64</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>31,059.86</td><td align="right" class='awrct'>0.10</td><td align="right" class='awrct'>437.71</td><td align="right" class='awrct'>64.88</td><td align="right" class='awrct'>20.09</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>5.64</td><td align="right" class='awrct'>18,312.10</td><td align="right" class='awrct'>237,124.03</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>5,747.79</td><td align="right" class='awrct'>287,075.51</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>15,529.93</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>218.86</td><td align="right" class='awrnc'>32.44</td><td align="right" class='awrnc'>10.05</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>2.82</td><td align="right" class='awrnc'>9,156.05</td><td align="right" class='awrnc'>118,562.02</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,873.90</td><td align="right" class='awrnc'>143,537.76</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>268.67</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>178.74</td><td align="right" class='awrc'>9.70</td><td align="right" class='awrc'>7.95</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>7,946.06</td><td align="right" class='awrc'>3,638.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>824.99</td><td align="right" class='awrc'>5,102.65</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>10.68</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.00</td><td align="right" headers="%DBtime Other" class='awrc'>0.06</td><td align="right" headers="%DBtime Applic" class='awrc'>0.02</td><td align="right" headers="%DBtime Commit" class='awrc'>0.00</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.00</td><td align="right" headers="%DBtime Config" class='awrc'>10.04</td><td align="right" headers="%DBtime Cluster" class='awrc'>78.83</td><td align="right" headers="%DBtime Admin" class='awrc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>1.56</td><td align="right" class='awrc'>51.26</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>10.96</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>0.25</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.03</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.01</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.00</td><td align="right" headers="%DBtime Config" class='awrnc'>2.53</td><td align="right" headers="%DBtime Cluster" class='awrnc'>86.57</td><td align="right" headers="%DBtime Admin" class='awrnc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>2.47</td><td align="right" class='awrnc'>48.74</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>10.82</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.15</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>6.28</td><td align="right" class='awrct'>82.70</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>2.01</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,461,826</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>79,330.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>54.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>27.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>52.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>56.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.00ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>344,495</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>42,650.39</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>123.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>14.86</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>123.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>111.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>135.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>17.03ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>182,227</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39,726.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>218.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.84</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>217.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>215.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>220.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.21ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>364,201</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>31,215.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>85.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>10.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>85.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>82.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>88.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>3.83ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>332,814</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30,647.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>92.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>91.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>89.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>94.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.46ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7,256,332</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22,758.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>307.35us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,891,910</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18,036.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>157.22us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>47,177</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10,334.75</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>219.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>219.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>215.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>223.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>6.19ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>645,007</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8,302.95</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>.95ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,747.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>671,550</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>37,986.10</td><td align="right" headers="WaitTime AvgWait" class='awrct'>56.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>25.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>174,222</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>23,643.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>135.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>16.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>80,934</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17,439.89</td><td align="right" headers="WaitTime AvgWait" class='awrc'>215.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>189,576</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16,741.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>88.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>11.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,527,409</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14,626.86</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.58ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>9.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>153,136</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13,697.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>89.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>3,330,882</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11,229.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>26,143</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,625.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>215.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>365,770</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,494.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,290.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>790,276</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>41,344.28</td><td align="right" headers="WaitTime AvgWait" class='awrct'>52.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>29.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>101,293</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22,287.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>220.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>15.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>170,273</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19,006.97</td><td align="right" headers="WaitTime AvgWait" class='awrc'>111.63ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>179,678</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16,950.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>94.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>12.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>174,625</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14,474.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>82.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,925,450</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,528.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>21,034</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,709.74</td><td align="right" headers="WaitTime AvgWait" class='awrc'>223.91ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>279,237</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,808.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,457.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>364,501</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,409.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,461,114</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>79,282.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>54.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>27.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>52.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>56.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.00ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>344,308</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>42,643.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>123.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>14.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>123.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>111.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>135.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>17.06ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>182,136</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39,722.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>218.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.84</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>217.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>215.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>220.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.11ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>364,201</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>31,215.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>85.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>10.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>85.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>82.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>88.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>3.83ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>331,179</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30,545.76</td><td align="right" headers="WaitTime AvgWait" class='awrc'>92.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>92.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>89.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>94.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.44ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7,250,489</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22,749.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>308.51us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,889,266</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18,010.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>157.26us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>47,139</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10,331.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>219.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>219.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>215.25ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>224.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>6.20ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>645,001</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8,302.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,747.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>671,086</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>37,954.50</td><td align="right" headers="WaitTime AvgWait" class='awrct'>56.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>25.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>174,106</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>23,639.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>135.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>16.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>80,852</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17,435.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>215.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>189,576</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16,741.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>88.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>11.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,524,922</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14,602.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.58ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>9.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>152,285</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13,645.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>89.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>3,327,116</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11,224.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>26,118</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,622.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>215.25ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>365,768</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,494.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,290.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>790,028</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>41,327.97</td><td align="right" headers="WaitTime AvgWait" class='awrct'>52.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>29.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>101,284</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22,287.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>220.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>15.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>170,202</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19,003.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>111.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>178,894</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16,900.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>94.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>12.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>174,625</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14,474.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>82.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,923,373</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,524.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>21,021</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,709.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>224.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>279,233</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,808.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,457.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>364,344</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,407.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,822.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>32.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>31,949</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,361.49</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>42.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>15.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>42.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>3.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>235,063</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>818.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>9.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>13,518</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>451.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>33.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>33.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>31.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>35.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>3.04ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>7,268</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>131.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>18.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>19.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.33ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,637</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>101.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>62.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>62.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>63.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>113,144</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>53.85</td><td align="right" headers="WaitTime AvgWait" class='awrc'>475.93us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>517.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>463.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>571.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>76.97us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>875</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>52.69</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>61.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>44.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>78.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>23.70ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>711</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>47.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>67.33ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>66.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>64.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>69.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.44ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>496</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>47.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>96.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.54</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>93.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>84.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>102.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>12.87ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,274.06</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>29.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>14,808</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>672.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>45.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>15.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>6,141</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>219.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>35.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>91,216</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>147.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>3,496</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>66.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>19.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>851</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>51.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.68ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>99,747</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>46.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>463.04us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>406</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>31.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>78.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.74</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>457</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>31.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>69.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.74</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>338</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>24.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>73.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,548.86</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>34.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>17,141</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>688.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>40.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>15.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>143,847</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>670.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>14.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>7,377</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>231.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>31.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>3,772</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>64.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>786</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>49.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>63.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>1,206</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>33.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.74</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>51</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>33.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>655.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.74</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>307</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>31.62</td><td align="right" headers="WaitTime AvgWait" class='awrc'>102.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>1,284</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>28.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,461,114</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>79,282.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>54.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>27.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>52.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>56.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.00ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>344,308</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>42,643.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>123.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>14.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>123.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>111.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>135.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.06ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>182,136</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39,722.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>218.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.84</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>217.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>215.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>220.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.11ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>364,201</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>31,215.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>85.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>10.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>85.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>82.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>88.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.83ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>331,179</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30,545.76</td><td align="right" headers="WaitTime AvgWait" class='awrc'>92.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>92.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>89.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>94.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.44ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7,250,489</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22,749.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>308.51us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,889,266</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18,010.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>157.26us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>47,139</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10,331.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>219.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>219.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>215.25ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>224.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>645,001</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8,302.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.96ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>2,703</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,655.47</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>612.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>629.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>607.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>652.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>31.62ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>2,250</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>843.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>374.84ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>365.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>310.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>419.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>77.49ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>1,920</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>394.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>205.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>197.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>184.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>211.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>18.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>460</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>296.85</td><td align="right" headers="WaitTime AvgWait" class='awrc'>645.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>627.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>603.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>652.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>34.88ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>146</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>293.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2012.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2012.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1771.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2252.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>339.94ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>11,381</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>250.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>23.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>37.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>20.19ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>5,170</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>143.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>54.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>31.35ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,798</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>73.84</td><td align="right" headers="WaitTime AvgWait" class='awrc'>41.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>50.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>19.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>81.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>43.84ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TX - row lock contention</td><td align="right" headers="Event Waits" class='awrnclb'>17</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>64.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3815.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3876.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2841.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4912.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1464.64ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>101</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>46.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>464.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>460.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>304.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>615.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>219.48ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrnclb'>132</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>231.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>225.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>209.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>240.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges message buffer allocation</td><td align="right" headers="Event Waits" class='awrclb'>90</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>24.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>273.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>274.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>249.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>299.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>35.31ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Commit</td><td headers="Wait Event" class='awrnc'>log file sync</td><td align="right" headers="Event Waits" class='awrnclb'>344</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>20.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>58.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>53.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>38.84ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>68.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.69ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>869</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.41ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>417</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>23.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>17.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>466</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>14.12ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>log buffer space</td><td align="right" headers="Event Waits" class='awrnclb'>113</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>65.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>65.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>65.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>65.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock escalate retry</td><td align="right" headers="Event Waits" class='awrclb'>723</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>1,804</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>797.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>130</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.94ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>16</td><td align="right" headers="Event %Timeouts" class='awrnc'>12.50</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>263.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>228.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>88.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>368.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>198.28ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>185.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>180.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>142.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>218.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>53.51ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>1,892</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.72</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>819.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>542.03us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrclb'>318</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.13ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>29.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>100.69us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch free</td><td align="right" headers="Event Waits" class='awrclb'>2,713</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>763.80us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>707.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>413.79us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>415.25us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>2,173</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>691.73us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>592.02us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>383.89us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>800.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>294.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>40</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>377.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>48.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>34.09ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>117</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.35ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>1,149</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.00ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>842.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>493.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>494.02us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>read by other session</td><td align="right" headers="Event Waits" class='awrnclb'>93</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.94ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>272</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>49.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>332</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>850.88us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>626.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>317.97us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>645</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>408.45us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>337.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>172.85us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>502.49us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>233.09us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>25</td><td align="right" headers="Event %Timeouts" class='awrnc'>92.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.67ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>468</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>472.34us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>414.61us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>288.35us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>540.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>178.55us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>40.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>40.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>2,687</td><td align="right" headers="Event %Timeouts" class='awrc'>100.07</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>59.78us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>48.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>34.96us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.92us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>160</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>617.44us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>556.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>314.27us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>799.35us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>343.01us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>168</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>480.27us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>413.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>331.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>495.90us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>116.03us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>538.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.84ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>2.63</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.03ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>1,246</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>46.22us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>46.99us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>37.41us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>56.58us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>1,415</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>31.35us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>24.97us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.19us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.23us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>19</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>838.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>742.47us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache pin</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.25ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>730.68us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>72.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>26</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>562.42us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>438.18us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>276.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>599.70us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>228.42us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrclb'>182</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>79.37us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>79.37us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>79.37us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>79.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>705.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.45ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>645.23us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>1,215</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.57us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.99us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.94us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>182.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>441.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>871.69us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>10</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>647.10us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>588.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>292.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>883.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>417.90us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>477.33us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>309.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>109.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>510.82us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>284.13us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrnclb'>16</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>320.25us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>223.49us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>68.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>378.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>218.95us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>228.36us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>222.23us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>154.70us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>289.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>95.49us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>742.17us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>742.17us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>742.17us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>742.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>37</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>103.14us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>103.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>98.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>109.81us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.32us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>866.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>496.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>523.97us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>446.33us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>446.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>213.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>679.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>329.98us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>24</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.50us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>36.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>36.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>36.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>177.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>177.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>177.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>177.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>13</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.92us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.89us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: active service list</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>127.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>127.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>127.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>127.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>36.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.03us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.20us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: bucket mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>25.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>25.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.83us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrclb'>3,035</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9,105.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3000.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.17</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3000.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3000.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3000.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>24.73us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>1,217</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>911.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>748.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>644.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1285.81ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>907.64ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrclb'>210</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>67.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>67.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>101.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>47.83ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrnclb'>582</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>251.01us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>70</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>40.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>40.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>40.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>31,949</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,361.49</td><td align="right" headers="WaitTime AvgWait" class='awrc'>42.61ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>42.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>40.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>45.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.73ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>235,063</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>818.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.15ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>13,518</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>451.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>31.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.04ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrnclb'>7,268</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>131.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>17.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>19.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.33ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,637</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>101.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>62.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>62.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>63.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.96ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrnclb'>113,144</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>53.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>475.93us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>517.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>463.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>571.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>76.97us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>875</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>52.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>61.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>44.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>78.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.70ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>711</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>47.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>67.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>66.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>64.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>69.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.44ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>496</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>47.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>96.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>93.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>84.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>102.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>12.87ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>182,916</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.82</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>37.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>203.75us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>278.66us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>123.96us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>433.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>218.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>2,420</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>35.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>18.69ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>627</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>34.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>54.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>53.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>32.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>73.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>28.99ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>52</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>34.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>656.88ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>693.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>655.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>730.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>53.18ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>4,126</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>32.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.89ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.85ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>1,844</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>31.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>21.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.08ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>5,460</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>552.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.22ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>2,644</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>25.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.63ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.84us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>539</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>23.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>44.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>55.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>19.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>91.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>51.00ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>178</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>22.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>124.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>104.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>73.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>134.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>43.53ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>233</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>82.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>81.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>152.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>101.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrclb'>196</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>92.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>92.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>70.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>113.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>30.46ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>13</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>856.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>777.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>629.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>924.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>208.07ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>5,849</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.53ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.59ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>293.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>170,280</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>48.01us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>50.05us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>33.87us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>66.22us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.87us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write</td><td align="right" headers="Event Waits" class='awrclb'>139</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>56.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>34.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>75.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>28.85ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>186</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>38.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>40.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>32.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>48.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.90ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrclb'>1,875</td><td align="right" headers="Event %Timeouts" class='awrc'>97.01</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.34ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrnclb'>8,343</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>832.42us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>832.28us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>813.59us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>850.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>26.43us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>10,551</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>644.81us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>643.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>534.73us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>752.53us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>154.01us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrnclb'>3,415</td><td align="right" headers="Event %Timeouts" class='awrnc'>46.21</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>111.04us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrclb'>165</td><td align="right" headers="Event %Timeouts" class='awrc'>55.15</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>36.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.57ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrnclb'>95</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5.68</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>59.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>57.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>49.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>64.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.16ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrclb'>216</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.31</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.73ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrnclb'>1,518</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>340.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>91</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>46.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>838.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>51.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>36.07ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrnclb'>103</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.65</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.47ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>81.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>157.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>107.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>90.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>77.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>34.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>120.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>61.01ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>122,003</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.90us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>26.18us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.46us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>write complete waits</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1053.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1053.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1053.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1053.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>491</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>432.82us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,204</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>545.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>52.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.09ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>107</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>25.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>28.85ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>107.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>107.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>52.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>163.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>78.26ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>1,383</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>230.53us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.90</td><td align="right" headers="WaitTime AvgWait" class='awrc'>173.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>141.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>92.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>190.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>69.34ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>197.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>262.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>68.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>456.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>274.04ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrclb'>140</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.24ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>17</td><td align="right" headers="Event %Timeouts" class='awrnc'>17.65</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>91.15ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>55.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>922.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>110.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>77.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrclb'>207,080</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.67us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.59us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.03us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.14us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>783.17ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>555</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>869.11us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>391.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>295.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>582.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>406.50ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>3,150</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>346.19us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>341.41us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>280.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>402.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>86.65us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>1,773</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>605.68us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>495.45us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>289.51us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>701.39us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>291.25us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>2,208</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>472.08us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>433.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>301.42us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>565.85us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>186.97us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>70</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>111.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>24.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>16.91ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Commit</td><td headers="Wait Event" class='awrnc'>log file sync</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>476.32ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>476.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>947.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>666.87ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>68.93ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>79.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>143.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>90.15ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" headers="Event Waits" class='awrnclb'>2,134</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>384.29us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>391.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>332.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>450.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>83.26us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>1,408</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>517.89us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>517.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>502.41us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>533.41us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.92us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.68</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.73ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.65ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrclb'>81</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.29ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrnclb'>18,139</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.63us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.63us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.43us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrclb'>18,520</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.28us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.29us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.21us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>108.05ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>56</td><td align="right" headers="Event %Timeouts" class='awrnc'>32.14</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.53ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>16.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.66ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrclb'>271</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.69ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.58ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrnclb'>14</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.73ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>69</td><td align="right" headers="Event %Timeouts" class='awrc'>97.10</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.68ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.69ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>340</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>939.67us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>880.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>723.53us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>222.07us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges message buffer allocation</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.31</td><td align="right" headers="WaitTime AvgWait" class='awrc'>44.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>51.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>440.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>102.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>72.21ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>47</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>685.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock escalate retry</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>174.42us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrnclb'>262</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>872.76us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>775.39us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>590.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>261.41us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: MW - contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>215.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>215.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>215.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>215.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>200</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>921.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>695.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>319.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.68ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>23.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>44.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.88ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>46.32ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>46.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>87.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>58.74ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>cr request retry</td><td align="right" headers="Event Waits" class='awrclb'>19</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>241</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>723.05us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>582.22us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>334.48us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>829.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>350.35us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>184</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>676.65us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>540.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>303.13us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>777.12us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>335.16us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrnclb'>56</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>316.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>2,094</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>53.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>53.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>53.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>54.05us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>709.46ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrnclb'>141</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>768.24us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>743.06us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>556.21us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>929.91us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>264.25us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>1,461</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>70.90us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>70.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>66.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>74.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.61us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>756.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>519.61us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrclb'>2,670</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>31.98us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>31.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>32.51us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>741.32ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrnclb'>63</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.17ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>97.74us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrclb'>25</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>100.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.47ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrnclb'>7,199</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.51us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.52us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.37us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>221.65ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: DW - contention</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.36ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrnclb'>15</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>os thread creation</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>660.54us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrnclb'>90</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>364.31us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>406.22us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>347.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>465.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>83.35us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrclb'>79</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>346.77us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>345.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>331.97us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>358.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>18.79us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>297.27us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>284.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>218.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>349.93us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>93.09us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: SM -  contention</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>602.57us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.73ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>50.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.64ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>837.74us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.33ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.17ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>58.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.61ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>645.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>448.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>174.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>723.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>388.56us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>34</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>255.56us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>234.84us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>117.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>352.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>166.04us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>33</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>245.97us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>196.85us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>88.78us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>304.92us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>152.83us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: DR - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.01ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>625.61us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: kjci process context latch</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>538.78us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>669.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>434.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>905.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>332.95us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.17ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>900.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>385.37us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrnclb'>548</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.49us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>709.67ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>515</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.97us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.99us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.54us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>655.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>660.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>645.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>676.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.27us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>812.67us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>812.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>812.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>812.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: active service list</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>178.86us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>178.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>178.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>178.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrnclb'>56</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.11us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.77us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrclb'>56</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.70us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.04us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.89us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>155.33us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>187.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>90.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>285.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>137.53us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>35.83us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>39.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.56us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>20</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.85us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.73us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>192.85ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>76.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>76.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>76.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>76.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>16.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.96us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.83us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>16.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrnclb'>74</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>118,484.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1601.14 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>13.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1601.14 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1591.66 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1610.62 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.41 s</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>15,744</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>67,031.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4257.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>7.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4257.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4242.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4271.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>20.29ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrnclb'>117,481</td><td align="right" headers="Event %Timeouts" class='awrnc'>36.34</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>45,403.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>386.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>5.17</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>386.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>377.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>396.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.51ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>class slave wait</td><td align="right" headers="Event Waits" class='awrclb'>23,112</td><td align="right" headers="Event %Timeouts" class='awrc'>77.01</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12,075.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>522.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>1.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>523.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>467.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>578.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>78.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrnclb'>2,790</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.96</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,461.84</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1957.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1957.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1957.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1957.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>302.90us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrclb'>542,318</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,451.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.05ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>33.44us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrnclb'>185,445</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.96</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,430.60</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.28ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>532.18us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrclb'>3,893,805</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,186.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>159.86us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pmon timer</td><td align="right" headers="Event Waits" class='awrnclb'>1,214</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,641.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2999.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>19.63us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ges remote message</td><td align="right" headers="Event Waits" class='awrclb'>60,289</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,636.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.31ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>309.86us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrnclb'>12,102</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,634.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>300.31ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>300.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>170.55us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrclb'>26,963</td><td align="right" headers="Event %Timeouts" class='awrc'>73.83</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,627.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>134.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>134.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>132.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>136.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.88ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Timer</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,400.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>35.71us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrclb'>23,372</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,136.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>91.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>92.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>81.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>102.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>14.82ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,830.14</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrclb'>61</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,830.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>38.91us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrnclb'>6,335</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,821.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>287.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>287.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>282.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>292.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.85ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>OFS idle</td><td align="right" headers="Event Waits" class='awrclb'>607</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,821.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3000.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3000.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3000.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3000.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>31.52us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pman timer</td><td align="right" headers="Event Waits" class='awrnclb'>607</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,820.83</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2999.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>32.68us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrclb'>133</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,820.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.68 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.69 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.59 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.79 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>138.88ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>67</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,820.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.17 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.16 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.15 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.18 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.61ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,820.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>lreg timer</td><td align="right" headers="Event Waits" class='awrnclb'>606</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,819.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3002.69ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3002.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3002.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3002.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>67.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>31</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,819.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>58.69 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>58.74 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>57.20 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.28 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2176.08ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrnclb'>1,819</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,819.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1000.20ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1000.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1000.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1000.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.70us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrclb'>1,038</td><td align="right" headers="Event %Timeouts" class='awrc'>86.71</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,816.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1750.44ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1750.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1750.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1750.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>41.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrnclb'>18,306</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,811.59</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>98.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>98.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>98.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>99.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>434.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PING</td><td align="right" headers="Event Waits" class='awrclb'>1,620</td><td align="right" headers="Event %Timeouts" class='awrc'>19.63</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,810.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1117.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1120.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1067.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1173.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>75.37ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,800.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>30</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,800.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>211.28us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,800.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>46.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>smon timer</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,800.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>284.02us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>65.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>54.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>107.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>75.02ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrclb'>204</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.26ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.80ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>302</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>322.42us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>516</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>367.19us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>881.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,971</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.03us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.18us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.21us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>heartbeat monitor sleep</td><td align="right" headers="Event Waits" class='awrclb'>33</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.79us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>20.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>36.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.73us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>18K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>170K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.0(61)</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(29)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>8277</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>90.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>18.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>82.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>65.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>76.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>1518</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>39.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>1873</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.4</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>2446</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>1672</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>80.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>78.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>5432</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>1467</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1980</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>82.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>183.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(58)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(19)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(13)</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>3389</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>502</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>13.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(6)</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>251</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>7143</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>3322</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>32.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>70</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>48.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>140</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>122.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>88.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(22)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>182</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>1732</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>89.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>216</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>39.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>553</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>76.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer deadlock</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>870</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>10.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>35.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cr request retry</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>206.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.0(97)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(36)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>640.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(42)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>40.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(28)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>234.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>2045</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>7.1M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(272)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1938)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(39)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>143</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>23.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>140</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>49.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>165</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: MW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>94</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>233</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>46.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>2.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>194</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>2.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - row lock contention</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>52.9</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>46.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>1.9M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>94.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(22)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(25)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>104</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>10.6</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>5924</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>314</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>233</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>509</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>76.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>2.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>95</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.1</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>589</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>5679</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>330.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(21)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>454</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>46.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>181.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>5.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>2252</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>28.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>6.4</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>1618</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>56.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>11.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>913</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>43.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>2707</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>72.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.4</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>337.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(39)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(131)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(109)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.9</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>1.4M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(62)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(22)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(69)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(144)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.7</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>46.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.7</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>356.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.0(84)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>53.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>110K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(49)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>81</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>61.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>93</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>86.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>84.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>2088</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>2659</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>5806</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>141</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: active service list</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>1332</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>2393</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>90</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>2191</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>4299</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>182</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: kjci process context latch</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>397</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>616</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>7205</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>555</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.1</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>503</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>2692</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>72.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock escalate retry</td><td align="right" class='awrc'>749</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log buffer space</td><td align="right" class='awrnc'>114</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>59.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>31.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(15)</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>1373</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>347</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>64.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>92</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>107</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.9</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>97</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>149</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>77.2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>21,583,064</td><td align="right" class='awrc'>17,174,219</td><td align="right" class='awrc'>3,090,491</td><td align="right" class='awrc'>2,289,108</td><td align="right" class='awrc'>5,805,666</td><td align="right" class='awrc'>1,934</td><td align="right" class='awrc'>150,398</td><td align="right" class='awrc'>6,269</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>22,232</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>24,645,118</td><td align="right" class='awrnc'>22,345,229</td><td align="right" class='awrnc'>3,802,315</td><td align="right" class='awrnc'>2,858,137</td><td align="right" class='awrnc'>7,204,466</td><td align="right" class='awrnc'>1,712</td><td align="right" class='awrnc'>189,562</td><td align="right" class='awrnc'>3,259</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>27,568</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>46,228,182</td><td align="right" class='awrct'>39,519,448</td><td align="right" class='awrct'>6,892,806</td><td align="right" class='awrct'>5,147,245</td><td align="right" class='awrct'>13,010,132</td><td align="right" class='awrct'>3,646</td><td align="right" class='awrct'>339,960</td><td align="right" class='awrct'>9,528</td><td align="right" class='awrct'>83</td><td align="right" class='awrct'>49,800</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>23,114,091</td><td align="right" class='awrnc'>19,759,724</td><td align="right" class='awrnc'>3,446,403</td><td align="right" class='awrnc'>2,573,622</td><td align="right" class='awrnc'>6,505,066</td><td align="right" class='awrnc'>1,823</td><td align="right" class='awrnc'>169,980</td><td align="right" class='awrnc'>4,764</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>24,900</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,165,199</td><td align="right" class='awrc'>3,656,456</td><td align="right" class='awrc'>503,336</td><td align="right" class='awrc'>402,364</td><td align="right" class='awrc'>989,101</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>27,693</td><td align="right" class='awrc'>2,128</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3,773</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>23,565.90</td><td align="right" class='awrc'>18,752.01</td><td align="right" class='awrc'>3,374.41</td><td align="right" class='awrc'>2,499.41</td><td align="right" class='awrc'>6,339.03</td><td align="right" class='awrc'>2.11</td><td align="right" class='awrc'>164.22</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>24.27</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>26,890.47</td><td align="right" class='awrnc'>24,381.05</td><td align="right" class='awrnc'>4,148.73</td><td align="right" class='awrnc'>3,118.53</td><td align="right" class='awrnc'>7,860.85</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>206.83</td><td align="right" class='awrnc'>3.56</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>30.08</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>50,456.37</td><td align="right" class='awrct'>43,133.06</td><td align="right" class='awrct'>7,523.15</td><td align="right" class='awrct'>5,617.94</td><td align="right" class='awrct'>14,199.88</td><td align="right" class='awrct'>3.98</td><td align="right" class='awrct'>371.05</td><td align="right" class='awrct'>10.40</td><td align="right" class='awrct'>0.09</td><td align="right" class='awrct'>54.35</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>25,228.19</td><td align="right" class='awrnc'>21,566.53</td><td align="right" class='awrnc'>3,761.57</td><td align="right" class='awrnc'>2,808.97</td><td align="right" class='awrnc'>7,099.94</td><td align="right" class='awrnc'>1.99</td><td align="right" class='awrnc'>185.52</td><td align="right" class='awrnc'>5.20</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>27.18</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,350.83</td><td align="right" class='awrc'>3,980.33</td><td align="right" class='awrc'>547.53</td><td align="right" class='awrc'>437.79</td><td align="right" class='awrc'>1,076.09</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>30.14</td><td align="right" class='awrc'>2.33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4.10</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>970.81</td><td align="right" class='awrc'>772.50</td><td align="right" class='awrc'>139.01</td><td align="right" class='awrc'>102.96</td><td align="right" class='awrc'>261.14</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>893.98</td><td align="right" class='awrnc'>810.55</td><td align="right" class='awrnc'>137.92</td><td align="right" class='awrnc'>103.68</td><td align="right" class='awrnc'>261.33</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>6.88</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>932.39</td><td align="right" class='awrct'>791.52</td><td align="right" class='awrct'>138.47</td><td align="right" class='awrct'>103.32</td><td align="right" class='awrct'>261.24</td><td align="right" class='awrct'>0.07</td><td align="right" class='awrct'>6.82</td><td align="right" class='awrct'>0.20</td><td align="right" class='awrct'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>6,752</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>9,433</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>11,557</td><td align="right" headers="BlocksServed GCCR" class='awrc'>21,362</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>18,665,924</td><td align="right" headers="Messages GESReceived" class='awrc'>10,886</td><td align="right" headers="Messages GCSSent" class='awrc'>16,655,505</td><td align="right" headers="Messages GESSent" class='awrc'>6,207</td><td align="right" headers="Messages SentDirect" class='awrc'>1,032,961</td><td align="right" headers="Messages SentIndir" class='awrc'>6,420,290</td><td align="right" headers="GCBlks Lost" class='awrclb'>1,171</td><td align="right" headers="GCCR Failure" class='awrcbb'>23</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>10,046</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>16,276</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>6,597</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>9,840</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>16,330,595</td><td align="right" headers="Messages GESReceived" class='awrnc'>6,134</td><td align="right" headers="Messages GCSSent" class='awrnc'>18,336,176</td><td align="right" headers="Messages GESSent" class='awrnc'>10,375</td><td align="right" headers="Messages SentDirect" class='awrnc'>1,152,441</td><td align="right" headers="Messages SentIndir" class='awrnc'>8,259,340</td><td align="right" headers="GCBlks Lost" class='awrnclb'>8,085</td><td align="right" headers="GCCR Failure" class='awrncbb'>566</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>16,798</td><td align="right" class='awrct'>25,709</td><td align="right" class='awrclbt'>18,154</td><td align="right" class='awrct'>31,202</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>34,996,519</td><td align="right" class='awrct'>17,020</td><td align="right" class='awrct'>34,991,681</td><td align="right" class='awrct'>16,582</td><td align="right" class='awrct'>2,185,402</td><td align="right" class='awrct'>14,679,630</td><td align="right" class='awrclbt'>9,256</td><td align="right" class='awrcbbt'>589</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>8,399</td><td align="right" class='awrnc'>12,855</td><td align="right" class='awrnclb'>9,077</td><td align="right" class='awrnc'>15,601</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>17,498,260</td><td align="right" class='awrnc'>8,510</td><td align="right" class='awrnc'>17,495,841</td><td align="right" class='awrnc'>8,291</td><td align="right" class='awrnc'>1,092,701</td><td align="right" class='awrnc'>7,339,815</td><td align="right" class='awrnclb'>4,628</td><td align="right" class='awrncbb'>295</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>2,329</td><td align="right" class='awrc'>4,839</td><td align="right" class='awrclb'>3,507</td><td align="right" class='awrc'>8,147</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>1,651,327</td><td align="right" class='awrc'>3,360</td><td align="right" class='awrc'>1,188,414</td><td align="right" class='awrc'>2,947</td><td align="right" class='awrc'>84,485</td><td align="right" class='awrc'>1,300,405</td><td align="right" class='awrclb'>4,889</td><td align="right" class='awrcbb'>384</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>7.37</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>10.30</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>12.62</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>23.32</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>20,380.76</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>11.89</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>18,185.65</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>6.78</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>1,127.86</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>7,010.12</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>1</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>10.96</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>17.76</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>7.20</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>10.74</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>17,818.43</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>6.69</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>20,006.74</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>11.32</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>1,257.44</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>9,011.83</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>9</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>1</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>18.33</td><td align="right" class='awrct'>28.06</td><td align="right" class='awrclbt'>19.82</td><td align="right" class='awrct'>34.06</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>38,199.20</td><td align="right" class='awrct'>18.58</td><td align="right" class='awrct'>38,192.38</td><td align="right" class='awrct'>18.10</td><td align="right" class='awrct'>2,385.30</td><td align="right" class='awrct'>16,021.95</td><td align="right" class='awrclbt'>10</td><td align="right" class='awrcbbt'>1</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>9.17</td><td align="right" class='awrnc'>14.03</td><td align="right" class='awrnclb'>9.91</td><td align="right" class='awrnc'>17.03</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>19,099.60</td><td align="right" class='awrnc'>9.29</td><td align="right" class='awrnc'>19,096.19</td><td align="right" class='awrnc'>9.05</td><td align="right" class='awrnc'>1,192.65</td><td align="right" class='awrnc'>8,010.97</td><td align="right" class='awrnclb'>5</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>2.54</td><td align="right" class='awrc'>5.27</td><td align="right" class='awrclb'>3.83</td><td align="right" class='awrc'>8.90</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>1,811.84</td><td align="right" class='awrc'>3.67</td><td align="right" class='awrc'>1,287.71</td><td align="right" class='awrc'>3.21</td><td align="right" class='awrc'>91.63</td><td align="right" class='awrc'>1,415.42</td><td align="right" class='awrclb'>5</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.30</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.42</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.52</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.96</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>839.60</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.49</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>749.17</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.28</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>46.46</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>288.79</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.05</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.36</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.59</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.24</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.36</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>592.38</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.22</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>665.13</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>0.38</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>41.80</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>299.60</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.29</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.02</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.33</td><td align="right" class='awrct'>0.51</td><td align="right" class='awrclbt'>0.38</td><td align="right" class='awrct'>0.66</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>715.99</td><td align="right" class='awrct'>0.36</td><td align="right" class='awrct'>707.15</td><td align="right" class='awrct'>0.33</td><td align="right" class='awrct'>44.13</td><td align="right" class='awrct'>294.19</td><td align="right" class='awrclbt'>0.17</td><td align="right" class='awrcbbt'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>20.35</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.07</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>79.58</td><td align="right" class='awrc'>74.78</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>9.22</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.11</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>90.67</td><td align="right" class='awrnc'>73.08</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1191</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>96190</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>57</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>277528</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>3.71</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>39966</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>155455</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>156207</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>0.50</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>2063</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>41340</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>76</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>102991</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>1.19</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>14612</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>562143</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>122353</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>0.52</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>6028</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>68351</td><td align="right" headers="QueueTime(us) Received" class='awrc'>47</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>19</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>28</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>13.55</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>84.21</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>2.25</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>1582</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>38226</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>108</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>26</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>52</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>12.01</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>86.09</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>1.90</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>16,887</td><td align="right" headers="BlockRequests CU" class='awrc'>5,149</td><td align="right" headers="BlockRequests Data" class='awrc'>16,888</td><td align="right" headers="BlockRequests Undo" class='awrc'>63</td><td align="right" headers="BlockRequests TX" class='awrc'>4,879</td><td align="right" headers="Results Current" class='awrclb'>20,768</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>590</td><td align="right" headers="Results DskRd" class='awrc'>33</td><td align="right" headers="Results Fail" class='awrc'>644</td><td align="right" headers="Fairness DownConv" class='awrclb'>7,899</td><td align="right" headers="Light Works" class='awrclb'>8,616</td><td align="right" headers="Total Flushes" class='awrclb'>793</td><td align="right" headers="Total Builds" class='awrc'>16,503</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>9,422</td><td align="right" headers="BlockRequests CU" class='awrnc'>515</td><td align="right" headers="BlockRequests Data" class='awrnc'>9,422</td><td align="right" headers="BlockRequests Undo" class='awrnc'>19</td><td align="right" headers="BlockRequests TX" class='awrnc'>341</td><td align="right" headers="Results Current" class='awrnclb'>9,663</td><td align="right" headers="Results Private" class='awrnc'>5</td><td align="right" headers="Results Zero" class='awrnc'>177</td><td align="right" headers="Results DskRd" class='awrnc'>64</td><td align="right" headers="Results Fail" class='awrnc'>3</td><td align="right" headers="Fairness DownConv" class='awrnclb'>4,480</td><td align="right" headers="Light Works" class='awrnclb'>3,618</td><td align="right" headers="Total Flushes" class='awrnclb'>117</td><td align="right" headers="Total Builds" class='awrnc'>9,399</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>26,309</td><td align="right" class='awrct'>5,664</td><td align="right" class='awrct'>26,310</td><td align="right" class='awrct'>82</td><td align="right" class='awrct'>5,220</td><td align="right" class='awrclbt'>30,431</td><td align="right" class='awrct'>5</td><td align="right" class='awrct'>767</td><td align="right" class='awrct'>97</td><td align="right" class='awrct'>647</td><td align="right" class='awrclbt'>12,379</td><td align="right" class='awrclbt'>12,234</td><td align="right" class='awrclbt'>910</td><td align="right" class='awrct'>25,902</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>13,155</td><td align="right" class='awrnc'>2,832</td><td align="right" class='awrnc'>13,155</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>2,610</td><td align="right" class='awrnclb'>15,216</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>384</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>324</td><td align="right" class='awrnclb'>6,190</td><td align="right" class='awrnclb'>6,117</td><td align="right" class='awrnclb'>455</td><td align="right" class='awrnc'>12,951</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>5,279</td><td align="right" class='awrc'>3,277</td><td align="right" class='awrc'>5,279</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>3,209</td><td align="right" class='awrclb'>7,852</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>292</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>453</td><td align="right" class='awrclb'>2,418</td><td align="right" class='awrclb'>3,534</td><td align="right" class='awrclb'>478</td><td align="right" class='awrc'>5,023</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>80.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>20.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>24.14</td><td align="right" class='awrc'>43.10</td><td align="right" class='awrc'>31.03</td><td align="right" class='awrc'>1.72</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>21.43</td><td align="right" class='awrnc'>7.14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>64.29</td><td align="right" class='awrnc'>7.14</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>23.53</td><td align="right" class='awrnc'>35.29</td><td align="right" class='awrnc'>41.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>24</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>92</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>8,970</td><td align="right" headers="CRBlocks %Immed" class='awrc'>93.31</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.87</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>5.82</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>6,427</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>8.42</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>81.92</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>9.66</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>96685</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>97063</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>92191</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>91293</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>39468</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>69358</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>38729</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>19693</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>357</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>78.43</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>10.92</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>10.64</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>58</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>94.83</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>5.17</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>99375</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>97440</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>189597</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>21034</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>60137</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>63126</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>5349</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>97</td><td align="right" headers="CRBlocks %Immed" class='awrc'>87.63</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>12.37</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>217</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>13.36</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>75.58</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>11.06</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>33825</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>13806</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>175632</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>59919</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>38128</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>71624</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>6270</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="CRBlocks Received" class='awrnclb'>18</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>88.89</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>5.56</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>5.56</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>74554</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>73267</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>162955</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>6744</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrclbt'>11,428</td><td align="right" headers="CRBlocks %Immed" class='awrct'>93.35</td><td align="right" headers="CRBlocks %Busy" class='awrct'>2.68</td><td align="right" headers="CRBlocks %Cngst" class='awrct'>3.97</td><td align="right" headers="CurrentBlocks Received" class='awrclbt'>8,668</td><td align="right" headers="CurrentBlocks %Immed" class='awrct'>25.37</td><td align="right" headers="CurrentBlocks %Busy" class='awrct'>70.84</td><td align="right" headers="CurrentBlocks %Cngst" class='awrct'>3.80</td><td align="right" headers="CRAvgTime(us) All" class='awrclbt'>49776</td><td align="right" headers="CRAvgTime(us) Immed" class='awrct'>42208</td><td align="right" headers="CRAvgTime(us) Busy" class='awrct'>298650</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrct'>59868</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclbt'>15971</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrct'>35413</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrct'>9060</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrbt'>15019</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>4,520</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>93.41</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>4.38</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>2.21</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>69</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>1.45</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>95.65</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>2.90</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>17877</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>10106</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>186057</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>12992</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>62595</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>971</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>65252</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>5742</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>160</td><td align="right" headers="CRBlocks %Immed" class='awrc'>99.38</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.63</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>1,281</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>88.76</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>11.01</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.23</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>3223</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>3215</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>4418</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>3372</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>535</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>26167</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>7473</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="CRBlocks Received" class='awrnclb'>55</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>85.45</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>12.73</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>1.82</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>28744</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>18302</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>102379</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>4062</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>8,370</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>541</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>97063</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>97063</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>69358</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>69358</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>280</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>97440</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>97440</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>85</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>29</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>13806</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>13806</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>38128</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>38128</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>16</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>73267</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>73267</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>10,668</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>2,199</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>42208</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>42208</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>35413</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>35413</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>4,222</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>1</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>10106</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>10106</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>971</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>971</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>159</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>1,137</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>3215</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>3215</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>535</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>535</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>47</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>18302</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>18302</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.31.173</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>82</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>616</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.44</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>90</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>645</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.47</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>82</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>75284</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>463.75</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>90</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>236111</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>806.10</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>81</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>7190</td><td align="right" headers="500bytes Std|Dev" class='awrct'>47.89</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>89</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>16441</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>77.22</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>81</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>552</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.80</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>89</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>539</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.77</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>4,119.49</td><td align="right" headers="Sent(MB) Cache" class='awrc'>158.96</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>3.14</td><td align="right" headers="Sent(MB) DLM" class='awrc'>3,917.06</td><td align="right" headers="Sent(MB) PNG" class='awrc'>1.51</td><td align="right" headers="Sent(MB) Misc" class='awrc'>38.82</td><td align="right" headers="Received(MB) Total" class='awrclb'>4,825.85</td><td align="right" headers="Received(MB) Cache" class='awrc'>76.43</td><td align="right" headers="Received(MB) IPQ" class='awrc'>3.77</td><td align="right" headers="Received(MB) DLM" class='awrc'>4,699.85</td><td align="right" headers="Received(MB) PNG" class='awrc'>1.52</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>44.28</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>4,737.79</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>78.14</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>3.77</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>4,611.29</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>1.50</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>43.09</td><td align="right" headers="Received(MB) Total" class='awrnclb'>4,011.18</td><td align="right" headers="Received(MB) Cache" class='awrnc'>123.05</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>3.14</td><td align="right" headers="Received(MB) DLM" class='awrnc'>3,845.31</td><td align="right" headers="Received(MB) PNG" class='awrnc'>1.50</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>38.18</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>8,857.28</td><td align="right" class='awrct'>237.09</td><td align="right" class='awrct'>6.92</td><td align="right" class='awrct'>8,528.35</td><td align="right" class='awrct'>3.01</td><td align="right" class='awrct'>81.91</td><td align="right" class='awrclbt'>8,837.03</td><td align="right" class='awrct'>199.48</td><td align="right" class='awrct'>6.92</td><td align="right" class='awrct'>8,545.16</td><td align="right" class='awrct'>3.02</td><td align="right" class='awrcrbt'>82.46</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>4,428.64</td><td align="right" class='awrnc'>118.55</td><td align="right" class='awrnc'>3.46</td><td align="right" class='awrnc'>4,264.17</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>40.96</td><td align="right" class='awrnclb'>4,418.51</td><td align="right" class='awrnc'>99.74</td><td align="right" class='awrnc'>3.46</td><td align="right" class='awrnc'>4,272.58</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrncrb'>41.23</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>437.20</td><td align="right" class='awrc'>57.15</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>490.90</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>3.02</td><td align="right" class='awrclb'>576.06</td><td align="right" class='awrc'>32.96</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>604.25</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrcrb'>4.31</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>4.50</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.17</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>4.28</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.04</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>5.27</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.08</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>5.13</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.05</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>5.17</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.09</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>5.03</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.05</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>4.38</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.13</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>4.20</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.04</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>9.67</td><td align="right" class='awrct'>0.26</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>9.31</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.09</td><td align="right" class='awrclbt'>9.65</td><td align="right" class='awrct'>0.22</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>9.33</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.09</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>4.83</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.65</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnclb'>4.82</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.66</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.05</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.47</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>0.63</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>35,072.26</td><td align="right" headers="Sent Packets" class='awrc'>16,390,203</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>43,432.76</td><td align="right" headers="Received Packets" class='awrc'>15,685,240</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>6,073.08</td><td align="right" headers="Sent Packets" class='awrnc'>7,079,655</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>6,548.81</td><td align="right" headers="Received Packets" class='awrnc'>9,202,809</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>4.57</td><td align="right" headers="Sent Packets" class='awrnc'>11,062</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2.09</td><td align="right" headers="Received Packets" class='awrnc'>9,526</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>3.73</td><td align="right" headers="Sent Packets" class='awrc'>5,200</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>2.27</td><td align="right" headers="Received Packets" class='awrc'>5,261</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>101.94</td><td align="right" headers="Sent Packets" class='awrnc'>1,841,966</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>101.94</td><td align="right" headers="Received Packets" class='awrnc'>1,841,966</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>43,666.69</td><td align="right" headers="Sent Packets" class='awrc'>16,357,277</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>34,828.41</td><td align="right" headers="Received Packets" class='awrc'>15,650,397</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>6,495.35</td><td align="right" headers="Sent Packets" class='awrnc'>6,404,240</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>6,119.32</td><td align="right" headers="Received Packets" class='awrnc'>9,502,876</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>2.09</td><td align="right" headers="Sent Packets" class='awrnc'>9,525</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>4.57</td><td align="right" headers="Received Packets" class='awrnc'>11,107</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>3.73</td><td align="right" headers="Sent Packets" class='awrnc'>5,245</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2.27</td><td align="right" headers="Received Packets" class='awrnc'>5,263</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>146.37</td><td align="right" headers="Sent Packets" class='awrc'>2,182,775</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>146.37</td><td align="right" headers="Received Packets" class='awrc'>2,182,775</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>91,569.82</td><td align="right" class='awrnct'>50,287,148</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>91,188.82</td><td align="right" class='awrnct'>54,097,220</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>5,386.46</td><td align="right" class='awrc'>2,958,068</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>5,364.05</td><td align="right" class='awrc'>3,182,189</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>13,044.90</td><td align="right" class='awrnc'>5,515,546</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>12,967.86</td><td align="right" class='awrnc'>5,601,161</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>38.29</td><td align="right" headers="Sent Packets" class='awrc'>17,896</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>47.42</td><td align="right" headers="Received Packets" class='awrc'>17,126</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>6.63</td><td align="right" headers="Sent Packets" class='awrnc'>7,730</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>7.15</td><td align="right" headers="Received Packets" class='awrnc'>10,048</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>12</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>10</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>6</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>6</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.11</td><td align="right" headers="Sent Packets" class='awrnc'>2,011</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.11</td><td align="right" headers="Received Packets" class='awrnc'>2,011</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>47.65</td><td align="right" headers="Sent Packets" class='awrc'>17,848</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>38.00</td><td align="right" headers="Received Packets" class='awrc'>17,076</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>7.09</td><td align="right" headers="Sent Packets" class='awrnc'>6,988</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>6.68</td><td align="right" headers="Received Packets" class='awrnc'>10,369</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>10</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>12</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>6</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>6</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.16</td><td align="right" headers="Sent Packets" class='awrc'>2,382</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.16</td><td align="right" headers="Received Packets" class='awrc'>2,382</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>99.94</td><td align="right" class='awrnct'>54,888</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>99.53</td><td align="right" class='awrnct'>59,046</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>5.88</td><td align="right" class='awrc'>3,229</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>5.85</td><td align="right" class='awrc'>3,473</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>14.24</td><td align="right" class='awrnc'>6,020</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>14.16</td><td align="right" class='awrnc'>6,114</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>&#160;</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>&#160;</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>&#160;</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>47</td><td align="right" headers="AffinityObjects End" class='awrc'>47</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>43</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>31</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>43</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>&#160;</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>&#160;</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>&#160;</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>40</td><td align="right" headers="AffinityObjects End" class='awrnc'>40</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>43</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>31</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>43</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>44</td><td align="right" class='awrct'>44</td><td align="right" class='awrclbt'>43</td><td align="right" class='awrct'>31</td><td align="right" class='awrcrbt'>43</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>47</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnclb'>43</td><td align="right" class='awrnc'>31</td><td align="right" class='awrncrb'>43</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   96.1% of Total DB Time (s):	       287,076</li>
<li class="awr">Captured PL/SQL account for   63.5% of Total DB Time (s):	  287,076</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>176,962.46</td><td align="right" headers="Total CPU(s)" class='awrc'>2,550.09</td><td align="right" headers="Total IOWait(s)" class='awrc'>17,179.04</td><td align="right" headers="Total Gets" class='awrc'>6,611,025</td><td align="right" headers="Total Reads" class='awrc'>5,621,026</td><td align="right" headers="Total Rows" class='awrc'>5,904,738</td><td align="right" headers="Total Cluster(s)" class='awrc'>152,887.92</td><td align="right" headers="Total Execs" class='awrc'>46,494</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>3.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.37</td><td align="right" headers="PerExecution Gets" class='awrc'>142.19</td><td align="right" headers="PerExecution Reads" class='awrc'>120.90</td><td align="right" headers="PerExecution Rows" class='awrc'>127.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.29</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>61.64</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>14.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>14.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>64.39</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>13.68</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>98,574.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,811.39</td><td align="right" headers="Total IOWait(s)" class='awrnc'>11,990.71</td><td align="right" headers="Total Gets" class='awrnc'>34,634,294</td><td align="right" headers="Total Reads" class='awrnc'>32,194,683</td><td align="right" headers="Total Rows" class='awrnc'>265,512</td><td align="right" headers="Total Cluster(s)" class='awrnc'>73,169.34</td><td align="right" headers="Total Execs" class='awrnc'>265,424</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrnc'>130.49</td><td align="right" headers="PerExecution Reads" class='awrnc'>121.30</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.28</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>34.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>48.91</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.39</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>74.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>81.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.82</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>78.08</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dbv58zsfpkbvq">dbv58zsfpkbvq</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>2,189.06</td><td align="right" headers="Total CPU(s)" class='awrc'>17.62</td><td align="right" headers="Total IOWait(s)" class='awrc'>150.63</td><td align="right" headers="Total Gets" class='awrc'>105,437</td><td align="right" headers="Total Reads" class='awrc'>100,784</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>1,789.51</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>547.26</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>4.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>37.66</td><td align="right" headers="PerExecution Gets" class='awrc'>26,359.25</td><td align="right" headers="PerExecution Reads" class='awrc'>25,196.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>447.38</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.26</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7h2sq3cqbq9vx">7h2sq3cqbq9vx</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>2,188.02</td><td align="right" headers="Total CPU(s)" class='awrnc'>17.16</td><td align="right" headers="Total IOWait(s)" class='awrnc'>132.53</td><td align="right" headers="Total Gets" class='awrnc'>102,387</td><td align="right" headers="Total Reads" class='awrnc'>98,077</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1,803.54</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>547.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>4.29</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>33.13</td><td align="right" headers="PerExecution Gets" class='awrnc'>25,596.75</td><td align="right" headers="PerExecution Reads" class='awrnc'>24,519.25</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>450.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fhwqa2yvncr24">fhwqa2yvncr24</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>2,188.02</td><td align="right" headers="Total CPU(s)" class='awrc'>15.33</td><td align="right" headers="Total IOWait(s)" class='awrc'>135.18</td><td align="right" headers="Total Gets" class='awrc'>86,754</td><td align="right" headers="Total Reads" class='awrc'>82,706</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>1,916.14</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>547.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>3.83</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>33.79</td><td align="right" headers="PerExecution Gets" class='awrc'>21,688.50</td><td align="right" headers="PerExecution Reads" class='awrc'>20,676.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>479.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.81</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0sj52dccuywgx">0sj52dccuywgx</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>2,187.96</td><td align="right" headers="Total CPU(s)" class='awrnc'>17.43</td><td align="right" headers="Total IOWait(s)" class='awrnc'>142.33</td><td align="right" headers="Total Gets" class='awrnc'>102,208</td><td align="right" headers="Total Reads" class='awrnc'>97,866</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1,813.62</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>546.99</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>4.36</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>35.58</td><td align="right" headers="PerExecution Gets" class='awrnc'>25,552.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>24,466.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>453.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#31f7zbqd24a7y">31f7zbqd24a7y</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>2,187.83</td><td align="right" headers="Total CPU(s)" class='awrc'>25.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>166.82</td><td align="right" headers="Total Gets" class='awrc'>115,601</td><td align="right" headers="Total Reads" class='awrc'>111,171</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>1,913.44</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>546.96</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>6.37</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>41.71</td><td align="right" headers="PerExecution Gets" class='awrc'>28,900.25</td><td align="right" headers="PerExecution Reads" class='awrc'>27,792.75</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>478.36</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.44</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.28</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.81</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2btqdckmw7ph2">2btqdckmw7ph2</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>2,187.10</td><td align="right" headers="Total CPU(s)" class='awrnc'>17.03</td><td align="right" headers="Total IOWait(s)" class='awrnc'>138.71</td><td align="right" headers="Total Gets" class='awrnc'>101,255</td><td align="right" headers="Total Reads" class='awrnc'>96,900</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1,872.33</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>546.78</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>4.26</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>34.68</td><td align="right" headers="PerExecution Gets" class='awrnc'>25,313.75</td><td align="right" headers="PerExecution Reads" class='awrnc'>24,225.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>468.08</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.79</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8kj5gxr8qkjq2">8kj5gxr8qkjq2</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>2,187.05</td><td align="right" headers="Total CPU(s)" class='awrc'>24.97</td><td align="right" headers="Total IOWait(s)" class='awrc'>167.82</td><td align="right" headers="Total Gets" class='awrc'>110,203</td><td align="right" headers="Total Reads" class='awrc'>105,944</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>1,903.82</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>546.76</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>6.24</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>41.96</td><td align="right" headers="PerExecution Gets" class='awrc'>27,550.75</td><td align="right" headers="PerExecution Reads" class='awrc'>26,486.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>475.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.80</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1sbxgvwvwp2bt">1sbxgvwvwp2bt</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>2,186.87</td><td align="right" headers="Total CPU(s)" class='awrnc'>26.40</td><td align="right" headers="Total IOWait(s)" class='awrnc'>168.07</td><td align="right" headers="Total Gets" class='awrnc'>120,354</td><td align="right" headers="Total Reads" class='awrnc'>115,783</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1,899.95</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>546.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>6.60</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>42.02</td><td align="right" headers="PerExecution Gets" class='awrnc'>30,088.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>28,945.75</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>474.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.46</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.26</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.29</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.80</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   93.8% of Total CPU Time (s): 	  5,748</li>
<li class="awr">Captured PL/SQL account for   75.1% of Total CPU Time (s):	     5,748</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>2,811.39</td><td align="right" headers="Total Elapsed(s)" class='awrc'>98,574.93</td><td align="right" headers="Total IOWait(s)" class='awrc'>11,990.71</td><td align="right" headers="Total Gets" class='awrc'>34,634,294</td><td align="right" headers="Total Reads" class='awrc'>32,194,683</td><td align="right" headers="Total Rows" class='awrc'>265,512</td><td align="right" headers="Total Cluster(s)" class='awrc'>73,169.34</td><td align="right" headers="Total Execs" class='awrc'>265,424</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.37</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrc'>130.49</td><td align="right" headers="PerExecution Reads" class='awrc'>121.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.28</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>48.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>34.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>38.53</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>74.92</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>81.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>30.82</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>78.08</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>2,550.09</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>176,962.46</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,179.04</td><td align="right" headers="Total Gets" class='awrnc'>6,611,025</td><td align="right" headers="Total Reads" class='awrnc'>5,621,026</td><td align="right" headers="Total Rows" class='awrnc'>5,904,738</td><td align="right" headers="Total Cluster(s)" class='awrnc'>152,887.92</td><td align="right" headers="Total Execs" class='awrnc'>46,494</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>0.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>3.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.37</td><td align="right" headers="PerExecution Gets" class='awrnc'>142.19</td><td align="right" headers="PerExecution Reads" class='awrnc'>120.90</td><td align="right" headers="PerExecution Rows" class='awrnc'>127.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.29</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>44.37</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.20</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>14.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>64.39</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>13.68</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>273.49</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.78</td><td align="right" headers="Total IOWait(s)" class='awrc'>817.64</td><td align="right" headers="Total Gets" class='awrc'>3,505,669</td><td align="right" headers="Total Reads" class='awrc'>2,831,723</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>397.69</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>91.16</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.59</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>272.55</td><td align="right" headers="PerExecution Gets" class='awrc'>1,168,556.33</td><td align="right" headers="PerExecution Reads" class='awrc'>943,907.67</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>132.56</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>4.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.63</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>7.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>7.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>185.58</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,590.40</td><td align="right" headers="Total IOWait(s)" class='awrnc'>846.02</td><td align="right" headers="Total Gets" class='awrnc'>2,027,314</td><td align="right" headers="Total Reads" class='awrnc'>1,806,386</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>462.75</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>61.86</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>282.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>675,771.33</td><td align="right" headers="PerExecution Reads" class='awrnc'>602,128.67</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>154.25</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>3.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.72</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>4.39</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.57</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>184.07</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.08</td><td align="right" headers="Total IOWait(s)" class='awrc'>793.97</td><td align="right" headers="Total Gets" class='awrc'>2,014,757</td><td align="right" headers="Total Reads" class='awrc'>1,796,019</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.87</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>61.36</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.36</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>264.66</td><td align="right" headers="PerExecution Gets" class='awrc'>671,585.67</td><td align="right" headers="PerExecution Reads" class='awrc'>598,673.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>165.96</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>3.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.36</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>179.98</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,591.27</td><td align="right" headers="Total IOWait(s)" class='awrnc'>863.11</td><td align="right" headers="Total Gets" class='awrnc'>1,951,007</td><td align="right" headers="Total Reads" class='awrnc'>1,739,632</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>453.60</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>59.99</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.42</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>287.70</td><td align="right" headers="PerExecution Gets" class='awrnc'>650,335.67</td><td align="right" headers="PerExecution Reads" class='awrnc'>579,877.33</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>151.20</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>3.13</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.77</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>4.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.40</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9xv3wfaqtjswf">9xv3wfaqtjswf</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>139.77</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.41</td><td align="right" headers="Total IOWait(s)" class='awrc'>923.68</td><td align="right" headers="Total Gets" class='awrc'>1,940,736</td><td align="right" headers="Total Reads" class='awrc'>1,681,470</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>289.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>34.94</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.35</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>230.92</td><td align="right" headers="PerExecution Gets" class='awrc'>485,184.00</td><td align="right" headers="PerExecution Reads" class='awrc'>420,367.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>72.33</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>2.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.97</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.20</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>127.87</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,061.79</td><td align="right" headers="Total IOWait(s)" class='awrnc'>449.86</td><td align="right" headers="Total Gets" class='awrnc'>1,385,986</td><td align="right" headers="Total Reads" class='awrnc'>1,261,388</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>409.82</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>63.93</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.89</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>224.93</td><td align="right" headers="PerExecution Gets" class='awrnc'>692,993.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>630,694.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>204.91</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>2.22</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.45</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.19</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8cbqpnkxnw661">8cbqpnkxnw661</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>126.36</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,180.87</td><td align="right" headers="Total IOWait(s)" class='awrc'>873.51</td><td align="right" headers="Total Gets" class='awrc'>1,678,715</td><td align="right" headers="Total Reads" class='awrc'>1,487,110</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>380.50</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>31.59</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.22</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.38</td><td align="right" headers="PerExecution Gets" class='awrc'>419,678.75</td><td align="right" headers="PerExecution Reads" class='awrc'>371,777.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>95.13</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>2.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.81</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>3.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>3.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3xy3zh57sf5by">3xy3zh57sf5by</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>124.34</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,181.03</td><td align="right" headers="Total IOWait(s)" class='awrnc'>872.78</td><td align="right" headers="Total Gets" class='awrnc'>1,641,256</td><td align="right" headers="Total Reads" class='awrnc'>1,456,349</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>372.31</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>31.09</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.26</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.19</td><td align="right" headers="PerExecution Gets" class='awrnc'>410,314.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>364,087.25</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>93.08</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>2.16</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.80</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.55</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.69</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   93.8% of Total User I/O Wait Time (s):	   31,122</li>
<li class="awr">Captured PL/SQL account for   72.4% of Total User I/O Wait Time (s):	      31,122</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>17,179.04</td><td align="right" headers="Total Elapsed(s)" class='awrc'>176,962.46</td><td align="right" headers="Total CPU(s)" class='awrc'>2,550.09</td><td align="right" headers="Total Gets" class='awrc'>6,611,025</td><td align="right" headers="Total Reads" class='awrc'>5,621,026</td><td align="right" headers="Total Rows" class='awrc'>5,904,738</td><td align="right" headers="Total Cluster(s)" class='awrc'>152,887.92</td><td align="right" headers="Total Execs" class='awrc'>46,494</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.37</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>3.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrc'>142.19</td><td align="right" headers="PerExecution Reads" class='awrc'>120.90</td><td align="right" headers="PerExecution Rows" class='awrc'>127.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.29</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>55.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>61.64</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.37</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>14.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>14.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>64.39</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>13.68</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>11,990.71</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>98,574.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,811.39</td><td align="right" headers="Total Gets" class='awrnc'>34,634,294</td><td align="right" headers="Total Reads" class='awrnc'>32,194,683</td><td align="right" headers="Total Rows" class='awrnc'>265,512</td><td align="right" headers="Total Cluster(s)" class='awrnc'>73,169.34</td><td align="right" headers="Total Execs" class='awrnc'>265,424</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>130.49</td><td align="right" headers="PerExecution Reads" class='awrnc'>121.30</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.28</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>38.53</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>34.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>48.91</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>74.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>81.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.82</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>78.08</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9xv3wfaqtjswf">9xv3wfaqtjswf</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>923.68</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.41</td><td align="right" headers="Total CPU(s)" class='awrc'>139.77</td><td align="right" headers="Total Gets" class='awrc'>1,940,736</td><td align="right" headers="Total Reads" class='awrc'>1,681,470</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>289.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>230.92</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.94</td><td align="right" headers="PerExecution Gets" class='awrc'>485,184.00</td><td align="right" headers="PerExecution Reads" class='awrc'>420,367.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>72.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>2.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.43</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.20</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8cbqpnkxnw661">8cbqpnkxnw661</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>873.51</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,180.87</td><td align="right" headers="Total CPU(s)" class='awrnc'>126.36</td><td align="right" headers="Total Gets" class='awrnc'>1,678,715</td><td align="right" headers="Total Reads" class='awrnc'>1,487,110</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>380.50</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>218.38</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>31.59</td><td align="right" headers="PerExecution Gets" class='awrnc'>419,678.75</td><td align="right" headers="PerExecution Reads" class='awrnc'>371,777.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>95.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>2.81</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.20</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.63</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3xy3zh57sf5by">3xy3zh57sf5by</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>872.78</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.03</td><td align="right" headers="Total CPU(s)" class='awrc'>124.34</td><td align="right" headers="Total Gets" class='awrc'>1,641,256</td><td align="right" headers="Total Reads" class='awrc'>1,456,349</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>372.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>218.19</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.26</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>31.09</td><td align="right" headers="PerExecution Gets" class='awrc'>410,314.00</td><td align="right" headers="PerExecution Reads" class='awrc'>364,087.25</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>93.08</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>2.80</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.16</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>3.55</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>3.69</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>863.11</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,591.27</td><td align="right" headers="Total CPU(s)" class='awrnc'>179.98</td><td align="right" headers="Total Gets" class='awrnc'>1,951,007</td><td align="right" headers="Total Reads" class='awrnc'>1,739,632</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>453.60</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>287.70</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.42</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>59.99</td><td align="right" headers="PerExecution Gets" class='awrnc'>650,335.67</td><td align="right" headers="PerExecution Reads" class='awrnc'>579,877.33</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>151.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>2.77</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.13</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>4.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.40</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>846.02</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,590.40</td><td align="right" headers="Total CPU(s)" class='awrc'>185.58</td><td align="right" headers="Total Gets" class='awrc'>2,027,314</td><td align="right" headers="Total Reads" class='awrc'>1,806,386</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>462.75</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>282.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>61.86</td><td align="right" headers="PerExecution Gets" class='awrc'>675,771.33</td><td align="right" headers="PerExecution Reads" class='awrc'>602,128.67</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>154.25</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>2.72</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.23</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.39</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.57</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>817.64</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,591.78</td><td align="right" headers="Total CPU(s)" class='awrnc'>273.49</td><td align="right" headers="Total Gets" class='awrnc'>3,505,669</td><td align="right" headers="Total Reads" class='awrnc'>2,831,723</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>397.69</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>272.55</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.59</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>91.16</td><td align="right" headers="PerExecution Gets" class='awrnc'>1,168,556.33</td><td align="right" headers="PerExecution Reads" class='awrnc'>943,907.67</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>132.56</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>2.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.76</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>7.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>7.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>793.97</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.08</td><td align="right" headers="Total CPU(s)" class='awrc'>184.07</td><td align="right" headers="Total Gets" class='awrc'>2,014,757</td><td align="right" headers="Total Reads" class='awrc'>1,796,019</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.87</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>264.66</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.36</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>61.36</td><td align="right" headers="PerExecution Gets" class='awrc'>671,585.67</td><td align="right" headers="PerExecution Reads" class='awrc'>598,673.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>165.96</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>2.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.20</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.36</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>449.86</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,061.79</td><td align="right" headers="Total CPU(s)" class='awrnc'>127.87</td><td align="right" headers="Total Gets" class='awrnc'>1,385,986</td><td align="right" headers="Total Reads" class='awrnc'>1,261,388</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>409.82</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>224.93</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.89</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>63.93</td><td align="right" headers="PerExecution Gets" class='awrnc'>692,993.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>630,694.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>204.91</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>1.45</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.22</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.19</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	46,228,182</li>
<li class="awr">Captured SQL account for   95.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>34,634,294</td><td align="right" headers="Total Reads" class='awrc'>32,194,683</td><td align="right" headers="Total Elapsed(s)" class='awrc'>98,574.93</td><td align="right" headers="Total CPU(s)" class='awrc'>2,811.39</td><td align="right" headers="Total IOWait(s)" class='awrc'>11,990.71</td><td align="right" headers="Total Rows" class='awrc'>265,512</td><td align="right" headers="Total Cluster(s)" class='awrc'>73,169.34</td><td align="right" headers="Total Execs" class='awrc'>265,424</td><td align="right" headers="PerExecution Gets" class='awrclb'>130.49</td><td align="right" headers="PerExecution Reads" class='awrc'>121.30</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.37</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.28</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>74.92</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>81.47</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>34.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>48.91</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>38.53</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>30.82</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>78.08</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrnclb'>6,611,025</td><td align="right" headers="Total Reads" class='awrnc'>5,621,026</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>176,962.46</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,550.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,179.04</td><td align="right" headers="Total Rows" class='awrnc'>5,904,738</td><td align="right" headers="Total Cluster(s)" class='awrnc'>152,887.92</td><td align="right" headers="Total Execs" class='awrnc'>46,494</td><td align="right" headers="PerExecution Gets" class='awrnclb'>142.19</td><td align="right" headers="PerExecution Reads" class='awrnc'>120.90</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>3.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.37</td><td align="right" headers="PerExecution Rows" class='awrnc'>127.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.29</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>14.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.22</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.64</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>44.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>64.39</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>13.68</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td><td align="right" headers="Total Gets" class='awrclb'>3,505,669</td><td align="right" headers="Total Reads" class='awrc'>2,831,723</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.78</td><td align="right" headers="Total CPU(s)" class='awrc'>273.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>817.64</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>397.69</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution Gets" class='awrclb'>1,168,556.33</td><td align="right" headers="PerExecution Reads" class='awrc'>943,907.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.59</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>91.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>272.55</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>132.56</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>7.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>7.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3kqrku32p6sfn">3kqrku32p6sfn</a></td><td align="right" headers="Total Gets" class='awrnclb'>2,791,117</td><td align="right" headers="Total Reads" class='awrnc'>8</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>6.46</td><td align="right" headers="Total CPU(s)" class='awrnc'>6.22</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.03</td><td align="right" headers="Total Rows" class='awrnc'>0</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.11</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>2,791,117.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>8.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>6.46</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>6.22</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.03</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>6.04</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>MERGE /*+ OPT_PARAM('_parallel...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td><td align="right" headers="Total Gets" class='awrclb'>2,027,314</td><td align="right" headers="Total Reads" class='awrc'>1,806,386</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,590.40</td><td align="right" headers="Total CPU(s)" class='awrc'>185.58</td><td align="right" headers="Total IOWait(s)" class='awrc'>846.02</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>462.75</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution Gets" class='awrclb'>675,771.33</td><td align="right" headers="PerExecution Reads" class='awrc'>602,128.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>61.86</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>282.01</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>154.25</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>4.39</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.57</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.72</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td><td align="right" headers="Total Gets" class='awrnclb'>2,014,757</td><td align="right" headers="Total Reads" class='awrnc'>1,796,019</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,591.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>184.07</td><td align="right" headers="Total IOWait(s)" class='awrnc'>793.97</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>497.87</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution Gets" class='awrnclb'>671,585.67</td><td align="right" headers="PerExecution Reads" class='awrnc'>598,673.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.36</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>61.36</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>264.66</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>165.96</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>4.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.54</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td><td align="right" headers="Total Gets" class='awrclb'>1,951,007</td><td align="right" headers="Total Reads" class='awrc'>1,739,632</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.27</td><td align="right" headers="Total CPU(s)" class='awrc'>179.98</td><td align="right" headers="Total IOWait(s)" class='awrc'>863.11</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>453.60</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution Gets" class='awrclb'>650,335.67</td><td align="right" headers="PerExecution Reads" class='awrc'>579,877.33</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.42</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>59.99</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>287.70</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>151.20</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>4.22</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.77</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9xv3wfaqtjswf">9xv3wfaqtjswf</a></td><td align="right" headers="Total Gets" class='awrnclb'>1,940,736</td><td align="right" headers="Total Reads" class='awrnc'>1,681,470</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,181.41</td><td align="right" headers="Total CPU(s)" class='awrnc'>139.77</td><td align="right" headers="Total IOWait(s)" class='awrnc'>923.68</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>289.31</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Gets" class='awrnclb'>485,184.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>420,367.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>230.92</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>72.33</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>4.20</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.25</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8cbqpnkxnw661">8cbqpnkxnw661</a></td><td align="right" headers="Total Gets" class='awrclb'>1,678,715</td><td align="right" headers="Total Reads" class='awrc'>1,487,110</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,180.87</td><td align="right" headers="Total CPU(s)" class='awrc'>126.36</td><td align="right" headers="Total IOWait(s)" class='awrc'>873.51</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>380.50</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Gets" class='awrclb'>419,678.75</td><td align="right" headers="PerExecution Reads" class='awrc'>371,777.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.22</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>31.59</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.38</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>95.13</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>3.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>3.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.81</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3xy3zh57sf5by">3xy3zh57sf5by</a></td><td align="right" headers="Total Gets" class='awrnclb'>1,641,256</td><td align="right" headers="Total Reads" class='awrnc'>1,456,349</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,181.03</td><td align="right" headers="Total CPU(s)" class='awrnc'>124.34</td><td align="right" headers="Total IOWait(s)" class='awrnc'>872.78</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>372.31</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Gets" class='awrnclb'>410,314.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>364,087.25</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.26</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>31.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.19</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>93.08</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>3.55</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.69</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.16</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.80</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      39,519,448</li>
<li class="awr">Captured SQL account for   95.7% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>32,194,683</td><td align="right" headers="Total Gets" class='awrc'>34,634,294</td><td align="right" headers="Total Elapsed(s)" class='awrc'>98,574.93</td><td align="right" headers="Total CPU(s)" class='awrc'>2,811.39</td><td align="right" headers="Total IOWait(s)" class='awrc'>11,990.71</td><td align="right" headers="Total Rows" class='awrc'>265,512</td><td align="right" headers="Total Cluster(s)" class='awrc'>73,169.34</td><td align="right" headers="Total Execs" class='awrc'>265,424</td><td align="right" headers="PerExecution Reads" class='awrclb'>121.30</td><td align="right" headers="PerExecution Gets" class='awrc'>130.49</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.37</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.28</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>81.47</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>74.92</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>34.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>48.91</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>38.53</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>30.82</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>78.08</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrnclb'>5,621,026</td><td align="right" headers="Total Gets" class='awrnc'>6,611,025</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>176,962.46</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,550.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,179.04</td><td align="right" headers="Total Rows" class='awrnc'>5,904,738</td><td align="right" headers="Total Cluster(s)" class='awrnc'>152,887.92</td><td align="right" headers="Total Execs" class='awrnc'>46,494</td><td align="right" headers="PerExecution Reads" class='awrnclb'>120.90</td><td align="right" headers="PerExecution Gets" class='awrnc'>142.19</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>3.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.37</td><td align="right" headers="PerExecution Rows" class='awrnc'>127.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.29</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>14.22</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>14.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.64</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>44.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>64.39</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>13.68</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td><td align="right" headers="Total Reads" class='awrclb'>2,831,723</td><td align="right" headers="Total Gets" class='awrc'>3,505,669</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.78</td><td align="right" headers="Total CPU(s)" class='awrc'>273.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>817.64</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>397.69</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution Reads" class='awrclb'>943,907.67</td><td align="right" headers="PerExecution Gets" class='awrc'>1,168,556.33</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.59</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>91.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>272.55</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>132.56</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>7.17</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>7.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td><td align="right" headers="Total Reads" class='awrnclb'>1,806,386</td><td align="right" headers="Total Gets" class='awrnc'>2,027,314</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,590.40</td><td align="right" headers="Total CPU(s)" class='awrnc'>185.58</td><td align="right" headers="Total IOWait(s)" class='awrnc'>846.02</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>462.75</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution Reads" class='awrnclb'>602,128.67</td><td align="right" headers="PerExecution Gets" class='awrnc'>675,771.33</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.13</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>61.86</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>282.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>154.25</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>4.57</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>4.39</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.72</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td><td align="right" headers="Total Reads" class='awrclb'>1,796,019</td><td align="right" headers="Total Gets" class='awrc'>2,014,757</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.08</td><td align="right" headers="Total CPU(s)" class='awrc'>184.07</td><td align="right" headers="Total IOWait(s)" class='awrc'>793.97</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.87</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution Reads" class='awrclb'>598,673.00</td><td align="right" headers="PerExecution Gets" class='awrc'>671,585.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.36</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>61.36</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>264.66</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>165.96</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>4.54</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.36</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td><td align="right" headers="Total Reads" class='awrnclb'>1,739,632</td><td align="right" headers="Total Gets" class='awrnc'>1,951,007</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,591.27</td><td align="right" headers="Total CPU(s)" class='awrnc'>179.98</td><td align="right" headers="Total IOWait(s)" class='awrnc'>863.11</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>453.60</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution Reads" class='awrnclb'>579,877.33</td><td align="right" headers="PerExecution Gets" class='awrnc'>650,335.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.42</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>59.99</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>287.70</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>151.20</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>4.40</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>4.22</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.77</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9xv3wfaqtjswf">9xv3wfaqtjswf</a></td><td align="right" headers="Total Reads" class='awrclb'>1,681,470</td><td align="right" headers="Total Gets" class='awrc'>1,940,736</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.41</td><td align="right" headers="Total CPU(s)" class='awrc'>139.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>923.68</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>289.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Reads" class='awrclb'>420,367.50</td><td align="right" headers="PerExecution Gets" class='awrc'>485,184.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>230.92</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>72.33</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>4.25</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>4.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8cbqpnkxnw661">8cbqpnkxnw661</a></td><td align="right" headers="Total Reads" class='awrnclb'>1,487,110</td><td align="right" headers="Total Gets" class='awrnc'>1,678,715</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,180.87</td><td align="right" headers="Total CPU(s)" class='awrnc'>126.36</td><td align="right" headers="Total IOWait(s)" class='awrnc'>873.51</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>380.50</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Reads" class='awrnclb'>371,777.50</td><td align="right" headers="PerExecution Gets" class='awrnc'>419,678.75</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>31.59</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.38</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>95.13</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>3.76</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.81</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3xy3zh57sf5by">3xy3zh57sf5by</a></td><td align="right" headers="Total Reads" class='awrclb'>1,456,349</td><td align="right" headers="Total Gets" class='awrc'>1,641,256</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.03</td><td align="right" headers="Total CPU(s)" class='awrc'>124.34</td><td align="right" headers="Total IOWait(s)" class='awrc'>872.78</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>372.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Reads" class='awrclb'>364,087.25</td><td align="right" headers="PerExecution Gets" class='awrc'>410,314.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.26</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>31.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.19</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>93.08</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>3.69</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>3.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.16</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.80</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7fr7cwdnxufu3">7fr7cwdnxufu3</a></td><td align="right" headers="Total Reads" class='awrnclb'>1,401,821</td><td align="right" headers="Total Gets" class='awrnc'>1,567,972</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,181.88</td><td align="right" headers="Total CPU(s)" class='awrnc'>121.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>851.06</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>407.07</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Reads" class='awrnclb'>350,455.25</td><td align="right" headers="PerExecution Gets" class='awrnc'>391,993.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.47</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>30.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>212.76</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>101.77</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>3.55</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.39</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.73</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   39,449,745</li>
<li class="awr">Captured SQL account for    0.2% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      39,449,745</li>
<li class="awr">Captured SQL account for    0.2% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dnhxxnnyzpq8g">dnhxxnnyzpq8g</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>2,831,723</td><td align="right" headers="Total Requests" class='awrc'>2,831,723</td><td align="right" headers="Total Reads" class='awrc'>2,831,723</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.78</td><td align="right" headers="Total CPU(s)" class='awrc'>273.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>817.64</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>397.69</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>943,907.67</td><td align="right" headers="PerExecution Requests" class='awrc'>943,907.67</td><td align="right" headers="PerExecution Reads" class='awrc'>943,907.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.59</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>91.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>272.55</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>132.56</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>7.18</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>7.18</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>7.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dyyddzrz52ydb">dyyddzrz52ydb</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,806,386</td><td align="right" headers="Total Requests" class='awrnc'>1,806,386</td><td align="right" headers="Total Reads" class='awrnc'>1,806,386</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,590.40</td><td align="right" headers="Total CPU(s)" class='awrnc'>185.58</td><td align="right" headers="Total IOWait(s)" class='awrnc'>846.02</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>462.75</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>602,128.67</td><td align="right" headers="PerExecution Requests" class='awrnc'>602,128.67</td><td align="right" headers="PerExecution Reads" class='awrnc'>602,128.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.13</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>61.86</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>282.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>154.25</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>4.58</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>4.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.57</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.72</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5hg6sgckh1tnx">5hg6sgckh1tnx</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>1,796,019</td><td align="right" headers="Total Requests" class='awrc'>1,796,019</td><td align="right" headers="Total Reads" class='awrc'>1,796,019</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,591.08</td><td align="right" headers="Total CPU(s)" class='awrc'>184.07</td><td align="right" headers="Total IOWait(s)" class='awrc'>793.97</td><td align="right" headers="Total Rows" class='awrc'>3</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.87</td><td align="right" headers="Total Execs" class='awrc'>3</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>598,673.00</td><td align="right" headers="PerExecution Requests" class='awrc'>598,673.00</td><td align="right" headers="PerExecution Reads" class='awrc'>598,673.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.36</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>61.36</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>264.66</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>165.96</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>4.55</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>4.55</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.54</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7601qqtdhust2">7601qqtdhust2</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,739,632</td><td align="right" headers="Total Requests" class='awrnc'>1,739,632</td><td align="right" headers="Total Reads" class='awrnc'>1,739,632</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,591.27</td><td align="right" headers="Total CPU(s)" class='awrnc'>179.98</td><td align="right" headers="Total IOWait(s)" class='awrnc'>863.11</td><td align="right" headers="Total Rows" class='awrnc'>3</td><td align="right" headers="Total Cluster(s)" class='awrnc'>453.60</td><td align="right" headers="Total Execs" class='awrnc'>3</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>579,877.33</td><td align="right" headers="PerExecution Requests" class='awrnc'>579,877.33</td><td align="right" headers="PerExecution Reads" class='awrnc'>579,877.33</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>530.42</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>59.99</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>287.70</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>151.20</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>4.41</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>4.41</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.77</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9xv3wfaqtjswf">9xv3wfaqtjswf</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>1,681,470</td><td align="right" headers="Total Requests" class='awrc'>1,681,470</td><td align="right" headers="Total Reads" class='awrc'>1,681,470</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.41</td><td align="right" headers="Total CPU(s)" class='awrc'>139.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>923.68</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>289.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>420,367.50</td><td align="right" headers="PerExecution Requests" class='awrc'>420,367.50</td><td align="right" headers="PerExecution Reads" class='awrc'>420,367.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>230.92</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>72.33</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>4.26</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>4.26</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>4.25</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.97</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8cbqpnkxnw661">8cbqpnkxnw661</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,487,110</td><td align="right" headers="Total Requests" class='awrnc'>1,487,110</td><td align="right" headers="Total Reads" class='awrnc'>1,487,110</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,180.87</td><td align="right" headers="Total CPU(s)" class='awrnc'>126.36</td><td align="right" headers="Total IOWait(s)" class='awrnc'>873.51</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>380.50</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>371,777.50</td><td align="right" headers="PerExecution Requests" class='awrnc'>371,777.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>371,777.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>31.59</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.38</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>95.13</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>3.77</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>3.77</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.81</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3xy3zh57sf5by">3xy3zh57sf5by</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>1,455,782</td><td align="right" headers="Total Requests" class='awrc'>1,455,782</td><td align="right" headers="Total Reads" class='awrc'>1,456,349</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,181.03</td><td align="right" headers="Total CPU(s)" class='awrc'>124.34</td><td align="right" headers="Total IOWait(s)" class='awrc'>872.78</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Cluster(s)" class='awrc'>372.31</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>363,945.50</td><td align="right" headers="PerExecution Requests" class='awrc'>363,945.50</td><td align="right" headers="PerExecution Reads" class='awrc'>364,087.25</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.26</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>31.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.19</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>93.08</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>3.69</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>3.69</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>3.69</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.16</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>2.80</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7fr7cwdnxufu3">7fr7cwdnxufu3</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,401,821</td><td align="right" headers="Total Requests" class='awrnc'>1,401,821</td><td align="right" headers="Total Reads" class='awrnc'>1,401,821</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,181.88</td><td align="right" headers="Total CPU(s)" class='awrnc'>121.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>851.06</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>407.07</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>350,455.25</td><td align="right" headers="PerExecution Requests" class='awrnc'>350,455.25</td><td align="right" headers="PerExecution Reads" class='awrnc'>350,455.25</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.47</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>30.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>212.76</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>101.77</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>3.55</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>3.55</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.73</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#cmt7ct5kk8chb">cmt7ct5kk8chb</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>1,261,388</td><td align="right" headers="Total Requests" class='awrc'>1,261,388</td><td align="right" headers="Total Reads" class='awrc'>1,261,388</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,061.79</td><td align="right" headers="Total CPU(s)" class='awrc'>127.87</td><td align="right" headers="Total IOWait(s)" class='awrc'>449.86</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>409.82</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>630,694.00</td><td align="right" headers="PerExecution Requests" class='awrc'>630,694.00</td><td align="right" headers="PerExecution Reads" class='awrc'>630,694.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>530.89</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>63.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>224.93</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>204.91</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>3.20</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>3.20</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>3.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.22</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.45</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#66j7nhxd85syt">66j7nhxd85syt</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,245,459</td><td align="right" headers="Total Requests" class='awrnc'>1,245,459</td><td align="right" headers="Total Reads" class='awrnc'>1,245,459</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,181.84</td><td align="right" headers="Total CPU(s)" class='awrnc'>109.61</td><td align="right" headers="Total IOWait(s)" class='awrnc'>812.42</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>489.94</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>311,364.75</td><td align="right" headers="PerExecution Requests" class='awrnc'>311,364.75</td><td align="right" headers="PerExecution Reads" class='awrnc'>311,364.75</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.46</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>27.40</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>203.11</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>122.48</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>3.16</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>3.16</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>3.15</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.91</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>2.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:	  339,960</li>
<li class="awr">Captured SQL account for   94.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>265,424</td><td align="right" headers="Total Elapsed(s)" class='awrc'>98,574.93</td><td align="right" headers="Total CPU(s)" class='awrc'>2,811.39</td><td align="right" headers="Total IOWait(s)" class='awrc'>11,990.71</td><td align="right" headers="Total Gets" class='awrc'>34,634,294</td><td align="right" headers="Total Reads" class='awrc'>32,194,683</td><td align="right" headers="Total Rows" class='awrc'>265,512</td><td align="right" headers="Total Cluster(s)" class='awrc'>73,169.34</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.37</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrc'>130.49</td><td align="right" headers="PerExecution Reads" class='awrc'>121.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.28</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>78.08</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>34.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>48.91</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>38.53</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>74.92</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>81.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>30.82</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrnclb'>46,494</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>176,962.46</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,550.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,179.04</td><td align="right" headers="Total Gets" class='awrnc'>6,611,025</td><td align="right" headers="Total Reads" class='awrnc'>5,621,026</td><td align="right" headers="Total Rows" class='awrnc'>5,904,738</td><td align="right" headers="Total Cluster(s)" class='awrnc'>152,887.92</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>3.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.37</td><td align="right" headers="PerExecution Gets" class='awrnc'>142.19</td><td align="right" headers="PerExecution Reads" class='awrnc'>120.90</td><td align="right" headers="PerExecution Rows" class='awrnc'>127.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.29</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>13.68</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.64</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>44.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>55.20</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>14.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>64.39</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrclb'>2,253</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.51</td><td align="right" headers="Total CPU(s)" class='awrc'>0.19</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>6,790</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>2,198</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.01</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.98</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.66</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrnclb'>1,523</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>3,109</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>63</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.04</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.04</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.45</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td><td align="right" headers="Total Execs" class='awrclb'>596</td><td align="right" headers="Total Elapsed(s)" class='awrc'>10.90</td><td align="right" headers="Total CPU(s)" class='awrc'>0.15</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.11</td><td align="right" headers="Total Gets" class='awrc'>2,100</td><td align="right" headers="Total Reads" class='awrc'>50</td><td align="right" headers="Total Rows" class='awrc'>596</td><td align="right" headers="Total Cluster(s)" class='awrc'>8.15</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.02</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.52</td><td align="right" headers="PerExecution Reads" class='awrc'>0.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td><td align="right" headers="Total Execs" class='awrnclb'>512</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.30</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.25</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>0</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>512</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>0.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.15</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td><td align="right" headers="Total Execs" class='awrclb'>429</td><td align="right" headers="Total Elapsed(s)" class='awrc'>6.93</td><td align="right" headers="Total CPU(s)" class='awrc'>0.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.01</td><td align="right" headers="Total Gets" class='awrc'>2,604</td><td align="right" headers="Total Reads" class='awrc'>3</td><td align="right" headers="Total Rows" class='awrc'>429</td><td align="right" headers="Total Cluster(s)" class='awrc'>6.55</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.02</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>6.07</td><td align="right" headers="PerExecution Reads" class='awrc'>0.01</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.13</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td><td align="right" headers="Total Execs" class='awrnclb'>282</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1.88</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.07</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.02</td><td align="right" headers="Total Gets" class='awrnc'>1,882</td><td align="right" headers="Total Reads" class='awrnc'>22</td><td align="right" headers="Total Rows" class='awrnc'>282</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.67</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.08</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.08</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td><td align="right" headers="Total Execs" class='awrclb'>244</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1.13</td><td align="right" headers="Total CPU(s)" class='awrc'>0.08</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>107</td><td align="right" headers="Total Reads" class='awrc'>1</td><td align="right" headers="Total Rows" class='awrc'>244</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.62</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>0.44</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.07</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td><td align="right" headers="Total Execs" class='awrnclb'>219</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.02</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.02</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>442</td><td align="right" headers="Total Reads" class='awrnc'>1</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.02</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.02</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.06</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, index# from oid$ ...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	     237,444</li>
<li class="awr">Captured SQL account for   95.2% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>152,887.92</td><td align="right" headers="Total Elapsed(s)" class='awrc'>176,962.46</td><td align="right" headers="Total CPU(s)" class='awrc'>2,550.09</td><td align="right" headers="Total IOWait(s)" class='awrc'>17,179.04</td><td align="right" headers="Total Gets" class='awrc'>6,611,025</td><td align="right" headers="Total Reads" class='awrc'>5,621,026</td><td align="right" headers="Total Rows" class='awrc'>5,904,738</td><td align="right" headers="Total Execs" class='awrc'>46,494</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>3.29</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>3.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.37</td><td align="right" headers="PerExecution Gets" class='awrc'>142.19</td><td align="right" headers="PerExecution Reads" class='awrc'>120.90</td><td align="right" headers="PerExecution Rows" class='awrc'>127.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>64.39</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>61.64</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.37</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>55.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>14.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>14.22</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>13.68</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>73,169.34</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>98,574.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,811.39</td><td align="right" headers="Total IOWait(s)" class='awrnc'>11,990.71</td><td align="right" headers="Total Gets" class='awrnc'>34,634,294</td><td align="right" headers="Total Reads" class='awrnc'>32,194,683</td><td align="right" headers="Total Rows" class='awrnc'>265,512</td><td align="right" headers="Total Execs" class='awrnc'>265,424</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>0.28</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrnc'>130.49</td><td align="right" headers="PerExecution Reads" class='awrnc'>121.30</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>30.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>34.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>48.91</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>38.53</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>74.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>81.47</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>78.08</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#868wdptu2wdsf">868wdptu2wdsf</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>1,956.90</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,128.09</td><td align="right" headers="Total CPU(s)" class='awrc'>37.53</td><td align="right" headers="Total IOWait(s)" class='awrc'>115.21</td><td align="right" headers="Total Gets" class='awrc'>146,690</td><td align="right" headers="Total Reads" class='awrc'>141,895</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>489.22</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>532.02</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>9.38</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>28.80</td><td align="right" headers="PerExecution Gets" class='awrc'>36,672.50</td><td align="right" headers="PerExecution Reads" class='awrc'>35,473.75</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.32</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.36</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#59c9hcdmc2sp8">59c9hcdmc2sp8</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>1,956.18</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,125.19</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.83</td><td align="right" headers="Total IOWait(s)" class='awrnc'>114.64</td><td align="right" headers="Total Gets" class='awrnc'>148,971</td><td align="right" headers="Total Reads" class='awrnc'>143,696</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>489.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>531.30</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>9.46</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>28.66</td><td align="right" headers="PerExecution Gets" class='awrnc'>37,242.75</td><td align="right" headers="PerExecution Reads" class='awrnc'>35,924.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.66</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.32</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.36</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6a32815hkfxqf">6a32815hkfxqf</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>1,954.93</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,132.49</td><td align="right" headers="Total CPU(s)" class='awrc'>20.91</td><td align="right" headers="Total IOWait(s)" class='awrc'>129.64</td><td align="right" headers="Total Gets" class='awrc'>105,527</td><td align="right" headers="Total Reads" class='awrc'>99,829</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>488.73</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>533.12</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>5.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>32.41</td><td align="right" headers="PerExecution Gets" class='awrc'>26,381.75</td><td align="right" headers="PerExecution Reads" class='awrc'>24,957.25</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.36</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.42</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9jnaa1bq11a61">9jnaa1bq11a61</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>1,952.60</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,127.44</td><td align="right" headers="Total CPU(s)" class='awrnc'>38.94</td><td align="right" headers="Total IOWait(s)" class='awrnc'>116.74</td><td align="right" headers="Total Gets" class='awrnc'>151,715</td><td align="right" headers="Total Reads" class='awrnc'>146,184</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>488.15</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>531.86</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>9.73</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>29.18</td><td align="right" headers="PerExecution Gets" class='awrnc'>37,928.75</td><td align="right" headers="PerExecution Reads" class='awrnc'>36,546.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.68</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.33</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#05dgz376x2uah">05dgz376x2uah</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>1,951.44</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,124.65</td><td align="right" headers="Total CPU(s)" class='awrc'>38.18</td><td align="right" headers="Total IOWait(s)" class='awrc'>118.32</td><td align="right" headers="Total Gets" class='awrc'>149,081</td><td align="right" headers="Total Reads" class='awrc'>143,915</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>487.86</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>531.16</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>9.55</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>29.58</td><td align="right" headers="PerExecution Gets" class='awrc'>37,270.25</td><td align="right" headers="PerExecution Reads" class='awrc'>35,978.75</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.66</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.32</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.36</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#279tufy9n4jkw">279tufy9n4jkw</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>1,949.83</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,130.78</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.35</td><td align="right" headers="Total IOWait(s)" class='awrnc'>126.43</td><td align="right" headers="Total Gets" class='awrnc'>107,062</td><td align="right" headers="Total Reads" class='awrnc'>101,664</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>487.46</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>532.70</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>5.34</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>31.61</td><td align="right" headers="PerExecution Gets" class='awrnc'>26,765.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>25,416.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.41</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.26</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#gx2wbjnsndywg">gx2wbjnsndywg</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>1,948.85</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2,126.51</td><td align="right" headers="Total CPU(s)" class='awrc'>38.16</td><td align="right" headers="Total IOWait(s)" class='awrc'>115.52</td><td align="right" headers="Total Gets" class='awrc'>149,586</td><td align="right" headers="Total Reads" class='awrc'>144,280</td><td align="right" headers="Total Rows" class='awrc'>4</td><td align="right" headers="Total Execs" class='awrc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>487.21</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>531.63</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>9.54</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>28.88</td><td align="right" headers="PerExecution Gets" class='awrc'>37,396.50</td><td align="right" headers="PerExecution Reads" class='awrc'>36,070.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.66</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.32</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fd4xkca0yhc14">fd4xkca0yhc14</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>1,948.42</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>2,132.23</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.13</td><td align="right" headers="Total IOWait(s)" class='awrnc'>131.04</td><td align="right" headers="Total Gets" class='awrnc'>105,168</td><td align="right" headers="Total Reads" class='awrnc'>100,178</td><td align="right" headers="Total Rows" class='awrnc'>4</td><td align="right" headers="Total Execs" class='awrnc'>4</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>487.11</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>533.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>5.28</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>32.76</td><td align="right" headers="PerExecution Gets" class='awrnc'>26,292.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>25,044.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.42</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.25</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>2,008</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>1.09</td><td align="right" headers="perSecond Max" class='awrncrb'>1.11</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>499</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.22</td><td align="right" headers="perSecond Max" class='awrcrb'>0.32</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>1,571</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.80</td><td align="right" headers="perSecond Max" class='awrncrb'>0.91</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>284</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Optimized reject DB</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search all</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search hint</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search steal</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:bump HWM</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free block</td><td align="right" class='awrnc'>1,510</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.77</td><td align="right" headers="perSecond Max" class='awrncrb'>0.88</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free data block</td><td align="right" class='awrc'>1,130</td><td align="right" class='awrc'>1.23</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.62</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.52</td><td align="right" headers="perSecond Max" class='awrcrb'>0.71</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free index block</td><td align="right" class='awrnc'>380</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.17</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:good hint</td><td align="right" class='awrc'>1,334</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.73</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.70</td><td align="right" headers="perSecond Max" class='awrcrb'>0.76</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:reject db</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>457</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.14</td><td align="right" headers="perSecond Max" class='awrcrb'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>45,176</td><td align="right" class='awrnc'>49.33</td><td align="right" class='awrnc'>0.91</td><td align="right" headers="perSecond Average" class='awrnclb'>49.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>49.33</td><td align="right" headers="perSecond Max" class='awrncrb'>49.33</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>62,102,247</td><td align="right" class='awrc'>67,785.79</td><td align="right" class='awrc'>1,247.03</td><td align="right" headers="perSecond Average" class='awrclb'>33,892.89</td><td align="right" headers="perSecond StdDev" class='awrc'>3,835.77</td><td align="right" headers="perSecond Min" class='awrc'>31,180.60</td><td align="right" headers="perSecond Max" class='awrcrb'>36,605.19</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO buffer defrag count</td><td align="right" class='awrnc'>5,054</td><td align="right" class='awrnc'>5.52</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>2.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.90</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>5.52</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>30,224,880</td><td align="right" class='awrc'>32,993.74</td><td align="right" class='awrc'>606.93</td><td align="right" headers="perSecond Average" class='awrclb'>16,496.87</td><td align="right" headers="perSecond StdDev" class='awrc'>7,343.32</td><td align="right" headers="perSecond Min" class='awrc'>11,304.36</td><td align="right" headers="perSecond Max" class='awrcrb'>21,689.38</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>898</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.70</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>6,539</td><td align="right" class='awrc'>7.14</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>3.57</td><td align="right" headers="perSecond StdDev" class='awrc'>1.33</td><td align="right" headers="perSecond Min" class='awrc'>2.63</td><td align="right" headers="perSecond Max" class='awrcrb'>4.51</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>62,543,585</td><td align="right" class='awrnc'>68,267.57</td><td align="right" class='awrnc'>1,255.90</td><td align="right" headers="perSecond Average" class='awrnclb'>34,133.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,974.24</td><td align="right" headers="perSecond Min" class='awrnc'>31,323.57</td><td align="right" headers="perSecond Max" class='awrncrb'>36,944.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>828,386</td><td align="right" class='awrc'>904.24</td><td align="right" class='awrc'>16.63</td><td align="right" headers="perSecond Average" class='awrclb'>452.12</td><td align="right" headers="perSecond StdDev" class='awrc'>128.96</td><td align="right" headers="perSecond Min" class='awrc'>360.93</td><td align="right" headers="perSecond Max" class='awrcrb'>543.31</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>7,904</td><td align="right" class='awrnc'>8.63</td><td align="right" class='awrnc'>0.16</td><td align="right" headers="perSecond Average" class='awrnclb'>4.31</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.58</td><td align="right" headers="perSecond Min" class='awrnc'>3.91</td><td align="right" headers="perSecond Max" class='awrncrb'>4.72</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>134</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>788,995</td><td align="right" class='awrnc'>861.13</td><td align="right" class='awrnc'>15.84</td><td align="right" headers="perSecond Average" class='awrnclb'>430.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>102.68</td><td align="right" headers="perSecond Min" class='awrnc'>357.96</td><td align="right" headers="perSecond Max" class='awrncrb'>503.17</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>642,571</td><td align="right" class='awrc'>701.31</td><td align="right" class='awrc'>12.90</td><td align="right" headers="perSecond Average" class='awrclb'>350.66</td><td align="right" headers="perSecond StdDev" class='awrc'>98.47</td><td align="right" headers="perSecond Min" class='awrc'>281.03</td><td align="right" headers="perSecond Max" class='awrcrb'>420.28</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>6,781</td><td align="right" class='awrnc'>7.40</td><td align="right" class='awrnc'>0.14</td><td align="right" headers="perSecond Average" class='awrnclb'>3.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.39</td><td align="right" headers="perSecond Min" class='awrnc'>3.42</td><td align="right" headers="perSecond Max" class='awrncrb'>3.98</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>30,521,955</td><td align="right" class='awrc'>33,313.14</td><td align="right" class='awrc'>612.89</td><td align="right" headers="perSecond Average" class='awrclb'>16,656.57</td><td align="right" headers="perSecond StdDev" class='awrc'>2,488.04</td><td align="right" headers="perSecond Min" class='awrc'>14,897.26</td><td align="right" headers="perSecond Max" class='awrcrb'>18,415.88</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>3,591</td><td align="right" class='awrnc'>3.92</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>1.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>1.94</td><td align="right" headers="perSecond Max" class='awrncrb'>1.98</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>3,591</td><td align="right" class='awrc'>3.92</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>1.96</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>1.94</td><td align="right" headers="perSecond Max" class='awrcrb'>1.98</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>17,341,865</td><td align="right" class='awrnc'>18,934.78</td><td align="right" class='awrnc'>348.23</td><td align="right" headers="perSecond Average" class='awrnclb'>9,467.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>12,820.60</td><td align="right" headers="perSecond Min" class='awrnc'>401.85</td><td align="right" headers="perSecond Max" class='awrncrb'>18,532.93</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>5,130</td><td align="right" class='awrc'>5.60</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>2.80</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>2.77</td><td align="right" headers="perSecond Max" class='awrcrb'>2.83</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>238</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>1,860</td><td align="right" class='awrnc'>2.03</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.61</td><td align="right" headers="perSecond Min" class='awrnc'>0.58</td><td align="right" headers="perSecond Max" class='awrncrb'>1.45</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>1,726,056</td><td align="right" class='awrc'>1,884.08</td><td align="right" class='awrc'>34.66</td><td align="right" headers="perSecond Average" class='awrclb'>942.04</td><td align="right" headers="perSecond StdDev" class='awrc'>227.41</td><td align="right" headers="perSecond Min" class='awrc'>781.24</td><td align="right" headers="perSecond Max" class='awrcrb'>1,102.85</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>2,114,541</td><td align="right" class='awrnc'>2,308.32</td><td align="right" class='awrnc'>42.46</td><td align="right" headers="perSecond Average" class='awrnclb'>1,154.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>643.56</td><td align="right" headers="perSecond Min" class='awrnc'>699.09</td><td align="right" headers="perSecond Max" class='awrncrb'>1,609.22</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>8,108,781</td><td align="right" class='awrc'>8,850.68</td><td align="right" class='awrc'>162.83</td><td align="right" headers="perSecond Average" class='awrclb'>4,425.34</td><td align="right" headers="perSecond StdDev" class='awrc'>71.81</td><td align="right" headers="perSecond Min" class='awrc'>4,374.56</td><td align="right" headers="perSecond Max" class='awrcrb'>4,476.11</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>3,135,607</td><td align="right" class='awrnc'>3,422.49</td><td align="right" class='awrnc'>62.96</td><td align="right" headers="perSecond Average" class='awrnclb'>1,711.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>25.15</td><td align="right" headers="perSecond Min" class='awrnc'>1,693.46</td><td align="right" headers="perSecond Max" class='awrncrb'>1,729.03</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>840</td><td align="right" class='awrnc'>0.92</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.52</td><td align="right" headers="perSecond Min" class='awrnc'>0.09</td><td align="right" headers="perSecond Max" class='awrncrb'>0.83</td></tr>
<tr><td scope="row" class='awrc'>DB time</td><td align="right" class='awrc'>30,837,810</td><td align="right" class='awrc'>33,659.24</td><td align="right" class='awrc'>619.23</td><td align="right" headers="perSecond Average" class='awrclb'>16,829.62</td><td align="right" headers="perSecond StdDev" class='awrc'>254.02</td><td align="right" headers="perSecond Min" class='awrc'>16,650.00</td><td align="right" headers="perSecond Max" class='awrcrb'>17,009.24</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoint buffers written</td><td align="right" class='awrnc'>298,641</td><td align="right" class='awrnc'>325.94</td><td align="right" class='awrnc'>6.00</td><td align="right" headers="perSecond Average" class='awrnclb'>162.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>40.22</td><td align="right" headers="perSecond Min" class='awrnc'>134.53</td><td align="right" headers="perSecond Max" class='awrncrb'>191.41</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoints</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>DBWR fusion writes</td><td align="right" class='awrnc'>3,969</td><td align="right" class='awrnc'>4.33</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>2.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.77</td><td align="right" headers="perSecond Min" class='awrnc'>0.91</td><td align="right" headers="perSecond Max" class='awrncrb'>3.42</td></tr>
<tr><td scope="row" class='awrc'>DBWR object drop buffers written</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>1,150</td><td align="right" class='awrnc'>1.26</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.61</td><td align="right" headers="perSecond Max" class='awrncrb'>0.65</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>299,973</td><td align="right" class='awrc'>327.40</td><td align="right" class='awrc'>6.02</td><td align="right" headers="perSecond Average" class='awrclb'>163.70</td><td align="right" headers="perSecond StdDev" class='awrc'>25.53</td><td align="right" headers="perSecond Min" class='awrc'>145.65</td><td align="right" headers="perSecond Max" class='awrcrb'>181.75</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>6,260,658</td><td align="right" class='awrc'>6,833.18</td><td align="right" class='awrc'>125.72</td><td align="right" headers="perSecond Average" class='awrclb'>3,416.59</td><td align="right" headers="perSecond StdDev" class='awrc'>522.58</td><td align="right" headers="perSecond Min" class='awrc'>3,047.07</td><td align="right" headers="perSecond Max" class='awrcrb'>3,786.11</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>361</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.21</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>69,992,448</td><td align="right" class='awrc'>76,415.95</td><td align="right" class='awrc'>1,405.47</td><td align="right" headers="perSecond Average" class='awrclb'>38,207.98</td><td align="right" headers="perSecond StdDev" class='awrc'>40,483.37</td><td align="right" headers="perSecond Min" class='awrc'>9,581.91</td><td align="right" headers="perSecond Max" class='awrcrb'>66,834.04</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>508,669</td><td align="right" class='awrnc'>555.05</td><td align="right" class='awrnc'>10.21</td><td align="right" headers="perSecond Average" class='awrnclb'>277.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>307.12</td><td align="right" headers="perSecond Min" class='awrnc'>60.36</td><td align="right" headers="perSecond Max" class='awrncrb'>494.69</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>1,555</td><td align="right" class='awrnc'>1.70</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1.70</td><td align="right" headers="perSecond Max" class='awrncrb'>1.70</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>487</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>487</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.10</td><td align="right" headers="perSecond Min" class='awrnc'>0.20</td><td align="right" headers="perSecond Max" class='awrncrb'>0.33</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>509</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.26</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>509</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.26</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>1,729</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.83</td><td align="right" headers="perSecond Max" class='awrncrb'>1.05</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>1,217</td><td align="right" class='awrc'>1.33</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.66</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>0.56</td><td align="right" headers="perSecond Max" class='awrcrb'>0.77</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>3,970</td><td align="right" class='awrnc'>4.33</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>2.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>1.91</td><td align="right" headers="perSecond Max" class='awrncrb'>2.42</td></tr>
<tr><td scope="row" class='awrc'>application wait time</td><td align="right" class='awrc'>10,172</td><td align="right" class='awrc'>11.10</td><td align="right" class='awrc'>0.20</td><td align="right" headers="perSecond Average" class='awrclb'>5.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>5.54</td><td align="right" headers="perSecond Max" class='awrcrb'>5.57</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background timeouts</td><td align="right" class='awrc'>26,225</td><td align="right" class='awrc'>28.62</td><td align="right" class='awrc'>0.53</td><td align="right" headers="perSecond Average" class='awrclb'>14.31</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>14.21</td><td align="right" headers="perSecond Max" class='awrcrb'>14.41</td></tr>
<tr><td scope="row" class='awrnc'>blocks cleaned out using minact</td><td align="right" class='awrnc'>3,097,939</td><td align="right" class='awrnc'>3,381.16</td><td align="right" class='awrnc'>62.21</td><td align="right" headers="perSecond Average" class='awrnclb'>1,690.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>410.79</td><td align="right" headers="perSecond Min" class='awrnc'>1,400.11</td><td align="right" headers="perSecond Max" class='awrncrb'>1,981.06</td></tr>
<tr><td scope="row" class='awrc'>branch node splits</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>165,060,052</td><td align="right" class='awrnc'>180,165.08</td><td align="right" class='awrnc'>3,314.46</td><td align="right" headers="perSecond Average" class='awrnclb'>90,082.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>7,939.72</td><td align="right" headers="perSecond Min" class='awrnc'>84,468.31</td><td align="right" headers="perSecond Max" class='awrncrb'>95,696.77</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>41,433,702</td><td align="right" class='awrc'>45,222.27</td><td align="right" class='awrc'>832.00</td><td align="right" headers="perSecond Average" class='awrclb'>22,611.14</td><td align="right" headers="perSecond StdDev" class='awrc'>4,335.50</td><td align="right" headers="perSecond Min" class='awrc'>19,545.47</td><td align="right" headers="perSecond Max" class='awrcrb'>25,676.80</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>1,082,195</td><td align="right" class='awrnc'>1,181.42</td><td align="right" class='awrnc'>21.73</td><td align="right" headers="perSecond Average" class='awrnclb'>590.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>448.37</td><td align="right" headers="perSecond Min" class='awrnc'>273.67</td><td align="right" headers="perSecond Max" class='awrncrb'>907.76</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>304,165</td><td align="right" class='awrc'>332.01</td><td align="right" class='awrc'>6.11</td><td align="right" headers="perSecond Average" class='awrclb'>166.00</td><td align="right" headers="perSecond StdDev" class='awrc'>28.99</td><td align="right" headers="perSecond Min" class='awrc'>145.50</td><td align="right" headers="perSecond Max" class='awrcrb'>186.51</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>425,300</td><td align="right" class='awrnc'>464.19</td><td align="right" class='awrnc'>8.54</td><td align="right" headers="perSecond Average" class='awrnclb'>232.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>31.73</td><td align="right" headers="perSecond Min" class='awrnc'>209.66</td><td align="right" headers="perSecond Max" class='awrncrb'>254.53</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>120,354</td><td align="right" class='awrc'>131.36</td><td align="right" class='awrc'>2.42</td><td align="right" headers="perSecond Average" class='awrclb'>65.68</td><td align="right" headers="perSecond StdDev" class='awrc'>7.28</td><td align="right" headers="perSecond Min" class='awrc'>60.54</td><td align="right" headers="perSecond Max" class='awrcrb'>70.83</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>15,734</td><td align="right" class='awrnc'>17.17</td><td align="right" class='awrnc'>0.32</td><td align="right" headers="perSecond Average" class='awrnclb'>8.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.50</td><td align="right" headers="perSecond Min" class='awrnc'>8.23</td><td align="right" headers="perSecond Max" class='awrncrb'>8.94</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>453,317,684,224</td><td align="right" class='awrc'>494,770,203.30</td><td align="right" class='awrc'>9,102,764.74</td><td align="right" headers="perSecond Average" class='awrclb'>247,385,101.65</td><td align="right" headers="perSecond StdDev" class='awrc'>42,248,232.25</td><td align="right" headers="perSecond Min" class='awrc'>217,511,090.13</td><td align="right" headers="perSecond Max" class='awrcrb'>277,259,113.17</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>14,689</td><td align="right" class='awrnc'>16.03</td><td align="right" class='awrnc'>0.29</td><td align="right" headers="perSecond Average" class='awrnclb'>8.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.77</td><td align="right" headers="perSecond Min" class='awrnc'>6.05</td><td align="right" headers="perSecond Max" class='awrncrb'>9.98</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>62,753</td><td align="right" class='awrc'>68.49</td><td align="right" class='awrc'>1.26</td><td align="right" headers="perSecond Average" class='awrclb'>34.25</td><td align="right" headers="perSecond StdDev" class='awrc'>1.20</td><td align="right" headers="perSecond Min" class='awrc'>33.40</td><td align="right" headers="perSecond Max" class='awrcrb'>35.09</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>3.51</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>1.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.06</td><td align="right" headers="perSecond Min" class='awrnc'>1.71</td><td align="right" headers="perSecond Max" class='awrncrb'>1.80</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>46,151</td><td align="right" class='awrc'>50.37</td><td align="right" class='awrc'>0.93</td><td align="right" headers="perSecond Average" class='awrclb'>25.19</td><td align="right" headers="perSecond StdDev" class='awrc'>4.36</td><td align="right" headers="perSecond Min" class='awrc'>22.10</td><td align="right" headers="perSecond Max" class='awrcrb'>28.27</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>1,695</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.93</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.83</td><td align="right" headers="perSecond Min" class='awrnc'>0.34</td><td align="right" headers="perSecond Max" class='awrncrb'>1.51</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>1,195</td><td align="right" class='awrc'>1.30</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.65</td><td align="right" headers="perSecond StdDev" class='awrc'>0.57</td><td align="right" headers="perSecond Min" class='awrc'>0.25</td><td align="right" headers="perSecond Max" class='awrcrb'>1.05</td></tr>
<tr><td scope="row" class='awrnc'>cluster wait time</td><td align="right" class='awrnc'>23,564,746</td><td align="right" class='awrnc'>25,720.50</td><td align="right" class='awrnc'>473.19</td><td align="right" headers="perSecond Average" class='awrnclb'>12,860.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>310.12</td><td align="right" headers="perSecond Min" class='awrnc'>12,640.96</td><td align="right" headers="perSecond Max" class='awrncrb'>13,079.54</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>55,474</td><td align="right" class='awrc'>60.55</td><td align="right" class='awrc'>1.11</td><td align="right" headers="perSecond Average" class='awrclb'>30.27</td><td align="right" headers="perSecond StdDev" class='awrc'>5.34</td><td align="right" headers="perSecond Min" class='awrc'>26.50</td><td align="right" headers="perSecond Max" class='awrcrb'>34.05</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>46,839</td><td align="right" class='awrnc'>51.12</td><td align="right" class='awrnc'>0.94</td><td align="right" headers="perSecond Average" class='awrnclb'>25.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.51</td><td align="right" headers="perSecond Min" class='awrnc'>23.79</td><td align="right" headers="perSecond Max" class='awrncrb'>27.34</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: cannot pin</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>5,991,560</td><td align="right" class='awrc'>6,539.47</td><td align="right" class='awrc'>120.31</td><td align="right" headers="perSecond Average" class='awrclb'>3,269.74</td><td align="right" headers="perSecond StdDev" class='awrc'>502.45</td><td align="right" headers="perSecond Min" class='awrc'>2,914.45</td><td align="right" headers="perSecond Max" class='awrcrb'>3,625.02</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>5,889,166</td><td align="right" class='awrnc'>6,427.71</td><td align="right" class='awrnc'>118.26</td><td align="right" headers="perSecond Average" class='awrnclb'>3,213.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>494.60</td><td align="right" headers="perSecond Min" class='awrnc'>2,864.12</td><td align="right" headers="perSecond Max" class='awrncrb'>3,563.59</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>48,274</td><td align="right" class='awrc'>52.69</td><td align="right" class='awrc'>0.97</td><td align="right" headers="perSecond Average" class='awrclb'>26.34</td><td align="right" headers="perSecond StdDev" class='awrc'>4.41</td><td align="right" headers="perSecond Min" class='awrc'>23.23</td><td align="right" headers="perSecond Max" class='awrcrb'>29.46</td></tr>
<tr><td scope="row" class='awrnc'>concurrency wait time</td><td align="right" class='awrnc'>3,502</td><td align="right" class='awrnc'>3.82</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>1.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.31</td><td align="right" headers="perSecond Min" class='awrnc'>1.69</td><td align="right" headers="perSecond Max" class='awrncrb'>2.13</td></tr>
<tr><td scope="row" class='awrc'>consistent changes</td><td align="right" class='awrc'>28,013</td><td align="right" class='awrc'>30.58</td><td align="right" class='awrc'>0.56</td><td align="right" headers="perSecond Average" class='awrclb'>15.29</td><td align="right" headers="perSecond StdDev" class='awrc'>1.04</td><td align="right" headers="perSecond Min" class='awrc'>14.55</td><td align="right" headers="perSecond Max" class='awrcrb'>16.03</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets</td><td align="right" class='awrnc'>39,217,807</td><td align="right" class='awrnc'>42,804.91</td><td align="right" class='awrnc'>787.51</td><td align="right" headers="perSecond Average" class='awrnclb'>21,402.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,776.25</td><td align="right" headers="perSecond Min" class='awrnc'>20,146.45</td><td align="right" headers="perSecond Max" class='awrncrb'>22,658.46</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>3,435,854</td><td align="right" class='awrc'>3,751.19</td><td align="right" class='awrc'>68.99</td><td align="right" headers="perSecond Average" class='awrclb'>1,875.60</td><td align="right" headers="perSecond StdDev" class='awrc'>2,019.02</td><td align="right" headers="perSecond Min" class='awrc'>447.93</td><td align="right" headers="perSecond Max" class='awrcrb'>3,303.26</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>3,417,905</td><td align="right" class='awrnc'>3,731.60</td><td align="right" class='awrnc'>68.63</td><td align="right" headers="perSecond Average" class='awrnclb'>1,865.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,015.06</td><td align="right" headers="perSecond Min" class='awrnc'>440.94</td><td align="right" headers="perSecond Max" class='awrncrb'>3,290.66</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>39,217,807</td><td align="right" class='awrc'>42,804.91</td><td align="right" class='awrc'>787.51</td><td align="right" headers="perSecond Average" class='awrclb'>21,402.46</td><td align="right" headers="perSecond StdDev" class='awrc'>1,776.25</td><td align="right" headers="perSecond Min" class='awrc'>20,146.45</td><td align="right" headers="perSecond Max" class='awrcrb'>22,658.46</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>35,781,953</td><td align="right" class='awrnc'>39,053.72</td><td align="right" class='awrnc'>718.51</td><td align="right" headers="perSecond Average" class='awrnclb'>19,526.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,795.27</td><td align="right" headers="perSecond Min" class='awrnc'>16,843.19</td><td align="right" headers="perSecond Max" class='awrncrb'>22,210.52</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>34,135,346</td><td align="right" class='awrc'>37,256.44</td><td align="right" class='awrc'>685.45</td><td align="right" headers="perSecond Average" class='awrclb'>18,628.22</td><td align="right" headers="perSecond StdDev" class='awrc'>3,848.01</td><td align="right" headers="perSecond Min" class='awrc'>15,907.27</td><td align="right" headers="perSecond Max" class='awrcrb'>21,349.17</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.14</td></tr>
<tr><td scope="row" class='awrc'>cursor reload failures</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>4,748</td><td align="right" class='awrnc'>5.18</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>2.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.33</td><td align="right" headers="perSecond Min" class='awrnc'>2.36</td><td align="right" headers="perSecond Max" class='awrncrb'>2.82</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>13,010,132</td><td align="right" class='awrc'>14,199.88</td><td align="right" class='awrc'>261.25</td><td align="right" headers="perSecond Average" class='awrclb'>7,099.94</td><td align="right" headers="perSecond StdDev" class='awrc'>1,076.09</td><td align="right" headers="perSecond Min" class='awrc'>6,339.03</td><td align="right" headers="perSecond Max" class='awrcrb'>7,860.85</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>7,010,000</td><td align="right" class='awrnc'>7,651.05</td><td align="right" class='awrnc'>140.76</td><td align="right" headers="perSecond Average" class='awrnclb'>3,825.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>574.64</td><td align="right" headers="perSecond Min" class='awrnc'>3,419.19</td><td align="right" headers="perSecond Max" class='awrncrb'>4,231.86</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>2,002</td><td align="right" class='awrc'>2.19</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>1.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>1.06</td><td align="right" headers="perSecond Max" class='awrcrb'>1.12</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>7,007,998</td><td align="right" class='awrnc'>7,648.87</td><td align="right" class='awrnc'>140.72</td><td align="right" headers="perSecond Average" class='awrnclb'>3,824.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>574.68</td><td align="right" headers="perSecond Min" class='awrnc'>3,418.07</td><td align="right" headers="perSecond Max" class='awrncrb'>4,230.80</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>520,954</td><td align="right" class='awrc'>568.60</td><td align="right" class='awrc'>10.46</td><td align="right" headers="perSecond Average" class='awrclb'>284.30</td><td align="right" headers="perSecond StdDev" class='awrc'>39.91</td><td align="right" headers="perSecond Min" class='awrc'>256.08</td><td align="right" headers="perSecond Max" class='awrcrb'>312.52</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>3,283,575</td><td align="right" class='awrnc'>3,583.77</td><td align="right" class='awrnc'>65.94</td><td align="right" headers="perSecond Average" class='awrnclb'>1,791.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>440.48</td><td align="right" headers="perSecond Min" class='awrnc'>1,480.42</td><td align="right" headers="perSecond Max" class='awrncrb'>2,103.35</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>5,776,705</td><td align="right" class='awrc'>6,304.93</td><td align="right" class='awrc'>116.00</td><td align="right" headers="perSecond Average" class='awrclb'>3,152.46</td><td align="right" headers="perSecond StdDev" class='awrc'>568.52</td><td align="right" headers="perSecond Min" class='awrc'>2,750.46</td><td align="right" headers="perSecond Max" class='awrcrb'>3,554.46</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>9,621</td><td align="right" class='awrnc'>10.50</td><td align="right" class='awrnc'>0.19</td><td align="right" headers="perSecond Average" class='awrnclb'>5.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.10</td><td align="right" headers="perSecond Min" class='awrnc'>5.18</td><td align="right" headers="perSecond Max" class='awrncrb'>5.32</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>507,474</td><td align="right" class='awrc'>553.90</td><td align="right" class='awrc'>10.19</td><td align="right" headers="perSecond Average" class='awrclb'>276.95</td><td align="right" headers="perSecond StdDev" class='awrc'>4.63</td><td align="right" headers="perSecond Min" class='awrc'>273.68</td><td align="right" headers="perSecond Max" class='awrcrb'>280.22</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>506,126</td><td align="right" class='awrnc'>552.43</td><td align="right" class='awrnc'>10.16</td><td align="right" headers="perSecond Average" class='awrnclb'>276.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.62</td><td align="right" headers="perSecond Min" class='awrnc'>272.94</td><td align="right" headers="perSecond Max" class='awrncrb'>279.48</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>832</td><td align="right" class='awrnc'>0.91</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.42</td><td align="right" headers="perSecond Max" class='awrncrb'>0.49</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>339,960</td><td align="right" class='awrnc'>371.05</td><td align="right" class='awrnc'>6.83</td><td align="right" headers="perSecond Average" class='awrnclb'>185.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>30.14</td><td align="right" headers="perSecond Min" class='awrnc'>164.22</td><td align="right" headers="perSecond Max" class='awrncrb'>206.83</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>1,304,747,057</td><td align="right" class='awrc'>1,424,166.15</td><td align="right" class='awrc'>26,199.74</td><td align="right" headers="perSecond Average" class='awrclb'>712,083.08</td><td align="right" headers="perSecond StdDev" class='awrc'>100,512.32</td><td align="right" headers="perSecond Min" class='awrc'>641,010.13</td><td align="right" headers="perSecond Max" class='awrcrb'>783,156.02</td></tr>
<tr><td scope="row" class='awrnc'>file io wait time</td><td align="right" class='awrnc'>11,970,305,798,005</td><td align="right" class='awrnc'>13,066,396,445.23</td><td align="right" class='awrnc'>240,367,586.31</td><td align="right" headers="perSecond Average" class='awrnclb'>6,533,198,222.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,912,054,703.97</td><td align="right" headers="perSecond Min" class='awrnc'>5,181,171,375.44</td><td align="right" headers="perSecond Max" class='awrncrb'>7,885,225,069.79</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>44,625,691</td><td align="right" class='awrc'>48,706.85</td><td align="right" class='awrc'>896.10</td><td align="right" headers="perSecond Average" class='awrclb'>24,353.43</td><td align="right" headers="perSecond StdDev" class='awrc'>3,192.76</td><td align="right" headers="perSecond Min" class='awrc'>22,095.81</td><td align="right" headers="perSecond Max" class='awrcrb'>26,611.05</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>42,305,694</td><td align="right" class='awrnc'>46,174.71</td><td align="right" class='awrnc'>849.51</td><td align="right" headers="perSecond Average" class='awrnclb'>23,087.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,985.49</td><td align="right" headers="perSecond Min" class='awrnc'>20,976.29</td><td align="right" headers="perSecond Max" class='awrncrb'>25,198.41</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>41,585</td><td align="right" class='awrc'>45.39</td><td align="right" class='awrc'>0.84</td><td align="right" headers="perSecond Average" class='awrclb'>22.70</td><td align="right" headers="perSecond StdDev" class='awrc'>8.60</td><td align="right" headers="perSecond Min" class='awrc'>16.62</td><td align="right" headers="perSecond Max" class='awrcrb'>28.78</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>9,256</td><td align="right" class='awrnc'>10.10</td><td align="right" class='awrnc'>0.19</td><td align="right" headers="perSecond Average" class='awrnclb'>5.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.33</td><td align="right" headers="perSecond Min" class='awrnc'>1.28</td><td align="right" headers="perSecond Max" class='awrncrb'>8.82</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout applied</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>702,770</td><td align="right" class='awrc'>767.07</td><td align="right" class='awrc'>14.11</td><td align="right" headers="perSecond Average" class='awrclb'>383.54</td><td align="right" headers="perSecond StdDev" class='awrc'>13.50</td><td align="right" headers="perSecond Min" class='awrc'>373.99</td><td align="right" headers="perSecond Max" class='awrcrb'>393.08</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>499</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.17</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>0.39</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>2,796</td><td align="right" class='awrc'>3.05</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>1.53</td><td align="right" headers="perSecond StdDev" class='awrc'>0.42</td><td align="right" headers="perSecond Min" class='awrc'>1.23</td><td align="right" headers="perSecond Max" class='awrcrb'>1.82</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>23,213</td><td align="right" class='awrc'>25.34</td><td align="right" class='awrc'>0.47</td><td align="right" headers="perSecond Average" class='awrclb'>12.67</td><td align="right" headers="perSecond StdDev" class='awrc'>16.06</td><td align="right" headers="perSecond Min" class='awrc'>1.31</td><td align="right" headers="perSecond Max" class='awrcrb'>24.03</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>158,021</td><td align="right" class='awrnc'>172.49</td><td align="right" class='awrnc'>3.17</td><td align="right" headers="perSecond Average" class='awrnclb'>86.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>18.14</td><td align="right" headers="perSecond Min" class='awrnc'>73.42</td><td align="right" headers="perSecond Max" class='awrncrb'>99.07</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>25,902</td><td align="right" class='awrc'>28.27</td><td align="right" class='awrc'>0.52</td><td align="right" headers="perSecond Average" class='awrclb'>14.14</td><td align="right" headers="perSecond StdDev" class='awrc'>5.49</td><td align="right" headers="perSecond Min" class='awrc'>10.26</td><td align="right" headers="perSecond Max" class='awrcrb'>18.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>906</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.53</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.87</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>25,709</td><td align="right" class='awrc'>28.06</td><td align="right" class='awrc'>0.52</td><td align="right" headers="perSecond Average" class='awrclb'>14.03</td><td align="right" headers="perSecond StdDev" class='awrc'>5.27</td><td align="right" headers="perSecond Min" class='awrc'>10.30</td><td align="right" headers="perSecond Max" class='awrcrb'>17.76</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>31,202</td><td align="right" class='awrnc'>34.06</td><td align="right" class='awrnc'>0.63</td><td align="right" headers="perSecond Average" class='awrnclb'>17.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.90</td><td align="right" headers="perSecond Min" class='awrnc'>10.74</td><td align="right" headers="perSecond Max" class='awrncrb'>23.32</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grant time</td><td align="right" class='awrc'>96,755,059</td><td align="right" class='awrc'>105,600.69</td><td align="right" class='awrc'>1,942.87</td><td align="right" headers="perSecond Average" class='awrclb'>52,800.34</td><td align="right" headers="perSecond StdDev" class='awrc'>12,866.27</td><td align="right" headers="perSecond Min" class='awrc'>43,702.52</td><td align="right" headers="perSecond Max" class='awrcrb'>61,898.17</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grants received</td><td align="right" class='awrnc'>7,956,746</td><td align="right" class='awrnc'>8,684.08</td><td align="right" class='awrnc'>159.77</td><td align="right" headers="perSecond Average" class='awrnclb'>4,342.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,256.14</td><td align="right" headers="perSecond Min" class='awrnc'>3,453.81</td><td align="right" headers="perSecond Max" class='awrncrb'>5,230.26</td></tr>
<tr><td scope="row" class='awrc'>gc current block flush time</td><td align="right" class='awrc'>1,322</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.72</td><td align="right" headers="perSecond StdDev" class='awrc'>0.38</td><td align="right" headers="perSecond Min" class='awrc'>0.45</td><td align="right" headers="perSecond Max" class='awrcrb'>0.99</td></tr>
<tr><td scope="row" class='awrnc'>gc current block pin time</td><td align="right" class='awrnc'>958</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.48</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.86</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>41,664</td><td align="right" class='awrc'>45.48</td><td align="right" class='awrc'>0.84</td><td align="right" headers="perSecond Average" class='awrclb'>22.74</td><td align="right" headers="perSecond StdDev" class='awrc'>9.51</td><td align="right" headers="perSecond Min" class='awrc'>16.02</td><td align="right" headers="perSecond Max" class='awrcrb'>29.46</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks flushed</td><td align="right" class='awrnc'>87</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks pinned</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>16,798</td><td align="right" class='awrnc'>18.33</td><td align="right" class='awrnc'>0.34</td><td align="right" headers="perSecond Average" class='awrnclb'>9.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.54</td><td align="right" headers="perSecond Min" class='awrnc'>7.37</td><td align="right" headers="perSecond Max" class='awrncrb'>10.96</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks served</td><td align="right" class='awrc'>18,154</td><td align="right" class='awrc'>19.82</td><td align="right" class='awrc'>0.36</td><td align="right" headers="perSecond Average" class='awrclb'>9.91</td><td align="right" headers="perSecond StdDev" class='awrc'>3.83</td><td align="right" headers="perSecond Min" class='awrc'>7.20</td><td align="right" headers="perSecond Max" class='awrcrb'>12.62</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read cr</td><td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read current</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>161,410</td><td align="right" class='awrnc'>176.20</td><td align="right" class='awrnc'>3.24</td><td align="right" headers="perSecond Average" class='awrnclb'>88.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>40.02</td><td align="right" headers="perSecond Min" class='awrnc'>59.80</td><td align="right" headers="perSecond Max" class='awrncrb'>116.40</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>233,437</td><td align="right" class='awrc'>254.82</td><td align="right" class='awrc'>4.69</td><td align="right" headers="perSecond Average" class='awrclb'>127.41</td><td align="right" headers="perSecond StdDev" class='awrc'>61.86</td><td align="right" headers="perSecond Min" class='awrc'>83.67</td><td align="right" headers="perSecond Max" class='awrcrb'>171.15</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>29,574,983</td><td align="right" class='awrnc'>32,279.41</td><td align="right" class='awrnc'>593.88</td><td align="right" headers="perSecond Average" class='awrnclb'>16,139.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,720.21</td><td align="right" headers="perSecond Min" class='awrnc'>14,216.23</td><td align="right" headers="perSecond Max" class='awrncrb'>18,063.18</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi bg</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi fg</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.15</td></tr>
<tr><td scope="row" class='awrc'>gc no change made</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc read time waited</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc read wait timeouts</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read waits</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>10,490,099</td><td align="right" class='awrc'>11,449.17</td><td align="right" class='awrc'>210.64</td><td align="right" headers="perSecond Average" class='awrclb'>5,724.59</td><td align="right" headers="perSecond StdDev" class='awrc'>1,315.37</td><td align="right" headers="perSecond Min" class='awrc'>4,794.48</td><td align="right" headers="perSecond Max" class='awrcrb'>6,654.70</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>57,304</td><td align="right" class='awrnc'>62.54</td><td align="right" class='awrnc'>1.15</td><td align="right" headers="perSecond Average" class='awrnclb'>31.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>11.20</td><td align="right" headers="perSecond Min" class='awrnc'>23.35</td><td align="right" headers="perSecond Max" class='awrncrb'>39.19</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>58,599</td><td align="right" class='awrc'>63.97</td><td align="right" class='awrc'>1.18</td><td align="right" headers="perSecond Average" class='awrclb'>31.98</td><td align="right" headers="perSecond StdDev" class='awrc'>16.56</td><td align="right" headers="perSecond Min" class='awrc'>20.27</td><td align="right" headers="perSecond Max" class='awrcrb'>43.70</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock failures</td><td align="right" class='awrnc'>33,487</td><td align="right" class='awrnc'>36.54</td><td align="right" class='awrnc'>0.67</td><td align="right" headers="perSecond Average" class='awrnclb'>18.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>17.93</td><td align="right" headers="perSecond Min" class='awrnc'>5.59</td><td align="right" headers="perSecond Max" class='awrncrb'>30.95</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock grants</td><td align="right" class='awrc'>25,644,123</td><td align="right" class='awrc'>27,988.87</td><td align="right" class='awrc'>514.94</td><td align="right" headers="perSecond Average" class='awrclb'>13,994.43</td><td align="right" headers="perSecond StdDev" class='awrc'>2,833.49</td><td align="right" headers="perSecond Min" class='awrc'>11,990.85</td><td align="right" headers="perSecond Max" class='awrcrb'>15,998.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs anti-locks created</td><td align="right" class='awrnc'>703,081</td><td align="right" class='awrnc'>767.41</td><td align="right" class='awrnc'>14.12</td><td align="right" headers="perSecond Average" class='awrnclb'>383.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>13.28</td><td align="right" headers="perSecond Min" class='awrnc'>374.32</td><td align="right" headers="perSecond Max" class='awrncrb'>393.10</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>39,621,948</td><td align="right" class='awrc'>43,244.93</td><td align="right" class='awrc'>795.62</td><td align="right" headers="perSecond Average" class='awrclb'>21,622.46</td><td align="right" headers="perSecond StdDev" class='awrc'>3,999.41</td><td align="right" headers="perSecond Min" class='awrc'>18,794.45</td><td align="right" headers="perSecond Max" class='awrcrb'>24,450.48</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>34,933,082</td><td align="right" class='awrnc'>38,128.42</td><td align="right" class='awrnc'>701.47</td><td align="right" headers="perSecond Average" class='awrnclb'>19,064.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,304.27</td><td align="right" headers="perSecond Min" class='awrnc'>18,141.95</td><td align="right" headers="perSecond Max" class='awrncrb'>19,986.47</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>672,165</td><td align="right" class='awrc'>733.67</td><td align="right" class='awrc'>13.50</td><td align="right" headers="perSecond Average" class='awrclb'>366.84</td><td align="right" headers="perSecond StdDev" class='awrc'>28.64</td><td align="right" headers="perSecond Min" class='awrc'>346.59</td><td align="right" headers="perSecond Max" class='awrcrb'>387.09</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>3,546,471</td><td align="right" class='awrnc'>3,871.03</td><td align="right" class='awrnc'>71.21</td><td align="right" headers="perSecond Average" class='awrnclb'>1,935.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>187.49</td><td align="right" headers="perSecond Min" class='awrnc'>1,802.94</td><td align="right" headers="perSecond Max" class='awrncrb'>2,068.08</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>16,582</td><td align="right" class='awrnc'>18.10</td><td align="right" class='awrnc'>0.33</td><td align="right" headers="perSecond Average" class='awrnclb'>9.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.21</td><td align="right" headers="perSecond Min" class='awrnc'>6.78</td><td align="right" headers="perSecond Max" class='awrncrb'>11.32</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>27,827</td><td align="right" class='awrc'>30.37</td><td align="right" class='awrc'>0.56</td><td align="right" headers="perSecond Average" class='awrclb'>15.19</td><td align="right" headers="perSecond StdDev" class='awrc'>4.97</td><td align="right" headers="perSecond Min" class='awrc'>11.67</td><td align="right" headers="perSecond Max" class='awrcrb'>18.70</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets sync</td><td align="right" class='awrnc'>172,853</td><td align="right" class='awrnc'>188.67</td><td align="right" class='awrnc'>3.47</td><td align="right" headers="perSecond Average" class='awrnclb'>94.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.20</td><td align="right" headers="perSecond Min" class='awrnc'>90.65</td><td align="right" headers="perSecond Max" class='awrncrb'>98.01</td></tr>
<tr><td scope="row" class='awrc'>global enqueue releases</td><td align="right" class='awrc'>180,410</td><td align="right" class='awrc'>196.92</td><td align="right" class='awrc'>3.62</td><td align="right" headers="perSecond Average" class='awrclb'>98.46</td><td align="right" headers="perSecond StdDev" class='awrc'>5.30</td><td align="right" headers="perSecond Min" class='awrc'>94.71</td><td align="right" headers="perSecond Max" class='awrcrb'>102.20</td></tr>
<tr><td scope="row" class='awrnc'>heap block compress</td><td align="right" class='awrnc'>117,858</td><td align="right" class='awrnc'>128.63</td><td align="right" class='awrnc'>2.37</td><td align="right" headers="perSecond Average" class='awrnclb'>64.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>19.45</td><td align="right" headers="perSecond Min" class='awrnc'>50.56</td><td align="right" headers="perSecond Max" class='awrncrb'>78.07</td></tr>
<tr><td scope="row" class='awrc'>hot buffers moved to head of LRU</td><td align="right" class='awrc'>1,030,419</td><td align="right" class='awrc'>1,124.62</td><td align="right" class='awrc'>20.69</td><td align="right" headers="perSecond Average" class='awrclb'>562.31</td><td align="right" headers="perSecond StdDev" class='awrc'>140.06</td><td align="right" headers="perSecond Min" class='awrc'>463.27</td><td align="right" headers="perSecond Max" class='awrcrb'>661.35</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CR) block cleanout applications</td><td align="right" class='awrnc'>49,577</td><td align="right" class='awrnc'>54.11</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>27.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.14</td><td align="right" headers="perSecond Min" class='awrnc'>24.13</td><td align="right" headers="perSecond Max" class='awrncrb'>29.98</td></tr>
<tr><td scope="row" class='awrc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrc'>1,098</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.60</td><td align="right" headers="perSecond StdDev" class='awrc'>0.28</td><td align="right" headers="perSecond Min" class='awrc'>0.40</td><td align="right" headers="perSecond Max" class='awrcrb'>0.79</td></tr>
<tr><td scope="row" class='awrnc'>in call idle wait time</td><td align="right" class='awrnc'>20,190,769</td><td align="right" class='awrnc'>22,038.10</td><td align="right" class='awrnc'>405.44</td><td align="right" headers="perSecond Average" class='awrnclb'>11,019.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>214.99</td><td align="right" headers="perSecond Min" class='awrnc'>10,867.03</td><td align="right" headers="perSecond Max" class='awrncrb'>11,171.07</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>2,633,833</td><td align="right" class='awrc'>2,875.80</td><td align="right" class='awrc'>52.89</td><td align="right" headers="perSecond Average" class='awrclb'>1,437.90</td><td align="right" headers="perSecond StdDev" class='awrc'>2,027.63</td><td align="right" headers="perSecond Min" class='awrc'>4.15</td><td align="right" headers="perSecond Max" class='awrcrb'>2,871.65</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>2,982,871</td><td align="right" class='awrnc'>3,256.74</td><td align="right" class='awrnc'>59.90</td><td align="right" headers="perSecond Average" class='awrnclb'>1,628.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,968.36</td><td align="right" headers="perSecond Min" class='awrnc'>236.53</td><td align="right" headers="perSecond Max" class='awrncrb'>3,020.21</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>373</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.17</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>1,594</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.87</td><td align="right" headers="perSecond StdDev" class='awrc'>0.36</td><td align="right" headers="perSecond Min" class='awrc'>0.61</td><td align="right" headers="perSecond Max" class='awrcrb'>1.13</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>13,520</td><td align="right" class='awrnc'>14.76</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>7.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>7.28</td><td align="right" headers="perSecond Max" class='awrncrb'>7.48</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>13,520</td><td align="right" class='awrc'>14.76</td><td align="right" class='awrc'>0.27</td><td align="right" headers="perSecond Average" class='awrclb'>7.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>7.28</td><td align="right" headers="perSecond Max" class='awrcrb'>7.48</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>378,681,778,176</td><td align="right" class='awrnc'>413,317,320.40</td><td align="right" class='awrnc'>7,604,051.77</td><td align="right" headers="perSecond Average" class='awrnclb'>206,658,660.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>19,258,872.23</td><td align="right" headers="perSecond Min" class='awrnc'>193,040,581.05</td><td align="right" headers="perSecond Max" class='awrncrb'>220,276,739.35</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>2,222</td><td align="right" class='awrnc'>2.43</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>1.18</td><td align="right" headers="perSecond Max" class='awrncrb'>1.24</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>285,215</td><td align="right" class='awrc'>311.29</td><td align="right" class='awrc'>5.73</td><td align="right" headers="perSecond Average" class='awrclb'>155.64</td><td align="right" headers="perSecond StdDev" class='awrc'>41.70</td><td align="right" headers="perSecond Min" class='awrc'>126.16</td><td align="right" headers="perSecond Max" class='awrcrb'>185.13</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>285,207</td><td align="right" class='awrnc'>311.28</td><td align="right" class='awrnc'>5.73</td><td align="right" headers="perSecond Average" class='awrnclb'>155.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>41.70</td><td align="right" headers="perSecond Min" class='awrnc'>126.15</td><td align="right" headers="perSecond Max" class='awrncrb'>185.13</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>35,634,734</td><td align="right" class='awrc'>38,893.03</td><td align="right" class='awrc'>715.56</td><td align="right" headers="perSecond Average" class='awrclb'>19,446.51</td><td align="right" headers="perSecond StdDev" class='awrc'>3,797.96</td><td align="right" headers="perSecond Min" class='awrc'>16,760.95</td><td align="right" headers="perSecond Max" class='awrcrb'>22,132.08</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>18,593,339</td><td align="right" class='awrnc'>20,295.14</td><td align="right" class='awrnc'>373.36</td><td align="right" headers="perSecond Average" class='awrnclb'>10,147.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,466.29</td><td align="right" headers="perSecond Min" class='awrnc'>9,110.75</td><td align="right" headers="perSecond Max" class='awrncrb'>11,184.39</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait time</td><td align="right" class='awrc'>28,856,838</td><td align="right" class='awrc'>31,497.18</td><td align="right" class='awrc'>579.45</td><td align="right" headers="perSecond Average" class='awrclb'>15,748.59</td><td align="right" headers="perSecond StdDev" class='awrc'>544.39</td><td align="right" headers="perSecond Min" class='awrc'>15,363.65</td><td align="right" headers="perSecond Max" class='awrcrb'>16,133.53</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>391,183</td><td align="right" class='awrnc'>426.95</td><td align="right" class='awrnc'>7.86</td><td align="right" headers="perSecond Average" class='awrnclb'>213.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>34.53</td><td align="right" headers="perSecond Min" class='awrnc'>189.06</td><td align="right" headers="perSecond Max" class='awrncrb'>237.89</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>601</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.29</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>9,528</td><td align="right" class='awrc'>10.40</td><td align="right" class='awrc'>0.19</td><td align="right" headers="perSecond Average" class='awrclb'>5.20</td><td align="right" headers="perSecond StdDev" class='awrc'>2.33</td><td align="right" headers="perSecond Min" class='awrc'>3.56</td><td align="right" headers="perSecond Max" class='awrcrb'>6.84</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>130</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>472</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.22</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>39,449,745</td><td align="right" class='awrnc'>43,057.00</td><td align="right" class='awrnc'>792.16</td><td align="right" headers="perSecond Average" class='awrnclb'>21,528.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,929.47</td><td align="right" headers="perSecond Min" class='awrnc'>18,749.95</td><td align="right" headers="perSecond Max" class='awrncrb'>24,307.05</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>323,743,293,440</td><td align="right" class='awrc'>353,345,998.89</td><td align="right" class='awrc'>6,500,869.35</td><td align="right" headers="perSecond Average" class='awrclb'>176,672,999.45</td><td align="right" headers="perSecond StdDev" class='awrc'>32,606,848.23</td><td align="right" headers="perSecond Min" class='awrc'>153,616,475.95</td><td align="right" headers="perSecond Max" class='awrcrb'>199,729,522.94</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>39,464,587</td><td align="right" class='awrnc'>43,073.20</td><td align="right" class='awrnc'>792.46</td><td align="right" headers="perSecond Average" class='awrnclb'>21,536.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,929.07</td><td align="right" headers="perSecond Min" class='awrnc'>18,758.33</td><td align="right" headers="perSecond Max" class='awrncrb'>24,314.87</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>328,872,869,888</td><td align="right" class='awrc'>358,944,993.47</td><td align="right" class='awrc'>6,603,872.89</td><td align="right" headers="perSecond Average" class='awrclb'>179,472,496.74</td><td align="right" headers="perSecond StdDev" class='awrc'>32,362,886.30</td><td align="right" headers="perSecond Min" class='awrc'>156,588,480.37</td><td align="right" headers="perSecond Max" class='awrcrb'>202,356,513.10</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>5,857</td><td align="right" class='awrnc'>6.39</td><td align="right" class='awrnc'>0.12</td><td align="right" headers="perSecond Average" class='awrnclb'>3.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.58</td><td align="right" headers="perSecond Min" class='awrnc'>2.79</td><td align="right" headers="perSecond Max" class='awrncrb'>3.60</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>39,519,448</td><td align="right" class='awrc'>43,133.06</td><td align="right" class='awrc'>793.56</td><td align="right" headers="perSecond Average" class='awrclb'>21,566.53</td><td align="right" headers="perSecond StdDev" class='awrc'>3,980.33</td><td align="right" headers="perSecond Min" class='awrc'>18,752.01</td><td align="right" headers="perSecond Max" class='awrcrb'>24,381.05</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>39,519,446</td><td align="right" class='awrnc'>43,133.06</td><td align="right" class='awrnc'>793.56</td><td align="right" headers="perSecond Average" class='awrnclb'>21,566.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,980.33</td><td align="right" headers="perSecond Min" class='awrnc'>18,752.01</td><td align="right" headers="perSecond Max" class='awrncrb'>24,381.05</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>31,681,187</td><td align="right" class='awrc'>34,577.87</td><td align="right" class='awrc'>636.17</td><td align="right" headers="perSecond Average" class='awrclb'>17,288.93</td><td align="right" headers="perSecond StdDev" class='awrc'>3,618.03</td><td align="right" headers="perSecond Min" class='awrc'>14,730.60</td><td align="right" headers="perSecond Max" class='awrcrb'>19,847.26</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>6,507,481</td><td align="right" class='awrnc'>7,102.59</td><td align="right" class='awrnc'>130.67</td><td align="right" headers="perSecond Average" class='awrnclb'>3,551.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>512.13</td><td align="right" headers="perSecond Min" class='awrnc'>3,189.16</td><td align="right" headers="perSecond Max" class='awrncrb'>3,913.43</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>56,465,866,752</td><td align="right" class='awrc'>61,629,632.73</td><td align="right" class='awrc'>1,133,852.75</td><td align="right" headers="perSecond Average" class='awrclb'>30,814,816.37</td><td align="right" headers="perSecond StdDev" class='awrc'>4,485,341.15</td><td align="right" headers="perSecond Min" class='awrc'>27,643,201.22</td><td align="right" headers="perSecond Max" class='awrcrb'>33,986,431.51</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>6,599,526</td><td align="right" class='awrnc'>7,203.05</td><td align="right" class='awrnc'>132.52</td><td align="right" headers="perSecond Average" class='awrnclb'>3,601.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>514.86</td><td align="right" headers="perSecond Min" class='awrnc'>3,237.47</td><td align="right" headers="perSecond Max" class='awrncrb'>3,965.59</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>62,208,132,608</td><td align="right" class='awrc'>67,897,024.78</td><td align="right" class='awrc'>1,249,159.29</td><td align="right" headers="perSecond Average" class='awrclb'>33,948,512.39</td><td align="right" headers="perSecond StdDev" class='awrc'>4,941,883.34</td><td align="right" headers="perSecond Min" class='awrc'>30,454,073.17</td><td align="right" headers="perSecond Max" class='awrcrb'>37,442,951.61</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>18,203</td><td align="right" class='awrnc'>19.87</td><td align="right" class='awrnc'>0.37</td><td align="right" headers="perSecond Average" class='awrnclb'>9.93</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.12</td><td align="right" headers="perSecond Min" class='awrnc'>9.14</td><td align="right" headers="perSecond Max" class='awrncrb'>10.73</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>6,892,806</td><td align="right" class='awrc'>7,523.15</td><td align="right" class='awrc'>138.41</td><td align="right" headers="perSecond Average" class='awrclb'>3,761.57</td><td align="right" headers="perSecond StdDev" class='awrc'>547.53</td><td align="right" headers="perSecond Min" class='awrc'>3,374.41</td><td align="right" headers="perSecond Max" class='awrcrb'>4,148.73</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>2,279</td><td align="right" class='awrnc'>2.49</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>1.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>1.22</td><td align="right" headers="perSecond Max" class='awrncrb'>1.27</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>279</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>380</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.21</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>6,890,527</td><td align="right" class='awrc'>7,520.66</td><td align="right" class='awrc'>138.36</td><td align="right" headers="perSecond Average" class='awrclb'>3,760.33</td><td align="right" headers="perSecond StdDev" class='awrc'>547.56</td><td align="right" headers="perSecond Min" class='awrc'>3,373.14</td><td align="right" headers="perSecond Max" class='awrcrb'>4,147.52</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>6,775,738</td><td align="right" class='awrnc'>7,395.39</td><td align="right" class='awrnc'>136.06</td><td align="right" headers="perSecond Average" class='awrnclb'>3,697.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>514.44</td><td align="right" headers="perSecond Min" class='awrnc'>3,333.93</td><td align="right" headers="perSecond Max" class='awrncrb'>4,061.46</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>44,385</td><td align="right" class='awrc'>48.44</td><td align="right" class='awrc'>0.89</td><td align="right" headers="perSecond Average" class='awrclb'>24.22</td><td align="right" headers="perSecond StdDev" class='awrc'>3.86</td><td align="right" headers="perSecond Min" class='awrc'>21.49</td><td align="right" headers="perSecond Max" class='awrcrb'>26.95</td></tr>
<tr><td scope="row" class='awrnc'>prefetched blocks aged out before use</td><td align="right" class='awrnc'>653</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>0.23</td><td align="right" headers="perSecond Max" class='awrncrb'>0.48</td></tr>
<tr><td scope="row" class='awrc'>process last non-idle time</td><td align="right" class='awrc'>918</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.00</td><td align="right" headers="perSecond Max" class='awrcrb'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>recursive calls</td><td align="right" class='awrnc'>521,458</td><td align="right" class='awrnc'>569.16</td><td align="right" class='awrnc'>10.47</td><td align="right" headers="perSecond Average" class='awrnclb'>284.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>13.13</td><td align="right" headers="perSecond Min" class='awrnc'>275.29</td><td align="right" headers="perSecond Max" class='awrncrb'>293.87</td></tr>
<tr><td scope="row" class='awrc'>recursive cpu usage</td><td align="right" class='awrc'>777,178</td><td align="right" class='awrc'>848.23</td><td align="right" class='awrc'>15.61</td><td align="right" headers="perSecond Average" class='awrclb'>424.12</td><td align="right" headers="perSecond StdDev" class='awrc'>98.44</td><td align="right" headers="perSecond Min" class='awrc'>354.51</td><td align="right" headers="perSecond Max" class='awrcrb'>493.73</td></tr>
<tr><td scope="row" class='awrnc'>redo KB read</td><td align="right" class='awrnc'>2,994,176</td><td align="right" class='awrnc'>3,268.23</td><td align="right" class='awrnc'>60.12</td><td align="right" headers="perSecond Average" class='awrnclb'>1,634.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>237.90</td><td align="right" headers="perSecond Min" class='awrnc'>1,465.89</td><td align="right" headers="perSecond Max" class='awrncrb'>1,802.34</td></tr>
<tr><td scope="row" class='awrc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrc'>4,225,932</td><td align="right" class='awrc'>4,612.38</td><td align="right" class='awrc'>84.86</td><td align="right" headers="perSecond Average" class='awrclb'>2,306.19</td><td align="right" headers="perSecond StdDev" class='awrc'>360.91</td><td align="right" headers="perSecond Min" class='awrc'>2,050.98</td><td align="right" headers="perSecond Max" class='awrcrb'>2,561.39</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written</td><td align="right" class='awrnc'>10,664,688</td><td align="right" class='awrnc'>11,639.94</td><td align="right" class='awrnc'>214.15</td><td align="right" headers="perSecond Average" class='awrnclb'>5,819.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>905.46</td><td align="right" headers="perSecond Min" class='awrnc'>5,179.72</td><td align="right" headers="perSecond Max" class='awrncrb'>6,460.22</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 0)</td><td align="right" class='awrc'>7,064,412</td><td align="right" class='awrc'>7,710.40</td><td align="right" class='awrc'>141.86</td><td align="right" headers="perSecond Average" class='awrclb'>3,855.20</td><td align="right" headers="perSecond StdDev" class='awrc'>665.65</td><td align="right" headers="perSecond Min" class='awrc'>3,384.51</td><td align="right" headers="perSecond Max" class='awrcrb'>4,325.88</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 1)</td><td align="right" class='awrnc'>3,600,276</td><td align="right" class='awrnc'>3,929.54</td><td align="right" class='awrnc'>72.29</td><td align="right" headers="perSecond Average" class='awrnclb'>1,964.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>239.81</td><td align="right" headers="perSecond Min" class='awrnc'>1,795.20</td><td align="right" headers="perSecond Max" class='awrncrb'>2,134.34</td></tr>
<tr><td scope="row" class='awrc'>redo buffer allocation retries</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>6,634,164</td><td align="right" class='awrnc'>7,240.83</td><td align="right" class='awrnc'>133.22</td><td align="right" headers="perSecond Average" class='awrnclb'>3,620.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>567.13</td><td align="right" headers="perSecond Min" class='awrnc'>3,219.40</td><td align="right" headers="perSecond Max" class='awrncrb'>4,021.44</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>5,270,778,824</td><td align="right" class='awrc'>5,752,773.42</td><td align="right" class='awrc'>105,838.93</td><td align="right" headers="perSecond Average" class='awrclb'>2,876,386.71</td><td align="right" headers="perSecond StdDev" class='awrc'>448,294.88</td><td align="right" headers="perSecond Min" class='awrc'>2,559,394.36</td><td align="right" headers="perSecond Max" class='awrcrb'>3,193,379.06</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>7,560</td><td align="right" class='awrnc'>8.25</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>4.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>3.99</td><td align="right" headers="perSecond Max" class='awrncrb'>4.26</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>46,403</td><td align="right" class='awrc'>50.65</td><td align="right" class='awrc'>0.93</td><td align="right" headers="perSecond Average" class='awrclb'>25.32</td><td align="right" headers="perSecond StdDev" class='awrc'>4.30</td><td align="right" headers="perSecond Min" class='awrc'>22.29</td><td align="right" headers="perSecond Max" class='awrcrb'>28.36</td></tr>
<tr><td scope="row" class='awrnc'>redo synch long waits</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time</td><td align="right" class='awrc'>2,133</td><td align="right" class='awrc'>2.33</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>1.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.81</td><td align="right" headers="perSecond Min" class='awrc'>0.59</td><td align="right" headers="perSecond Max" class='awrcrb'>1.73</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time (usec)</td><td align="right" class='awrnc'>21,061,780</td><td align="right" class='awrnc'>22,984.77</td><td align="right" class='awrnc'>422.93</td><td align="right" headers="perSecond Average" class='awrnclb'>11,492.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>7,945.76</td><td align="right" headers="perSecond Min" class='awrnc'>5,873.88</td><td align="right" headers="perSecond Max" class='awrncrb'>17,110.88</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead (usec)</td><td align="right" class='awrc'>270,476</td><td align="right" class='awrc'>295.13</td><td align="right" class='awrc'>5.43</td><td align="right" headers="perSecond Average" class='awrclb'>147.56</td><td align="right" headers="perSecond StdDev" class='awrc'>190.44</td><td align="right" headers="perSecond Min" class='awrc'>12.90</td><td align="right" headers="perSecond Max" class='awrcrb'>282.22</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrnc'>334</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count ( 32ms)</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (128ms)</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>516</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.28</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>14,791,996</td><td align="right" class='awrc'>16,144.87</td><td align="right" class='awrc'>297.03</td><td align="right" headers="perSecond Average" class='awrclb'>8,072.43</td><td align="right" headers="perSecond StdDev" class='awrc'>869.15</td><td align="right" headers="perSecond Min" class='awrc'>7,457.85</td><td align="right" headers="perSecond Max" class='awrcrb'>8,687.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>60,480</td><td align="right" class='awrnc'>66.01</td><td align="right" class='awrnc'>1.21</td><td align="right" headers="perSecond Average" class='awrnclb'>33.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.60</td><td align="right" headers="perSecond Min" class='awrnc'>30.46</td><td align="right" headers="perSecond Max" class='awrncrb'>35.55</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>950,416</td><td align="right" class='awrnc'>1,037.43</td><td align="right" class='awrnc'>19.08</td><td align="right" headers="perSecond Average" class='awrnclb'>518.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>115.87</td><td align="right" headers="perSecond Min" class='awrnc'>436.78</td><td align="right" headers="perSecond Max" class='awrncrb'>600.65</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>1,473,059,773</td><td align="right" class='awrc'>1,607,824.31</td><td align="right" class='awrc'>29,579.51</td><td align="right" headers="perSecond Average" class='awrclb'>803,912.15</td><td align="right" headers="perSecond StdDev" class='awrc'>7,287.21</td><td align="right" headers="perSecond Min" class='awrc'>798,759.32</td><td align="right" headers="perSecond Max" class='awrcrb'>809,064.99</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>122,424,719</td><td align="right" class='awrnc'>133,624.53</td><td align="right" class='awrnc'>2,458.33</td><td align="right" headers="perSecond Average" class='awrnclb'>66,812.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,323.17</td><td align="right" headers="perSecond Min" class='awrnc'>65,876.64</td><td align="right" headers="perSecond Max" class='awrncrb'>67,747.89</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>347</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find fail</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>122,997,560</td><td align="right" class='awrc'>134,249.74</td><td align="right" class='awrc'>2,469.83</td><td align="right" headers="perSecond Average" class='awrclb'>67,124.87</td><td align="right" headers="perSecond StdDev" class='awrc'>1,408.90</td><td align="right" headers="perSecond Min" class='awrc'>66,128.62</td><td align="right" headers="perSecond Max" class='awrcrb'>68,121.11</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>888</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.06</td><td align="right" headers="perSecond Min" class='awrnc'>0.44</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>725</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.40</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.39</td><td align="right" headers="perSecond Max" class='awrcrb'>0.40</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>1,455</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.77</td><td align="right" headers="perSecond Max" class='awrncrb'>0.81</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>2,891</td><td align="right" class='awrc'>3.16</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>1.58</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>1.54</td><td align="right" headers="perSecond Max" class='awrcrb'>1.62</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>13,553</td><td align="right" class='awrnc'>14.79</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>7.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.59</td><td align="right" headers="perSecond Min" class='awrnc'>6.98</td><td align="right" headers="perSecond Max" class='awrncrb'>7.81</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>7,706</td><td align="right" class='awrc'>8.41</td><td align="right" class='awrc'>0.15</td><td align="right" headers="perSecond Average" class='awrclb'>4.21</td><td align="right" headers="perSecond StdDev" class='awrc'>0.56</td><td align="right" headers="perSecond Min" class='awrc'>3.81</td><td align="right" headers="perSecond Max" class='awrcrb'>4.60</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>3,050</td><td align="right" class='awrnc'>3.33</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>1.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.22</td><td align="right" headers="perSecond Min" class='awrnc'>1.51</td><td align="right" headers="perSecond Max" class='awrncrb'>1.82</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>634</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.31</td><td align="right" headers="perSecond Max" class='awrcrb'>0.39</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (inf)</td><td align="right" class='awrnc'>726</td><td align="right" class='awrnc'>0.79</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.31</td><td align="right" headers="perSecond Max" class='awrncrb'>0.48</td></tr>
<tr><td scope="row" class='awrc'>redo write time</td><td align="right" class='awrc'>147,468</td><td align="right" class='awrc'>160.96</td><td align="right" class='awrc'>2.96</td><td align="right" headers="perSecond Average" class='awrclb'>80.48</td><td align="right" headers="perSecond StdDev" class='awrc'>0.75</td><td align="right" headers="perSecond Min" class='awrc'>79.95</td><td align="right" headers="perSecond Max" class='awrcrb'>81.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write time (usec)</td><td align="right" class='awrnc'>1,474,696,012</td><td align="right" class='awrnc'>1,609,610.13</td><td align="right" class='awrnc'>29,612.37</td><td align="right" headers="perSecond Average" class='awrnclb'>804,805.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>7,519.84</td><td align="right" headers="perSecond Min" class='awrnc'>799,487.73</td><td align="right" headers="perSecond Max" class='awrncrb'>810,122.40</td></tr>
<tr><td scope="row" class='awrc'>redo write total time</td><td align="right" class='awrc'>1,606,593,265</td><td align="right" class='awrc'>1,753,575.31</td><td align="right" class='awrc'>32,260.91</td><td align="right" headers="perSecond Average" class='awrclb'>876,787.65</td><td align="right" headers="perSecond StdDev" class='awrc'>5,829.26</td><td align="right" headers="perSecond Min" class='awrc'>872,665.74</td><td align="right" headers="perSecond Max" class='awrcrb'>880,909.56</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay (usec)</td><td align="right" class='awrnc'>118,622,713</td><td align="right" class='awrnc'>129,475.11</td><td align="right" class='awrnc'>2,381.98</td><td align="right" headers="perSecond Average" class='awrnclb'>64,737.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>446.73</td><td align="right" headers="perSecond Min" class='awrnc'>64,421.67</td><td align="right" headers="perSecond Max" class='awrncrb'>65,053.44</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay count</td><td align="right" class='awrc'>31,624</td><td align="right" class='awrc'>34.52</td><td align="right" class='awrc'>0.64</td><td align="right" headers="perSecond Average" class='awrclb'>17.26</td><td align="right" headers="perSecond StdDev" class='awrc'>1.64</td><td align="right" headers="perSecond Min" class='awrc'>16.10</td><td align="right" headers="perSecond Max" class='awrcrb'>18.42</td></tr>
<tr><td scope="row" class='awrnc'>redo writes</td><td align="right" class='awrnc'>31,624</td><td align="right" class='awrnc'>34.52</td><td align="right" class='awrnc'>0.64</td><td align="right" headers="perSecond Average" class='awrnclb'>17.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.64</td><td align="right" headers="perSecond Min" class='awrnc'>16.10</td><td align="right" headers="perSecond Max" class='awrncrb'>18.42</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 0)</td><td align="right" class='awrc'>18,181</td><td align="right" class='awrc'>19.84</td><td align="right" class='awrc'>0.37</td><td align="right" headers="perSecond Average" class='awrclb'>9.92</td><td align="right" headers="perSecond StdDev" class='awrc'>0.93</td><td align="right" headers="perSecond Min" class='awrc'>9.27</td><td align="right" headers="perSecond Max" class='awrcrb'>10.58</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 1)</td><td align="right" class='awrnc'>13,443</td><td align="right" class='awrnc'>14.67</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>7.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.72</td><td align="right" headers="perSecond Min" class='awrnc'>6.83</td><td align="right" headers="perSecond Max" class='awrncrb'>7.84</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive all</td><td align="right" class='awrc'>31,624</td><td align="right" class='awrc'>34.52</td><td align="right" class='awrc'>0.64</td><td align="right" headers="perSecond Average" class='awrclb'>17.26</td><td align="right" headers="perSecond StdDev" class='awrc'>1.64</td><td align="right" headers="perSecond Min" class='awrc'>16.10</td><td align="right" headers="perSecond Max" class='awrcrb'>18.42</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive worker</td><td align="right" class='awrnc'>31,624</td><td align="right" class='awrnc'>34.52</td><td align="right" class='awrnc'>0.64</td><td align="right" headers="perSecond Average" class='awrnclb'>17.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.64</td><td align="right" headers="perSecond Min" class='awrnc'>16.10</td><td align="right" headers="perSecond Max" class='awrncrb'>18.42</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>1,492</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>0.56</td><td align="right" headers="perSecond Max" class='awrncrb'>1.07</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>2,627,895</td><td align="right" class='awrc'>2,869.32</td><td align="right" class='awrc'>52.77</td><td align="right" headers="perSecond Average" class='awrclb'>1,434.66</td><td align="right" headers="perSecond StdDev" class='awrc'>2,024.91</td><td align="right" headers="perSecond Min" class='awrc'>2.83</td><td align="right" headers="perSecond Max" class='awrcrb'>2,866.49</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>2,269,184</td><td align="right" class='awrnc'>2,476.76</td><td align="right" class='awrnc'>45.57</td><td align="right" headers="perSecond Average" class='awrnclb'>1,238.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>56.29</td><td align="right" headers="perSecond Min" class='awrnc'>1,198.58</td><td align="right" headers="perSecond Max" class='awrncrb'>1,278.18</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>1,909,024</td><td align="right" class='awrnc'>2,083.66</td><td align="right" class='awrnc'>38.33</td><td align="right" headers="perSecond Average" class='awrnclb'>1,041.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>40.53</td><td align="right" headers="perSecond Min" class='awrnc'>1,013.17</td><td align="right" headers="perSecond Max" class='awrncrb'>1,070.49</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>2,269,184</td><td align="right" class='awrc'>2,476.76</td><td align="right" class='awrc'>45.57</td><td align="right" headers="perSecond Average" class='awrclb'>1,238.38</td><td align="right" headers="perSecond StdDev" class='awrc'>56.29</td><td align="right" headers="perSecond Min" class='awrc'>1,198.58</td><td align="right" headers="perSecond Max" class='awrcrb'>1,278.18</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>segment chunks allocation from dispenser</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser allocations</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load empty</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load tasks</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>17,625</td><td align="right" class='awrnc'>19.24</td><td align="right" class='awrnc'>0.35</td><td align="right" headers="perSecond Average" class='awrnclb'>9.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.04</td><td align="right" headers="perSecond Min" class='awrnc'>8.17</td><td align="right" headers="perSecond Max" class='awrncrb'>11.06</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>968</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.06</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.06</td><td align="right" headers="perSecond Max" class='awrcrb'>1.06</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>386,548</td><td align="right" class='awrnc'>421.90</td><td align="right" class='awrnc'>7.76</td><td align="right" headers="perSecond Average" class='awrnclb'>210.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>34.59</td><td align="right" headers="perSecond Min" class='awrnc'>186.49</td><td align="right" headers="perSecond Max" class='awrncrb'>235.41</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>46,228,182</td><td align="right" class='awrc'>50,456.37</td><td align="right" class='awrc'>928.28</td><td align="right" headers="perSecond Average" class='awrclb'>25,228.19</td><td align="right" headers="perSecond StdDev" class='awrc'>2,350.83</td><td align="right" headers="perSecond Min" class='awrc'>23,565.90</td><td align="right" headers="perSecond Max" class='awrcrb'>26,890.47</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>21,285,034</td><td align="right" class='awrnc'>23,233.05</td><td align="right" class='awrnc'>427.41</td><td align="right" headers="perSecond Average" class='awrnclb'>11,616.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,367.28</td><td align="right" headers="perSecond Min" class='awrnc'>10,649.71</td><td align="right" headers="perSecond Max" class='awrncrb'>12,583.34</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>2,452</td><td align="right" class='awrc'>2.68</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>1.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.53</td><td align="right" headers="perSecond Min" class='awrc'>0.96</td><td align="right" headers="perSecond Max" class='awrcrb'>1.71</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>269,346</td><td align="right" class='awrnc'>293.99</td><td align="right" class='awrnc'>5.41</td><td align="right" headers="perSecond Average" class='awrnclb'>147.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.84</td><td align="right" headers="perSecond Min" class='awrnc'>143.58</td><td align="right" headers="perSecond Max" class='awrncrb'>150.41</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>331,761,813</td><td align="right" class='awrc'>362,146.50</td><td align="right" class='awrc'>6,661.88</td><td align="right" headers="perSecond Average" class='awrclb'>181,073.25</td><td align="right" headers="perSecond StdDev" class='awrc'>65,328.64</td><td align="right" headers="perSecond Min" class='awrc'>134,878.93</td><td align="right" headers="perSecond Max" class='awrcrb'>227,267.57</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>473</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.31</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>538</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.26</td><td align="right" headers="perSecond Max" class='awrcrb'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>99,910,728</td><td align="right" class='awrnc'>109,052.43</td><td align="right" class='awrnc'>2,006.24</td><td align="right" headers="perSecond Average" class='awrnclb'>54,526.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,049.51</td><td align="right" headers="perSecond Min" class='awrnc'>53,076.99</td><td align="right" headers="perSecond Max" class='awrncrb'>55,975.44</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>85,522</td><td align="right" class='awrnc'>93.32</td><td align="right" class='awrnc'>1.72</td><td align="right" headers="perSecond Average" class='awrnclb'>46.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>57.18</td><td align="right" headers="perSecond Min" class='awrnc'>6.23</td><td align="right" headers="perSecond Max" class='awrncrb'>87.09</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>1,998,646</td><td align="right" class='awrc'>2,180.98</td><td align="right" class='awrc'>40.13</td><td align="right" headers="perSecond Average" class='awrclb'>1,090.49</td><td align="right" headers="perSecond StdDev" class='awrc'>1,056.39</td><td align="right" headers="perSecond Min" class='awrc'>343.51</td><td align="right" headers="perSecond Max" class='awrcrb'>1,837.47</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>1,998,646</td><td align="right" class='awrnc'>2,180.98</td><td align="right" class='awrnc'>40.13</td><td align="right" headers="perSecond Average" class='awrnclb'>1,090.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,056.39</td><td align="right" headers="perSecond Min" class='awrnc'>343.51</td><td align="right" headers="perSecond Max" class='awrncrb'>1,837.47</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>1,411</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>0.65</td><td align="right" headers="perSecond Max" class='awrcrb'>0.89</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>1,144.91</td><td align="right" class='awrnc'>21.06</td><td align="right" headers="perSecond Average" class='awrnclb'>1,144.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1,144.91</td><td align="right" headers="perSecond Max" class='awrncrb'>1,144.91</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>20,803</td><td align="right" class='awrc'>22.71</td><td align="right" class='awrc'>0.42</td><td align="right" headers="perSecond Average" class='awrclb'>11.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>11.34</td><td align="right" headers="perSecond Max" class='awrcrb'>11.36</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>720</td><td align="right" class='awrnc'>0.79</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.38</td><td align="right" headers="perSecond Max" class='awrncrb'>0.40</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent read rollbacks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>5,096</td><td align="right" class='awrnc'>5.56</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>2.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.67</td><td align="right" headers="perSecond Min" class='awrnc'>2.31</td><td align="right" headers="perSecond Max" class='awrncrb'>3.25</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>2,166,060,504</td><td align="right" class='awrc'>2,364,140.15</td><td align="right" class='awrc'>43,495.19</td><td align="right" headers="perSecond Average" class='awrclb'>1,182,070.08</td><td align="right" headers="perSecond StdDev" class='awrc'>182,473.94</td><td align="right" headers="perSecond Min" class='awrc'>1,053,041.52</td><td align="right" headers="perSecond Max" class='awrcrb'>1,311,098.64</td></tr>
<tr><td scope="row" class='awrnc'>user I/O wait time</td><td align="right" class='awrnc'>3,082,550</td><td align="right" class='awrnc'>3,364.59</td><td align="right" class='awrnc'>61.90</td><td align="right" headers="perSecond Average" class='awrnclb'>1,682.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>39.47</td><td align="right" headers="perSecond Min" class='awrnc'>1,654.38</td><td align="right" headers="perSecond Max" class='awrncrb'>1,710.20</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>3,646</td><td align="right" class='awrc'>3.98</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>1.99</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>1.87</td><td align="right" headers="perSecond Max" class='awrcrb'>2.11</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>49,800</td><td align="right" class='awrnc'>54.35</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>27.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.10</td><td align="right" headers="perSecond Min" class='awrnc'>24.27</td><td align="right" headers="perSecond Max" class='awrncrb'>30.08</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>513</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.28</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>2,948</td><td align="right" class='awrc'>3.22</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>1.61</td><td align="right" headers="perSecond StdDev" class='awrc'>0.22</td><td align="right" headers="perSecond Min" class='awrc'>1.45</td><td align="right" headers="perSecond Max" class='awrcrb'>1.77</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in background</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>14,304</td><td align="right" class='awrc'>15.61</td><td align="right" class='awrc'>0.29</td><td align="right" headers="perSecond Average" class='awrclb'>7.81</td><td align="right" headers="perSecond StdDev" class='awrc'>2.40</td><td align="right" headers="perSecond Min" class='awrc'>6.11</td><td align="right" headers="perSecond Max" class='awrcrb'>9.50</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>188</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>76,133</td><td align="right" class='awrnc'>83.10</td><td align="right" class='awrnc'>1.53</td><td align="right" headers="perSecond Average" class='awrnclb'>41.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.11</td><td align="right" headers="perSecond Min" class='awrnc'>35.11</td><td align="right" headers="perSecond Max" class='awrncrb'>48.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>5,218</td><td align="right" class='awrnc'>5.70</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>2.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.32</td><td align="right" headers="perSecond Min" class='awrnc'>2.62</td><td align="right" headers="perSecond Max" class='awrncrb'>3.07</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>19,768</td><td align="right" class='awrc'>21.58</td><td align="right" class='awrc'>0.40</td><td align="right" headers="perSecond Average" class='awrclb'>10.79</td><td align="right" headers="perSecond StdDev" class='awrc'>1.37</td><td align="right" headers="perSecond Min" class='awrc'>9.82</td><td align="right" headers="perSecond Max" class='awrcrb'>11.76</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>19,647</td><td align="right" class='awrnc'>21.44</td><td align="right" class='awrnc'>0.39</td><td align="right" headers="perSecond Average" class='awrnclb'>10.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.99</td><td align="right" headers="perSecond Min" class='awrnc'>10.02</td><td align="right" headers="perSecond Max" class='awrncrb'>11.42</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>31,604</td><td align="right" class='awrc'>34.49</td><td align="right" class='awrc'>0.63</td><td align="right" headers="perSecond Average" class='awrclb'>17.25</td><td align="right" headers="perSecond StdDev" class='awrc'>1.63</td><td align="right" headers="perSecond Min" class='awrc'>16.09</td><td align="right" headers="perSecond Max" class='awrcrb'>18.40</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>12,946</td><td align="right" class='awrnc'>14.13</td><td align="right" class='awrnc'>0.26</td><td align="right" headers="perSecond Average" class='awrnclb'>7.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.09</td><td align="right" headers="perSecond Min" class='awrnc'>6.30</td><td align="right" headers="perSecond Max" class='awrncrb'>7.83</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>9,932</td><td align="right" class='awrc'>10.84</td><td align="right" class='awrc'>0.20</td><td align="right" headers="perSecond Average" class='awrclb'>5.42</td><td align="right" headers="perSecond StdDev" class='awrc'>0.94</td><td align="right" headers="perSecond Min" class='awrc'>4.76</td><td align="right" headers="perSecond Max" class='awrcrb'>6.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>57,878</td><td align="right" class='awrnc'>63.18</td><td align="right" class='awrnc'>1.16</td><td align="right" headers="perSecond Average" class='awrnclb'>31.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>16.10</td><td align="right" headers="perSecond Min" class='awrnc'>20.21</td><td align="right" headers="perSecond Max" class='awrncrb'>42.97</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>854</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.47</td><td align="right" headers="perSecond StdDev" class='awrc'>0.47</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.80</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>715,365</td><td align="right" class='awrnc'>780.82</td><td align="right" class='awrnc'>14.36</td><td align="right" headers="perSecond Average" class='awrnclb'>390.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.03</td><td align="right" headers="perSecond Min" class='awrnc'>384.02</td><td align="right" headers="perSecond Max" class='awrncrb'>396.79</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>30,751</td><td align="right" class='awrc'>33.56</td><td align="right" class='awrc'>0.62</td><td align="right" headers="perSecond Average" class='awrclb'>16.78</td><td align="right" headers="perSecond StdDev" class='awrc'>5.16</td><td align="right" headers="perSecond Min" class='awrc'>13.14</td><td align="right" headers="perSecond Max" class='awrcrb'>20.43</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>2,593</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>1.41</td><td align="right" headers="perSecond StdDev" class='awrc'>1.47</td><td align="right" headers="perSecond Min" class='awrc'>0.37</td><td align="right" headers="perSecond Max" class='awrcrb'>2.46</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>2,174</td><td align="right" class='awrnc'>2.37</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>0.97</td><td align="right" headers="perSecond Max" class='awrncrb'>1.40</td></tr>
<tr><td scope="row" class='awrc'>gcs cr requests to slave</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>1,989,950</td><td align="right" class='awrnc'>2,171.96</td><td align="right" class='awrnc'>39.96</td><td align="right" headers="perSecond Average" class='awrnclb'>1,085.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>91.92</td><td align="right" headers="perSecond Min" class='awrnc'>1,020.99</td><td align="right" headers="perSecond Max" class='awrncrb'>1,150.98</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>3,943</td><td align="right" class='awrc'>4.30</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>2.15</td><td align="right" headers="perSecond StdDev" class='awrc'>1.76</td><td align="right" headers="perSecond Min" class='awrc'>0.91</td><td align="right" headers="perSecond Max" class='awrcrb'>3.40</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>58,732</td><td align="right" class='awrnc'>64.11</td><td align="right" class='awrnc'>1.18</td><td align="right" headers="perSecond Average" class='awrnclb'>32.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>16.57</td><td align="right" headers="perSecond Min" class='awrnc'>20.34</td><td align="right" headers="perSecond Max" class='awrncrb'>43.77</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (compatible) converts</td><td align="right" class='awrc'>20,104</td><td align="right" class='awrc'>21.95</td><td align="right" class='awrc'>0.40</td><td align="right" headers="perSecond Average" class='awrclb'>10.97</td><td align="right" headers="perSecond StdDev" class='awrc'>5.60</td><td align="right" headers="perSecond Min" class='awrc'>7.01</td><td align="right" headers="perSecond Max" class='awrcrb'>14.94</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (null) converts</td><td align="right" class='awrnc'>1,477,815</td><td align="right" class='awrnc'>1,613.09</td><td align="right" class='awrnc'>29.68</td><td align="right" headers="perSecond Average" class='awrnclb'>806.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>145.31</td><td align="right" headers="perSecond Min" class='awrnc'>703.80</td><td align="right" headers="perSecond Max" class='awrncrb'>909.29</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrc'>73,842</td><td align="right" class='awrc'>80.59</td><td align="right" class='awrc'>1.48</td><td align="right" headers="perSecond Average" class='awrclb'>40.30</td><td align="right" headers="perSecond StdDev" class='awrc'>11.40</td><td align="right" headers="perSecond Min" class='awrc'>32.24</td><td align="right" headers="perSecond Max" class='awrcrb'>48.35</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (null) converts</td><td align="right" class='awrnc'>8,398,777</td><td align="right" class='awrnc'>9,167.81</td><td align="right" class='awrnc'>168.65</td><td align="right" headers="perSecond Average" class='awrnclb'>4,583.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,304.18</td><td align="right" headers="perSecond Min" class='awrnc'>3,661.71</td><td align="right" headers="perSecond Max" class='awrncrb'>5,506.10</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>3,152</td><td align="right" class='awrc'>3.44</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>1.72</td><td align="right" headers="perSecond StdDev" class='awrc'>1.67</td><td align="right" headers="perSecond Min" class='awrc'>0.54</td><td align="right" headers="perSecond Max" class='awrcrb'>2.90</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>761,957</td><td align="right" class='awrnc'>831.64</td><td align="right" class='awrnc'>15.30</td><td align="right" headers="perSecond Average" class='awrnclb'>415.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>55.14</td><td align="right" headers="perSecond Min" class='awrnc'>376.83</td><td align="right" headers="perSecond Max" class='awrncrb'>454.81</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>34,939,215</td><td align="right" class='awrc'>38,136.65</td><td align="right" class='awrc'>701.59</td><td align="right" headers="perSecond Average" class='awrclb'>19,068.33</td><td align="right" headers="perSecond StdDev" class='awrc'>1,823.04</td><td align="right" headers="perSecond Min" class='awrc'>17,779.24</td><td align="right" headers="perSecond Max" class='awrcrb'>20,357.41</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>416</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.33</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>6,720</td><td align="right" class='awrc'>7.34</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>3.67</td><td align="right" headers="perSecond StdDev" class='awrc'>1.15</td><td align="right" headers="perSecond Min" class='awrc'>2.85</td><td align="right" headers="perSecond Max" class='awrcrb'>4.48</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>8,333</td><td align="right" class='awrnc'>9.09</td><td align="right" class='awrnc'>0.17</td><td align="right" headers="perSecond Average" class='awrnclb'>4.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.32</td><td align="right" headers="perSecond Min" class='awrnc'>3.62</td><td align="right" headers="perSecond Max" class='awrncrb'>5.48</td></tr>
<tr><td scope="row" class='awrc'>gcs queued converts</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant immediate</td><td align="right" class='awrnc'>182</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs actual</td><td align="right" class='awrc'>5,543</td><td align="right" class='awrc'>6.05</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>3.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.59</td><td align="right" headers="perSecond Min" class='awrc'>2.61</td><td align="right" headers="perSecond Max" class='awrcrb'>3.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs logical</td><td align="right" class='awrnc'>109,032</td><td align="right" class='awrnc'>119.00</td><td align="right" class='awrnc'>2.19</td><td align="right" headers="perSecond Average" class='awrnclb'>59.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>24.36</td><td align="right" headers="perSecond Min" class='awrnc'>42.27</td><td align="right" headers="perSecond Max" class='awrncrb'>76.72</td></tr>
<tr><td scope="row" class='awrc'>gcs stale cr</td><td align="right" class='awrc'>169</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>gcs undo cr</td><td align="right" class='awrnc'>795</td><td align="right" class='awrnc'>0.87</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.58</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.85</td></tr>
<tr><td scope="row" class='awrc'>gcs write notification msgs</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs writes refused</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges msgs process time(ms)</td><td align="right" class='awrc'>617</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs received</td><td align="right" class='awrnc'>17,020</td><td align="right" class='awrnc'>18.58</td><td align="right" class='awrnc'>0.34</td><td align="right" headers="perSecond Average" class='awrnclb'>9.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.67</td><td align="right" headers="perSecond Min" class='awrnc'>6.69</td><td align="right" headers="perSecond Max" class='awrncrb'>11.89</td></tr>
<tr><td scope="row" class='awrc'>ges remote lock allocation</td><td align="right" class='awrc'>18,446,744,073,709,551,537</td><td align="right" class='awrc'>20,127,380,331,379,761.63</td><td align="right" class='awrc'>370,416,547,664,850.43</td><td align="right" headers="perSecond Average" class='awrclb'>20,127,380,331,379,761.63</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>20,127,380,331,379,761.63</td><td align="right" headers="perSecond Max" class='awrcrb'>20,127,380,331,379,761.63</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>581,052</td><td align="right" class='awrnc'>634.23</td><td align="right" class='awrnc'>11.67</td><td align="right" headers="perSecond Average" class='awrnclb'>317.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>32.79</td><td align="right" headers="perSecond Min" class='awrnc'>293.93</td><td align="right" headers="perSecond Max" class='awrncrb'>340.30</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>578,289</td><td align="right" class='awrc'>631.19</td><td align="right" class='awrc'>11.61</td><td align="right" headers="perSecond Average" class='awrclb'>315.59</td><td align="right" headers="perSecond StdDev" class='awrc'>17.53</td><td align="right" headers="perSecond Min" class='awrc'>303.20</td><td align="right" headers="perSecond Max" class='awrcrb'>327.99</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>353,476</td><td align="right" class='awrnc'>385.81</td><td align="right" class='awrnc'>7.10</td><td align="right" headers="perSecond Average" class='awrnclb'>192.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.26</td><td align="right" headers="perSecond Min" class='awrnc'>187.07</td><td align="right" headers="perSecond Max" class='awrncrb'>198.75</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>4,096,544</td><td align="right" class='awrc'>4,471.45</td><td align="right" class='awrc'>82.26</td><td align="right" headers="perSecond Average" class='awrclb'>2,235.72</td><td align="right" headers="perSecond StdDev" class='awrc'>240.67</td><td align="right" headers="perSecond Min" class='awrc'>2,065.55</td><td align="right" headers="perSecond Max" class='awrcrb'>2,405.90</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>4,720,334</td><td align="right" class='awrnc'>5,152.09</td><td align="right" class='awrnc'>94.79</td><td align="right" headers="perSecond Average" class='awrnclb'>2,576.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>193.86</td><td align="right" headers="perSecond Min" class='awrnc'>2,438.97</td><td align="right" headers="perSecond Max" class='awrncrb'>2,713.13</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>7,045,036</td><td align="right" class='awrc'>7,689.65</td><td align="right" class='awrc'>141.47</td><td align="right" headers="perSecond Average" class='awrclb'>3,844.83</td><td align="right" headers="perSecond StdDev" class='awrc'>153.13</td><td align="right" headers="perSecond Min" class='awrc'>3,736.55</td><td align="right" headers="perSecond Max" class='awrcrb'>3,953.11</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>34,956,235</td><td align="right" class='awrnc'>38,155.23</td><td align="right" class='awrnc'>701.93</td><td align="right" headers="perSecond Average" class='awrnclb'>19,077.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,826.71</td><td align="right" headers="perSecond Min" class='awrnc'>17,785.93</td><td align="right" headers="perSecond Max" class='awrncrb'>20,369.30</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>2,185,402</td><td align="right" class='awrc'>2,385.30</td><td align="right" class='awrc'>43.88</td><td align="right" headers="perSecond Average" class='awrclb'>1,192.65</td><td align="right" headers="perSecond StdDev" class='awrc'>91.63</td><td align="right" headers="perSecond Min" class='awrc'>1,127.86</td><td align="right" headers="perSecond Max" class='awrcrb'>1,257.44</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>14,679,630</td><td align="right" class='awrnc'>16,021.95</td><td align="right" class='awrnc'>294.77</td><td align="right" headers="perSecond Average" class='awrnclb'>8,010.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,415.42</td><td align="right" headers="perSecond Min" class='awrnc'>7,010.12</td><td align="right" headers="perSecond Max" class='awrncrb'>9,011.83</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>884,771</td><td align="right" class='awrc'>965.69</td><td align="right" class='awrc'>17.77</td><td align="right" headers="perSecond Average" class='awrclb'>482.85</td><td align="right" headers="perSecond StdDev" class='awrc'>55.08</td><td align="right" headers="perSecond Min" class='awrc'>443.90</td><td align="right" headers="perSecond Max" class='awrcrb'>521.79</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>29,226,623</td><td align="right" class='awrnc'>31,899.97</td><td align="right" class='awrnc'>586.88</td><td align="right" headers="perSecond Average" class='awrnclb'>15,949.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,123.52</td><td align="right" headers="perSecond Min" class='awrnc'>15,155.54</td><td align="right" headers="perSecond Max" class='awrncrb'>16,744.43</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>6,370,283,234,988</td><td align="right" class='awrc'>6,952,156,584.32</td><td align="right" class='awrc'>127,917,334.04</td><td align="right" headers="perSecond Average" class='awrclb'>3,476,078,292.16</td><td align="right" headers="perSecond StdDev" class='awrc'>1,892,428,920.39</td><td align="right" headers="perSecond Min" class='awrc'>2,137,928,969.64</td><td align="right" headers="perSecond Max" class='awrcrb'>4,814,227,614.68</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>2,632,314</td><td align="right" class='awrnc'>2,872.80</td><td align="right" class='awrnc'>52.86</td><td align="right" headers="perSecond Average" class='awrnclb'>1,436.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>682.01</td><td align="right" headers="perSecond Min" class='awrnc'>954.15</td><td align="right" headers="perSecond Max" class='awrncrb'>1,918.66</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>34,956,235</td><td align="right" class='awrc'>38,155.23</td><td align="right" class='awrc'>701.93</td><td align="right" headers="perSecond Average" class='awrclb'>19,077.62</td><td align="right" headers="perSecond StdDev" class='awrc'>1,826.71</td><td align="right" headers="perSecond Min" class='awrc'>17,785.93</td><td align="right" headers="perSecond Max" class='awrcrb'>20,369.30</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>23,312,337</td><td align="right" class='awrnc'>25,450.53</td><td align="right" class='awrnc'>468.12</td><td align="right" headers="perSecond Average" class='awrnclb'>12,725.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,890.59</td><td align="right" headers="perSecond Min" class='awrnc'>5,024.45</td><td align="right" headers="perSecond Max" class='awrncrb'>20,426.07</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>376,419,273</td><td align="right" class='awrc'>410,899.33</td><td align="right" class='awrc'>7,558.62</td><td align="right" headers="perSecond Average" class='awrclb'>205,449.66</td><td align="right" headers="perSecond StdDev" class='awrc'>85,013.06</td><td align="right" headers="perSecond Min" class='awrc'>145,336.36</td><td align="right" headers="perSecond Max" class='awrcrb'>265,562.97</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>6,014,218</td><td align="right" class='awrnc'>6,564.52</td><td align="right" class='awrnc'>120.77</td><td align="right" headers="perSecond Average" class='awrnclb'>3,282.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>150.58</td><td align="right" headers="perSecond Min" class='awrnc'>3,175.79</td><td align="right" headers="perSecond Max" class='awrncrb'>3,388.74</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>7,042,935</td><td align="right" class='awrc'>7,687.31</td><td align="right" class='awrc'>141.42</td><td align="right" headers="perSecond Average" class='awrclb'>3,843.66</td><td align="right" headers="perSecond StdDev" class='awrc'>58.87</td><td align="right" headers="perSecond Min" class='awrc'>3,802.03</td><td align="right" headers="perSecond Max" class='awrcrb'>3,885.28</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages received</td><td align="right" class='awrnc'>2,801,340</td><td align="right" class='awrnc'>3,057.59</td><td align="right" class='awrnc'>56.25</td><td align="right" headers="perSecond Average" class='awrnclb'>1,528.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>82.80</td><td align="right" headers="perSecond Min" class='awrnc'>1,470.24</td><td align="right" headers="perSecond Max" class='awrncrb'>1,587.35</td></tr>
<tr><td scope="row" class='awrc'>process batch messages sent</td><td align="right" class='awrc'>3,283,095</td><td align="right" class='awrc'>3,583.53</td><td align="right" class='awrc'>65.93</td><td align="right" headers="perSecond Average" class='awrclb'>1,791.76</td><td align="right" headers="perSecond StdDev" class='awrc'>138.34</td><td align="right" headers="perSecond Min" class='awrc'>1,693.95</td><td align="right" headers="perSecond Max" class='awrcrb'>1,889.58</td></tr>
<tr><td scope="row" class='awrnc'>receiver cycle time</td><td align="right" class='awrnc'>1,596,077</td><td align="right" class='awrnc'>1,742.08</td><td align="right" class='awrnc'>32.05</td><td align="right" headers="perSecond Average" class='awrnclb'>871.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>30.19</td><td align="right" headers="perSecond Min" class='awrnc'>849.69</td><td align="right" headers="perSecond Max" class='awrncrb'>892.39</td></tr>
<tr><td scope="row" class='awrc'>receiver loop count</td><td align="right" class='awrc'>4,035,353</td><td align="right" class='awrc'>4,404.78</td><td align="right" class='awrc'>81.03</td><td align="right" headers="perSecond Average" class='awrclb'>2,202.39</td><td align="right" headers="perSecond StdDev" class='awrc'>472.54</td><td align="right" headers="perSecond Min" class='awrc'>1,868.25</td><td align="right" headers="perSecond Max" class='awrcrb'>2,536.53</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>379</td><td align="right" headers="Sessions End" class='awrc'>121</td><td align="right" headers="OpenCursors Begin" class='awrclb'>1,126</td><td align="right" headers="OpenCursors End" class='awrc'>107</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>12,879</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>13,208</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>373</td><td align="right" headers="Sessions End" class='awrnc'>118</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>1,026</td><td align="right" headers="OpenCursors End" class='awrnc'>65</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>11,344</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>11,496</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>752</td><td align="right" class='awrct'>239</td><td align="right" class='awrclbt'>2,152</td><td align="right" class='awrct'>172</td><td align="right" class='awrclbt'>24,223</td><td align="right" class='awrcrbt'>24,704</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>376</td><td align="right" class='awrnc'>120</td><td align="right" class='awrnclb'>1,076</td><td align="right" class='awrnc'>86</td><td align="right" class='awrnclb'>12,112</td><td align="right" class='awrncrb'>12,352</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>4</td><td align="right" class='awrc'>2</td><td align="right" class='awrclb'>71</td><td align="right" class='awrc'>30</td><td align="right" class='awrclb'>1,085</td><td align="right" class='awrcrb'>1,211</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>50,260.90</td><td align="right" class='awrc'>43,060.11</td><td align="right" class='awrc'>7,200.79</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>50,144.27</td><td align="right" class='awrnc'>43,043.91</td><td align="right" class='awrnc'>7,100.36</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>34.51</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>34.51</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>406.94</td><td align="right" class='awrc'>342.21</td><td align="right" class='awrc'>64.73</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>395.63</td><td align="right" class='awrnc'>336.87</td><td align="right" class='awrnc'>58.76</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>5.48</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.48</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>50,640.76</td><td align="right" class='awrc'>43,119.97</td><td align="right" class='awrc'>7,520.79</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>50,638.27</td><td align="right" class='awrnc'>43,119.96</td><td align="right" class='awrnc'>7,518.31</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>2.49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.49</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>44,809,816</td><td align="right" headers="Requests IOs/s" class='awrc'>48,892.33</td><td align="right" headers="Requests Reads/s" class='awrc'>41,840.19</td><td align="right" headers="Requests Writes/s" class='awrc'>7,052.14</td><td align="right" headers="MB Total" class='awrclb'>362,837</td><td align="right" headers="MB IOMB/s" class='awrc'>395.89</td><td align="right" headers="MB ReadMB/s" class='awrc'>332.59</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>63.30</td><td align="right" class='awrc'>7.6M</td><td align="right" class='awrc'>4.13ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>38,330,913</td><td align="right" headers="Requests IOs/s" class='awrnc'>41,823.15</td><td align="right" headers="Requests Reads/s" class='awrnc'>41,823.15</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>300,017</td><td align="right" headers="MB IOMB/s" class='awrnc'>327.35</td><td align="right" headers="MB ReadMB/s" class='awrnc'>327.35</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>7.5M</td><td align="right" class='awrnc'>3.97ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>6,401,332</td><td align="right" headers="Requests IOs/s" class='awrc'>6,984.54</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>6,984.54</td><td align="right" headers="MB Total" class='awrclb'>52,955</td><td align="right" headers="MB IOMB/s" class='awrc'>57.78</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>57.78</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>59,861</td><td align="right" headers="Requests IOs/s" class='awrnc'>65.31</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>65.31</td><td align="right" headers="MB Total" class='awrnclb'>5,016</td><td align="right" headers="MB IOMB/s" class='awrnc'>5.47</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>5.47</td><td align="right" class='awrnc'>30.9K</td><td align="right" class='awrnc'>42.49ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>17,620</td><td align="right" headers="Requests IOs/s" class='awrc'>19.23</td><td align="right" headers="Requests Reads/s" class='awrc'>17.04</td><td align="right" headers="Requests Writes/s" class='awrc'>2.19</td><td align="right" headers="MB Total" class='awrclb'>4,847</td><td align="right" headers="MB IOMB/s" class='awrc'>5.29</td><td align="right" headers="MB ReadMB/s" class='awrc'>5.24</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.05</td><td align="right" class='awrc'>9418</td><td align="right" class='awrc'>6.21ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>89</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.10</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.10</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Streams AQ</td><td align="right" headers="Requests Total" class='awrclb'>1</td><td align="right" headers="Requests IOs/s" class='awrc'>0.00</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>0</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>19,597,597</td><td align="right" headers="Requests IOs/s" class='awrnct'>21,383.08</td><td align="right" headers="Requests Reads/s" class='awrnct'>18,199.40</td><td align="right" headers="Requests Writes/s" class='awrnct'>3,183.68</td><td align="right" headers="MB Total" class='awrnclbt'>158,938</td><td align="right" headers="MB IOMB/s" class='awrnct'>173.42</td><td align="right" headers="MB ReadMB/s" class='awrnct'>144.91</td><td align="right" headers="MB WriteMB/s" class='awrncrbt'>28.50</td><td align="right" class='awrnct'>3.6M</td><td align="right" class='awrnct'>4.47ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrclb'>16,671,850</td><td align="right" headers="Requests IOs/s" class='awrc'>18,190.78</td><td align="right" headers="Requests Reads/s" class='awrc'>18,190.78</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>130,260</td><td align="right" headers="MB IOMB/s" class='awrc'>142.13</td><td align="right" headers="MB ReadMB/s" class='awrc'>142.13</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>3.5M</td><td align="right" class='awrc'>4.30ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>2,888,900</td><td align="right" headers="Requests IOs/s" class='awrnc'>3,152.10</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,152.10</td><td align="right" headers="MB Total" class='awrnclb'>23,870</td><td align="right" headers="MB IOMB/s" class='awrnc'>26.04</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>26.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>8,845</td><td align="right" headers="Requests IOs/s" class='awrc'>9.65</td><td align="right" headers="Requests Reads/s" class='awrc'>8.62</td><td align="right" headers="Requests Writes/s" class='awrc'>1.03</td><td align="right" headers="MB Total" class='awrclb'>2,574</td><td align="right" headers="MB IOMB/s" class='awrc'>2.81</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.79</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>4616</td><td align="right" class='awrc'>7.25ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>27,958</td><td align="right" headers="Requests IOs/s" class='awrnc'>30.51</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>30.51</td><td align="right" headers="MB Total" class='awrnclb'>2,233</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.44</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>2.44</td><td align="right" class='awrnc'>14.6K</td><td align="right" class='awrnc'>44.61ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrclb'>43</td><td align="right" headers="Requests IOs/s" class='awrc'>0.05</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.05</td><td align="right" headers="MB Total" class='awrclb'>1</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Streams AQ</td><td align="right" headers="Requests Total" class='awrnclb'>1</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.00</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>25,212,219</td><td align="right" headers="Requests IOs/s" class='awrct'>27,509.24</td><td align="right" headers="Requests Reads/s" class='awrct'>23,640.78</td><td align="right" headers="Requests Writes/s" class='awrct'>3,868.46</td><td align="right" headers="MB Total" class='awrclbt'>203,899</td><td align="right" headers="MB IOMB/s" class='awrct'>222.48</td><td align="right" headers="MB ReadMB/s" class='awrct'>187.68</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>34.80</td><td align="right" class='awrct'>4M</td><td align="right" class='awrct'>3.83ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>21,659,063</td><td align="right" headers="Requests IOs/s" class='awrnc'>23,632.37</td><td align="right" headers="Requests Reads/s" class='awrnc'>23,632.37</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>169,757</td><td align="right" headers="MB IOMB/s" class='awrnc'>185.22</td><td align="right" headers="MB ReadMB/s" class='awrnc'>185.22</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>4M</td><td align="right" class='awrnc'>3.68ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>3,512,432</td><td align="right" headers="Requests IOs/s" class='awrc'>3,832.44</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>3,832.44</td><td align="right" headers="MB Total" class='awrclb'>29,085</td><td align="right" headers="MB IOMB/s" class='awrc'>31.73</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>31.73</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>31,903</td><td align="right" headers="Requests IOs/s" class='awrnc'>34.81</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>34.81</td><td align="right" headers="MB Total" class='awrnclb'>2,783</td><td align="right" headers="MB IOMB/s" class='awrnc'>3.04</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>3.04</td><td align="right" class='awrnc'>16.3K</td><td align="right" class='awrnc'>40.58ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>8,775</td><td align="right" headers="Requests IOs/s" class='awrc'>9.57</td><td align="right" headers="Requests Reads/s" class='awrc'>8.42</td><td align="right" headers="Requests Writes/s" class='awrc'>1.16</td><td align="right" headers="MB Total" class='awrclb'>2,273</td><td align="right" headers="MB IOMB/s" class='awrc'>2.48</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.46</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>4802</td><td align="right" class='awrc'>5.20ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>46</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.05</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.05</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>44,777,516</td><td align="right" headers="Requests IOs/s" class='awrc'>48,857.08</td><td align="right" headers="Requests Reads/s" class='awrc'>41,808.90</td><td align="right" headers="Requests Writes/s" class='awrc'>7,048.18</td><td align="right" headers="MB Total" class='awrclb'>362,585</td><td align="right" headers="MB IOMB/s" class='awrc'>395.62</td><td align="right" headers="MB ReadMB/s" class='awrc'>332.36</td><td align="right" headers="MB WriteMB/s" class='awrc'>63.26</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>522.62us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1181.86ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>44,699,906</td><td align="right" headers="Requests IOs/s" class='awrnc'>48,772.40</td><td align="right" headers="Requests Reads/s" class='awrnc'>41,791.56</td><td align="right" headers="Requests Writes/s" class='awrnc'>6,980.84</td><td align="right" headers="MB Total" class='awrnclb'>352,727</td><td align="right" headers="MB IOMB/s" class='awrnc'>384.86</td><td align="right" headers="MB ReadMB/s" class='awrnc'>327.10</td><td align="right" headers="MB WriteMB/s" class='awrnc'>57.76</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>522.65us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>2.53ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>64,848</td><td align="right" headers="Requests IOs/s" class='awrc'>70.76</td><td align="right" headers="Requests Reads/s" class='awrc'>5.55</td><td align="right" headers="Requests Writes/s" class='awrc'>65.21</td><td align="right" headers="MB Total" class='awrclb'>9,650</td><td align="right" headers="MB IOMB/s" class='awrc'>10.53</td><td align="right" headers="MB ReadMB/s" class='awrc'>5.06</td><td align="right" headers="MB WriteMB/s" class='awrc'>5.47</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>823.53us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1469.83ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>12,246</td><td align="right" headers="Requests IOs/s" class='awrnc'>13.36</td><td align="right" headers="Requests Reads/s" class='awrnc'>11.48</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.88</td><td align="right" headers="MB Total" class='awrnclb'>192</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.21</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.18</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>392.65us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Other</td><td align="right" headers="Requests Total" class='awrclb'>38</td><td align="right" headers="Requests IOs/s" class='awrc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrc'>0.04</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>9</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>315.79us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1.68ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>478</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.52</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.27</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.26</td><td align="right" headers="MB Total" class='awrnclb'>7</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>555.56us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>19,587,677</td><td align="right" headers="Requests IOs/s" class='awrct'>21,372.26</td><td align="right" headers="Requests Reads/s" class='awrct'>18,190.40</td><td align="right" headers="Requests Writes/s" class='awrct'>3,181.86</td><td align="right" headers="MB Total" class='awrclbt'>158,867</td><td align="right" headers="MB IOMB/s" class='awrct'>173.34</td><td align="right" headers="MB ReadMB/s" class='awrct'>144.85</td><td align="right" headers="MB WriteMB/s" class='awrct'>28.49</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>632.20us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1378.33ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>19,550,793</td><td align="right" headers="Requests IOs/s" class='awrnc'>21,332.02</td><td align="right" headers="Requests Reads/s" class='awrnc'>18,181.65</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,150.37</td><td align="right" headers="MB Total" class='awrnclb'>154,065</td><td align="right" headers="MB IOMB/s" class='awrnc'>168.10</td><td align="right" headers="MB ReadMB/s" class='awrnc'>142.06</td><td align="right" headers="MB WriteMB/s" class='awrnc'>26.04</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>632.31us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>368.42us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>30,638</td><td align="right" headers="Requests IOs/s" class='awrc'>33.43</td><td align="right" headers="Requests Reads/s" class='awrc'>2.94</td><td align="right" headers="Requests Writes/s" class='awrc'>30.49</td><td align="right" headers="MB Total" class='awrclb'>4,704</td><td align="right" headers="MB IOMB/s" class='awrc'>5.13</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.70</td><td align="right" headers="MB WriteMB/s" class='awrc'>2.43</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>698.20us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1399.51ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>5,997</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.54</td><td align="right" headers="Requests Reads/s" class='awrnc'>5.67</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.87</td><td align="right" headers="MB Total" class='awrnclb'>94</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.10</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>298.40us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>249</td><td align="right" headers="Requests IOs/s" class='awrc'>0.27</td><td align="right" headers="Requests Reads/s" class='awrc'>0.14</td><td align="right" headers="Requests Writes/s" class='awrc'>0.13</td><td align="right" headers="MB Total" class='awrclb'>4</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>820.31us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>2</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>25,189,839</td><td align="right" headers="Requests IOs/s" class='awrnct'>27,484.82</td><td align="right" headers="Requests Reads/s" class='awrnct'>23,618.50</td><td align="right" headers="Requests Writes/s" class='awrnct'>3,866.33</td><td align="right" headers="MB Total" class='awrnclbt'>203,718</td><td align="right" headers="MB IOMB/s" class='awrnct'>222.28</td><td align="right" headers="MB ReadMB/s" class='awrnct'>187.50</td><td align="right" headers="MB WriteMB/s" class='awrnct'>34.77</td><td align="right" headers="ServiceTime Small|Read" class='awrnclbt'>438.22us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrbt'>1030.73ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Data File</td><td align="right" headers="Requests Total" class='awrclb'>25,149,113</td><td align="right" headers="Requests IOs/s" class='awrc'>27,440.39</td><td align="right" headers="Requests Reads/s" class='awrc'>23,609.91</td><td align="right" headers="Requests Writes/s" class='awrc'>3,830.47</td><td align="right" headers="MB Total" class='awrclb'>198,662</td><td align="right" headers="MB IOMB/s" class='awrc'>216.76</td><td align="right" headers="MB ReadMB/s" class='awrc'>185.04</td><td align="right" headers="MB WriteMB/s" class='awrc'>31.73</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>438.20us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>2.61ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Log File</td><td align="right" headers="Requests Total" class='awrnclb'>34,210</td><td align="right" headers="Requests IOs/s" class='awrnc'>37.33</td><td align="right" headers="Requests Reads/s" class='awrnc'>2.61</td><td align="right" headers="Requests Writes/s" class='awrnc'>34.72</td><td align="right" headers="MB Total" class='awrnclb'>4,946</td><td align="right" headers="MB IOMB/s" class='awrnc'>5.40</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.37</td><td align="right" headers="MB WriteMB/s" class='awrnc'>3.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>950.00us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>1550.01ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Control File</td><td align="right" headers="Requests Total" class='awrclb'>6,249</td><td align="right" headers="Requests IOs/s" class='awrc'>6.82</td><td align="right" headers="Requests Reads/s" class='awrc'>5.81</td><td align="right" headers="Requests Writes/s" class='awrc'>1.01</td><td align="right" headers="MB Total" class='awrclb'>98</td><td align="right" headers="MB IOMB/s" class='awrc'>0.11</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>484.69us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Other</td><td align="right" headers="Requests Total" class='awrnclb'>38</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.04</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>9</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>315.79us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>1.68ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>229</td><td align="right" headers="Requests IOs/s" class='awrc'>0.25</td><td align="right" headers="Requests Reads/s" class='awrc'>0.13</td><td align="right" headers="Requests Writes/s" class='awrc'>0.12</td><td align="right" headers="MB Total" class='awrclb'>3</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>260.87us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	80.9% of Total Logical Reads:	   46,228,182</li>
<li class="awr">Captured Segments account for	82.3% of Total Physical Reads:	    39,519,448</li>
<li class="awr">Captured Segments account for	82.3% of Total Physical Read Requests:	    39,449,745</li>
<li class="awr">Captured Segments account for	82.3% of Total UnOptimized Read Requests:      39,449,745</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		    1</li>
<li class="awr">Captured Segments account for	80.1% of Total Physical Writes:       6,892,806</li>
<li class="awr">Captured Segments account for	83.1% of Total Physical Write Requests:       6,507,481</li>
<li class="awr">Captured Segments account for	70.4% of Total Direct Physical Writes:		 2,279</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  5</li>
<li class="awr">Captured Segments account for	46.4% of Total CR Blocks Received:	    25,709</li>
<li class="awr">Captured Segments account for	51.9% of Total Current Blocks Received: 	 16,798</li>
<li class="awr">Captured Segments account for	38.2% of Total CR Blocks Served:	  31,202</li>
<li class="awr">Captured Segments account for	48.0% of Total Current Blocks Served:	       18,154</li>
<li class="awr">Captured Segments account for	74.9% of Total Global Cache Remote Grants:	10,490,099</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>buffer busy waits</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>66.67</td></tr>
<tr><td class='awrnc'><div class="hidden">buffer busy waits</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>33.33</td></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>511,296</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>30.61</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>296,080</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17.73</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER42</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>294,064</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>17.61</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>285,504</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17.09</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER122</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73902</td><td align="right" class='awrc'>73888</td><td align="right" class='awrc'>283,392</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.97</td></tr>
<tr><td class='awrnc'>gc buffer busy</td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>13.51</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER62</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73598</td><td align="right" class='awrc'>73604</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>10.81</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER119</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73882</td><td align="right" class='awrnc'>73885</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>8.11</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER31</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73429</td><td align="right" class='awrc'>73424</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8.11</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER99</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73781</td><td align="right" class='awrnc'>73787</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>8.11</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER10</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73325</td><td align="right" class='awrc'>73320</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.41</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER109</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73835</td><td align="right" class='awrnc'>73838</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.41</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER110</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73842</td><td align="right" class='awrc'>73846</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.41</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER114</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73861</td><td align="right" class='awrnc'>73866</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.41</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.41</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74075</td><td align="right" class='awrnc'>74075</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.70</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>SEG$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.70</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER102</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73799</td><td align="right" class='awrnc'>73803</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.70</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER11</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73327</td><td align="right" class='awrc'>73331</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.70</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER117</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73869</td><td align="right" class='awrnc'>73877</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.70</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER75</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>73658</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.70</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER76</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73669</td><td align="right" class='awrnc'>73673</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.70</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER88</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73729</td><td align="right" class='awrc'>73733</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.70</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER91</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73743</td><td align="right" class='awrnc'>73740</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.70</td></tr>
<tr><td class='awrc'>gc cr blocks received</td><td class='awrc'>USER43</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73490</td><td align="right" class='awrc'>73493</td><td align="right" class='awrc'>1,127</td><td align="right" class='awrc'>4.38</td><td align="right" class='awrc'>22.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER40</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73478</td><td align="right" class='awrnc'>1,050</td><td align="right" class='awrnc'>4.08</td><td align="right" class='awrnc'>21.26</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER41</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73483</td><td align="right" class='awrc'>73479</td><td align="right" class='awrc'>1,030</td><td align="right" class='awrc'>4.01</td><td align="right" class='awrc'>20.85</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER37</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73460</td><td align="right" class='awrnc'>73466</td><td align="right" class='awrnc'>934</td><td align="right" class='awrnc'>3.63</td><td align="right" class='awrnc'>18.91</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER39</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>798</td><td align="right" class='awrc'>3.10</td><td align="right" class='awrc'>16.16</td></tr>
<tr><td class='awrnc'>gc cr blocks served</td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>1,127</td><td align="right" class='awrnc'>3.61</td><td align="right" class='awrnc'>22.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>1,050</td><td align="right" class='awrc'>3.37</td><td align="right" class='awrc'>21.26</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER41</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73483</td><td align="right" class='awrnc'>73479</td><td align="right" class='awrnc'>1,030</td><td align="right" class='awrnc'>3.30</td><td align="right" class='awrnc'>20.85</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER37</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73460</td><td align="right" class='awrc'>73466</td><td align="right" class='awrc'>934</td><td align="right" class='awrc'>2.99</td><td align="right" class='awrc'>18.91</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER39</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73471</td><td align="right" class='awrnc'>73470</td><td align="right" class='awrnc'>798</td><td align="right" class='awrnc'>2.56</td><td align="right" class='awrnc'>16.16</td></tr>
<tr><td class='awrc'>gc cu blocks received</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>1,314</td><td align="right" class='awrc'>7.82</td><td align="right" class='awrc'>36.71</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER37</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73460</td><td align="right" class='awrnc'>73466</td><td align="right" class='awrnc'>757</td><td align="right" class='awrnc'>4.51</td><td align="right" class='awrnc'>21.15</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER39</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>677</td><td align="right" class='awrc'>4.03</td><td align="right" class='awrc'>18.92</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>454</td><td align="right" class='awrnc'>2.70</td><td align="right" class='awrnc'>12.69</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER44</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73501</td><td align="right" class='awrc'>73503</td><td align="right" class='awrc'>377</td><td align="right" class='awrc'>2.24</td><td align="right" class='awrc'>10.53</td></tr>
<tr><td class='awrnc'>gc cu blocks served</td><td class='awrnc'>USER40</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73478</td><td align="right" class='awrnc'>1,314</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>36.71</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER37</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73460</td><td align="right" class='awrc'>73466</td><td align="right" class='awrc'>757</td><td align="right" class='awrc'>4.17</td><td align="right" class='awrc'>21.15</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER39</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73471</td><td align="right" class='awrnc'>73470</td><td align="right" class='awrnc'>677</td><td align="right" class='awrnc'>3.73</td><td align="right" class='awrnc'>18.92</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER35</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>454</td><td align="right" class='awrc'>2.50</td><td align="right" class='awrc'>12.69</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>377</td><td align="right" class='awrnc'>2.08</td><td align="right" class='awrnc'>10.53</td></tr>
<tr><td class='awrc'>gc remote grants</td><td class='awrc'>USER110</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73842</td><td align="right" class='awrc'>73846</td><td align="right" class='awrc'>146,833</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>20.12</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER99</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73781</td><td align="right" class='awrnc'>73787</td><td align="right" class='awrnc'>146,586</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>20.09</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER28</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73413</td><td align="right" class='awrc'>73419</td><td align="right" class='awrc'>145,631</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>19.96</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER107</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73825</td><td align="right" class='awrnc'>73828</td><td align="right" class='awrnc'>145,368</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>19.92</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER85</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73713</td><td align="right" class='awrc'>73716</td><td align="right" class='awrc'>145,234</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>19.90</td></tr>
<tr><td class='awrnc'>logical reads</td><td class='awrnc'>USER40</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73478</td><td align="right" class='awrnc'>3,400,224</td><td align="right" class='awrnc'>7.36</td><td align="right" class='awrnc'>28.72</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>USER$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>2,622,304</td><td align="right" class='awrc'>5.67</td><td align="right" class='awrc'>22.15</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1,970,496</td><td align="right" class='awrnc'>4.26</td><td align="right" class='awrnc'>16.64</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER42</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>1,956,784</td><td align="right" class='awrc'>4.23</td><td align="right" class='awrc'>16.53</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>1,890,128</td><td align="right" class='awrnc'>4.09</td><td align="right" class='awrnc'>15.96</td></tr>
<tr><td class='awrc'>physical reads</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>2,857,313</td><td align="right" class='awrc'>7.23</td><td align="right" class='awrc'>28.76</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1,821,143</td><td align="right" class='awrnc'>4.61</td><td align="right" class='awrnc'>18.33</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER42</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>1,809,954</td><td align="right" class='awrc'>4.58</td><td align="right" class='awrc'>18.22</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>1,748,416</td><td align="right" class='awrnc'>4.42</td><td align="right" class='awrnc'>17.60</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER122</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73902</td><td align="right" class='awrc'>73888</td><td align="right" class='awrc'>1,697,559</td><td align="right" class='awrc'>4.30</td><td align="right" class='awrc'>17.09</td></tr>
<tr><td class='awrnc'>physical read requests</td><td class='awrnc'>USER40</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73478</td><td align="right" class='awrnc'>2,857,221</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>28.76</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER35</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>1,821,150</td><td align="right" class='awrc'>4.62</td><td align="right" class='awrc'>18.33</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER42</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73488</td><td align="right" class='awrnc'>73492</td><td align="right" class='awrnc'>1,809,963</td><td align="right" class='awrnc'>4.59</td><td align="right" class='awrnc'>18.22</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER44</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73501</td><td align="right" class='awrc'>73503</td><td align="right" class='awrc'>1,748,406</td><td align="right" class='awrc'>4.43</td><td align="right" class='awrc'>17.60</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER122</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73902</td><td align="right" class='awrnc'>73888</td><td align="right" class='awrnc'>1,697,514</td><td align="right" class='awrnc'>4.30</td><td align="right" class='awrnc'>17.09</td></tr>
<tr><td class='awrc'>physical writes</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73478</td><td align="right" class='awrc'>516,448</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>30.07</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>305,917</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17.81</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER42</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73488</td><td align="right" class='awrc'>73492</td><td align="right" class='awrc'>302,499</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>17.61</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER122</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73902</td><td align="right" class='awrnc'>73888</td><td align="right" class='awrnc'>300,433</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17.49</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER44</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73501</td><td align="right" class='awrc'>73503</td><td align="right" class='awrc'>292,155</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>17.01</td></tr>
<tr><td class='awrnc'>physical writes direct</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>74075</td><td align="right" class='awrnc'>74075</td><td align="right" class='awrnc'>1,593</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>99.31</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes direct</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>SYS_LOB0000007451C00009$$</td><td class='awrc'>SYS_LOB_P270</td><td class='awrc'>LOB PARTITION</td><td align="right" class='awrc'>74210</td><td align="right" class='awrc'>74210</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.69</td></tr>
<tr><td class='awrnc'>physical write requests</td><td class='awrnc'>USER40</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73478</td><td align="right" class='awrnc'>485,531</td><td align="right" class='awrnc'>7.46</td><td align="right" class='awrnc'>29.36</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER35</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>298,434</td><td align="right" class='awrc'>4.59</td><td align="right" class='awrc'>18.05</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER42</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73488</td><td align="right" class='awrnc'>73492</td><td align="right" class='awrnc'>295,225</td><td align="right" class='awrnc'>4.54</td><td align="right" class='awrnc'>17.85</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER122</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73902</td><td align="right" class='awrc'>73888</td><td align="right" class='awrc'>289,196</td><td align="right" class='awrc'>4.44</td><td align="right" class='awrc'>17.49</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER44</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73501</td><td align="right" class='awrnc'>73503</td><td align="right" class='awrnc'>285,166</td><td align="right" class='awrnc'>4.38</td><td align="right" class='awrnc'>17.25</td></tr>
<tr><td class='awrc'>row lock waits</td><td class='awrc'>USER25</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73394</td><td align="right" class='awrc'>73399</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12.50</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>USER42</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73488</td><td align="right" class='awrnc'>73492</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>12.50</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>USER89</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73731</td><td align="right" class='awrc'>73736</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12.50</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>USER102</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73799</td><td align="right" class='awrnc'>73803</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>USER108</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73833</td><td align="right" class='awrc'>73837</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.25</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>USER121</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73895</td><td align="right" class='awrnc'>73898</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>USER122</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73902</td><td align="right" class='awrc'>73888</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.25</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>USER50</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73540</td><td align="right" class='awrc'>73535</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.25</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>USER58</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73580</td><td align="right" class='awrnc'>73582</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>USER66</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73621</td><td align="right" class='awrc'>73626</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.25</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>USER75</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>73658</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>USER85</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73713</td><td align="right" class='awrc'>73716</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.25</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>647</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>2,011</td><td align="right" class='awrc'>0.70</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>1,910</td><td align="right" class='awrc'>1,910</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>22.22</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>22.22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>0.86</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>6.03</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>RULESET</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>3,828</td><td align="right" class='awrc'>7.60</td><td align="right" class='awrc'>350,180</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>468</td><td align="right" class='awrnc'>64.96</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>386</td><td align="right" class='awrc'>81.87</td><td align="right" class='awrc'>386</td><td align="right" class='awrc'>81.87</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>2,984</td><td align="right" class='awrnc'>2.51</td><td align="right" class='awrnc'>12,660</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4,366</td><td align="right" class='awrnc'>9,098</td><td align="right" class='awrnc'>9,098</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>30.00</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>30.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>281.35</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,388.75</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>3,370.96</td><td align="right" headers="PGAMemAlloc End" class='awrc'>1,957.38</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>321.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>318.53</td><td align="right" headers="AutoPGATarget End" class='awrnc'>1,383.35</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>3,389.32</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>1,942.75</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>321.49</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>230.69</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>3.36</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>171</td><td align="right" class='awrc'>171</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1953.71</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.39</td><td align="right" class='awrnc'>4.03</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>445</td><td align="right" class='awrnc'>445</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>126.71</td><td align="right" class='awrc'>124.18</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>381</td><td align="right" class='awrc'>379</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>37.02</td><td align="right" class='awrnc'>26.84</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>304</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2348.13</td><td align="right" class='awrc'>151.02</td><td align="right" class='awrc'>6.19</td><td align="right" class='awrc'>7.87</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>1310</td><td align="right" class='awrc'>1299</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>162.38</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.27</td><td align="right" class='awrnc'>8.01</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>38</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>761.83</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.05</td><td align="right" class='awrc'>6.40</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>188</td><td align="right" class='awrc'>188</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>5.67</td><td align="right" class='awrnc'>5.05</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>121</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.56</td><td align="right" class='awrc'>2.41</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>28</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>933.44</td><td align="right" class='awrnc'>7.46</td><td align="right" class='awrnc'>8.43</td><td align="right" class='awrnc'>14.81</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>411</td><td align="right" class='awrnc'>375</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>351.13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>2.22</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>283</td><td align="right" class='awrc'>283</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1858.41</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.23</td><td align="right" class='awrnc'>4.08</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>439</td><td align="right" class='awrnc'>439</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>124.42</td><td align="right" class='awrc'>122.02</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>373</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>32.48</td><td align="right" class='awrnc'>25.16</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>304</td><td align="right" class='awrnc'>294</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2366.43</td><td align="right" class='awrc'>147.18</td><td align="right" class='awrc'>5.91</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>1401</td><td align="right" class='awrc'>1389</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>155.56</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.20</td><td align="right" class='awrnc'>6.86</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>754.92</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.08</td><td align="right" class='awrc'>6.43</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>185</td><td align="right" class='awrc'>185</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.17</td><td align="right" class='awrnc'>5.63</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>118</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>2.16</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>26</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>918.81</td><td align="right" class='awrnc'>7.08</td><td align="right" class='awrnc'>8.37</td><td align="right" class='awrnc'>13.65</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>399</td><td align="right" class='awrnc'>366</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P60S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p60sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>137438953472</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>3371171840</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>640</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>*</td><td class='awrc'>10133438464</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">thread</div></td><td class='awrc'>2</td><td class='awrc'>2</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>1</td><td class='awrnc'>UNDOTBS1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">undo_tablespace</div></td><td class='awrc'>2</td><td class='awrc'>UNDOTBS2</td><td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="05dgz376x2uah"></a>05dgz376x2uah</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '26';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrnc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0sj52dccuywgx"></a>0sj52dccuywgx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '16';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1sbxgvwvwp2bt"></a>1sbxgvwvwp2bt</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '115';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates
_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v
_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
 := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT
_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------
-----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_u
pdate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

	 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
 v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exe
cuted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
 this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="279tufy9n4jkw"></a>279tufy9n4jkw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '27';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2btqdckmw7ph2"></a>2btqdckmw7ph2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '72';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="31f7zbqd24a7y"></a>31f7zbqd24a7y</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '113';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates
_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v
_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
 := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT
_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------
-----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_u
pdate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

	 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
 v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exe
cuted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
 this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,	C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrnc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m 		  using dual								     on (m.obj# = :objn and							    (:pobjn = 0 or								m.obj# = :pobjn or							   m.obj# in (select obj#								 from tabpart$								    where bo# = :pobjn and obj# = :objn 				       union all								  select obj#								     from tabcompart$								where bo# = :pobjn and o
bj# = :objn					   union all								      select tsp.obj#								 from tabsubpart$ tsp,	tabcompart$ tcp 				     where tsp.pobj# = tcp.obj# 						  and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				     and tsp.obj# = :objn)))				      when matched then 							   update								      set inserts = decode(:reset,  1,	0,  inserts) + :ins,				 updates = decode(:reset,  1,  0,  updates) + :upd,				deletes = decode(:reset,  1,  0,  deletes) + :del,			       flags =	decode(:reset,	1,  0,	flags - bitand(flags,  :flag)) + :flag,        drop_segments = decode(:reset,  1,  0,  d
rop_segments) + :dropseg,	      timestamp = :time 						   when NOT matched then							insert (obj#,  inserts,  updates,  deletes,					       timestamp,  flags,  drop_segments)				    values (:objn,  :ins,  :upd,  :del,  :time,  :flag,  :dropseg)		     where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3kqrku32p6sfn"></a>3kqrku32p6sfn</td><td class='awrc'><pre_sqltext class="awr">MERGE /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ INTO OPTSTAT_USER_PREFS$ D USING ( SELECT * FROM (SELECT O.OBJ#,  SYSTIMESTAMP CHGTIME,  ROUND(MAX(S.DELTA_READ_IO_BYTES/S.DELTA_TIME),  3) SCANRATE FROM GV$ACTIVE_SESSION_HISTORY S,  GV$SQL_PLAN P,  OBJ$ O,  USER$ U WHERE S.INST_ID = P.INST_ID AND S.SQL_ID = P.SQL_ID AND S.SQL_PLAN_HASH_VALUE = P.PLAN_HASH_VALUE AND S.SQL_PLAN_LINE_ID = P.ID AND P.OBJECT_NAME = O.NAME AND (:B4 IS NULL OR O.OBJ# = :B4 ) AND O.OWNER# = U.USER# AND P.OBJECT_OWNER = U.NAME AND O.TYPE# = 2 AND S.CON_ID = SYS_CONTEXT('userenv',  'con_id') AND P.CON_ID = SYS_CONTEXT('userenv',  'con_id') AND S.SQL_PLAN_OPERATION = 'TABLE ACCESS' AND P.OPERATION = 'TABLE ACCESS' AND S.DELTA_TIME &gt; 0 AND S.DELTA_READ_IO_BYTES &gt; 0 AND FROM_TZ(S.SAMPLE_TIME,  :B3 ) &gt; :B2 AND (:B1 = 'ON' OR (:B1 = 'HADOOP_ONLY' AND EXISTS ( SELEC
T NULL FROM SYS.EXTERNAL_TAB$ ET WHERE ET.OBJ# = O.OBJ# AND TYPE$ IN ('ORACLE_HIVE',  'ORACLE_HDFS',  'ORACLE_BIGDATA')))) GROUP BY O.OBJ#) C WHERE NOT EXISTS (SELECT NULL FROM OPTSTAT_USER_PREFS$ PR WHERE PNAME = 'SCAN_RATE' AND C.OBJ# = PR.OBJ# AND (PR.SPARE1 IS NULL OR C.SCANRATE &lt;= TO_NUMBER(PR.VALCHAR))) ) SRC ON (D.OBJ#=SRC.OBJ# AND D.PNAME = 'SCAN_RATE') WHEN MATCHED THEN UPDATE SET D.VALCHAR= TO_CHAR(SRC.SCANRATE),  D.CHGTIME=SRC.CHGTIME,  D.SPARE1=1 WHEN NOT MATCHED THEN INSERT (OBJ#,  PNAME,  VALCHAR,  CHGTIME,  SPARE1) VALUES(SRC.OBJ#,  'SCAN_RATE',  TO_CHAR(SRC.SCANRATE),  SRC.CHGTIME,  1)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3xy3zh57sf5by"></a>3xy3zh57sf5by</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '121';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates
_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v
_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
 := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT
_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------
-----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_u
pdate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

	 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
 v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exe
cuted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
 this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="59c9hcdmc2sp8"></a>59c9hcdmc2sp8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '101';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5hg6sgckh1tnx"></a>5hg6sgckh1tnx</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '42';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="66j7nhxd85syt"></a>66j7nhxd85syt</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '123';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6a32815hkfxqf"></a>6a32815hkfxqf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '55';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7601qqtdhust2"></a>7601qqtdhust2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '44';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7fr7cwdnxufu3"></a>7fr7cwdnxufu3</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '49';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7h2sq3cqbq9vx"></a>7h2sq3cqbq9vx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '89';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="868wdptu2wdsf"></a>868wdptu2wdsf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '100';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates
_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v
_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
 := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT
_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------
-----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_u
pdate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

	 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
 v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exe
cuted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
 this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8cbqpnkxnw661"></a>8cbqpnkxnw661</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '120';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates
_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v
_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
 := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT
_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------
-----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_u
pdate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

	 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
 v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exe
cuted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
 this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8kj5gxr8qkjq2"></a>8kj5gxr8qkjq2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '117';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9jnaa1bq11a61"></a>9jnaa1bq11a61</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '99';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9xv3wfaqtjswf"></a>9xv3wfaqtjswf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '122';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates
_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v
_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
 := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT
_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------
-----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_u
pdate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

	 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
 v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exe
cuted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
 this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cmt7ct5kk8chb"></a>cmt7ct5kk8chb</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '39';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dbv58zsfpkbvq"></a>dbv58zsfpkbvq</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '68';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dnhxxnnyzpq8g"></a>dnhxxnnyzpq8g</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '40';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dyyddzrz52ydb"></a>dyyddzrz52ydb</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '35';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fd4xkca0yhc14"></a>fd4xkca0yhc14</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '54';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fhwqa2yvncr24"></a>fhwqa2yvncr24</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '65';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gx2wbjnsndywg"></a>gx2wbjnsndywg</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '102';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '128' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>13205</td><td align="right" class='awrc'>62.31</td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>25.06</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>25.06</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">13205</div></td><td align="right" class='awrnc'><div class="hidden">62.31044650379106992417860151642796967144</div></td>
<td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>13.34</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>13.34</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">13205</div></td><td align="right" class='awrc'><div class="hidden">62.31044650379106992417860151642796967144</div></td>
<td class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>10.06</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>10.06</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>9857</td><td align="right" class='awrnc'>34.66</td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>14.12</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>14.12</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">9857</div></td><td align="right" class='awrc'><div class="hidden">34.65669755686604886267902274641954507161</div></td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>10.42</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>6.27</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">9857</div></td><td align="right" class='awrnc'><div class="hidden">34.65669755686604886267902274641954507161</div></td>
<td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>4.17</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>4.08</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>13205</td><td align="right" class='awrc'>62.31</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>61.62</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>25.06</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>9857</td><td align="right" class='awrnc'>34.66</td>
<td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>30.05</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>14.12</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">9857</div></td><td align="right" class='awrc'><div class="hidden">34.65669755686604886267902274641954507161</div></td>
<td class='awrc'>INDEX - RANGE SCAN</td><td align="right" class='awrc'>4.59</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>4.15</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>
<ul>
<li class="awr"> Blocking session activity percentages are calculated with respect to	     waits on enqueues, latches and &quot;buffer busy&quot; only  </li>
<li class="awr"> '% Activity' represents the load on the database caused by	   a particular blocking session </li>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the	blocking session was found active. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the blocking session was found active.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top sessions that are blocking other sessions."><tr><th class="awrbg" scope="col">Blocking Sid (Inst)</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event Caused</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>343,38654(     1)</td><td align="right" class='awrc'>1.56</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>1.54</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW3)</td><td align="right" class='awrc'>57/92 [ 62%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>126,57129(     1)</td><td align="right" class='awrnc'>1.25</td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>1.24</td>
<td class='awrnc'>SYS</td><td class='awrnc'>oracle@mcracpo...le.com (DBW1)</td><td align="right" class='awrnc'>57/92 [ 62%]</td><td align="right" class='awrnc'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>250, 6454(     1)</td><td align="right" class='awrc'>1.24</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>1.23</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW2)</td><td align="right" class='awrc'>60/92 [ 66%]</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>62.37</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>62.37</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>25.34</td><td align="right" class='awrc'>78.82</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>14.18</td><td align="right" class='awrnc'>44.10</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>13.95</td><td align="right" class='awrc'>43.37</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>10.99</td><td align="right" class='awrnc'>34.18</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>10.48</td><td align="right" class='awrc'>32.59</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>14.18</td><td align="right" class='awrc'>&quot;8&quot;,&quot;33149&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.00</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>7.29</td><td align="right" class='awrnc'>&quot;8&quot;,&quot;6704&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.00</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>blocks</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>6.15</td><td align="right" class='awrc'>&quot;1&quot;,&quot;93120&quot;,&quot;96&quot;</td><td align="right" class='awrc'>0.00</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>set-id#</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>2.63</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;125&quot;,&quot;125&quot;</td><td align="right" class='awrnc'>1.30</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>14:56:36   (3.4 min)</td><td align="right" class='awrc'>8,964</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>2,066</td><td align="right" class='awrc'>7.25</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">14:56:36   (3.4 min)</div></td><td align="right" class='awrnc'><div class="hidden">8964</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>1,384</td><td align="right" class='awrnc'>4.86</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">14:56:36   (3.4 min)</div></td><td align="right" class='awrc'><div class="hidden">8964</div></td><td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>1,282</td><td align="right" class='awrc'>4.50</td></tr>
<tr><td align="right" class='awrnc'>15:00:00   (5.0 min)</td><td align="right" class='awrnc'>15,812</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>4,287</td><td align="right" class='awrnc'>15.05</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">15:00:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">15812</div></td><td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>2,243</td><td align="right" class='awrc'>7.87</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">15:00:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">15812</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>2,036</td><td align="right" class='awrnc'>7.15</td></tr>
<tr><td align="right" class='awrc'>15:05:00   (5.0 min)</td><td align="right" class='awrc'>3,696</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>868</td><td align="right" class='awrc'>3.05</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">15:05:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">3696</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>620</td><td align="right" class='awrnc'>2.18</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">15:05:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">3696</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>477</td><td align="right" class='awrc'>1.67</td></tr>
<tr><td align="right" class='awrnc'>15:10:00   (1.9 min)</td><td align="right" class='awrnc'>16</td><td class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">15:10:00   (1.9 min)</div></td><td align="right" class='awrc'><div class="hidden">16</div></td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:3889879926_67</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_67&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 66 to 67.
Time period starts at 12-FEB-20 02.56.36 PM
Time period ends at 12-FEB-20 03.11.53 PM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 287076 seconds.
The average number of active sessions was 313.06.

Summary of Findings
-------------------
   Description			 Active Sessions      Recommendations
				 Percent of Activity
   ----------------------------  -------------------  ---------------
1  Interconnect Latency 	 313.06 | 100	      1
2  Top SQL Statements		 312.45 | 99.8	      2
3  Global Cache Messaging	 224.54 | 71.72       1
4  Buffer Busy - Hot Objects	 120.13 | 38.37       0
5  Unusual &quot;Cluster&quot; Wait Event  34.04 | 10.87	3
6  &quot;User I/O&quot; wait Class	   33.87 | 10.82	0
7  &quot;Configuration&quot; Wait Class    19.97 | 6.38 	0
8  Free Buffer Waits		 19.96 | 6.38	      1
9  Global Cache Congestion	 3.58 | 1.14	      1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 313.4 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 79212 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 96% for database lock management.
The average latency for 8K interconnect messages was 77357 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.26	     ADDM:3889879926_1_67
    2	    p60sdb2  48.74	     ADDM:3889879926_2_67

   Recommendation 1: Host Configuration
   Estimated benefit is 313.06 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 224.54 active sessions, 71.72% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 258.59 active sessions, 82.6% of total activity.


Finding 2: Top SQL Statements
Impact is 312.79 active sessions, 99.8% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.6	     ADDM:3889879926_1_67
    2	    p60sdb2  49.4	     ADDM:3889879926_2_67

   Recommendation 1: SQL Tuning
   Estimated benefit is 193.81 active sessions, 61.91% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 96% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 46494 times and
      had an average elapsed time of 3.8 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 98.23 active sessions, 31.38% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 87% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 265424 times and
      had an average elapsed time of 0.37 seconds.


Finding 3: Global Cache Messaging
Impact is 224.79 active sessions, 71.72% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.81	     ADDM:3889879926_2_67
    1	    p60sdb1  48.19	     ADDM:3889879926_1_67

   Recommendation 1: Application Analysis
   Estimated benefit is 224.54 active sessions, 71.72% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 77% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 258.59 active sessions, 82.6% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 120.26 active sessions, 38.37% of total activity.
-----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  100	     ADDM:3889879926_1_67

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 120.13 active sessions, 38.37% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 224.54 active sessions, 71.72% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 258.59 active sessions, 82.6% of total activity.


Finding 5: Unusual &quot;Cluster&quot; Wait Event
Impact is 34.08 active sessions, 10.87% of total activity.
----------------------------------------------------------
Wait event &quot;gc current grant read-mostly invalidation&quot; in wait class &quot;Cluster&quot;
was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.49	     ADDM:3889879926_1_67
    2	    p60sdb2  48.51	     ADDM:3889879926_2_67

   Recommendation 1: Application Analysis
   Estimated benefit is 34.04 active sessions, 10.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 34.04 active sessions, 10.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 34.04 active sessions, 10.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Service &quot;p60sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 258.59 active sessions, 82.6% of total activity.


Finding 6: &quot;User I/O&quot; wait Class
Impact is 33.91 active sessions, 10.82% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  50.61	     ADDM:3889879926_1_67
    2	    p60sdb2  49.39	     ADDM:3889879926_2_67

   No recommendations are available.


Finding 7: &quot;Configuration&quot; Wait Class
Impact is 19.99 active sessions, 6.38% of total activity.
---------------------------------------------------------
Wait class &quot;Configuration&quot; was consuming significant database time.
Waits for archiver processes were not consuming significant database time.
Log file switch operations were not consuming significant database time while
waiting for checkpoint completion.
High watermark (HW) enqueue waits were not consuming significant database
time.
Space Transaction (ST) enqueue waits were not consuming significant database
time.
ITL enqueue waits were not consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  80.68	     ADDM:3889879926_1_67
    2	    p60sdb2  19.32	     ADDM:3889879926_2_67

   No recommendations are available.


Finding 8: Free Buffer Waits
Impact is 19.98 active sessions, 6.38% of total activity.
---------------------------------------------------------
Waits for free buffers were consuming significant database time in some
instances. Database writers (DBWR) were unable to keep up with the demand for
free buffers.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  80.68	     ADDM:3889879926_1_67
    2	    p60sdb2  19.32	     ADDM:3889879926_2_67

   Recommendation 1: Examine instance ADDM
   Estimated benefit is 19.96 active sessions, 6.38% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate the I/O subsystem&apos;s write performance. Consider increasing
      the number of database writers, the appropriateness of asynchronous I/O,
      and use of direct path inserts. Check the ADDM analysis of affected
      instances for more details.


Finding 9: Global Cache Congestion
Impact is 3.58 active sessions, 1.14% of total activity.
--------------------------------------------------------
Global Cache Service Processes (LMSn) were not processing requests fast
enough.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  55.11	     ADDM:3889879926_1_67
    2	    p60sdb2  44.89	     ADDM:3889879926_2_67

   Recommendation 1: Database Configuration
   Estimated benefit is 3.58 active sessions, 1.14% of total activity.
   -------------------------------------------------------------------
   Action
      Increase throughput of the Global Cache Service (LMSn) processes.
      Increase the number of Global Cache Service processes by increasing the
      value of the parameter &quot;gcs_server_processes&quot;. Alternatively, if the
      host is CPU bound consider increasing the OS priority of the Global
      Cache Service processes.
   Rationale
      The value of parameter &quot;gcs_server_processes&quot; was &quot;3&quot; during the
      analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 224.54 active sessions, 71.72% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 258.59 active sessions, 82.6% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  160.64	     51.26
    2	    p60sdb2  mcracpoc2.example.com  152.76	     48.74

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.12-15:12:49 : Compressing file: "awr.html".
NOTIFY  : 2020.02.12-15:12:49 : Compressing file: "awr_rac.html".
